use database DB_IAWT_DEV_DM;

use schema BR;

create or replace TABLE DIM_USER (
	USER_LOGIN VARCHAR(255) NOT NULL COMMENT 'the login of the user account',
	FIRST_NAME VARCHAR(255) NOT NULL COMMENT 'the users first name',
	LAST_NAME VARCHAR(255) NOT NULL COMMENT 'the users last name',
	EMAIL_ADDRESS VARCHAR(255) COMMENT 'the users email address',
	CAPACITY VARCHAR(255) COMMENT 'What user can see',
	COMMENTS VARCHAR(255) COMMENT 'any comments',
	MD_LOADDATE TIMESTAMP_NTZ(7) COMMENT 'metadata load date',
	MD_SRCSYSTEM VARCHAR(100)
);
create or replace TABLE IAS_CERTS_ADVISOR_RVP (
	ADVISOR_NAME VARCHAR(512),
	ADVISOR_ROLE VARCHAR(512),
	RVP_NAME VARCHAR(512)
);
create or replace TABLE IAS_MANUAL_ADVISOR_RVP (
	ADVISOR VARCHAR(512),
	TEAM VARCHAR(512),
	REPID VARCHAR(512),
	RVP VARCHAR(512),
	PROVINCE VARCHAR(512)
);
create or replace TABLE IAS_MAPPING_OPER_TYPE (
	DESCRIPTION_SHORT_EN VARCHAR(30),
	DESCRIPTION_SHORT_FR VARCHAR(30),
	DESCRIPTION_EN VARCHAR(60),
	DESCRIPTION_FR VARCHAR(60),
	CASHFLOW VARCHAR(12),
	DISTRIBUTION VARCHAR(3)
);
create or replace TABLE IAS_MONTHLY_MILESTONES (
	ADVISOR VARCHAR(512),
	TEAM VARCHAR(512),
	REPID VARCHAR(512),
	RVP VARCHAR(512),
	PROVINCE VARCHAR(512),
	AUA_DEC NUMBER(34,4),
	AUA_JAN NUMBER(34,4),
	AUA_FEB NUMBER(34,4)
);
create or replace TABLE IAS_PRODUCT_ASSETCATEGORY (
	TI_ALTERNATE_TI_TYPE VARCHAR(50),
	ASSET_CATEGORY VARCHAR(512)
);
create or replace TABLE IAS_PRODUCT_TYPE (
	DESCRIPTIONEN VARCHAR(512),
	DESCRIPTIONFR VARCHAR(512),
	TI_ALTERNATE_TI_TYPE VARCHAR(50),
	TI_ALTERNATE_TI_CLASS VARCHAR(50),
	PRODUCTTYPE VARCHAR(100)
);
create or replace TABLE IAS_RAPCODE_PLAN (
	ACCOUNT_RAP_CODE VARCHAR(10),
	RETAIL_PLAN VARCHAR(100),
	PLAN_LABEL VARCHAR(512),
	ACCOUNT_TYPE VARCHAR(512),
	GROUP_TYPE_CODE VARCHAR(100),
	ASC_1_RESP_PLAN_TYPES VARCHAR(100),
	ACCUMULATION_TYPE VARCHAR(100)
);
create or replace view VW_IAS_RRCODE_MASTERCODE(
	A_C_REPRESENTATIVE,
	COMMISSIONPCT,
	TOREPID,
	MASTER_CODE,
	PHYSICAL,
	COM_TYPE,
	IS_RESHARED
) as

/* Advisors from commission portal : All active users of the portal */
WITH ADV AS 
(
	SELECT DISTINCT TRIM(RM.MAINREPCODE) AS MAINREPCODE, RM.FIRSTNAME, RM.LASTNAME
	FROM DB_IAWT_DEV_STG.IAS_COMMISSION.REGISTERED_REPRESENTATIVE rm 
	WHERE rm.ACTIVE = 1 
	ORDER BY MAINREPCODE, RM.FIRSTNAME, RM.LASTNAME 
),

/* Only active shares of commissions */
LV_SHARE AS 
(
	SELECT * FROM DB_IAWT_DEV_STG.IAS_COMMISSION.SHARE R
	WHERE SHARETYPE <> 'noreference' AND SHARETYPE <> 'option' AND (FROMREPID <> 'SBEP' OR SHARETYPE <> 'override')
),

/* Case 1 : RR code share with a master code of an advisor */
FROM_RR_TO_MAIN AS
(
	SELECT DISTINCT TRIM(s.FROMREPID) AS FROMREPID, s.COMMISSIONPCT, TRIM(s.TOREPID) AS TOREPID, 
	TRIM(ADV_to.MAINREPCODE) AS MASTER_CODE, 1 AS PHYSICAL, 'FROM_RR_TO_MAIN' AS COM_TYPE, 0 AS IS_RESHARED	
	FROM LV_SHARE s 
	LEFT JOIN ADV ADV_to
	ON TRIM(s.TOREPID) = TRIM(ADV_to.MAINREPCODE)
	WHERE ADV_to.MAINREPCODE IS NOT NULL AND s.COMMISSIONPCT > 0
	ORDER BY FROMREPID
),

/* Case 2 : RR code share with RR code that has a master code */
FROM_RR_TO_RR_TO_MAIN AS
(
	SELECT DISTINCT TRIM(s.FROMREPID) AS FROMREPID, s.COMMISSIONPCT, TRIM(s.TOREPID) AS TOREPID, 
  TRIM(rr.MAINREPCODE) AS MASTER_CODE, 1 AS PHYSICAL, 'FROM_RR_TO_RR_TO_MAIN' AS COM_TYPE, 0 AS IS_RESHARED
	FROM LV_SHARE s 
	LEFT JOIN FROM_RR_TO_MAIN
	ON FROM_RR_TO_MAIN.FROMREPID = TRIM(s.FROMREPID) AND FROM_RR_TO_MAIN.TOREPID = TRIM(s.TOREPID) 	
	LEFT JOIN DB_IAWT_DEV_STG.IAS_COMMISSION.REGISTERED_REPRESENTATIVE rr 
	ON TRIM(rr.REPID) = TRIM(s.TOREPID) AND rr.ACTIVE=1 AND TRIM(rr.REPID) = TRIM(rr.MAINREPCODE)
	WHERE FROM_RR_TO_MAIN.FROMREPID IS NULL AND s.COMMISSIONPCT > 0 AND rr.MAINREPCODE IS NOT NULL
	ORDER BY FROMREPID
),

/* RR code share with an RR code that is not linked to a main rep code */
OTHER AS
(
	SELECT DISTINCT TRIM(s.FROMREPID) AS FROMREPID, s.COMMISSIONPCT, TRIM(s.TOREPID) AS TOREPID, 
  TRIM(s.TOREPID) AS MASTER_CODE, 0 AS PHYSICAL, 'OTHER' AS COM_TYPE, 0 AS IS_RESHARED
	FROM LV_SHARE s 
	LEFT JOIN FROM_RR_TO_MAIN
	ON FROM_RR_TO_MAIN.FROMREPID = TRIM(s.FROMREPID) AND FROM_RR_TO_MAIN.TOREPID = TRIM(s.TOREPID) 
	LEFT JOIN FROM_RR_TO_RR_TO_MAIN
	ON FROM_RR_TO_RR_TO_MAIN.FROMREPID = TRIM(s.FROMREPID) AND FROM_RR_TO_RR_TO_MAIN.TOREPID = TRIM(s.TOREPID)
	WHERE s.COMMISSIONPCT > 0 AND FROM_RR_TO_MAIN.FROMREPID IS NULL AND  FROM_RR_TO_RR_TO_MAIN.FROMREPID IS NULL 
	ORDER BY FROMREPID
),

AV_ALL AS
(
	SELECT T.A_C_REPRESENTATIVE, T.COMMISSIONPCT, T.TOREPID, T.MASTER_CODE, T.PHYSICAL, T.COM_TYPE, T.IS_RESHARED
	FROM 
	(
		SELECT FROMREPID AS A_C_REPRESENTATIVE, COMMISSIONPCT, TOREPID, MASTER_CODE, PHYSICAL, COM_TYPE, IS_RESHARED
		FROM FROM_RR_TO_MAIN
		WHERE MASTER_CODE IS NOT NULL
		
		UNION ALL
		
		SELECT FROMREPID AS A_C_REPRESENTATIVE, COMMISSIONPCT, TOREPID, MASTER_CODE, PHYSICAL, COM_TYPE, IS_RESHARED
		FROM FROM_RR_TO_RR_TO_MAIN
		WHERE MASTER_CODE IS NOT NULL
		
		UNION ALL
		
		SELECT FROMREPID AS A_C_REPRESENTATIVE, COMMISSIONPCT, TOREPID, MASTER_CODE, PHYSICAL, COM_TYPE, IS_RESHARED
		FROM OTHER
		WHERE MASTER_CODE IS NOT NULL
	) AS T
)

SELECT *
FROM AV_ALL
ORDER BY A_C_REPRESENTATIVE;
create or replace view VW_LOAD_AUDIT(
	FILE_NAME,
	DATE_EXT,
	COUNT_SOURCE
) as

 SELECT 
      $1 AS File_Name 
    , $2 AS Date_Ext 
    , $3 AS Count_Source  
 FROM @DATALAKE.OUT
 (FILE_FORMAT =>  DB_IAWT_DEV_DM.EXTRACTIONS.COMMISSION_EXPORT_CSV, PATTERN => 'US/US_SOE/.*Meta_File.*');
use schema DATALAKE;

use schema EXPLORATION;

create or replace TABLE IAS_COMMISSION_REVENUES (
	HK_LINK VARCHAR(40) COMMENT 'Hash of the business keys',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	REPID VARCHAR(50) COMMENT 'Master code  code',
	ADVISOR_ID VARCHAR(512) COMMENT 'Advisor ID in commission portal',
	PROGRAM_TYPE VARCHAR(512) COMMENT 'Program type of the account',
	ACCOUNTID VARCHAR(100) COMMENT 'Account ID',
	PROCESSDATE DATE COMMENT 'Process Date',
	SOURCECODE VARCHAR(50) COMMENT 'Source Code / TRANSACTION_TYPE',
	QUANTITY NUMBER(38,0) COMMENT 'Transaction quantity',
	TRANSTYPE VARCHAR(10) COMMENT 'Transaction Type ([B]uy/[S]ell) / BUY_SELL_INDICATOR',
	REVENUE NUMBER(38,2) COMMENT 'Representative gross revenue',
	COMMISSION NUMBER(38,2) COMMENT 'Representative gross commission',
	NETCOMMISSION NUMBER(38,2) COMMENT 'Representative net commission',
	TRANSFEE NUMBER(38,2) COMMENT 'Representative transaction fees'
);
create or replace TABLE IAS_HOLDINGS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for HUB_REGISTERED_REPRESENTATIVE',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
	MD_SEQ VARCHAR(50) COMMENT 'The value of METADATA$FILE_ROW_NUMBER when loading using INFORMATICA',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
	A_C_ID VARCHAR(100) COMMENT 'Account ID',
	A_C_REPRESENTATIVE VARCHAR(50) COMMENT 'Advisor RR code',
	TI_ALTERNATE_ID VARCHAR(50) COMMENT 'Financial product ID',
	TRAN_SUMM_CURR_MKT_VALUE NUMBER(38,2) COMMENT 'Market value of the holding in CAD or USD',
	TRAN_SUMM_BUSINESS_DATE DATE COMMENT 'Update business date',
	TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
	B_V_SECURITY_POSITION_VAL NUMBER(38,2) COMMENT 'Book value',
	B_V_SECURITY_POSITION_COS NUMBER(38,4) COMMENT 'Average cost base',
	TRAN_SUMM_AVG_UNIT_COST NUMBER(38,5) COMMENT 'Average cost base',
	TRAN_SUMM_NET_SETT_AMT NUMBER(38,2) COMMENT 'Cash position',
	TRAN_SUMM_CURRENCY VARCHAR(10) COMMENT 'Holding value currency',
	TRAN_SUMM_SETT_QTY NUMBER(38,4) COMMENT 'Units',
	TRAN_SUMM_TRADE_QTY NUMBER(38,4) COMMENT 'Units calculated by trade date'
);
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADSTG_STG_IAS_COMMISSION_TO_DM_EXPLORATION_REVENUES"("ENV" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS ' 
var delete_query = "DELETE FROM DB_IAWT_DEV_DM.EXPLORATION.IAS_COMMISSION_REVENUES WHERE 1=1";
var delete_query_ENV = delete_query.replaceAll("_DEV_","_"+ ENV + "_");
var sql_statement1 = snowflake.createStatement({
  sqlText: delete_query_ENV
});
var result1_scan = sql_statement1.execute(); 
INS_QUERY = "INSERT INTO DB_IAWT_DEV_DM.EXPLORATION.IAS_COMMISSION_REVENUES(HK_LINK , " +
"HK_HUB_CONTRACT	, " +
"HK_HUB_PARTY_ROLE_ADVISOR	, " +	
"MD_CREATION_DT	, " +
"MD_START_DT	, " +
"MD_SOURCE	, " +
"MD_SRC_SYSTEM	, " +
"MD_EXTRACT_DT	, " +	
"REPID	, " +
"ADVISOR_ID	, " +	
"PROGRAM_TYPE	, " +
"ACCOUNTID	, " +
"PROCESSDATE	, " +	
"SOURCECODE		, " +
"QUANTITY	, " +	
"TRANSTYPE	, " +	
"REVENUE	, " +	
"COMMISSION		, " +
"NETCOMMISSION	, " +	
"TRANSFEE) " +
"(select " +
"HK_LINK , " +
"HK_HUB_CONTRACT	, " +
"HK_HUB_PARTY_ROLE_ADVISOR	, " +	
"MD_CREATION_DT	, " +
"MD_START_DT	, " +
"MD_SOURCE	, " +
"MD_SRC_SYSTEM	, " +
"MD_EXTRACT_DT	, " +	
"REPID	, " +
"ADVISOR_ID	, " +	
"PROGRAM_TYPE	, " +
"ACCOUNTID	, " +
"PROCESSDATE	, " +	
"SOURCECODE		, " +
"QUANTITY	, " +	
"TRANSTYPE	, " +	
"REVENUE	, " +	
"COMMISSION		, " +
"NETCOMMISSION	, " +	
"TRANSFEE " +
"FROM DB_IAWT_DEV_STG.IAS_COMMISSION.REVENUES);" 
var INS_QUERY_ENV = INS_QUERY.replaceAll("_DEV_","_"+ ENV + "_");
var sql_statement2 = snowflake.createStatement({
  sqlText: INS_QUERY_ENV
});
 var result2_scan = sql_statement2.execute(); 
 
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADSTG_STG_IAS_TO_DM_EXPLORATION_HOLDINGS"("ENV" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS ' 
var delete_query = "DELETE FROM DB_IAWT_DEV_DM.EXPLORATION.IAS_HOLDINGS WHERE 1=1";
var delete_query_ENV = delete_query.replaceAll("_DEV_","_"+ ENV + "_");
var sql_statement1 = snowflake.createStatement({
  sqlText: delete_query_ENV
});
var result1_scan = sql_statement1.execute(); 
INS_QUERY = "INSERT INTO DB_IAWT_DEV_DM.EXPLORATION.IAS_HOLDINGS(HK_LINK , " +
"HK_HUB_CONTRACT, " + 
"HK_HUB_REGISTERED_REPRESENTATIVE	, " + 	
"HK_HUB_INVESTMENT_PRODUCT_TYPE	 , " +
"MD_SEQ	 , " +
"MD_START_DT	, " + 
"MD_HASHDIFF	, " + 
"MD_CREATION_DT	 	, " +
"MD_SOURCE	 , " +
"MD_SRC_SYSTEM	, " + 	
"MD_EXTRACT_DT	, " + 
"A_C_ID	 , " +
"A_C_REPRESENTATIVE	, " + 
"TI_ALTERNATE_ID	, " + 	
"TRAN_SUMM_CURR_MKT_VALUE	, " + 	
"TRAN_SUMM_BUSINESS_DATE	, " + 	
"TI_ALTERNATE_TI_TYPE	 , " +	
"B_V_SECURITY_POSITION_VAL	 , " +	
"B_V_SECURITY_POSITION_COS	 , " +	
"TRAN_SUMM_AVG_UNIT_COST	, " + 	
"TRAN_SUMM_NET_SETT_AMT	 	, " +
"TRAN_SUMM_CURRENCY	 , " +
"TRAN_SUMM_SETT_QTY	 	, " +
"TRAN_SUMM_TRADE_QTY) " +	
"(select " +
"HK_LINK , " +
"HK_HUB_CONTRACT, " + 
"HK_HUB_REGISTERED_REPRESENTATIVE	, " + 	
"HK_HUB_INVESTMENT_PRODUCT_TYPE	 , " +
"MD_SEQ	 , " +
"MD_START_DT	, " + 
"MD_HASHDIFF	, " + 
"MD_CREATION_DT	 	, " +
"MD_SOURCE	 , " +
"MD_SRC_SYSTEM	, " + 	
"MD_EXTRACT_DT	, " + 
"A_C_ID	 , " +
"A_C_REPRESENTATIVE	, " + 
"TI_ALTERNATE_ID	, " + 	
"TRAN_SUMM_CURR_MKT_VALUE	, " + 	
"TRAN_SUMM_BUSINESS_DATE	, " + 	
"TI_ALTERNATE_TI_TYPE	 , " +	
"B_V_SECURITY_POSITION_VAL	 , " +	
"B_V_SECURITY_POSITION_COS	 , " +	
"TRAN_SUMM_AVG_UNIT_COST	, " + 	
"TRAN_SUMM_NET_SETT_AMT	 	, " +
"TRAN_SUMM_CURRENCY	 , " +
"TRAN_SUMM_SETT_QTY	 	, " +
"TRAN_SUMM_TRADE_QTY  " +	
"FROM DB_IAWT_DEV_STG.IAS.HOLDINGS);" 
var INS_QUERY_ENV = INS_QUERY.replaceAll("_DEV_","_"+ ENV + "_");
var sql_statement2 = snowflake.createStatement({
  sqlText: INS_QUERY_ENV
});
 var result2_scan = sql_statement2.execute(); 
 
';
use schema EXTERNAL_KPI;

create or replace TABLE MASTER_KPI_DATA_CLARINGTON (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
	KPI_DATE TIMESTAMP_NTZ(9) COMMENT 'Date',
	TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_MF NUMBER(20,4) COMMENT 'Trade/Account Processing Automation % MF',
	TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_GIF NUMBER(20,4) COMMENT 'Trade/Account Processing Automation % GIF',
	FTE NUMBER(20,4) COMMENT 'FTE',
	TOTAL_TRANSACTIONS_MF NUMBER(20,4) COMMENT 'Total Transactions MF',
	TOTAL_TRANSACTIONS_GIF NUMBER(20,4) COMMENT 'Total Transactions GIF',
	TOTAL_TRANSACTIONS_FTE_MF NUMBER(20,4) COMMENT 'Total Transactions/FTE MF',
	TOTAL_TRANSACTIONS_FTE_GIF NUMBER(20,4) COMMENT 'Total Transactions/FTE GIF',
	NO_OF_ACCOUNTS NUMBER(20,4) COMMENT 'No. of Accounts',
	ACCOUNTS_FTE NUMBER(20,4) COMMENT 'Accounts/FTE',
	ACCOUNTS_FTE_TARGET NUMBER(20,4) COMMENT 'Accounts/FTE Target',
	YOY_NEW_ACCOUNTS_CLIENT_NAME NUMBER(20,4) COMMENT 'YoY New Accounts Client Name',
	YOY_NEW_ACCOUNTS_CLIENT_NOMINEE NUMBER(20,4) COMMENT 'YoY New Accounts Client Nominee',
	EXPENSES NUMBER(20,4) COMMENT 'Expenses',
	REVENUES NUMBER(20,4) COMMENT 'Revenues',
	EFFICIENCY_RATIO NUMBER(20,4) COMMENT 'Efficiency Ratio',
	EXPENSES_TARGET NUMBER(20,4) COMMENT 'Expenses Target',
	REVENUE_TARGET NUMBER(20,4) COMMENT 'Revenue Target',
	EFFICIENCY_RATIO_TARGET NUMBER(20,4) COMMENT 'Efficiency Ratio Target',
	TOTAL_ASSETS NUMBER(20,4) COMMENT 'Total Assets',
	AFFILIATE_PENETRATION_IIROC NUMBER(20,4) COMMENT 'Affiliate Penetration IIROC',
	AFFILIATE_PENETRATION_IIROC_TARGET NUMBER(20,4) COMMENT 'Affiliate Penetration IIROC Target',
	AFFILIATE_PENETRATION_MFDA NUMBER(20,4) COMMENT 'Affiliate Penetration MFDA',
	AFFILIATE_PENETRATION_MFDA_TARGET NUMBER(20,4) COMMENT 'Affiliate Penetration MFDA Target',
	GROSS_MARGIN NUMBER(20,4) COMMENT 'Gross Margin',
	GROSS_MARGIN_TARGET NUMBER(20,4) COMMENT 'Gross Margin Target',
	NET_SALES NUMBER(20,4) COMMENT 'Net Sales',
	NO_OF_ACCOUNTS_CLIENT_NAME NUMBER(20,4) COMMENT '# of Accounts Client Name',
	NO_OF_ACCOUNTS_NOMINEE NUMBER(20,4) COMMENT '# of Accounts Nominee'
);
create or replace TABLE MASTER_KPI_DATA_IAPW (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
	KPI_DATE TIMESTAMP_NTZ(9) COMMENT 'KPI Date',
	NO_OF_ACTIVE_CLIENTS NUMBER(38,4) COMMENT 'No. of Active Clients',
	NO_OF_ACTIVE_ACCOUNTS NUMBER(38,4) COMMENT 'No. of Active Accounts',
	FTE NUMBER(38,4) COMMENT 'FTE',
	ACCOUNTS_FTE NUMBER(38,4) COMMENT 'Accounts/FTE',
	ACCOUNTS_FTE_TARGET NUMBER(38,4) COMMENT 'Accounts/FTE Target',
	APPWAY_REGISTRATION NUMBER(38,4) COMMENT 'Appway % Registration',
	APPWAY_REGISTRATION_TARGET NUMBER(38,4) COMMENT 'Appway % Registration Target',
	NO_OF_CLIENT_ID_REGISTERED NUMBER(38,4) COMMENT 'No. of Client ID registered',
	PORTAL_REGISTRATION NUMBER(38,4) COMMENT 'Portal % registration',
	PORTAL_REGISTRATION_TARGET NUMBER(38,4) COMMENT 'Portal % registration Target',
	MYPORTFOLIO_TO_NEW_CLIENT NUMBER(38,4) COMMENT 'MyPortfolio+ to new client',
	E_DELIVERY_PORTFOLIO_STATEMENTS NUMBER(38,4) COMMENT 'E-Delivery Portfolio Statements',
	E_DELIVERY_TAX_SLIPS NUMBER(38,4) COMMENT 'E-Delivery Tax Slips',
	E_DELIVERY_CONFIRMS NUMBER(38,4) COMMENT 'E-Delivery Confirms',
	AVG_E_DELIVERY_REGISTRATION NUMBER(38,4) COMMENT 'Avg. E-Delivery % registration',
	E_DELIVERY_REGISTRATION_TARGET NUMBER(38,4) COMMENT 'E-Delivery % registration Target',
	RETAIL_YTD_EXPENSES NUMBER(38,4) COMMENT 'Retail YTD Expenses',
	RETAIL_YTD_REVENUES NUMBER(38,4) COMMENT 'Retail YTD Revenues',
	RETAIL_FINANCIAL_EFFICIENCY_RATIO NUMBER(38,4) COMMENT 'Retail Financial Efficiency Ratio',
	RETAIL_YTD_EXPENSES_TARGET NUMBER(38,4) COMMENT 'Retail YTD Expenses Target',
	RETAIL_YTD_REVENUES_TARGET NUMBER(38,4) COMMENT 'Retail YTD Revenues Target',
	RETAIL_EFFICIENCY_RATIO_TARGET NUMBER(38,4) COMMENT 'Retail Efficiency Ratio Target',
	CAP_MRKTS_YTD_EXPENSES NUMBER(38,4) COMMENT 'Cap. Mrkts YTD Expenses',
	CAP_MKTS_YTD_REVENUES NUMBER(38,4) COMMENT 'Cap. Mkts YTD Revenues',
	CAP_MRKTS_EFFICIENCY_RATIO NUMBER(38,4) COMMENT 'Cap. Mrkts Efficiency Ratio',
	CAP_MRKTS_YTD_EXPENSES_TARGET NUMBER(38,4) COMMENT 'Cap. Mrkts YTD Expenses Target',
	CAP_MRKTS_YTD_REVENUES_TARGET NUMBER(38,4) COMMENT 'Cap. Mrkts YTD Revenues Target',
	CAP_MRKTS_EFFICIENCY_RATIO_TARGET NUMBER(38,4) COMMENT 'Cap. Mrkts Efficiency Ratio Target',
	TOTAL_ASSETS NUMBER(38,4) COMMENT 'Total Assets',
	NET_TOTAL_REVENUE NUMBER(38,4) COMMENT 'Net Total Revenue',
	NET_TOTAL_REVENUE_TARGET NUMBER(38,4) COMMENT 'Net Total Revenue Target',
	NET_BOND_DESK_REVENUE NUMBER(38,4) COMMENT 'Net Bond Desk Revenue',
	NET_BOND_DESK_REVENUE_TARGET NUMBER(38,4) COMMENT 'Net Bond Desk Revenue Target',
	CAPITAL_MKTS_REVENUE NUMBER(38,4) COMMENT 'Capital Mkts Revenue',
	CAPITAL_MKTS_REVENUE_TARGET NUMBER(38,4) COMMENT 'Capital Mkts Revenue Target',
	NET_RETAIL_REVENUE NUMBER(38,4) COMMENT 'Net Retail Revenue',
	NET_RETAIL_REVENUE_TARGET NUMBER(38,4) COMMENT 'Net Retail Revenue Target',
	RETAIL_REVENUE_GROWTH NUMBER(38,4) COMMENT 'Retail Revenue Growth',
	EBIT NUMBER(38,4) COMMENT 'EBIT',
	SMA_ADOPTION NUMBER(38,4) COMMENT 'SMA Adoption',
	INSURANCE_REVENUE NUMBER(38,4) COMMENT 'Insurance Revenue',
	AUA_TARGET NUMBER(38,4) COMMENT 'AUA Target',
	DEPARTED_ADVISORS NUMBER(38,4) COMMENT 'Departed Advisors',
	RECRUITING NUMBER(38,4) COMMENT 'Recruiting',
	TERMINATED_ADVISORS NUMBER(38,4) COMMENT 'Terminated Advisors'
);
create or replace TABLE MASTER_KPI_DATA_INVESTIA (
	HK_HUB VARCHAR(40) COMMENT ' Hash key for the Hub ',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT ' Start Date of the image/version ',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT ' Creation Date Time of the occurrence ',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT ' Represents the source system, file, etc. of the instance ',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT ' Source system ',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT ' Extraction date of the occurrence ',
	KPI_DATE TIMESTAMP_NTZ(9) COMMENT ' KPI Date ',
	NO_CLIENT_ID NUMBER(20,4) COMMENT ' # Client ID ',
	E_DELIVERY NUMBER(20,4) COMMENT ' E-delivery ',
	E_DELIVERY_PCT NUMBER(20,4) COMMENT ' % E-delivery ',
	E_DELIVERY_TARGET_PCT NUMBER(20,4) COMMENT ' % E-delivery Target ',
	PORTAL_REGISTRATION NUMBER(20,4) COMMENT ' Portal Registration ',
	PORTAL_REGISTRATION_PCT NUMBER(20,4) COMMENT ' % Portal Registration ',
	PORTAL_REGISTRATION_TARGET NUMBER(20,4) COMMENT ' Portal Registration Target ',
	FTE NUMBER(20,4) COMMENT ' FTE ',
	CLIENTS_BY_FTE NUMBER(20,4) COMMENT ' Clients by FTE ',
	CLIENTS_BY_FTE_TARGET NUMBER(20,4) COMMENT ' Clients by FTE Target ',
	NO_OF_ACCOUNTS NUMBER(20,4) COMMENT ' No of accounts ',
	ACCOUNTS_BY_FTE NUMBER(20,4) COMMENT ' Accounts by FTE ',
	ACTUAL_YTD_EXPENSES NUMBER(20,4) COMMENT ' Actual YTD Expenses ',
	ACTUAL_YTD_REVENUES NUMBER(20,4) COMMENT ' Actual YTD Revenues ',
	EFFICIENCY_RATIO NUMBER(20,4) COMMENT ' Efficiency Ratio ',
	YTD_EXPENSES_TARGET NUMBER(20,4) COMMENT ' YTD Expenses Taregt ',
	YTD_REVENUES_TARGET NUMBER(20,4) COMMENT ' YTD Revenues Target ',
	EFFICIENCY_RATIO_TARGET NUMBER(20,4) COMMENT ' Efficiency Ratio Target ',
	AUA_IN_NOMINEE NUMBER(20,4) COMMENT ' AUA in Nominee ',
	AUA_IN_CLIENT_NAME NUMBER(20,4) COMMENT ' AUA in Client Name ',
	NO_OF_RPAS_IMPLEMENTED NUMBER(20,4) COMMENT ' # of RPAs implemented ',
	HOURS_SAVED_DUE_TO_RPAS NUMBER(20,4) COMMENT ' Hours Saved due to RPAs ',
	CONTINUOUS_IMPROVEMENT_QUICK_WINS NUMBER(20,4) COMMENT ' Continuous improvement/quick wins ',
	TOTAL_ASSETS NUMBER(20,4) COMMENT ' Total Assets  ',
	ORGANIC_GROWTH NUMBER(20,4) COMMENT ' Organic Growth  ',
	TOTAL_REVENUE NUMBER(20,4) COMMENT ' Total Revenue  ',
	TOTAL_REVENUE_TARGET NUMBER(20,4) COMMENT ' Total Revenue Target  ',
	RECRUITING NUMBER(20,4) COMMENT ' Recruiting  ',
	TERMINATED_ADVISORS NUMBER(20,4) COMMENT ' Terminated Advisors  '
);
create or replace view VW_MASTER_KPI_DATA_CLARINGTON(
	"Start Date of the image/version",
	"Extraction date of the occurrence",
	"KPI Date",
	"Trade/Account Processing Automation % MF",
	"Trade/Account Processing Automation % GIF",
	FTE,
	"Total Transactions MF",
	"Total Transactions GIF",
	"Total Transactions/FTE MF",
	"Total Transactions/FTE GIF",
	"No. of Accounts",
	"Accounts/FTE",
	"Accounts/FTE Target",
	"YoY New Accounts Client Name",
	"YoY New Accounts Client Nominee",
	"Expenses",
	"Revenues",
	"Efficiency Ratio",
	"Expenses Target",
	"Revenue Target",
	"Efficiency Ratio Target",
	"Total Assets",
	"Affiliate Penetration IIROC",
	"Affiliate Penetration IIROC Target",
	"Affiliate Penetration MFDA",
	"Affiliate Penetration MFDA Target",
	"Gross Margin",
	"Gross Margin Target",
	"Net Sales",
	"# of Accounts Client Name",
	"# of Accounts Nominee"
) as 
SELECT 
MD_START_DT	 AS "Start Date of the image/version" ,
MD_EXTRACT_DT	 AS "Extraction date of the occurrence" ,
KPI_DATE AS "KPI Date",
TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_MF AS "Trade/Account Processing Automation % MF",
TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_GIF AS "Trade/Account Processing Automation % GIF",
FTE AS "FTE",
TOTAL_TRANSACTIONS_MF AS "Total Transactions MF",
TOTAL_TRANSACTIONS_GIF AS "Total Transactions GIF",
TOTAL_TRANSACTIONS_FTE_MF AS "Total Transactions/FTE MF",
TOTAL_TRANSACTIONS_FTE_GIF AS "Total Transactions/FTE GIF",
NO_OF_ACCOUNTS AS "No. of Accounts",
ACCOUNTS_FTE AS "Accounts/FTE",
ACCOUNTS_FTE_TARGET AS "Accounts/FTE Target",
YOY_NEW_ACCOUNTS_CLIENT_NAME AS "YoY New Accounts Client Name",
YOY_NEW_ACCOUNTS_CLIENT_NOMINEE AS "YoY New Accounts Client Nominee",
EXPENSES AS "Expenses",
REVENUES AS "Revenues",
EFFICIENCY_RATIO AS "Efficiency Ratio",
EXPENSES_TARGET AS "Expenses Target",
REVENUE_TARGET AS "Revenue Target",
EFFICIENCY_RATIO_TARGET AS "Efficiency Ratio Target",
TOTAL_ASSETS AS "Total Assets",
AFFILIATE_PENETRATION_IIROC AS "Affiliate Penetration IIROC",
AFFILIATE_PENETRATION_IIROC_TARGET AS "Affiliate Penetration IIROC Target",
AFFILIATE_PENETRATION_MFDA AS "Affiliate Penetration MFDA",
AFFILIATE_PENETRATION_MFDA_TARGET AS "Affiliate Penetration MFDA Target",
GROSS_MARGIN AS "Gross Margin",
GROSS_MARGIN_TARGET AS "Gross Margin Target",
NET_SALES AS "Net Sales",
NO_OF_ACCOUNTS_CLIENT_NAME AS "# of Accounts Client Name",
NO_OF_ACCOUNTS_NOMINEE AS "# of Accounts Nominee"
from DB_IAWT_DEV_DM.EXTERNAL_KPI.MASTER_KPI_DATA_CLARINGTON;
create or replace view VW_MASTER_KPI_DATA_IAPW(
	"Start Date of the image/version",
	"Extraction date of the occurrence",
	"KPI Date",
	"No. of Active Clients",
	"No. of Active Accounts",
	FTE,
	"Accounts/FTE",
	"Accounts/FTE Target",
	"Appway % Registration",
	"Appway % Registration Target",
	"No. of Client ID registered",
	"Portal % registration",
	"Portal % registration Target",
	"MyPortfolio+ to new client ",
	"E-Delivery Portfolio Statements",
	"E-Delivery Tax Slips",
	"E-Delivery Confirms",
	"Avg. E-Delivery % registration",
	"E-Delivery % registration Target",
	"Retail YTD Expenses",
	"Retail YTD Revenues",
	"Retail Financial Efficiency Ratio",
	"Retail YTD Expenses Target",
	"Retail YTD Revenues Target",
	"Retail Efficiency Ratio Target",
	"Cap. Mrkts YTD Expenses",
	"Cap. Mkts YTD Revenues",
	"Cap. Mrkts Efficiency Ratio",
	"Cap. Mrkts YTD Expenses Target",
	"Cap. Mrkts YTD Revenues Target",
	"Cap. Mrkts Efficiency Ratio Target",
	"Total Assets",
	"Net Total Revenue",
	"Net Total Revenue Target",
	"Net Bond Desk Revenue",
	"Net Bond Desk Revenue Target",
	"Capital Mkts Revenue",
	"Capital Mkts Revenue Target",
	"Net Retail Revenue",
	"Net Retail Revenue Target",
	"Retail Revenue Growth",
	EBIT,
	"SMA Adoption",
	"Insurance Revenue",
	"AUA Target",
	"Departed Advisors",
	"Recruiting",
	"Terminated Advisors"
) as
SELECT 
MD_START_DT	 AS "Start Date of the image/version" ,
MD_EXTRACT_DT	 AS "Extraction date of the occurrence" ,
KPI_DATE as "KPI Date",
NO_OF_ACTIVE_CLIENTS as "No. of Active Clients",
NO_OF_ACTIVE_ACCOUNTS as "No. of Active Accounts",
FTE as "FTE",
ACCOUNTS_FTE as "Accounts/FTE",
ACCOUNTS_FTE_TARGET as "Accounts/FTE Target",
APPWAY_REGISTRATION as "Appway % Registration",
APPWAY_REGISTRATION_TARGET as "Appway % Registration Target",
NO_OF_CLIENT_ID_REGISTERED as "No. of Client ID registered",
PORTAL_REGISTRATION as "Portal % registration",
PORTAL_REGISTRATION_TARGET as "Portal % registration Target",
MYPORTFOLIO_TO_NEW_CLIENT as "MyPortfolio+ to new client",
E_DELIVERY_PORTFOLIO_STATEMENTS as "E-Delivery Portfolio Statements",
E_DELIVERY_TAX_SLIPS as "E-Delivery Tax Slips",
E_DELIVERY_CONFIRMS as "E-Delivery Confirms",
AVG_E_DELIVERY_REGISTRATION as "Avg. E-Delivery % registration",
E_DELIVERY_REGISTRATION_TARGET as "E-Delivery % registration Target",
RETAIL_YTD_EXPENSES as "Retail YTD Expenses",
RETAIL_YTD_REVENUES as "Retail YTD Revenues",
RETAIL_FINANCIAL_EFFICIENCY_RATIO as "Retail Financial Efficiency Ratio",
RETAIL_YTD_EXPENSES_TARGET as "Retail YTD Expenses Target",
RETAIL_YTD_REVENUES_TARGET as "Retail YTD Revenues Target",
RETAIL_EFFICIENCY_RATIO_TARGET as "Retail Efficiency Ratio Target",
CAP_MRKTS_YTD_EXPENSES as "Cap. Mrkts YTD Expenses",
CAP_MKTS_YTD_REVENUES as "Cap. Mkts YTD Revenues",
CAP_MRKTS_EFFICIENCY_RATIO as "Cap. Mrkts Efficiency Ratio",
CAP_MRKTS_YTD_EXPENSES_TARGET as "Cap. Mrkts YTD Expenses Target",
CAP_MRKTS_YTD_REVENUES_TARGET as "Cap. Mrkts YTD Revenues Target",
CAP_MRKTS_EFFICIENCY_RATIO_TARGET as "Cap. Mrkts Efficiency Ratio Target",
TOTAL_ASSETS as "Total Assets",
NET_TOTAL_REVENUE as "Net Total Revenue",
NET_TOTAL_REVENUE_TARGET as "Net Total Revenue Target",
NET_BOND_DESK_REVENUE as "Net Bond Desk Revenue",
NET_BOND_DESK_REVENUE_TARGET as "Net Bond Desk Revenue Target",
CAPITAL_MKTS_REVENUE as "Capital Mkts Revenue",
CAPITAL_MKTS_REVENUE_TARGET as "Capital Mkts Revenue Target",
NET_RETAIL_REVENUE as "Net Retail Revenue",
NET_RETAIL_REVENUE_TARGET as "Net Retail Revenue Target",
RETAIL_REVENUE_GROWTH as "Retail Revenue Growth",
EBIT as "EBIT",
SMA_ADOPTION as "SMA Adoption",
INSURANCE_REVENUE as "Insurance Revenue",
AUA_TARGET as "AUA Target",
DEPARTED_ADVISORS as "Departed Advisors",
RECRUITING as "Recruiting",
TERMINATED_ADVISORS as "Terminated Advisors" 
FROM DB_IAWT_DEV_DM.EXTERNAL_KPI.MASTER_KPI_DATA_IAPW;
create or replace view VW_MASTER_KPI_DATA_INVESTIA(
	"Start Date of the image/version",
	"Extraction date of the occurrence",
	"KPI Date",
	"# Client ID",
	"E-delivery",
	"% E-delivery",
	"% E-delivery Target",
	"Portal Registration",
	"% Portal Registration",
	"Portal Registration Target",
	FTE,
	"Clients by FTE",
	"Clients by FTE Target",
	"No of accounts",
	"Accounts by FTE",
	"Actual YTD Expenses",
	"Actual YTD Revenues",
	"Efficiency Ratio",
	"YTD Expenses Taregt",
	"YTD Revenues Target",
	"Efficiency Ratio Target",
	"AUA in Nominee",
	"AUA in Client Name",
	"# of RPAs implemented",
	"Hours Saved due to RPAs",
	"Continuous improvement/quick wins",
	"Total Assets ",
	"Organic Growth ",
	"Total Revenue ",
	"Total Revenue Target ",
	" Recruiting ",
	"Terminated Advisors"
) as
SELECT 
MD_START_DT	 AS "Start Date of the image/version" ,
MD_EXTRACT_DT	 AS "Extraction date of the occurrence" ,
KPI_DATE	 AS "KPI Date" ,
No_CLIENT_ID	 AS "# Client ID" ,
E_DELIVERY	 AS "E-delivery" ,
E_DELIVERY_PCT	 AS "% E-delivery" ,
E_DELIVERY_TARGET_PCT	 AS "% E-delivery Target" ,
PORTAL_REGISTRATION	 AS "Portal Registration" ,
PORTAL_REGISTRATION_PCT	 AS "% Portal Registration" ,
PORTAL_REGISTRATION_TARGET	 AS "Portal Registration Target" ,
FTE	 AS "FTE" ,
CLIENTS_BY_FTE	 AS "Clients by FTE" ,
CLIENTS_BY_FTE_TARGET	 AS "Clients by FTE Target" ,
NO_OF_ACCOUNTS	 AS "No of accounts" ,
ACCOUNTS_BY_FTE	 AS "Accounts by FTE" ,
ACTUAL_YTD_EXPENSES	 AS "Actual YTD Expenses" ,
ACTUAL_YTD_REVENUES	 AS "Actual YTD Revenues" ,
EFFICIENCY_RATIO	 AS "Efficiency Ratio" ,
YTD_EXPENSES_TARGET	 AS "YTD Expenses Taregt" ,
YTD_REVENUES_TARGET	 AS "YTD Revenues Target" ,
EFFICIENCY_RATIO_TARGET	 AS "Efficiency Ratio Target" ,
AUA_IN_NOMINEE	 AS "AUA in Nominee" ,
AUA_IN_CLIENT_NAME	 AS "AUA in Client Name" ,
No_OF_RPAS_IMPLEMENTED	 AS "# of RPAs implemented" ,
HOURS_SAVED_DUE_TO_RPAS	 AS "Hours Saved due to RPAs" ,
CONTINUOUS_IMPROVEMENT_QUICK_WINS	 AS "Continuous improvement/quick wins" ,
TOTAL_ASSETS	 AS "Total Assets " ,
ORGANIC_GROWTH	 AS "Organic Growth " ,
TOTAL_REVENUE	 AS "Total Revenue " ,
TOTAL_REVENUE_TARGET	 AS "Total Revenue Target " ,
RECRUITING	 AS " Recruiting " ,
TERMINATED_ADVISORS	 AS "Terminated Advisors" 
FROM DB_IAWT_DEV_DM.EXTERNAL_KPI.MASTER_KPI_DATA_INVESTIA;
CREATE OR REPLACE PROCEDURE "SP_CONV_INVESTIA_STG_TO_DM_MASTER_KPI_DATA_CLARINGTON"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAWT_''||ENV||''_DM.EXTERNAL_KPI.MASTER_KPI_DATA_CLARINGTON WHERE MD_START_DT IN (SELECT MD_START_DT FROM DB_IAWT_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_CLARINGTON GROUP BY MD_START_DT HAVING COUNT(1)>=1)'';
INS_QUERY := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.EXTERNAL_KPI.MASTER_KPI_DATA_CLARINGTON(
	HK_HUB	
,MD_START_DT	
,MD_CREATION_DT		
,MD_CREATION_AUDIT_ID		
,MD_SOURCE	
,MD_SRC_SYSTEM	
,MD_EXTRACT_DT	
,KPI_DATE	
,TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_MF		
,TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_GIF	
,FTE		
,TOTAL_TRANSACTIONS_MF		
,TOTAL_TRANSACTIONS_GIF	
,TOTAL_TRANSACTIONS_FTE_MF		
,TOTAL_TRANSACTIONS_FTE_GIF		
,NO_OF_ACCOUNTS		
,ACCOUNTS_FTE		
,ACCOUNTS_FTE_TARGET		
,YOY_NEW_ACCOUNTS_CLIENT_NAME		
,YOY_NEW_ACCOUNTS_CLIENT_NOMINEE		
,EXPENSES		
,REVENUES	
,EFFICIENCY_RATIO		
,EXPENSES_TARGET		
,REVENUE_TARGET		
,EFFICIENCY_RATIO_TARGET		
,TOTAL_ASSETS		
,AFFILIATE_PENETRATION_IIROC	
,AFFILIATE_PENETRATION_IIROC_TARGET		
,AFFILIATE_PENETRATION_MFDA		
,AFFILIATE_PENETRATION_MFDA_TARGET		
,GROSS_MARGIN	
,GROSS_MARGIN_TARGET		
,NET_SALES		
,NO_OF_ACCOUNTS_CLIENT_NAME		
,NO_OF_ACCOUNTS_NOMINEE)
	(SELECT
	src.HK_HUB	
	,TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')	
	,CURRENT_TIMESTAMP
	,CONCAT(''||CHAR(39)||JOB_AUDIT_ID||CHAR(39)||'',''''#'''',''||CHAR(39)||JOB_NAME||CHAR(39)||'',''''-'''',''||CHAR(39)||RUN_ID||CHAR(39)||'')	
	,src.MD_SOURCE	
	,src.MD_SRC_SYSTEM	
	,src.MD_EXTRACT_DT	
	,src.KPI_DATE	
	,src.TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_MF	
	,src.TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_GIF	
	,src.FTE	
	,src.TOTAL_TRANSACTIONS_MF	
	,src.TOTAL_TRANSACTIONS_GIF
	,src.TOTAL_TRANSACTIONS_FTE_MF	
	,src.TOTAL_TRANSACTIONS_FTE_GIF	
	,src.NO_OF_ACCOUNTS	
	,src.ACCOUNTS_FTE	
	,src.ACCOUNTS_FTE_TARGET	
	,src.YOY_NEW_ACCOUNTS_CLIENT_NAME	
	,src.YOY_NEW_ACCOUNTS_CLIENT_NOMINEE	
	,src.EXPENSES	
	,src.REVENUES
	,src.EFFICIENCY_RATIO	
	,src.EXPENSES_TARGET	
	,src.REVENUE_TARGET	
	,src.EFFICIENCY_RATIO_TARGET	
	,src.TOTAL_ASSETS	
	,src.AFFILIATE_PENETRATION_IIROC	
	,src.AFFILIATE_PENETRATION_IIROC_TARGET	
	,src.AFFILIATE_PENETRATION_MFDA	
	,src.AFFILIATE_PENETRATION_MFDA_TARGET	
	,src.GROSS_MARGIN
	,src.GROSS_MARGIN_TARGET	
	,src.NET_SALES	
	,src.NO_OF_ACCOUNTS_CLIENT_NAME	
	,src.NO_OF_ACCOUNTS_NOMINEE
	FROM DB_IAWT_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_CLARINGTON src)'';
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_IAPW_STG_TO_DM_MASTER_KPI_DATA_IAPW"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAWT_''||ENV||''_DM.EXTERNAL_KPI.MASTER_KPI_DATA_IAPW WHERE MD_START_DT IN (SELECT MD_START_DT FROM DB_IAWT_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_IAPW GROUP BY MD_START_DT HAVING COUNT(1)>=1)'';
INS_QUERY := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.EXTERNAL_KPI.MASTER_KPI_DATA_IAPW(
HK_HUB	
,MD_START_DT	
,MD_HASHDIFF	
,MD_CREATION_DT		
,MD_CREATION_AUDIT_ID		
,MD_SOURCE	
,MD_SRC_SYSTEM		
,MD_EXTRACT_DT		
,KPI_DATE		
,NO_OF_ACTIVE_CLIENTS		
,NO_OF_ACTIVE_ACCOUNTS	
,FTE		
,ACCOUNTS_FTE	
,ACCOUNTS_FTE_TARGET		
,APPWAY_REGISTRATION	
,APPWAY_REGISTRATION_TARGET	
,NO_OF_CLIENT_ID_REGISTERED		
,PORTAL_REGISTRATION	
,PORTAL_REGISTRATION_TARGET		
,MYPORTFOLIO_TO_NEW_CLIENT		
,E_DELIVERY_PORTFOLIO_STATEMENTS	
,E_DELIVERY_TAX_SLIPS		
,E_DELIVERY_CONFIRMS		
,AVG_E_DELIVERY_REGISTRATION	
,E_DELIVERY_REGISTRATION_TARGET	
,RETAIL_YTD_EXPENSES		
,RETAIL_YTD_REVENUES		
,RETAIL_FINANCIAL_EFFICIENCY_RATIO		
,RETAIL_YTD_EXPENSES_TARGET		
,RETAIL_YTD_REVENUES_TARGET		
,RETAIL_EFFICIENCY_RATIO_TARGET		
,CAP_MRKTS_YTD_EXPENSES		
,CAP_MKTS_YTD_REVENUES		
,CAP_MRKTS_EFFICIENCY_RATIO		
,CAP_MRKTS_YTD_EXPENSES_TARGET		
,CAP_MRKTS_YTD_REVENUES_TARGET	
,CAP_MRKTS_EFFICIENCY_RATIO_TARGET		
,TOTAL_ASSETS		
,NET_TOTAL_REVENUE		
,NET_TOTAL_REVENUE_TARGET		
,NET_BOND_DESK_REVENUE		
,NET_BOND_DESK_REVENUE_TARGET		
,CAPITAL_MKTS_REVENUE		
,CAPITAL_MKTS_REVENUE_TARGET		
,NET_RETAIL_REVENUE		
,NET_RETAIL_REVENUE_TARGET		
,RETAIL_REVENUE_GROWTH	
,EBIT		
,SMA_ADOPTION		
,INSURANCE_REVENUE		
,AUA_TARGET	
,DEPARTED_ADVISORS		
,RECRUITING		
,TERMINATED_ADVISORS)
	(SELECT
src.HK_HUB	
	,src.MD_START_DT	
	,src.MD_HASHDIFF	
	,CURRENT_TIMESTAMP	
	,CONCAT(''||CHAR(39)||JOB_AUDIT_ID||CHAR(39)||'',''''#'''',''||CHAR(39)||JOB_NAME||CHAR(39)||'',''''-'''',''||CHAR(39)||RUN_ID||CHAR(39)||'')
	,src.MD_SOURCE	
	,src.MD_SRC_SYSTEM	
	,src.MD_EXTRACT_DT	
	,src.KPI_DATE	
	,src.NO_OF_ACTIVE_CLIENTS	
	,src.NO_OF_ACTIVE_ACCOUNTS	
	,src.FTE	
	,src.ACCOUNTS_FTE
	,src.ACCOUNTS_FTE_TARGET	
	,src.APPWAY_REGISTRATION	
	,src.APPWAY_REGISTRATION_TARGET	
	,src.NO_OF_CLIENT_ID_REGISTERED	
	,src.PORTAL_REGISTRATION	
	,src.PORTAL_REGISTRATION_TARGET	
	,src.MYPORTFOLIO_TO_NEW_CLIENT	
	,src.E_DELIVERY_PORTFOLIO_STATEMENTS	
	,src.E_DELIVERY_TAX_SLIPS	
	,src.E_DELIVERY_CONFIRMS	
	,src.AVG_E_DELIVERY_REGISTRATION	
	,src.E_DELIVERY_REGISTRATION_TARGET
	,src.RETAIL_YTD_EXPENSES	
	,src.RETAIL_YTD_REVENUES	
	,src.RETAIL_FINANCIAL_EFFICIENCY_RATIO	
	,src.RETAIL_YTD_EXPENSES_TARGET	
	,src.RETAIL_YTD_REVENUES_TARGET	
	,src.RETAIL_EFFICIENCY_RATIO_TARGET	
	,src.CAP_MRKTS_YTD_EXPENSES	
	,src.CAP_MKTS_YTD_REVENUES	
	,src.CAP_MRKTS_EFFICIENCY_RATIO	
	,src.CAP_MRKTS_YTD_EXPENSES_TARGET	
	,src.CAP_MRKTS_YTD_REVENUES_TARGET
	,src.CAP_MRKTS_EFFICIENCY_RATIO_TARGET	
	,src.TOTAL_ASSETS	
	,src.NET_TOTAL_REVENUE	
	,src.NET_TOTAL_REVENUE_TARGET	
	,src.NET_BOND_DESK_REVENUE	
	,src.NET_BOND_DESK_REVENUE_TARGET	
	,src.CAPITAL_MKTS_REVENUE	
	,src.CAPITAL_MKTS_REVENUE_TARGET	
	,src.NET_RETAIL_REVENUE	
	,src.NET_RETAIL_REVENUE_TARGET	
	,src.RETAIL_REVENUE_GROWTH
	,src.EBIT	
	,src.SMA_ADOPTION	
	,src.INSURANCE_REVENUE	
	,src.AUA_TARGET	
	,src.DEPARTED_ADVISORS	
	,src.RECRUITING	
	,src.TERMINATED_ADVISORS
	FROM DB_IAWT_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_IAPW src)'';
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_INVESTIA_STG_TO_DM_MASTER_KPI_DATA_INVESTIA"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAWT_''||ENV||''_DM.EXTERNAL_KPI.MASTER_KPI_DATA_INVESTIA WHERE MD_START_DT IN (SELECT MD_START_DT FROM DB_IAWT_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_INVESTIA GROUP BY MD_START_DT HAVING COUNT(1)>=1)'';
INS_QUERY := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.EXTERNAL_KPI.MASTER_KPI_DATA_INVESTIA(
HK_HUB	
,MD_START_DT	
,MD_CREATION_DT		
,MD_CREATION_AUDIT_ID		
,MD_SOURCE		
,MD_SRC_SYSTEM		
,MD_EXTRACT_DT		
,KPI_DATE		
,NO_CLIENT_ID		
,E_DELIVERY	
,E_DELIVERY_PCT		
,E_DELIVERY_TARGET_PCT		
,PORTAL_REGISTRATION	
,PORTAL_REGISTRATION_PCT		
,PORTAL_REGISTRATION_TARGET		
,FTE		
,CLIENTS_BY_FTE		
,CLIENTS_BY_FTE_TARGET		
,NO_OF_ACCOUNTS		
,ACCOUNTS_BY_FTE		
,ACTUAL_YTD_EXPENSES		
,ACTUAL_YTD_REVENUES	
,EFFICIENCY_RATIO		
,YTD_EXPENSES_TARGET		
,YTD_REVENUES_TARGET		
,EFFICIENCY_RATIO_TARGET		
,AUA_IN_NOMINEE		
,AUA_IN_CLIENT_NAME		
,NO_OF_RPAS_IMPLEMENTED		
,HOURS_SAVED_DUE_TO_RPAS		
,CONTINUOUS_IMPROVEMENT_QUICK_WINS	
,TOTAL_ASSETS		
,ORGANIC_GROWTH		
,TOTAL_REVENUE		
,TOTAL_REVENUE_TARGET		
,RECRUITING	
,TERMINATED_ADVISORS)
	(SELECT
	sat.HK_HUB	
	,TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')	
	,CURRENT_TIMESTAMP	
	,CONCAT(''||CHAR(39)||JOB_AUDIT_ID||CHAR(39)||'',''''#'''',''||CHAR(39)||JOB_NAME||CHAR(39)||'',''''-'''',''||CHAR(39)||RUN_ID||CHAR(39)||'')
	,sat.MD_SOURCE	
	,sat.MD_SRC_SYSTEM	
	,sat.MD_EXTRACT_DT	
	,sat.KPI_DATE	
	,sat.NO_CLIENT_ID	
	,sat.E_DELIVERY	
	,sat.E_DELIVERY_PCT	
	,sat.E_DELIVERY_TARGET_PCT	
	,sat.PORTAL_REGISTRATION
	,sat.PORTAL_REGISTRATION_PCT	
	,sat.PORTAL_REGISTRATION_TARGET	
	,sat.FTE	
	,sat.CLIENTS_BY_FTE	
	,sat.CLIENTS_BY_FTE_TARGET	
	,sat.NO_OF_ACCOUNTS	
	,sat.ACCOUNTS_BY_FTE	
	,sat.ACTUAL_YTD_EXPENSES	
	,sat.ACTUAL_YTD_REVENUES
	,sat.EFFICIENCY_RATIO	
	,sat.YTD_EXPENSES_TARGET	
	,sat.YTD_REVENUES_TARGET	
	,sat.EFFICIENCY_RATIO_TARGET	
	,sat.AUA_IN_NOMINEE	
	,sat.AUA_IN_CLIENT_NAME	
	,sat.NO_OF_RPAS_IMPLEMENTED	
	,sat.HOURS_SAVED_DUE_TO_RPAS	
	,sat.CONTINUOUS_IMPROVEMENT_QUICK_WINS
	,sat.TOTAL_ASSETS	
	,sat.ORGANIC_GROWTH	
	,sat.TOTAL_REVENUE	
	,sat.TOTAL_REVENUE_TARGET	
	,sat.RECRUITING	
	,sat.TERMINATED_ADVISORS
	FROM DB_IAWT_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_INVESTIA sat)'';
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
use schema EXTRACTIONS;

create or replace TABLE TEST (
	NAME VARCHAR(100)
);
create or replace TRANSIENT TABLE WT_COMMISSION_ORGANIC_GROWTH (
	TEAM_RANK NUMBER(18,0),
	TEAM_NAME VARCHAR(512),
	MONTHLY_NET_ORGANIC_GROWTH_BY_TEAM NUMBER(38,2),
	YTD_NET_ORGANIC_GROWTH_BY_TEAM NUMBER(38,2)
);
CREATE OR REPLACE FILE FORMAT COMMISSION_EXPORT_CSV
	FIELD_DELIMITER = ';'
	COMPRESSION = NONE
;
CREATE OR REPLACE PROCEDURE "SP_CONV_COMMISSION_EXTRACT"("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '


var INS_PRE_QUERY = "CALL DB_IAWT_"+ ENV +"_DM.EXTRACTIONS.USP_COMMISSION_ORGANIC_GROWTH(''"+ I_DATA_START_DATE +"'');";
var PATH = "SELECT TO_VARCHAR(''"+ I_DATA_START_DATE +"''::DATE, ''YYYY/MM/DD'');";


     
   
   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_PRE_QUERY
          }
       );
   var result_scan = sql_statement.execute();
   
      var sql_statement = snowflake.createStatement(
          {
          sqlText: PATH
          }
       );
   var result_scan = sql_statement.execute();	
   var op='''';
   while (result_scan.next())  {
       var op = result_scan.getColumnValue(1);
       
       }
   var COPY_QUERY = "COPY INTO  @DATALAKE.OUT/IAPW/"+op+"/COMMISSION_ORGANIC_GROWTH_REPORT.csv FROM DB_IAWT_"+ ENV+"_DM.EXTRACTIONS.WT_COMMISSION_ORGANIC_GROWTH File_format = (format_name = ''DB_IAWT_DEV_DM.EXTRACTIONS.COMMISSION_EXPORT_CSV'') SINGLE = TRUE OVERWRITE = TRUE;";
   
   var sql_statement = snowflake.createStatement(
          {
          sqlText: COPY_QUERY
          }
       );
   var result_scan = sql_statement.execute();
   


';
CREATE OR REPLACE PROCEDURE "USP_COMMISSION_ORGANIC_GROWTH"("P_START_DATE" VARCHAR(10))
RETURNS VARCHAR(10000)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var vSQLSelectCmd = `
INSERT INTO DB_IAWT_DEV_DM.EXTRACTIONS.WT_COMMISSION_ORGANIC_GROWTH SELECT * FROM (
WITH LatestVersionAdvisors AS (
		SELECT distinct 
			team_name
		FROM DB_IAWT_DEV_DM.SHARED.DIM_ADVISOR
		WHERE (
            HK_HUB <> ''0''
            AND new_advisor <> 1
            AND month(md_start_dt) = month(dateadd(months, - 1, to_date(''@START_DATE@'')))
			AND year (md_start_dt) = year(to_date(''@START_DATE@''))
            )
            OR  (md_end_dt is null and HK_HUB <> ''0'')
		)
	,ThisMonthReport AS (
		SELECT A.TEAM_NAME
			,coalesce(sum(DECODE(FT.CASH_FLOW_TYPE, ''IN FLOW'', FT.GROSS_AMOUNT)), 0) InflowGrossAmt
			,coalesce(sum(DECODE(FT.CASH_FLOW_TYPE, ''OUT FLOW'', FT.GROSS_AMOUNT)), 0) OutflowGrossAmt
			,InflowGrossAmt + OutflowGrossAmt AS NetOrganicGrowth
		FROM DB_IAWT_DEV_DM.SHARED.DIM_ADVISOR A
		JOIN DB_IAWT_DEV_DM.TRANSACTIONS.FACT_TRANSACTIONS FT ON FT.SK_DIM_ADVISORS = A.ID
		WHERE month(FT.TRADE_DATE) = month(dateadd(months, - 1, to_date(''@START_DATE@'')))
			AND year(FT.trade_date) = year(to_date(''@START_DATE@''))
			AND A.new_advisor <> 1
			AND ft.departed_advisor_ind <> 1
		GROUP BY A.TEAM_NAME
		)
	,LastMonthReport AS (
		SELECT
            A.TEAM_NAME
			,coalesce(sum(DECODE(FT.CASH_FLOW_TYPE, ''IN FLOW'', FT.GROSS_AMOUNT)), 0) InflowGrossAmt
			,coalesce(sum(DECODE(FT.CASH_FLOW_TYPE, ''OUT FLOW'', FT.GROSS_AMOUNT)), 0) OutflowGrossAmt
			,InflowGrossAmt + OutflowGrossAmt AS NetOrganicGrowth
		FROM DB_IAWT_DEV_DM.SHARED.DIM_ADVISOR A
		JOIN DB_IAWT_DEV_DM.TRANSACTIONS.FACT_TRANSACTIONS FT ON FT.SK_DIM_ADVISORS = A.ID
		WHERE month(FT.TRADE_DATE) = month(dateadd(months, - 2, to_date(''@START_DATE@'')))
			AND year(FT.trade_date) = year(dateadd(months, - 2, to_date(''@START_DATE@'')))
			AND A.new_advisor <> 1
			AND ft.departed_advisor_ind <> 1
		GROUP BY A.TEAM_NAME
		)
	,YTDReport AS (
		SELECT 
            A.TEAM_NAME
			,coalesce(sum(DECODE(FT.CASH_FLOW_TYPE, ''IN FLOW'', FT.GROSS_AMOUNT)), 0) YTD_Inflow_GrossAmt
			,coalesce(sum(DECODE(FT.CASH_FLOW_TYPE, ''OUT FLOW'', FT.GROSS_AMOUNT)), 0) YTD_Outflow_GrossAmt
			,YTD_Inflow_GrossAmt + YTD_Outflow_GrossAmt AS YTDNetOrganicGrowth
		FROM DB_IAWT_DEV_DM.SHARED.DIM_ADVISOR A
		JOIN DB_IAWT_DEV_DM.TRANSACTIONS.FACT_TRANSACTIONS FT ON FT.SK_DIM_ADVISORS = A.ID
		WHERE month(FT.TRADE_DATE) <= month(dateadd(months, - 1, to_date(''@START_DATE@'')))
			AND year(FT.trade_date) = year(to_date(''@START_DATE@''))
			AND A.new_advisor <> 1
			AND ft.departed_advisor_ind <> 1
		GROUP BY A.TEAM_NAME
		)
	,PrevYTDReport AS (
		SELECT 
            A.TEAM_NAME
			,coalesce(sum(DECODE(FT.CASH_FLOW_TYPE, ''IN FLOW'', FT.GROSS_AMOUNT)), 0) YTD_Inflow_GrossAmt
			,coalesce(sum(DECODE(FT.CASH_FLOW_TYPE, ''OUT FLOW'', FT.GROSS_AMOUNT)), 0) YTD_Outflow_GrossAmt
			,YTD_Inflow_GrossAmt + YTD_Outflow_GrossAmt AS YTDNetOrganicGrowth
		FROM DB_IAWT_DEV_DM.SHARED.DIM_ADVISOR A
		JOIN DB_IAWT_DEV_DM.TRANSACTIONS.FACT_TRANSACTIONS FT ON FT.SK_DIM_ADVISORS = A.ID
		WHERE month(FT.TRADE_DATE) <= month(dateadd(months, - 1, to_date(''@START_DATE@'')))
			AND year(FT.trade_date) = year(dateadd(years, - 1, to_date(''@START_DATE@'')))
			AND A.new_advisor <> 1
			AND ft.departed_advisor_ind <> 1
		GROUP BY A.TEAM_NAME 
		)

SELECT DISTINCT dense_rank() OVER (
		ORDER BY YTD_Net_Organic_Growth_By_Team DESC
		) AS Team_Rank
	,resultat.team_name
	,resultat.Monthly_Net_Organic_Growth_By_Team
	,resultat.YTD_Net_Organic_Growth_By_Team
FROM (
	SELECT
		LTV.TEAM_NAME
		,coalesce(TM.InflowGrossAmt, 0) AS MONTH_IN_FLOW
		,coalesce(TM.OutFlowGrossAmt, 0) AS MONTH_OUT_FLOW
		,coalesce(TM.NetOrganicGrowth, 0) AS Actual_Monthly_Net_Organic_Growth
		,coalesce(LM.NetOrganicGrowth, 0) AS Prev_Monthly_Net_Organic_Growth
		,Actual_Monthly_Net_Organic_Growth - Prev_Monthly_Net_Organic_Growth AS Month_over_Month_growth
		,coalesce(round(((Actual_Monthly_Net_Organic_Growth - Prev_Monthly_Net_Organic_Growth) / nullif(abs(Prev_Monthly_Net_Organic_Growth), 0) * 100), 2), 0) AS Month_over_Month_growth_Percentage
		,coalesce(YTD.YTD_Inflow_GrossAmt, 0) AS YTD_Inflow_GrossAmt
		,coalesce(YTD.YTD_Outflow_GrossAmt, 0) AS YTD_Outflow_GrossAmt
		,coalesce(YTD.YTDNetOrganicGrowth, 0) AS YTD_Net_Organic_Growth
		,coalesce(PYTD.YTDNetOrganicGrowth, 0) AS Previous_YTD_Net_Organic_Growth
		,YTD_Net_Organic_Growth - Previous_YTD_Net_Organic_Growth AS YTD_Period_over_period_growth
		,coalesce(round(((YTD_Net_Organic_Growth - Previous_YTD_Net_Organic_Growth) / nullif(abs(Previous_YTD_Net_Organic_Growth), 0) * 100), 2), 0) AS YTD_Period_over_period_growth_Percentage
		,round(sum(YTD_Net_Organic_Growth) OVER (PARTITION BY LTV.team_name), 2) AS YTD_Net_Organic_Growth_By_Team
		,round(sum(Actual_Monthly_Net_Organic_Growth) OVER (PARTITION BY LTV.team_name), 2) AS Monthly_Net_Organic_Growth_By_Team
	FROM LatestVersionAdvisors LTV
	LEFT JOIN THISMONTHREPORT TM    ON   LTV.TEAM_NAME = TM.TEAM_NAME  
	LEFT JOIN LASTMONTHREPORT LM    ON   LTV.TEAM_NAME = LM.TEAM_NAME  
	LEFT JOIN YTDReport YTD         ON   LTV.TEAM_NAME = YTD.TEAM_NAME  
	LEFT JOIN PREVYTDREPORT PYTD    ON   LTV.TEAM_NAME = PYTD.TEAM_NAME
	) AS resultat
WHERE resultat.YTD_Net_Organic_Growth_By_Team <> 0
	AND resultat.team_name NOT IN (
		''iA House''
		,''National Branch''
		,''''
		)
ORDER BY Team_Rank
) AS T;
`; 
vSQLSelectCmd = vSQLSelectCmd.replace(/@START_DATE@/g, ''"+p_START_DATE+"'');
var selectStatement = snowflake.createStatement({sqlText: vSQLSelectCmd});
var vSQLResult = selectStatement.execute();
return "SUCCESS";
';
use schema HOLDINGS;

create or replace TABLE FACT_HOLDINGS (
	ID NUMBER(38,0) autoincrement COMMENT 'ID of fact holdings',
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_SECURITY_TYPE VARCHAR(1000) COMMENT 'Capabilities for RLS',
	SK_DIM_ACCOUNTS NUMBER(38,0),
	SK_DIM_MARKETPRODUCTS NUMBER(38,0),
	SK_DIM_ADVISORS NUMBER(38,0),
	SK_DIM_CLIENTS NUMBER(38,0),
	SK_DIM_PLANS NUMBER(38,0),
	RR_CD VARCHAR(50),
	PLN_SYSID VARCHAR(1000),
	BALANCE_DATE TIMESTAMP_NTZ(9),
	HOLDING_VALUE NUMBER(38,9),
	AUA NUMBER(38,12),
	AUM NUMBER(38,12),
	AUM_CLARINGTON NUMBER(38,12),
	AUM_IA NUMBER(38,12),
	CASH_POSITION NUMBER(38,12),
	PROGRAM_TYPE VARCHAR(50),
	ACCOUNT_PROGRAM_TYPE VARCHAR(50),
	ADMINISTRATORY_TYPE VARCHAR(1000)
);
create or replace TABLE WT_FACT_HOLDINGS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for CONTRACT',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the HUB_PARTY_ROLE_ADVISOR',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for the REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_SECURITY_TYPE VARCHAR(1000) COMMENT 'Capabilities for RLS',
	SK_DIM_ACCOUNTS NUMBER(38,0),
	SK_DIM_MARKETPRODUCTS NUMBER(38,0),
	SK_DIM_ADVISORS NUMBER(38,0),
	SK_DIM_CLIENTS NUMBER(38,0),
	SK_DIM_PLANS NUMBER(38,0),
	RR_CD VARCHAR(50),
	PLN_SYSID VARCHAR(1000),
	BALANCE_DATE TIMESTAMP_NTZ(9),
	HOLDING_VALUE NUMBER(38,9),
	AUA NUMBER(38,12),
	AUM NUMBER(38,12),
	AUM_CLARINGTON NUMBER(38,12),
	AUM_IA NUMBER(38,12),
	CASH_POSITION NUMBER(38,12),
	PROGRAM_TYPE VARCHAR(50),
	ACCOUNT_PROGRAM_TYPE VARCHAR(50),
	ADMINISTRATORY_TYPE VARCHAR(1000)
);
create or replace view VW_FACT_HOLDINGS(
	MD_START_DT,
	MD_SRCSYSTEM,
	SK_DIM_ACCOUNTS,
	SK_DIM_MARKETPRODUCTS,
	"Rep code",
	SK_DIM_ADVISORS,
	SK_DIM_CLIENTS,
	PLN_SYSID,
	SK_DIM_PLANS,
	"Balance date",
	"Market value",
	AUA,
	AUM,
	"AUM Clarington",
	"AUM iA",
	"Cash position",
	"Program type",
	"Account program type",
	"Administratory type"
) as 
	SELECT 
	MD_START_DT ,
	MD_SRC_SYSTEM ,
	SK_DIM_ACCOUNTS ,
	SK_DIM_MARKETPRODUCTS ,
	RR_CD ,
	SK_DIM_ADVISORS,
	SK_DIM_CLIENTS,
	PLN_SYSID ,
	SK_DIM_PLANS,
	BALANCE_DATE ,
	HOLDING_VALUE ,
	AUA ,
	AUM ,
	AUM_CLARINGTON ,
	AUM_IA ,
	CASH_POSITION ,
	PROGRAM_TYPE ,
	ACCOUNT_PROGRAM_TYPE ,
	ADMINISTRATORY_TYPE 
	FROM HOLDINGS.FACT_HOLDINGS
	WHERE DATE(BALANCE_DATE) >= (SELECT DATE(DATEADD(YEAR, -2,MAX(BALANCE_DATE) ))  FROM HOLDINGS.FACT_HOLDINGS)
order by SK_DIM_CLIENTS, SK_DIM_ADVISORS, SK_DIM_MARKETPRODUCTS,SK_DIM_ADVISORS;
create or replace view VW_INITIAL_LOADING_WT_FACT_HOLDINGS(
	HK_LINK,
	HK_HUB_CONTRACT,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	MD_START_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	SK_DIM_ACCOUNTS,
	SK_DIM_MARKETPRODUCTS,
	SK_DIM_ADVISORS,
	SK_DIM_CLIENTS,
	SK_DIM_PLANS,
	RR_CD,
	PLN_SYSID,
	BALANCE_DATE,
	HOLDING_VALUE,
	AUA,
	AUM,
	AUM_CLARINGTON,
	AUM_IA,
	CASH_POSITION,
	PROGRAM_TYPE,
	ACCOUNT_PROGRAM_TYPE,
	ADMINISTRATORY_TYPE
) as
SELECT
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.HK_LINK,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.LINK_INVESTMENT.HK_HUB_CONTRACT,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.LINK_INVESTMENT.HK_HUB_INVESTMENT_PRODUCT_TYPE,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.LINK_INVESTMENT.HK_HUB_PARTY_ROLE_ADVISOR,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.LINK_INVESTMENT.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.LINK_INVESTMENT.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.MD_START_DT,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.MD_SOURCE,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.LINK_INVESTMENT.MD_SRC_SYSTEM,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.LINK_INVESTMENT.MD_EXTRACT_DT,
	CAST(CAST(
	(CASE WHEN SHARED.DIM_ACCOUNTS.ID IS NULL THEN -1
	ELSE SHARED.DIM_ACCOUNTS.ID
END) AS VARCHAR(252)) AS FLOAT) AS SK_DIM_ACCOUNTS,
	CAST(CAST(
	(CASE WHEN SHARED.DIM_FINANCIAL_INSTRUMENTS.ID IS NULL THEN -1
	ELSE SHARED.DIM_FINANCIAL_INSTRUMENTS.ID
END) AS VARCHAR(252)) AS FLOAT) AS SK_DIM_MARKETPRODUCTS,
	CAST(CAST(
	(CASE WHEN SHARED.DIM_ADVISOR.ID IS NULL THEN -1
	ELSE SHARED.DIM_ADVISOR.ID
END) AS VARCHAR(252)) AS FLOAT) AS SK_DIM_ADVISORS,
	CAST(CAST(
	(CASE WHEN SHARED.DIM_CLIENTS.ID IS NULL THEN -1
	ELSE SHARED.DIM_CLIENTS.ID
END) AS VARCHAR(252)) AS FLOAT) AS SK_DIM_CLIENTS,
	CAST(CAST(
	(CASE WHEN SHARED.DIM_PLANS.ID IS NULL THEN -1
	ELSE SHARED.DIM_PLANS.ID
END) AS VARCHAR(251)) AS FLOAT) AS SK_DIM_PLANS,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.RR_CD,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.PLN_SYSID,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.BALANCE_DATE,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.HOLDING_VALUE,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.AUA,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.AUM,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.AUM_CLARINGTON,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.AUM_IA,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.CASH_POSITION,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.PROGRAM_TYPE,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.ACCOUNT_PROGRAM_TYPE,
	DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.ADMINISTRATORY_TYPE
FROM
	(SHARED.DIM_ACCOUNTS
RIGHT OUTER JOIN (SHARED.DIM_CLIENTS
RIGHT OUTER JOIN (SHARED.DIM_PLANS
RIGHT OUTER JOIN (SHARED.DIM_ADVISOR
RIGHT OUTER JOIN (SHARED.DIM_FINANCIAL_INSTRUMENTS
RIGHT OUTER JOIN (HOLDINGS.FACT_HOLDINGS
RIGHT OUTER JOIN (DB_IAWT_DEV_DWH.HOLDINGS_BDV.LINK_INVESTMENT
INNER JOIN DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT ON
	(DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.HK_LINK = DB_IAWT_DEV_DWH.HOLDINGS_BDV.LINK_INVESTMENT.HK_LINK)) ON
	(DB_IAWT_DEV_DWH.HOLDINGS_BDV.LINK_INVESTMENT.HK_LINK = HOLDINGS.FACT_HOLDINGS.HK_LINK)) ON
	(DB_IAWT_DEV_DWH.HOLDINGS_BDV.LINK_INVESTMENT.HK_HUB_INVESTMENT_PRODUCT_TYPE = SHARED.DIM_FINANCIAL_INSTRUMENTS.HK_HUB)
	AND ((SHARED.DIM_FINANCIAL_INSTRUMENTS.MD_START_DT <= DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.MD_START_DT)
		AND ((SHARED.DIM_FINANCIAL_INSTRUMENTS.MD_END_DT > DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.MD_START_DT)
			OR SHARED.DIM_FINANCIAL_INSTRUMENTS.MD_END_DT IS NULL))) ON
	(DB_IAWT_DEV_DWH.HOLDINGS_BDV.LINK_INVESTMENT.HK_HUB_PARTY_ROLE_ADVISOR = SHARED.DIM_ADVISOR.HK_HUB)
	AND ((SHARED.DIM_ADVISOR.MD_START_DT <= DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.MD_START_DT)
		AND ((SHARED.DIM_ADVISOR.MD_END_DT > DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.MD_START_DT)
			OR SHARED.DIM_ADVISOR.MD_END_DT IS NULL))) ON
	(DB_IAWT_DEV_DWH.HOLDINGS_BDV.LINK_INVESTMENT.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = SHARED.DIM_PLANS.HK_HUB)
	AND ((SHARED.DIM_PLANS.MD_START_DT <= DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.MD_START_DT)
		AND ((SHARED.DIM_PLANS.MD_END_DT > DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.MD_START_DT)
			OR SHARED.DIM_PLANS.MD_END_DT IS NULL))) ON
	(DB_IAWT_DEV_DWH.HOLDINGS_BDV.LINK_INVESTMENT.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = SHARED.DIM_CLIENTS.HK_HUB)
	AND ((SHARED.DIM_CLIENTS.MD_START_DT <= DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.MD_START_DT)
		AND ((SHARED.DIM_CLIENTS.MD_END_DT > DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.MD_START_DT)
			OR SHARED.DIM_CLIENTS.MD_END_DT IS NULL))) ON
	(DB_IAWT_DEV_DWH.HOLDINGS_BDV.LINK_INVESTMENT.HK_HUB_CONTRACT = SHARED.DIM_ACCOUNTS.HK_HUB)
	AND ((SHARED.DIM_ACCOUNTS.MD_START_DT <= DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.MD_START_DT)
		AND ((SHARED.DIM_ACCOUNTS.MD_END_DT > DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT.MD_START_DT)
			OR SHARED.DIM_ACCOUNTS.MD_END_DT IS NULL)));
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_BDV_HOLDINGS_TO_DM_WT_FACT_HOLDINGS"("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAWT_''||ENV||''_DM.HOLDINGS.WT_FACT_HOLDINGS WHERE 1=1'';
INS_INSERT := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.HOLDINGS.WT_FACT_HOLDINGS (HK_LINK,HK_HUB_CONTRACT,HK_HUB_INVESTMENT_PRODUCT_TYPE,HK_HUB_PARTY_ROLE_ADVISOR,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,MD_START_DT,MD_SOURCE,MD_SRC_SYSTEM,MD_EXTRACT_DT,SK_DIM_ACCOUNTS,SK_DIM_MARKETPRODUCTS,SK_DIM_ADVISORS,SK_DIM_CLIENTS,SK_DIM_PLANS,RR_CD,PLN_SYSID,BALANCE_DATE,HOLDING_VALUE,AUA,AUM,AUM_CLARINGTON,AUM_IA,CASH_POSITION,PROGRAM_TYPE,ACCOUNT_PROGRAM_TYPE,ADMINISTRATORY_TYPE)
SELECT sat_link.HK_LINK,
link.HK_HUB_CONTRACT,
link.HK_HUB_INVESTMENT_PRODUCT_TYPE,
link.HK_HUB_PARTY_ROLE_ADVISOR,
link.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
link.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
sat_link.MD_START_DT,
sat_link.MD_SOURCE,
link.MD_SRC_SYSTEM,
link.MD_EXTRACT_DT,
COALESCE(acc.ID,''''-1''''),
COALESCE(prd.ID,''''-1''''),
COALESCE(adv.ID,''''-1''''),
COALESCE(clt.ID,''''-1''''),
COALESCE(pln.ID,''''-1''''),
sat_link.RR_CD,
sat_link.PLN_SYSID,
sat_link.BALANCE_DATE,
sat_link.HOLDING_VALUE,
sat_link.AUA,
sat_link.AUM,
sat_link.AUM_CLARINGTON,
sat_link.AUM_IA,
sat_link.CASH_POSITION,
sat_link.PROGRAM_TYPE,
sat_link.ACCOUNT_PROGRAM_TYPE,
sat_link.ADMINISTRATORY_TYPE
FROM DB_IAWT_''||ENV||''_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT sat_link
JOIN DB_IAWT_''||ENV||''_DWH.HOLDINGS_BDV.LINK_INVESTMENT link on sat_link.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') and sat_link.HK_LINK = link.HK_LINK
LEFT JOIN DB_IAWT_''||ENV||''_DM.HOLDINGS.FACT_HOLDINGS fact on link.HK_LINK = fact.HK_LINK and fact.HK_LINK is null
LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_FINANCIAL_INSTRUMENTS prd on (prd.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') AND (prd.MD_END_DT> TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') OR (prd.MD_END_DT is null))) AND link.HK_HUB_INVESTMENT_PRODUCT_TYPE = prd.HK_HUB
LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_ADVISOR adv on (adv.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') AND (adv.MD_END_DT> TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') OR (adv.MD_END_DT is null))) and link.HK_HUB_PARTY_ROLE_ADVISOR = adv.HK_HUB
LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_PLANS pln on (pln.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') AND (pln.MD_END_DT> TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') OR (pln.MD_END_DT is null))) and link.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = pln.HK_HUB
LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_CLIENTS clt on (clt.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') AND (clt.MD_END_DT> TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') OR (clt.MD_END_DT is null))) and link.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = clt.HK_HUB
LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_ACCOUNTS acc on (acc.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') AND (acc.MD_END_DT> TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') OR (acc.MD_END_DT is null))) and link.HK_HUB_CONTRACT = acc.HK_HUB
              '';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_DM_WT_TO_DM_DIM_FACT_REVENUES_INSERT"("ENV" VARCHAR(1000), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
DECLARE
INS_QUERY STRING;
BEGIN
INS_QUERY = "INSERT INTO DB_IAWT_"+ENV+"_DM.REVENUES.FACT_REVENUE(
HK_LINK,
MD_START_DT,
MD_CREATION_DT,
MD_CREATION_AUDIT_ID,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
MD_SECURITY_TYPE,
SK_DIM_CLIENTS,
SK_DIM_ADVISORS,
SK_DIM_PLANS,
SK_DIM_MARKETPRODUCTS,
SK_DIM_ACCOUNTS,
PAYMENT_DATE,
REVENUE_AMOUNT,
REVENUE_TYPE,
REVENUE_SUBTYPE,
AUA)
VALUES(
SELECT 
M.HK_LINK, 
M.MD_START_DT, 
CURRENT_TIMESTAMP(), 
CONCAT("+JOB_AUDIT_ID+",''#'',"+JOB_NAME+","+RUN_ID+"),
M.MD_SOURCE,
M.MD_SRC_SYSTEM,
M.MD_EXTRACT_DT,
M.MD_SECURITY_TYPE,
M.SK_DIM_CLIENTS,
M.SK_DIM_ADVISORS,
M.SK_DIM_PLANS,
M.SK_DIM_MARKETPRODUCTS,
M.SK_DIM_ACCOUNTS,
M.PAYMENT_DATE,
M.REVENUE_AMOUNT,
M.REVENUE_TYPE,
M.REVENUE_SUBTYPE,
M.AUA
FROM DB_IAWT_DEV_DM.REVENUES.WT_FACT_REVENUE M
RIGHT OUTER JOIN DB_IAWT_DEV_DM.REVENUES.FACT_REVENUE D
ON M.HK_LINK = D.HK_LINK
WHERE D.HK_LINK IS NULL);";

EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_DM_WT_TO_DM_FACT_HOLDINGS_INSERT"("ENV" VARCHAR(1000), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "DATA_START_DATE" VARCHAR(10), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
DECLARE
INS_QUERY STRING;
BEGIN
INS_QUERY = "INSERT INTO DB_IAWT_"+ENV+"_DM.HOLDINGS.FACT_HOLDINGS(
HK_LINK,
MD_START_DT,
MD_CREATION_DT,
MD_CREATION_AUDIT_ID,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
MD_SECURITY_TYPE,
SK_DIM_ACCOUNTS,
SK_DIM_MARKETPRODUCTS,
SK_DIM_ADVISORS,
SK_DIM_CLIENTS,
SK_DIM_PLANS,
RR_CD,
PLN_SYSID,
BALANCE_DATE,
HOLDING_VALUE,
AUA,
AUM,
AUM_CLARINGTON,
AUM_IA,
CASH_POSITION,
PROGRAM_TYPE,
ACCOUNT_PROGRAM_TYPE,
ADMINISTRATORY_TYPE)
VALUES(
SELECT 
M.HK_LINK, 
TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD''), 
CURRENT_TIMESTAMP(), 
CONCAT("+JOB_AUDIT_ID+",''#'',"+JOB_NAME+","+RUN_ID+"),
M.MD_SOURCE,
M.MD_SRC_SYSTEM,
M.MD_EXTRACT_DT,
M.MD_SECURITY_TYPE,
M.SK_DIM_ACCOUNTS,
M.SK_DIM_MARKETPRODUCTS,
M.SK_DIM_ADVISORS,
M.SK_DIM_CLIENTS,
M.SK_DIM_PLANS,
M.RR_CD,
M.PLN_SYSID,
M.BALANCE_DATE,
M.HOLDING_VALUE,
M.AUA,
M.AUM,
M.AUM_CLARINGTON,
M.AUM_IA,
M.CASH_POSITION,
M.PROGRAM_TYPE,
M.ACCOUNT_PROGRAM_TYPE,
M.ADMINISTRATORY_TYPE
FROM DB_IAWT_DEV_DM.HOLDINGS.WT_FACT_HOLDINGS M
RIGHT OUTER JOIN DB_IAWT_DEV_DM.HOLDINGS.FACT_HOLDINGS D
ON M.HK_LINK = D.HK_LINK
WHERE D.HK_LINK IS NULL);";
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_M_FACT_INSERT"("INSERT_COLS" VARCHAR(16777216), "SELECT_COLS" VARCHAR(16777216), "SRC_TBL" VARCHAR(16777216), "TGT_TBL" VARCHAR(16777216), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
DECLARE
INS_QUERY STRING;
BEGIN
INS_QUERY = "INSERT INTO "+ TGT_TBL + "(" + INSERT_COLS + ",MD_CREATION_AUDIT_ID)
VALUES(
SELECT 
" +  SELECT_COLS + ",
CONCAT("+JOB_AUDIT_ID+",''#'',"+JOB_NAME+","+RUN_ID+")
FROM "+SRC_TBL+" M
RIGHT OUTER JOIN "+TGT_TBL+" D
ON M.HK_LINK = D.HK_LINK
WHERE D.HK_LINK IS NULL);";
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_M_LOADDM_BDV_HOLDINGS_TO_DM_WT_FACT_HOLDINGS"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
TRUNC_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
TRUNC_QUERY := ''TRUNCATE TABLE DB_IAWT_''||ENV||''_DM.HOLDINGS.WT_FACT_HOLDINGS'';
INS_QUERY := ''
INSERT INTO
	DB_IAWT_''||ENV||''_DM.HOLDINGS.WT_FACT_HOLDINGS (
		HK_LINK,
		HK_HUB_CONTRACT,
		HK_HUB_INVESTMENT_PRODUCT_TYPE,
		HK_HUB_PARTY_ROLE_ADVISOR,
		HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
		HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
		MD_START_DT,
		MD_SOURCE,
		MD_SRC_SYSTEM,
		MD_EXTRACT_DT,
		SK_DIM_ACCOUNTS,
		SK_DIM_MARKETPRODUCTS,
		SK_DIM_ADVISORS,
		SK_DIM_CLIENTS,
		SK_DIM_PLANS,
		RR_CD,
		PLN_SYSID,
		BALANCE_DATE,
		HOLDING_VALUE,
		AUA,
		AUM,
		AUM_CLARINGTON,
		AUM_IA,
		CASH_POSITION,
		PROGRAM_TYPE,
		ACCOUNT_PROGRAM_TYPE,
		ADMINISTRATORY_TYPE )

	(
	SELECT 
	SLI.HK_LINK,
	LI.HK_HUB_CONTRACT,
	LI.HK_HUB_INVESTMENT_PRODUCT_TYPE,
	LI.HK_HUB_PARTY_ROLE_ADVISOR,
	LI.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	LI.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	SLI.MD_START_DT,
	SLI.MD_SOURCE,
	LI.MD_SRC_SYSTEM,
	LI.MD_EXTRACT_DT,
	CASE WHEN DAC.ID IS NULL THEN ''''-1'''' ELSE DAC.ID END AS O_ACNT_ID,
	CASE WHEN DFI.ID IS NULL THEN ''''-1'''' ELSE DFI.ID END AS O_PRODUCT_ID,
	CASE WHEN DA.ID IS NULL THEN ''''-1'''' ELSE DA.ID END AS O_ADV_ID,
	CASE WHEN DC.ID IS NULL THEN ''''-1'''' ELSE DC.ID END AS O_CLIENT_ID,
	CASE WHEN DP.ID IS NULL THEN ''''-1'''' ELSE DP.ID END AS O_PLAN_ID,
	SLI.RR_CD,
	SLI.PLN_SYSID,
	SLI.BALANCE_DATE,
	SLI.HOLDING_VALUE,
	SLI.AUA,
	SLI.AUM,
	SLI.AUM_CLARINGTON,
	SLI.AUM_IA,
	SLI.CASH_POSITION,
	SLI.PROGRAM_TYPE,
	SLI.ACCOUNT_PROGRAM_TYPE,
	SLI.ADMINISTRATORY_TYPE
	FROM DB_IAWT_''||ENV||''_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT SLI 
	JOIN DB_IAWT_''||ENV||''_DWH.HOLDINGS_BDV.LINK_INVESTMENT LI
	ON SLI.HK_LINK = LI.HK_LINK 
	JOIN DB_IAWT_''||ENV||''_DM.HOLDINGS.FACT_HOLDINGS FH
	ON LI.HK_LINK = FH.HK_LINK
	RIGHT OUTER JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_FINANCIAL_INSTRUMENTS DFI
	ON LI.HK_HUB_INVESTMENT_PRODUCT_TYPE = DFI.HK_HUB
	RIGHT OUTER JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_ADVISOR DA
	ON LI.HK_HUB_PARTY_ROLE_ADVISOR = DA.HK_HUB
	RIGHT OUTER JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_PLANS DP
	ON LI.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = DP.HK_HUB
	RIGHT OUTER JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_CLIENTS DC
	ON LI.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = DC.HK_HUB
	RIGHT OUTER JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_ACCOUNTS DAC
	ON LI.HK_HUB_CONTRACT = DAC.HK_HUB
	WHERE 
	SLI.MD_START_DT = TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') 
	AND FH.HK_LINK IS NULL
	AND (DFI.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (DFI.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR DFI.MD_END_DT IS NULL))
	AND (DA.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (DA.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR DA.MD_END_DT IS NULL))
	AND (DP.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (DP.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR DP.MD_END_DT IS NULL))
	AND (DC.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (DC.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR DC.MD_END_DT IS NULL))
	AND (DAC.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (DAC.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR DAC.MD_END_DT IS NULL)))
              '';
EXECUTE IMMEDIATE :TRUNC_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
use schema HOLDINGS_BKP;

create or replace TABLE FACT_HOLDINGS_BKP (
	MD_SRCSYSTEM VARCHAR(50),
	SK_DIM_ACCOUNTS VARCHAR(16777216),
	SK_DIM_MARKETPRODUCTS VARCHAR(16777216),
	SK_DIM_REGISTERED_REPRESENTATIVES VARCHAR(16777216),
	REP_CODE VARCHAR(50),
	SK_DIM_ADVISORS VARCHAR(50),
	SK_DIM_CLIENTS VARCHAR(16777216),
	PLN_SYSID VARCHAR(16777216),
	SK_DIM_PLANS VARCHAR(8000),
	BALANCE_DATE TIMESTAMP_NTZ(9),
	MARKET_VALUE NUMBER(38,9),
	AUA NUMBER(38,12),
	AUM NUMBER(38,12),
	AUM_CLARINGTON NUMBER(38,10),
	AUM_IA NUMBER(38,9),
	CASH_POSITION NUMBER(38,12),
	PROGRAM_TYPE VARCHAR(23),
	ACCOUNT_PROGRAM_TYPE VARCHAR(28),
	ADMINISTRATORY_TYPE VARCHAR(8000)
);
create or replace TABLE FUND2 (
	FUNDSERVID VARCHAR(1000) COMMENT 'Fund serv Id',
	FUNDID VARCHAR(1000) COMMENT 'Fund Id',
	FUNDDESCFR VARCHAR(1000) COMMENT 'Fund Desc FR',
	FUNDDESCEN VARCHAR(1000) COMMENT 'Fund Desc EN',
	FUNDTYPE VARCHAR(1000) COMMENT 'Fund Type',
	GROUPNAMEFR VARCHAR(1000) COMMENT 'Manager Name FR',
	GROUPNAMEEN VARCHAR(1000) COMMENT 'Manager Name EN',
	RRSPELIGIBLE VARCHAR(1000) COMMENT 'RRSP Eligible Indicator',
	FUNDDESCLONGFR VARCHAR(1000),
	FUNDDESCLONGEN VARCHAR(1000),
	LEGALNAMEEN VARCHAR(1000),
	LEGALNAMEFR VARCHAR(1000),
	STAMP VARCHAR(1000) COMMENT 'Last Modification Timestamp',
	MD_SRCSYSTEM VARCHAR(50),
	MD_LOADDATE TIMESTAMP_NTZ(9)
);
use schema PUBLIC;

create or replace TABLE D (
	COLUMN1 NUMBER(38,0)
);
use schema RECONCILIATION;

create or replace TABLE RECONCILE_EXCEPTIONS (
	NAME VARCHAR(1000) NOT NULL COMMENT 'Name of the Query that causes an exception',
	MD_START_DT TIMESTAMP_NTZ(9) NOT NULL COMMENT 'Data Start Date for exception',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Row inserted date',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Taskflow Audit Id',
	RETURNED_VALUE VARCHAR(1000) COMMENT 'Description if needed for clarity of exception',
	primary key (NAME, MD_START_DT)
);
create or replace TABLE RECONCILE_RESULTS (
	NAME VARCHAR(1000),
	MD_START_DT TIMESTAMP_NTZ(9),
	MD_CREATION_DT TIMESTAMP_NTZ(9),
	MD_CREATION_AUDIT_ID VARCHAR(1000),
	RESULT VARCHAR(2),
	DESCRIPTION VARCHAR(1000),
	DETAILS VARCHAR(200000)
);
create or replace TABLE RECONCILE_RULE_ENGINE (
	NAME VARCHAR(1000) COMMENT '[VERIFICATION LAYER]_[DATA ENTITY]_[VALIDATION]',
	MD_START_DT TIMESTAMP_NTZ(9),
	MD_END_DT TIMESTAMP_NTZ(9),
	MD_CREATION_DT TIMESTAMP_NTZ(9),
	MD_MODIFY_DT TIMESTAMP_NTZ(9),
	DESCRIPTION VARCHAR(5000) COMMENT 'validation',
	QUERY VARCHAR(200000) COMMENT 'INSERT SELECT INTO DB_IAWT_DEV_DM.VALIDATIONS.RECON_RESULTS TABLE'
);
create or replace TABLE RECONCILE_RULE_ENGINE_BKP (
	NAME VARCHAR(1000),
	MD_START_DT TIMESTAMP_NTZ(9),
	MD_END_DT TIMESTAMP_NTZ(9),
	MD_CREATION_DT TIMESTAMP_NTZ(9),
	MD_MODIFY_DT TIMESTAMP_NTZ(9),
	DESCRIPTION VARCHAR(5000),
	QUERY VARCHAR(200000)
);
CREATE OR REPLACE PROCEDURE "SP_CONV_RECONCILIATION"("ENV" VARCHAR(1000), "AUDIT_ID" VARCHAR(1000), "IO_DATA_START_DATE" VARCHAR(1000), "IO_NAME" VARCHAR(1000), "IO_PATTERN" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_CALL STRING;
BEGIN
IO_DATA_START_DATE :=CHAR(39)||IO_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAWT_''||ENV||''_DM.RECONCILIATION.RECONCILE_RESULTS WHERE MD_START_DT = to_date(''||IO_DATA_START_DATE||'') AND NAME LIKE COALESCE(''''%''||IO_PATTERN||''%'''', ''''''||IO_NAME||'''''')'';
INS_CALL := ''CALL DB_IAWT_''||ENV||''_DM.RECONCILIATION.USP_RECONCILE_CHECK(''''''||IO_NAME||'''''', ''||IO_DATA_START_DATE||'', ''''''||AUDIT_ID||'''''', ''''''||IO_PATTERN||'''''')'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_CALL;

END
';
CREATE OR REPLACE PROCEDURE "USP_RECONCILE_CHECK"("PNAME" VARCHAR(1000), "PDATA_START_DT" VARCHAR(20), "PAUDIT_ID" VARCHAR(1000), "PUSE_PATTERN" VARCHAR(10))
RETURNS VARCHAR(5000)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var vExceptionId;
var vExceptionMsg;
var vSQLExcpCmd;

//Stage 1: Check the Arguments Signature are Valid for the process to continue.
if ( PNAME.length <= 0 || PDATA_START_DT.length <= 0 || PAUDIT_ID.length <= 0 )
{
vExceptionId = "EXCEPTION:-1";
vExceptionMsg = " Signature Argument Missing";
return vExceptionId + "-" + vExceptionMsg;
}

//Stage 2: Compose the string based on Use Pattern
var vSQLCmd;
if ( PUSE_PATTERN==null )
{
vSQLCmd = " SELECT NAME, DESCRIPTION, QUERY FROM DB_IAWT_DEV_DM.RECONCILIATION.RECONCILE_RULE_ENGINE WHERE NAME = ''" + PNAME + "'' AND MD_END_DT IS NULL ";
}
else
{
vSQLCmd = " SELECT NAME, DESCRIPTION, QUERY FROM DB_IAWT_DEV_DM.RECONCILIATION.RECONCILE_RULE_ENGINE WHERE NAME LIKE ''%" + PUSE_PATTERN + "%'' AND MD_END_DT IS NULL ";
}
PUSE_PATTERN="N/A";

//Stage 3: Get the Rule query from the table object.
var vSQLStmt = snowflake.createStatement( { sqlText: vSQLCmd } );
var vSQLResult = vSQLStmt.execute();
var vName;

while (vSQLResult.next())
{
//try {
vName = vSQLResult.getColumnValue(1);
var desc = vSQLResult.getColumnValue(2);
var query = vSQLResult.getColumnValue(3); 	

//Stage 3: Search and replace place holder for Audit and Data Start Date.
query = query.replace(/@NAME@/g, vName);
query = query.replace(/@DATA_START_DT@/g, PDATA_START_DT);
query = query.replace(/@AUDIT_ID@/g,PAUDIT_ID); 
// Line Feed and CR elimination 
// If comments needs in query for rule engine use /* */ Do not use the -- comment style.
query = query.replace(/\\r/g," ");
query = query.replace(/\\n/g," ");

//Stage 4: Query fetched will be used to be executed for the final results.
var vSQLCmd2 = query;
var vSQLStmt2 = snowflake.createStatement( { sqlText: vSQLCmd2 } );
var vSQLResult2 = vSQLStmt2.execute();
//}
//catch(err)
//{
//vExceptionId = "-99";
//vExceptionMsg = " Fetch While Loop Not Successful" + "  Query Statement: " + vName + err;
//return err;
//}
}

vExceptionId = "EXCEPTION:0";
vExceptionMsg = " " + PNAME + " " + PDATA_START_DT + " With Pattern if Any  "  + PUSE_PATTERN +  " Successful";
return vExceptionId + "-" + vExceptionMsg;
';
use schema REVENUES;

create or replace TABLE FACT_REVENUE (
	ID NUMBER(38,0) autoincrement COMMENT 'Surrogate key of the dimension',
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_SECURITY_TYPE VARCHAR(1000) COMMENT 'Capabilities for RLS',
	SK_DIM_CLIENTS NUMBER(38,0),
	SK_DIM_ADVISORS NUMBER(38,0),
	SK_DIM_PLANS NUMBER(38,0),
	SK_DIM_MARKETPRODUCTS NUMBER(38,0),
	SK_DIM_ACCOUNTS NUMBER(38,0),
	PAYMENT_DATE TIMESTAMP_NTZ(9) COMMENT 'Process Date',
	REVENUE_AMOUNT NUMBER(38,12) COMMENT 'REVENUE AMOUNT',
	REVENUE_TYPE VARCHAR(512) COMMENT 'REVENUE TYPE',
	REVENUE_SUBTYPE VARCHAR(512) COMMENT 'REVENUE SUBTYPE',
	AUA NUMBER(38,12) COMMENT 'AUA'
);
create or replace TABLE WT_FACT_REVENUE (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_SECURITY_TYPE VARCHAR(1000) COMMENT 'Capabilities for RLS',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key HUB_PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for HUB_REGISTERED_REPRESENTATIVE_COMMISSION',
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for REF_MAPPING_PRODUCT_TYPE',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	SK_DIM_CLIENTS NUMBER(38,0),
	SK_DIM_ADVISORS NUMBER(38,0),
	SK_DIM_PLANS NUMBER(38,0),
	SK_DIM_MARKETPRODUCTS NUMBER(38,0),
	SK_DIM_ACCOUNTS NUMBER(38,0),
	PAYMENT_DATE TIMESTAMP_NTZ(9) COMMENT 'Process Date',
	REVENUE_AMOUNT NUMBER(38,12) COMMENT 'REVENUE AMOUNT',
	REVENUE_TYPE VARCHAR(512) COMMENT 'REVENUE TYPE',
	REVENUE_SUBTYPE VARCHAR(512) COMMENT 'REVENUE SUBTYPE',
	AUA NUMBER(38,12) COMMENT 'AUA'
);
create or replace view VW_FACT_REVENUES(
	MD_SRCSYSTEM,
	SK_DIM_ACCOUNTS,
	SK_DIM_MARKETPRODUCTS,
	SK_ADVISORS,
	SK_DIM_CLIENTS,
	SK_DIM_PLANS,
	"Payment date",
	"Revenue type",
	"Revenue amount",
	REVENUE_SUBTYPE,
	AUA
) as 
SELECT  
	MD_SRC_SYSTEM ,
	SK_DIM_ACCOUNTS ,
	SK_DIM_MARKETPRODUCTS ,
	SK_DIM_ADVISORS ,
	SK_DIM_CLIENTS ,
	SK_DIM_PLANS ,
	PAYMENT_DATE ,
	REVENUE_TYPE ,
	REVENUE_AMOUNT ,
	REVENUE_SUBTYPE ,
	AUA 
FROM REVENUES.FACT_REVENUE
WHERE DATE(PAYMENT_DATE) >= (SELECT DATE(DATEADD(YEAR, -2,MAX(PAYMENT_DATE) ))  FROM REVENUES.FACT_REVENUE) 
order by SK_DIM_MARKETPRODUCTS,SK_DIM_ADVISORS,SK_DIM_CLIENTS,SK_DIM_PLANS,REVENUE_TYPE;
create or replace view VW_INITIAL_LOADING_WT_FACT_REVENUES(
	MD_START_DT,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	MD_SOURCE,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_CONTRACT,
	SK_DIM_CLIENTS,
	SK_DIM_ADVISORS,
	SK_DIM_PLANS,
	SK_DIM_MARKETPRODUCTS,
	SK_DIM_ACCOUNTS,
	PAYMENT_DATE,
	REVENUE,
	REVENUE_TYPE,
	REVENUE_SUBTYPE
) as
SELECT 
	MAX(MD_START_DT) AS MD_START_DT,
	MAX(MD_SRC_SYSTEM) AS MD_SRC_SYSTEM,
	MAX(MD_EXTRACT_DT) AS MD_EXTRACT_DT,
	MAX(MD_SOURCE) AS MD_SOURCE,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_CONTRACT,
	SK_DIM_CLIENTS,
	SK_DIM_ADVISORS,
	SK_DIM_PLANS,
	SK_DIM_MARKETPRODUCTS,
	SK_DIM_ACCOUNTS,
	PAYMENT_DATE,
	SUM(REVENUE) AS REVENUE,
	REVENUE_TYPE,
	REVENUE_SUBTYPE
FROM (
SELECT
	DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.MD_START_DT,
	DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.MD_SRC_SYSTEM,
	DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.MD_EXTRACT_DT,
	DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.MD_SOURCE,
	DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.HK_HUB_PARTY_ROLE_ADVISOR,
	DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES,
	DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.HK_HUB_INVESTMENT_PRODUCT_TYPE,
	DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.HK_HUB_CONTRACT,
	CAST(CAST(
	(CASE WHEN SHARED.DIM_CLIENTS.ID IS NULL THEN -1
	ELSE SHARED.DIM_CLIENTS.ID
END) AS VARCHAR(252)) AS FLOAT) SK_DIM_CLIENTS,
	CAST(CAST(
	(CASE WHEN SHARED.DIM_ADVISOR.ID IS NULL THEN -1
	ELSE SHARED.DIM_ADVISOR.ID
END) AS VARCHAR(252)) AS FLOAT) AS SK_DIM_ADVISORS,
	CAST(CAST(
	(CASE WHEN SHARED.DIM_PLANS.ID IS NULL THEN -1
	ELSE SHARED.DIM_PLANS.ID
END) AS VARCHAR(251)) AS FLOAT) AS SK_DIM_PLANS,
	CAST(CAST(
	(CASE WHEN SHARED.DIM_FINANCIAL_INSTRUMENTS.ID IS NULL THEN -1
	ELSE SHARED.DIM_FINANCIAL_INSTRUMENTS.ID
END) AS VARCHAR(252)) AS FLOAT) AS SK_DIM_MARKETPRODUCTS,
	CAST(CAST(
	(CASE WHEN SHARED.DIM_ACCOUNTS.ID IS NULL THEN -1
	ELSE SHARED.DIM_ACCOUNTS.ID
END) AS VARCHAR(252)) AS FLOAT) AS SK_DIM_ACCOUNTS,
	DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.PAYMENT_DATE,
	DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.REVENUE,
	DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.REVENUE_TYPE,
	DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.REVENUE_SUBTYPE
FROM
	(SHARED.DIM_ACCOUNTS
RIGHT OUTER JOIN (SHARED.DIM_CLIENTS
RIGHT OUTER JOIN (SHARED.DIM_PLANS
RIGHT OUTER JOIN (SHARED.DIM_ADVISOR
RIGHT OUTER JOIN (SHARED.DIM_FINANCIAL_INSTRUMENTS
RIGHT OUTER JOIN DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE ON
	(DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.HK_HUB_INVESTMENT_PRODUCT_TYPE = SHARED.DIM_FINANCIAL_INSTRUMENTS.HK_HUB)
	AND ((SHARED.DIM_FINANCIAL_INSTRUMENTS.MD_START_DT <= DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.MD_START_DT)
		AND ((SHARED.DIM_FINANCIAL_INSTRUMENTS.MD_END_DT > DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.MD_START_DT)
			OR SHARED.DIM_FINANCIAL_INSTRUMENTS.MD_END_DT IS NULL))) ON
	(DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.HK_HUB_PARTY_ROLE_ADVISOR = SHARED.DIM_ADVISOR.HK_HUB)
	AND ((SHARED.DIM_ADVISOR.MD_START_DT <= DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.MD_START_DT)
		AND ((SHARED.DIM_ADVISOR.MD_END_DT > DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.MD_START_DT)
			OR SHARED.DIM_ADVISOR.MD_END_DT IS NULL))) ON
	(DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES = SHARED.DIM_PLANS.HK_HUB)
	AND ((SHARED.DIM_PLANS.MD_START_DT <= DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.MD_START_DT)
		AND ((SHARED.DIM_PLANS.MD_END_DT > DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.MD_START_DT)
			OR SHARED.DIM_PLANS.MD_END_DT IS NULL))) ON
	(DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = SHARED.DIM_CLIENTS.HK_HUB)
	AND ((SHARED.DIM_CLIENTS.MD_START_DT <= DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.MD_START_DT)
		AND ((SHARED.DIM_CLIENTS.MD_END_DT > DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.MD_START_DT)
			OR SHARED.DIM_CLIENTS.MD_END_DT IS NULL))) ON
	(DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.HK_HUB_CONTRACT = SHARED.DIM_ACCOUNTS.HK_HUB)
	AND ((SHARED.DIM_ACCOUNTS.MD_START_DT <= DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.MD_START_DT)
		AND ((SHARED.DIM_ACCOUNTS.MD_END_DT > DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE.MD_START_DT)
			OR SHARED.DIM_ACCOUNTS.MD_END_DT IS NULL)))
)			
GROUP BY
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_CONTRACT,
	PAYMENT_DATE,
	REVENUE_TYPE,
	REVENUE_SUBTYPE,
	SK_DIM_MARKETPRODUCTS,
	SK_DIM_ADVISORS,
	SK_DIM_PLANS,
	SK_DIM_CLIENTS,
	SK_DIM_ACCOUNTS;
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_BDV_HOLDINGS_TO_DM_WT_FACT_HOLDINGS"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(10))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
DECLARE
TRUNC_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
TRUNC_QUERY := "TRUNCATE TABLE DB_IAWT_"+ENV+"_DM.HOLDINGS.WT_FACT_HOLDINGS;";
INS_QUERY := "
INSERT INTO
	DB_IAWT_"+ENV+"_DM.HOLDINGS.WT_FACT_HOLDINGS (
		HK_LINK,
		HK_HUB_CONTRACT,
		HK_HUB_INVESTMENT_PRODUCT_TYPE,
		HK_HUB_PARTY_ROLE_ADVISOR,
		HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
		HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
		MD_START_DT,
		MD_SOURCE,
		MD_SRC_SYSTEM,
		MD_EXTRACT_DT,
		MD_SECURITY_TYPE,
		SK_DIM_ACCOUNTS,
		SK_DIM_MARKETPRODUCTS,
		SK_DIM_ADVISORS,
		SK_DIM_CLIENTS,
		SK_DIM_PLANS,
		RR_CD,
		PLN_SYSID,
		BALANCE_DATE,
		HOLDING_VALUE,
		AUA,
		AUM,
		AUM_CLARINGTON,
		AUM_IA,
		CASH_POSITION,
		PROGRAM_TYPE,
		ACCOUNT_PROGRAM_TYPE,
		ADMINISTRATORY_TYPE )
VALUES
	(
	SELECT 
	SLI.HK_LINK,
	LI.HK_HUB_CONTRACT,
	LI.HK_HUB_INVESTMENT_PRODUCT_TYPE,
	LI.HK_HUB_PARTY_ROLE_ADVISOR,
	LI.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	LI.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	SLI.MD_START_DT,
	SLI.MD_SOURCE,
	LI.MD_SRC_SYSTEM,
	LI.MD_EXTRACT_DT,
	CASE WHEN DAC.ID IS NULL THEN ''-1'' ELSE DAC.ID END AS O_ACNT_ID,
	CASE WHEN DFI.ID IS NULL THEN ''-1'' ELSE DFI.ID END AS O_PRODUCT_ID,
	CASE WHEN DA.ID IS NULL THEN ''-1'' ELSE DA.ID END AS O_ADV_ID,
	CASE WHEN DC.ID IS NULL THEN ''-1'' ELSE DC.ID END AS O_CLIENT_ID,
	CASE WHEN DP.ID IS NULL THEN ''-1'' ELSE DP.ID END AS O_PLAN_ID,
	SLI.RR_CD,
	SLI.PLN_SYSID,
	SLI.BALANCE_DATE,
	SLI.HOLDING_VALUE,
	SLI.AUA,
	SLI.AUM,
	SLI.AUM_CLARINGTON,
	SLI.AUM_IA,
	SLI.CASH_POSITION,
	SLI.PROGRAM_TYPE,
	SLI.ACCOUNT_PROGRAM_TYPE,
	SLI.ADMINISTRATORY_TYPE
	FROM DB_IAWT_DEV_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT SLI 
	JOIN DB_IAWT_DEV_DWH.HOLDINGS_BDV.LINK_INVESTMENT LI
	ON SLI.HK_LINK = LI.HK_LINK 
	JOIN DB_IAWT_DEV_DM.HOLDINGS.FACT_HOLDINGS FH
	ON LI.HK_LINK = FH.HK_LINK
	RIGHT OUTER JOIN DB_IAWT_"+ENV+"_DM.SHARED.DIM_FINANCIAL_INSTRUMENTS DFI
	ON LI.HK_HUB_INVESTMENT_PRODUCT_TYPE = DFI.HK_HUB
	RIGHT OUTER JOIN DB_IAWT_"+ENV+"_DM.SHARED.DIM_ADVISOR DA
	ON LI.HK_HUB_PARTY_ROLE_ADVISOR = DA.HK_HUB
	RIGHT OUTER JOIN DB_IAWT_"+ENV+"_DM.SHARED.DIM_PLANS DP
	ON LI.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = DP.HK_HUB
	RIGHT OUTER JOIN DB_IAWT_"+ENV+"_DM.SHARED.DIM_CLIENTS DC
	ON LI.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = DC.HK_HUB
	RIGHT OUTER JOIN DB_IAWT_"+ENV+"_DM.SHARED.DIM_ACCOUNTS DAC
	ON LI.HK_HUB_CONTRACT = DAC.HK_HUB
	WHERE 
	SLI.MD_START_DT = TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') 
	AND FH.HK_LINK IS NULL
	AND (DFI.MD_START_DT <= TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') AND (DFI.MD_END_DT> TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') OR DFI.MD_END_DT = ''''))
	AND (DA.MD_START_DT <= TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') AND (DA.MD_END_DT> TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') OR DA.MD_END_DT = ''''))
	AND (DP.MD_START_DT <= TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') AND (DP.MD_END_DT> TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') OR DP.MD_END_DT = ''''))
	AND (DC.MD_START_DT <= TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') AND (DC.MD_END_DT> TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') OR DC.MD_END_DT = ''''))
	AND (DAC.MD_START_DT <= TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') AND (DAC.MD_END_DT> TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') OR DAC.MD_END_DT = ''''));
              ";
EXECUTE IMMEDIATE :TRUNC_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_BDV_REVENUES_TO_DM_WT_FACT_REVENUES"("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''TRUNCATE TABLE DB_IAWT_''||ENV||''_DM.REVENUES.WT_FACT_REVENUE  '';
INS_INSERT := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.REVENUES.WT_FACT_REVENUE(
MD_START_DT
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,MD_SOURCE
,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
,HK_HUB_PARTY_ROLE_ADVISOR
,HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES
,HK_HUB_INVESTMENT_PRODUCT_TYPE
,HK_HUB_CONTRACT
,SK_DIM_CLIENTS
,SK_DIM_ADVISORS
,SK_DIM_PLANS
,SK_DIM_MARKETPRODUCTS
,SK_DIM_ACCOUNTS
,PAYMENT_DATE
,REVENUE_AMOUNT
,REVENUE_TYPE
,REVENUE_SUBTYPE
)
SELECT
MAX(REV.MD_START_DT)
,MAX(REV.MD_SRC_SYSTEM)
,MAX(REV.MD_EXTRACT_DT)
,MAX(REV.MD_SOURCE)
,REV.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
,REV.HK_HUB_PARTY_ROLE_ADVISOR
,REV.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES
,REV.HK_HUB_INVESTMENT_PRODUCT_TYPE
,REV.HK_HUB_CONTRACT
,REV.O_CLIENT_ID
,REV.O_ADV_ID
,REV.O_PLAN_ID
,REV.O_PRODUCT_ID
,REV.O_ACNT_ID
,REV.PAYMENT_DATE
,SUM(REV.REVENUE)
,REV.REVENUE_TYPE
,REV.REVENUE_SUBTYPE
FROM
(
SELECT * FROM (SELECT * FROM DB_IAWT_''||ENV||''_DWH.REVENUES_BDV.LINK_REVENUE WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) LNK_REV
LEFT JOIN
(SELECT (CASE WHEN ID IS NULL THEN -1 ELSE ID END) O_PRODUCT_ID , HK_HUB FROM (SELECT * FROM DB_IAWT_''||ENV||''_DM.SHARED.DIM_FINANCIAL_INSTRUMENTS WHERE (MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (MD_END_DT> TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') OR (MD_END_DT IS NULL)))) PROD) PROD
ON LNK_REV.HK_HUB_INVESTMENT_PRODUCT_TYPE = PROD.HK_HUB
LEFT JOIN
(SELECT (CASE WHEN ID IS NULL THEN -1 ELSE ID END) O_ADV_ID , HK_HUB  FROM (SELECT * FROM DB_IAWT_''||ENV||''_DM.SHARED.DIM_ADVISOR WHERE (MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (MD_END_DT> TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') OR (MD_END_DT IS NULL)))) ADV ) ADV
ON LNK_REV.HK_HUB_PARTY_ROLE_ADVISOR = ADV.HK_HUB
LEFT JOIN
(SELECT (CASE WHEN ID IS NULL THEN -1 ELSE ID END) O_PLAN_ID , HK_HUB  FROM (SELECT * FROM DB_IAWT_''||ENV||''_DM.SHARED.DIM_PLANS WHERE (MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (MD_END_DT> TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') OR (MD_END_DT IS NULL)))) PLAN) PLAN
ON LNK_REV.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES = PLAN.HK_HUB
LEFT JOIN
(SELECT (CASE WHEN ID IS NULL THEN -1 ELSE ID END) O_CLIENT_ID , HK_HUB  FROM (SELECT * FROM DB_IAWT_''||ENV||''_DM.SHARED.DIM_CLIENTS WHERE (MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (MD_END_DT> TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') OR (MD_END_DT IS NULL)))) CLT) CLT
ON LNK_REV.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = CLT.HK_HUB
LEFT JOIN
(SELECT (CASE WHEN ID IS NULL THEN -1 ELSE ID END) O_ACNT_ID , HK_HUB  FROM (SELECT * FROM DB_IAWT_''||ENV||''_DM.SHARED.DIM_ACCOUNTS WHERE (MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (MD_END_DT> TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') OR (MD_END_DT IS NULL)))) ACT) ACT
ON LNK_REV.HK_HUB_CONTRACT = ACT.HK_HUB
)REV 
GROUP BY (REV.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,REV.HK_HUB_PARTY_ROLE_ADVISOR,REV.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES,REV.HK_HUB_INVESTMENT_PRODUCT_TYPE,REV.HK_HUB_CONTRACT,REV.O_CLIENT_ID,REV.O_ADV_ID,REV.O_PLAN_ID,REV.O_PRODUCT_ID,REV.O_ACNT_ID ,REV.PAYMENT_DATE,REV.REVENUE_TYPE,REV.REVENUE_SUBTYPE)
			
              '';
INS_UPDATE :='' UPDATE DB_IAWT_''||ENV||''_DM.REVENUES.WT_FACT_REVENUE
SET
HK_LINK = SHA1(UPPER(CONCAT(
	  COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_PARTY_ROLE_ADVISOR), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_INVESTMENT_PRODUCT_TYPE), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_CONTRACT), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(PAYMENT_DATE), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(REVENUE_TYPE), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(REVENUE_SUBTYPE), ''''#NULL#'''')
	)))
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_BDV_REVENUES_TO_DM_WT_FACT_REVENUES"("ENV" VARCHAR(1000), "JOB_NAME" VARCHAR(16777216), "DATA_START_DT" VARCHAR(10), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
DECLARE
TRUNC_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
TRUNC_QUERY := "TRUNCATE TABLE DB_IAWT_"+ENV+"_DM.REVENUES.WT_FACT_REVENUE;";
INS_COPY_QUERY := "
INSERT INTO
	DB_IAWT_"+ENV+"_DM.REVENUES.WT_FACT_REVENUE (
		MD_START_DT, 
		MD_SRC_SYSTEM, 
		MD_EXTRACT_DT, 
		MD_SOURCE, 
		HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
		HK_HUB_PARTY_ROLE_ADVISOR, 
		HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES, 
		HK_HUB_INVESTMENT_PRODUCT_TYPE, 
		HK_HUB_CONTRACT, SK_DIM_CLIENTS, 
		SK_DIM_ADVISORS, SK_DIM_PLANS, 
		SK_DIM_MARKETPRODUCTS, 
		SK_DIM_ACCOUNTS, 
		PAYMENT_DATE, 
		REVENUE_AMOUNT, 
		REVENUE_TYPE, 
		REVENUE_SUBTYPE )
VALUES
	(
	SELECT 
	MAX(LR.MD_START_DT) AS o_MAX_START_DATE,
	MAX(LR.MD_SRC_SYSTEM) AS o_MAX_MD_SRC_SYSTEM,
	MAX(LR.MD_EXTRACT_DT) AS o_MAX_MD_EXTRACT_DT,
	MAX(LR.MD_SOURCE) AS o_MAX_MD_SOURCE,
	LR.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	LR.HK_HUB_PARTY_ROLE_ADVISOR, 
	LR.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES,
	LR.HK_HUB_INVESTMENT_PRODUCT_TYPE,
	LR.HK_HUB_CONTRACT,
	CASE WHEN DC.ID IS NULL THEN ''-1'' ELSE DC.ID END AS o_CLIENT_ID,
	CASE WHEN DA.ID IS NULL THEN ''-1'' ELSE DFI.ID END AS o_ADV_ID,
	CASE WHEN DP.ID IS NULL THEN ''-1'' ELSE DP.ID END AS o_PLAN_ID,
	CASE WHEN DFI.ID IS NULL THEN ''-1'' ELSE DFI.ID END AS o_Product_ID,
	CASE WHEN DAC.ID IS NULL THEN ''-1'' ELSE DAC.ID END AS o_ACNT_ID,
	LR.PAYMENT_DATE,
	SUM(LR.REVENUE) AS o_SUM_REVENUE,
	LR.REVENUE_TYPE,
	LR.REVENUE_SUBTYPE
	FROM DB_IAWT_DEV_DWH.REVENUES_BDV.LINK_REVENUE LR 
	LEFT JOIN DB_IAWT_DEV_DM.SHARED.DIM_FINANCIAL_INSTRUMENTS DFI
	ON LR.HK_HUB_INVESTMENT_PRODUCT_TYPE = DFI.HK_HUB 
	LEFT JOIN DB_IAWT_DEV_DM.SHARED.DIM_ADVISOR DA
	ON LR.HK_HUB_PARTY_ROLE_ADVISOR = DA.HK_HUB
	LEFT JOIN DB_IAWT_DEV_DM.SHARED.DIM_PLANS DP
	ON LR.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES = DP.HK_HUB
	LEFT JOIN DB_IAWT_DEV_DM.SHARED.DIM_CLIENTS DC
	ON LR.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = DC.HK_HUB
	LEFT JOIN DB_IAWT_DEV_DM.SHARED.DIM_ACCOUNTS DAC
	ON LR.HK_HUB_CONTRACT = DAC.HK_HUB
	WHERE 
	LR.MD_START_DT = TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') 
	AND (DFI.MD_START_DT <= TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') AND (DFI.MD_END_DT> TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') OR DFI.MD_END_DT = ''''))
	AND (DA.MD_START_DT <= TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') AND (DA.MD_END_DT> TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') OR DA.MD_END_DT = ''''))
	AND (DP.MD_START_DT <= TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') AND (DP.MD_END_DT> TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') OR DP.MD_END_DT = ''''))
	AND (DC.MD_START_DT <= TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') AND (DC.MD_END_DT> TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') OR DC.MD_END_DT = ''''))
	AND (DAC.MD_START_DT <= TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') AND (DAC.MD_END_DT> TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD'') OR DAC.MD_END_DT = ''''))
	GROUP BY 
	LR.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, LR.HK_HUB_PARTY_ROLE_ADVISOR, LR.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES, LR.HK_HUB_INVESTMENT_PRODUCT_TYPE, LR.HK_HUB_CONTRACT, o_ACNT_ID, o_CLIENT_ID, o_PLAN_ID, o_ADV_ID, o_PRODUCT_ID, LR.REVENUE_TYPE, LR.REVENUE_SUBTYPE, LR.PAYMENT_DATE, LR.REVENUE;
              ";

UPD_QUERY := "UPDATE DB_IAWT_"+ENV+"_DM.REVENUES.WT_FACT_REVENUE SET
	HK_LINK = SHA1(UPPER(CONCAT(
	  COALESCE(TRIM(MD_SRC_SYSTEM), ''#NULL#''), ''|''
	, COALESCE(TRIM(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER), ''#NULL#''), ''|''
	, COALESCE(TRIM(HK_HUB_PARTY_ROLE_ADVISOR), ''#NULL#''), ''|''
	, COALESCE(TRIM(HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES), ''#NULL#''), ''|''
	, COALESCE(TRIM(HK_HUB_INVESTMENT_PRODUCT_TYPE), ''#NULL#''), ''|''
	, COALESCE(TRIM(HK_HUB_CONTRACT), ''#NULL#''), ''|''
	, COALESCE(TRIM(PAYMENT_DATE), ''#NULL#''), ''|''
	, COALESCE(TRIM(REVENUE_TYPE), ''#NULL#''), ''|''
	, COALESCE(TRIM(REVENUE_SUBTYPE), ''#NULL#'')
	)))
	Where 1=1";

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_BDV_REVENUES_TO_DM_WT_FACT_REVENUES_UNIVERIS"("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''TRUNCATE TABLE DB_IAWT_''||ENV||''_DM.REVENUES.WT_FACT_REVENUE  '';
INS_INSERT := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.REVENUES.WT_FACT_REVENUE(
MD_START_DT
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,MD_SOURCE
,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
,HK_HUB_PARTY_ROLE_ADVISOR
,HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES
,HK_HUB_INVESTMENT_PRODUCT_TYPE
,HK_HUB_CONTRACT
,SK_DIM_CLIENTS
,SK_DIM_ADVISORS
,SK_DIM_PLANS
,SK_DIM_MARKETPRODUCTS
,SK_DIM_ACCOUNTS
,PAYMENT_DATE
,REVENUE_AMOUNT
,REVENUE_TYPE
,REVENUE_SUBTYPE
)
SELECT
MAX(REV.MD_START_DT)
,MAX(REV.MD_SRC_SYSTEM)
,MAX(REV.MD_EXTRACT_DT)
,MAX(REV.MD_SOURCE)
,REV.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
,REV.HK_HUB_PARTY_ROLE_ADVISOR
,REV.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES
,REV.HK_HUB_INVESTMENT_PRODUCT_TYPE
,REV.HK_HUB_CONTRACT
,REV.O_CLIENT_ID
,REV.O_ADV_ID
,REV.O_PLAN_ID
,REV.O_PRODUCT_ID
,REV.O_ACNT_ID
,REV.PAYMENT_DATE
,SUM(REV.REVENUE)
,REV.REVENUE_TYPE
,REV.REVENUE_SUBTYPE
FROM
(
SELECT * FROM (SELECT * FROM DB_IAWT_''||ENV||''_DWH.REVENUES_BDV.LINK_REVENUE WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (MD_SRC_SYSTEM = ''''IAS-UNIVERIS'''')) LNK_REV
LEFT JOIN
(SELECT (CASE WHEN ID IS NULL THEN -1 ELSE ID END) O_PRODUCT_ID , HK_HUB FROM (SELECT * FROM DB_IAWT_''||ENV||''_DM.SHARED.DIM_FINANCIAL_INSTRUMENTS WHERE (MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (MD_END_DT> TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') OR (MD_END_DT IS NULL)))) PROD) PROD
ON LNK_REV.HK_HUB_INVESTMENT_PRODUCT_TYPE = PROD.HK_HUB
LEFT JOIN
(SELECT (CASE WHEN ID IS NULL THEN -1 ELSE ID END) O_ADV_ID , HK_HUB  FROM (SELECT * FROM DB_IAWT_''||ENV||''_DM.SHARED.DIM_ADVISOR WHERE (MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (MD_END_DT> TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') OR (MD_END_DT IS NULL)))) ADV ) ADV
ON LNK_REV.HK_HUB_PARTY_ROLE_ADVISOR = ADV.HK_HUB
LEFT JOIN
(SELECT (CASE WHEN ID IS NULL THEN -1 ELSE ID END) O_PLAN_ID , HK_HUB  FROM (SELECT * FROM DB_IAWT_''||ENV||''_DM.SHARED.DIM_PLANS WHERE (MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (MD_END_DT> TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') OR (MD_END_DT IS NULL)))) PLAN) PLAN
ON LNK_REV.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES = PLAN.HK_HUB
LEFT JOIN
(SELECT (CASE WHEN ID IS NULL THEN -1 ELSE ID END) O_CLIENT_ID , HK_HUB  FROM (SELECT * FROM DB_IAWT_''||ENV||''_DM.SHARED.DIM_CLIENTS WHERE (MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (MD_END_DT> TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') OR (MD_END_DT IS NULL)))) CLT) CLT
ON LNK_REV.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = CLT.HK_HUB
LEFT JOIN
(SELECT (CASE WHEN ID IS NULL THEN -1 ELSE ID END) O_ACNT_ID , HK_HUB  FROM (SELECT * FROM DB_IAWT_''||ENV||''_DM.SHARED.DIM_ACCOUNTS WHERE (MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (MD_END_DT> TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') OR (MD_END_DT IS NULL)))) ACT) ACT
ON LNK_REV.HK_HUB_CONTRACT = ACT.HK_HUB
)REV 
GROUP BY (REV.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,REV.HK_HUB_PARTY_ROLE_ADVISOR,REV.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES,REV.HK_HUB_INVESTMENT_PRODUCT_TYPE,REV.HK_HUB_CONTRACT,REV.O_CLIENT_ID,REV.O_ADV_ID,REV.O_PLAN_ID,REV.O_PRODUCT_ID,REV.O_ACNT_ID ,REV.PAYMENT_DATE,REV.REVENUE_TYPE,REV.REVENUE_SUBTYPE)
			
              '';
INS_UPDATE :='' UPDATE DB_IAWT_''||ENV||''_DM.REVENUES.WT_FACT_REVENUE
SET
HK_LINK = SHA1(UPPER(CONCAT(
	  COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_PARTY_ROLE_ADVISOR), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_INVESTMENT_PRODUCT_TYPE), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_CONTRACT), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(PAYMENT_DATE), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(REVENUE_TYPE), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(REVENUE_SUBTYPE), ''''#NULL#'''')
	)))
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_DM_WT_TO_DM_DIM_FACT_REVENUES_INSERT"("ENV" VARCHAR(1000), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
DECLARE
INS_QUERY STRING;
BEGIN
INS_QUERY = "INSERT INTO DB_IAWT_"+ENV+"_DM.REVENUES.FACT_REVENUE(
HK_LINK,
MD_START_DT,
MD_CREATION_DT,
MD_CREATION_AUDIT_ID,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
MD_SECURITY_TYPE,
SK_DIM_CLIENTS,
SK_DIM_ADVISORS,
SK_DIM_PLANS,
SK_DIM_MARKETPRODUCTS,
SK_DIM_ACCOUNTS,
PAYMENT_DATE,
REVENUE_AMOUNT,
REVENUE_TYPE,
REVENUE_SUBTYPE,
AUA)
VALUES(
SELECT 
M.HK_LINK, 
M.MD_START_DT, 
CURRENT_TIMESTAMP(), 
CONCAT("+JOB_AUDIT_ID+",''#'',"+JOB_NAME+","+RUN_ID+"),
M.MD_SOURCE,
M.MD_SRC_SYSTEM,
M.MD_EXTRACT_DT,
M.MD_SECURITY_TYPE,
M.SK_DIM_CLIENTS,
M.SK_DIM_ADVISORS,
M.SK_DIM_PLANS,
M.SK_DIM_MARKETPRODUCTS,
M.SK_DIM_ACCOUNTS,
M.PAYMENT_DATE,
M.REVENUE_AMOUNT,
M.REVENUE_TYPE,
M.REVENUE_SUBTYPE,
M.AUA
FROM DB_IAWT_DEV_DM.REVENUES.WT_FACT_REVENUE M
RIGHT OUTER JOIN DB_IAWT_DEV_DM.REVENUES.FACT_REVENUE D
ON M.HK_LINK = D.HK_LINK
WHERE D.HK_LINK IS NULL);";

EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_DM_WT_TO_DM_FACT_HOLDINGS_INSERT"("ENV" VARCHAR(1000), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "DATA_START_DATE" VARCHAR(10), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
DECLARE
INS_QUERY STRING;
BEGIN
INS_QUERY = "INSERT INTO DB_IAWT_"+ENV+"_DM.HOLDINGS.FACT_HOLDINGS(
HK_LINK,
MD_START_DT,
MD_CREATION_DT,
MD_CREATION_AUDIT_ID,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
MD_SECURITY_TYPE,
SK_DIM_ACCOUNTS,
SK_DIM_MARKETPRODUCTS,
SK_DIM_ADVISORS,
SK_DIM_CLIENTS,
SK_DIM_PLANS,
RR_CD,
PLN_SYSID,
BALANCE_DATE,
HOLDING_VALUE,
AUA,
AUM,
AUM_CLARINGTON,
AUM_IA,
CASH_POSITION,
PROGRAM_TYPE,
ACCOUNT_PROGRAM_TYPE,
ADMINISTRATORY_TYPE)
VALUES(
SELECT 
M.HK_LINK, 
TO_DATE("+ DATA_START_DATE +",''YYYY-MM-DD''), 
CURRENT_TIMESTAMP(), 
CONCAT("+JOB_AUDIT_ID+",''#'',"+JOB_NAME+","+RUN_ID+"),
M.MD_SOURCE,
M.MD_SRC_SYSTEM,
M.MD_EXTRACT_DT,
M.MD_SECURITY_TYPE,
M.SK_DIM_ACCOUNTS,
M.SK_DIM_MARKETPRODUCTS,
M.SK_DIM_ADVISORS,
M.SK_DIM_CLIENTS,
M.SK_DIM_PLANS,
M.RR_CD,
M.PLN_SYSID,
M.BALANCE_DATE,
M.HOLDING_VALUE,
M.AUA,
M.AUM,
M.AUM_CLARINGTON,
M.AUM_IA,
M.CASH_POSITION,
M.PROGRAM_TYPE,
M.ACCOUNT_PROGRAM_TYPE,
M.ADMINISTRATORY_TYPE
FROM DB_IAWT_DEV_DM.HOLDINGS.WT_FACT_HOLDINGS M
RIGHT OUTER JOIN DB_IAWT_DEV_DM.HOLDINGS.FACT_HOLDINGS D
ON M.HK_LINK = D.HK_LINK
WHERE D.HK_LINK IS NULL);";
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_M_LOADDM_BDV_REVENUES_TO_DM_WT_FACT_REVENUES"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
TRUNC_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
TRUNC_QUERY := ''TRUNCATE TABLE DB_IAWT_''||ENV||''_DM.REVENUES.WT_FACT_REVENUE'';
INS_QUERY := ''
INSERT INTO
	DB_IAWT_''||ENV||''_DM.REVENUES.WT_FACT_REVENUE (
		MD_START_DT, 
		MD_SRC_SYSTEM, 
		MD_EXTRACT_DT, 
		MD_SOURCE, 
		HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
		HK_HUB_PARTY_ROLE_ADVISOR, 
		HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES, 
		HK_HUB_INVESTMENT_PRODUCT_TYPE, 
		HK_HUB_CONTRACT, 
		SK_DIM_CLIENTS, 
		SK_DIM_ADVISORS, 
		SK_DIM_PLANS, 
		SK_DIM_MARKETPRODUCTS, 
		SK_DIM_ACCOUNTS, 
		PAYMENT_DATE, 
		REVENUE_AMOUNT, 
		REVENUE_TYPE, 
		REVENUE_SUBTYPE )
	(
	SELECT 
	MAX(LR.MD_START_DT) AS O_MAX_START_DATE,
	MAX(LR.MD_SRC_SYSTEM) AS O_MAX_MD_SRC_SYSTEM,
	MAX(LR.MD_EXTRACT_DT) AS O_MAX_MD_EXTRACT_DT,
	MAX(LR.MD_SOURCE) AS O_MAX_MD_SOURCE,
	LR.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	LR.HK_HUB_PARTY_ROLE_ADVISOR, 
	LR.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES,
	LR.HK_HUB_INVESTMENT_PRODUCT_TYPE,
	LR.HK_HUB_CONTRACT,
	CASE WHEN DC.ID IS NULL THEN ''''-1'''' ELSE DC.ID END AS O_CLIENT_ID,
	CASE WHEN DA.ID IS NULL THEN ''''-1'''' ELSE DFI.ID END AS O_ADV_ID,
	CASE WHEN DP.ID IS NULL THEN ''''-1'''' ELSE DP.ID END AS O_PLAN_ID,
	CASE WHEN DFI.ID IS NULL THEN ''''-1'''' ELSE DFI.ID END AS O_PRODUCT_ID,
	CASE WHEN DAC.ID IS NULL THEN ''''-1'''' ELSE DAC.ID END AS O_ACNT_ID,
	LR.PAYMENT_DATE,
	SUM(LR.REVENUE) AS O_SUM_REVENUE,
	LR.REVENUE_TYPE,
	LR.REVENUE_SUBTYPE
	FROM DB_IAWT_''||ENV||''_DWH.REVENUES_BDV.LINK_REVENUE LR 
	LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_FINANCIAL_INSTRUMENTS DFI
	ON LR.HK_HUB_INVESTMENT_PRODUCT_TYPE = DFI.HK_HUB 
	LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_ADVISOR DA
	ON LR.HK_HUB_PARTY_ROLE_ADVISOR = DA.HK_HUB
	LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_PLANS DP
	ON LR.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES = DP.HK_HUB
	LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_CLIENTS DC
	ON LR.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = DC.HK_HUB
	LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_ACCOUNTS DAC
	ON LR.HK_HUB_CONTRACT = DAC.HK_HUB
	WHERE 
	LR.MD_START_DT = TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') 
	AND (DFI.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (DFI.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR DFI.MD_END_DT = ''''''''))
	AND (DA.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (DA.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR DA.MD_END_DT = ''''''''))
	AND (DP.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (DP.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR DP.MD_END_DT = ''''''''))
	AND (DC.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (DC.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR DC.MD_END_DT = ''''''''))
	AND (DAC.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (DAC.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR DAC.MD_END_DT = ''''''''))
	GROUP BY 
	LR.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, LR.HK_HUB_PARTY_ROLE_ADVISOR, LR.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES, LR.HK_HUB_INVESTMENT_PRODUCT_TYPE, LR.HK_HUB_CONTRACT, O_ACNT_ID, O_CLIENT_ID, O_PLAN_ID, O_ADV_ID, O_PRODUCT_ID, LR.REVENUE_TYPE, LR.REVENUE_SUBTYPE, LR.PAYMENT_DATE, LR.REVENUE
              )'';

UPD_QUERY := ''UPDATE DB_IAWT_''||ENV||''_DM.REVENUES.WT_FACT_REVENUE SET
	HK_LINK = SHA1(UPPER(CONCAT(
	  COALESCE(TRIM(MD_SRC_SYSTEM), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_PARTY_ROLE_ADVISOR), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_INVESTMENT_PRODUCT_TYPE), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_CONTRACT), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(PAYMENT_DATE), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(REVENUE_TYPE), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(REVENUE_SUBTYPE), ''''NULL'''')
	)))
	WHERE 1=1'';

EXECUTE IMMEDIATE :TRUNC_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "TESTJS1"("ID" VARCHAR(16777216), "NAME" VARCHAR(16777216))
RETURNS VARCHAR(10000)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
declare
  id varchar;
  name varchar;
begin
  return "you entered: "name;
end
';
use schema REVENUES_BKP;

create or replace TABLE FACT_REVENUES (
	MD_SRCSYSTEM VARCHAR(50),
	SK_DIM_ACCOUNTS VARCHAR(16777216),
	SK_DIM_MARKETPRODUCTS VARCHAR(16777216),
	SK_ADVISORS VARCHAR(50),
	SK_DIM_REGISTERED_REPRESENTATIVES VARCHAR(16777216),
	SK_DIM_CLIENTS VARCHAR(16777216),
	SK_DIM_PLANS VARCHAR(8000),
	PAYMENT_TYPE TIMESTAMP_NTZ(9),
	REVENUE_TYPE VARCHAR(17),
	REVENUE_AMOUNT FLOAT,
	REVENUE_SUBTYPE VARCHAR(40)
);
use schema SHARED;

create or replace TABLE DIM_ACCOUNTS (
	ID NUMBER(38,0) autoincrement COMMENT 'Surrogate key of the dimension',
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_END_DT TIMESTAMP_NTZ(9) COMMENT 'End Date of the image/version',
	MD_HASH_NAT_KEYS VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed natural keys to be historized for an occurrence',
	MD_HASHDIFF_TYPE1 VARCHAR(40) DEFAULT '0' COMMENT 'Represents the whole set of hashed type 1 attributes to be historized for an occurrence',
	MD_HASHDIFF_TYPE2 VARCHAR(40) DEFAULT '0' COMMENT 'Represents the whole set of hashed type 2 attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_MODIFY_DT TIMESTAMP_NTZ(9) COMMENT 'Modification Date Time of the occurrence',
	MD_MODIFY_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_SECURITY_TYPE VARCHAR(1000) COMMENT 'Capabilities for RLS',
	CONTRACT_ID VARCHAR(1000) COMMENT 'Capabilities for RLS',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	UNIVERIS_CLIENT_ID NUMBER(38,0) COMMENT 'Univeris Client ID',
	PLAN_CODE VARCHAR(8000) COMMENT 'The plan mnemonic code',
	PLAN_LABEL VARCHAR(8000) COMMENT 'The plan mnemonic label',
	ACCOUNT_TYPE VARCHAR(14) COMMENT 'The type of the account Registered or not registered',
	OPEN_DATE TIMESTAMP_NTZ(9) COMMENT 'The setup date UNIVERIS and open date NBIN of the account',
	CLOSE_DATE TIMESTAMP_NTZ(9) COMMENT 'The close date of the account',
	GROUP_TYPE_CODE VARCHAR(8000) COMMENT 'The group type code such as RRSP,LEV,RRSP,LIRA...',
	ACCUMULATION_TYPE VARCHAR(1000) COMMENT 'Accumulation type',
	ADMINISTRATOR_TYPE VARCHAR(8000) COMMENT 'Client Name, Broker/Nominee or Third party'
);
create or replace TABLE DIM_ACCOUNTS_BKP (
	ID NUMBER(38,0),
	HK_HUB VARCHAR(40),
	MD_START_DT TIMESTAMP_NTZ(9),
	MD_END_DT TIMESTAMP_NTZ(9),
	MD_HASH_NAT_KEYS VARCHAR(64),
	MD_HASHDIFF_TYPE1 VARCHAR(40),
	MD_HASHDIFF_TYPE2 VARCHAR(40),
	MD_CREATION_DT TIMESTAMP_NTZ(9),
	MD_CREATION_AUDIT_ID VARCHAR(1000),
	MD_MODIFY_DT TIMESTAMP_NTZ(9),
	MD_MODIFY_AUDIT_ID VARCHAR(1000),
	MD_SOURCE VARCHAR(1000),
	MD_SRC_SYSTEM VARCHAR(100),
	MD_EXTRACT_DT TIMESTAMP_NTZ(9),
	MD_SECURITY_TYPE VARCHAR(1000),
	CONTRACT_ID VARCHAR(1000),
	PLAN_MNEMONIC_CD VARCHAR(8000),
	PLAN_MNEMONIC_LBL VARCHAR(8000),
	ACCOUNT_TYPE VARCHAR(14),
	SETUP_DATE TIMESTAMP_NTZ(9),
	CLOSE_DATE TIMESTAMP_NTZ(9),
	GROUP_TYPE_CD VARCHAR(8000),
	ADMINISTRATOR_TYPE VARCHAR(8000)
);
create or replace TABLE DIM_ACCOUNTS_SV (
	ID NUMBER(38,0) autoincrement COMMENT 'Surrogate key of the dimension',
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_END_DT TIMESTAMP_NTZ(9) COMMENT 'End Date of the image/version',
	MD_HASH_NAT_KEYS VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed natural keys to be historized for an occurrence',
	MD_HASHDIFF_TYPE1 VARCHAR(40) DEFAULT '0' COMMENT 'Represents the whole set of hashed type 1 attributes to be historized for an occurrence',
	MD_HASHDIFF_TYPE2 VARCHAR(40) DEFAULT '0' COMMENT 'Represents the whole set of hashed type 2 attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_MODIFY_DT TIMESTAMP_NTZ(9) COMMENT 'Modification Date Time of the occurrence',
	MD_MODIFY_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_SECURITY_TYPE VARCHAR(1000) COMMENT 'Capabilities for RLS',
	CONTRACT_ID VARCHAR(1000) COMMENT 'Capabilities for RLS',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	UNIVERIS_CLIENT_ID NUMBER(38,0) COMMENT 'Univeris Client ID',
	PLAN_CODE VARCHAR(8000) COMMENT 'The plan mnemonic code',
	PLAN_LABEL VARCHAR(8000) COMMENT 'The plan mnemonic label',
	ACCOUNT_TYPE VARCHAR(14) COMMENT 'The type of the account Registered or not registered',
	OPEN_DATE TIMESTAMP_NTZ(9) COMMENT 'The setup date UNIVERIS and open date NBIN of the account',
	CLOSE_DATE TIMESTAMP_NTZ(9) COMMENT 'The close date of the account',
	GROUP_TYPE_CODE VARCHAR(8000) COMMENT 'The group type code such as RRSP,LEV,RRSP,LIRA...',
	ACCUMULATION_TYPE VARCHAR(1000) COMMENT 'Accumulation type',
	ADMINISTRATOR_TYPE VARCHAR(8000) COMMENT 'Client Name, Broker/Nominee or Third party'
);
create or replace TABLE DIM_ADVISOR (
	ID NUMBER(38,0) autoincrement COMMENT 'Surrogate key of the dimension',
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_END_DT TIMESTAMP_NTZ(9) COMMENT 'End Date of the image/version',
	MD_HASH_NAT_KEYS VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed natural keys to be historized for an occurrence',
	MD_HASHDIFF_TYPE1 VARCHAR(40) DEFAULT '0' COMMENT 'Represents the whole set of hashed type 1 attributes to be historized for an occurrence',
	MD_HASHDIFF_TYPE2 VARCHAR(40) DEFAULT '0' COMMENT 'Represents the whole set of hashed type 2 attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_MODIFY_DT TIMESTAMP_NTZ(9) COMMENT 'Modification Date Time of the occurrence',
	MD_MODIFY_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_SECURITY_TYPE VARCHAR(1000) COMMENT 'Capabilities for RLS',
	SRC_ID VARCHAR(50) COMMENT 'Not used TBD ?',
	MASTER_CODE VARCHAR(50) COMMENT 'Master code of the advisor',
	COMPANY_CODE VARCHAR(50) COMMENT 'Company code of the advisor',
	COMPANY_NAME VARCHAR(512) COMMENT 'Company name of the advisor',
	REGULATORY_ORGANIZATION_NAME VARCHAR(512) COMMENT 'REGULATORY ORGANIZATION NAME of the advisor',
	REGULATORY_ORGANIZATION_CODE VARCHAR(50) COMMENT 'REGULATORY ORGANIZATION CODE of the advisor',
	DEALER_CODE VARCHAR(50) COMMENT 'Dealer code',
	DEALER_NAME VARCHAR(512) COMMENT 'Dealer name',
	REGION_CODE VARCHAR(512) COMMENT 'Region code',
	REGION_NAME VARCHAR(512) COMMENT 'Region name',
	REGION_VP VARCHAR(16777216) COMMENT 'full name of the RVP',
	BRANCHCODE VARCHAR(50) COMMENT 'Code of the representative branch code',
	BRANCHNAME VARCHAR(512) COMMENT 'Name of the representative branch',
	TEAM_CODE NUMBER(38,0) COMMENT 'Representant Group ID',
	TEAM_NAME VARCHAR(512) COMMENT 'Advisor team description',
	ADVISOR_FULLNAME VARCHAR(512) COMMENT 'Representative name',
	FIRSTNAME VARCHAR(512) COMMENT 'Representative first name',
	LASTNAME VARCHAR(512) COMMENT 'Representative last name',
	ADVISOR_CORPORATION_NAME VARCHAR(512) COMMENT 'Representative corporation name',
	STATUS VARCHAR(512) COMMENT 'Active RR code indicator',
	GROUP_RSP_INDICATOR VARCHAR(512) COMMENT 'Group Retirement Savings Plan (RSP) indicator',
	PROVINCE_CODE VARCHAR(16777216) COMMENT 'province code',
	PROVINCE VARCHAR(16777216) COMMENT 'province name',
	ADVISOR_AUA_SEGMENT VARCHAR(512) COMMENT 'Advisor AUA Segment : 25k-100k',
	ADVISOR_AUA_SEGMENT_ORDER NUMBER(38,0) COMMENT 'Advisor AUA Segment ORDER',
	ADVISOR_START_DATE TIMESTAMP_NTZ(9) COMMENT 'the starting date of the advisor',
	NEW_ADVISOR NUMBER(38,0) COMMENT 'New advisor indicator (0 or 1)',
	ADVISOR_EFFECIVENESS_DT TIMESTAMP_NTZ(9) COMMENT 'Its the date after one year of advisor joining date , implemented as part of Organic growth',
	DEPARTED_ADVISOR_IND NUMBER(1,0) COMMENT 'DEPARTED ADVISOR INDICATOR',
	PRIMARY_ROLE VARCHAR(500),
	END_DATE TIMESTAMP_NTZ(9) COMMENT 'Departure date of the advisor (TBD)',
	REASON VARCHAR(1000) COMMENT 'Reason of departure',
	NEW_FIRM VARCHAR(1000) COMMENT 'Departure destination',
	NEW_FIRM_TYPE VARCHAR(1000) COMMENT 'Departure destination Type',
	NEW_FIRM_BACK_OFFICE VARCHAR(1000) COMMENT 'Departure destination Back-Office',
	PRESTIGE_STATUS VARCHAR(100) COMMENT 'Prestige Status',
	TRANSITION_PERIOD_END_DATE TIMESTAMP_NTZ(9) COMMENT 'Advisor transition end date',
	DEAL_ASSESTS NUMBER(11,0) COMMENT 'Deal assets',
	EXPECTED_ASSESTS NUMBER(11,0) COMMENT 'Expected assets',
	PREVIOUS_FIRM VARCHAR(100) COMMENT 'Previous Firm of the Advisor',
	PREVIOUS_FIRM_TYPE VARCHAR(100) COMMENT 'Previous Firm type of the Advisor',
	AGE_SEGMENT VARCHAR(50) COMMENT 'Advisor Age Segment : 25-34',
	AGE_SEGMENT_ORD NUMBER(2,0) COMMENT 'Advisor Age Segment ORDER',
	SUSPENDED_IND NUMBER(1,0)
);
create or replace TABLE DIM_ADVISOR_RACHID_JIHED (
	ID NUMBER(38,0),
	HK_HUB VARCHAR(40),
	MD_START_DT TIMESTAMP_NTZ(9),
	MD_END_DT TIMESTAMP_NTZ(9),
	MD_HASH_NAT_KEYS VARCHAR(64),
	MD_HASHDIFF_TYPE1 VARCHAR(40),
	MD_HASHDIFF_TYPE2 VARCHAR(40),
	MD_CREATION_DT TIMESTAMP_NTZ(9),
	MD_CREATION_AUDIT_ID VARCHAR(1000),
	MD_MODIFY_DT TIMESTAMP_NTZ(9),
	MD_MODIFY_AUDIT_ID VARCHAR(1000),
	MD_SOURCE VARCHAR(1000),
	MD_SRC_SYSTEM VARCHAR(100),
	MD_EXTRACT_DT TIMESTAMP_NTZ(9),
	MD_SECURITY_TYPE VARCHAR(1000),
	SRC_ID VARCHAR(50),
	MASTER_CODE VARCHAR(50),
	COMPANY_CODE VARCHAR(50),
	COMPANY_NAME VARCHAR(512),
	REGULATORY_ORGANIZATION_NAME VARCHAR(512),
	REGULATORY_ORGANIZATION_CODE VARCHAR(50),
	DEALER_CODE VARCHAR(50),
	DEALER_NAME VARCHAR(512),
	REGION_CODE VARCHAR(512),
	REGION_NAME VARCHAR(512),
	REGION_VP VARCHAR(16777216),
	BRANCHCODE VARCHAR(50),
	BRANCHNAME VARCHAR(512),
	TEAM_CODE NUMBER(38,0),
	TEAM_NAME VARCHAR(512),
	ADVISOR_FULLNAME VARCHAR(512),
	FIRSTNAME VARCHAR(512),
	LASTNAME VARCHAR(512),
	ADVISOR_CORPORATION_NAME VARCHAR(512),
	STATUS VARCHAR(512),
	GROUP_RSP_INDICATOR VARCHAR(512),
	PROVINCE_CODE VARCHAR(16777216),
	PROVINCE VARCHAR(16777216),
	ADVISOR_AUA_SEGMENT VARCHAR(512),
	ADVISOR_AUA_SEGMENT_ORDER NUMBER(38,0),
	ADVISOR_START_DATE TIMESTAMP_NTZ(9),
	NEW_ADVISOR NUMBER(38,0),
	ADVISOR_EFFECIVENESS_DT TIMESTAMP_NTZ(9),
	DEPARTED_ADVISOR_IND NUMBER(1,0),
	PRIMARY_ROLE VARCHAR(500),
	END_DATE TIMESTAMP_NTZ(9),
	REASON VARCHAR(1000),
	NEW_FIRM VARCHAR(1000),
	NEW_FIRM_TYPE VARCHAR(1000),
	NEW_FIRM_BACK_OFFICE VARCHAR(1000),
	PRESTIGE_STATUS VARCHAR(100)
);
create or replace TABLE DIM_CLIENTS (
	ID NUMBER(38,0) autoincrement COMMENT 'Surrogate key of the dimension',
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_END_DT TIMESTAMP_NTZ(9) COMMENT 'End Date of the image/version',
	MD_HASH_NAT_KEYS VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed natural keys to be historized for an occurrence',
	MD_HASHDIFF_TYPE1 VARCHAR(40) DEFAULT '0' COMMENT 'Represents the whole set of hashed type 1 attributes to be historized for an occurrence',
	MD_HASHDIFF_TYPE2 VARCHAR(40) DEFAULT '0' COMMENT 'Represents the whole set of hashed type 2 attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_MODIFY_DT TIMESTAMP_NTZ(9) COMMENT 'Modification Date Time of the occurrence',
	MD_MODIFY_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_SECURITY_TYPE VARCHAR(1000) COMMENT 'Capabilities for RLS',
	CLIENT_ID VARCHAR(100) COMMENT 'Client ID',
	PROVINCE_DESC VARCHAR(100) COMMENT 'Client province description',
	PROVINCE_CODE VARCHAR(10) COMMENT 'Client province code',
	COUNTRY_DESC VARCHAR(100) COMMENT 'Client country description',
	COUNTRY_CODE VARCHAR(10) COMMENT 'Client country code',
	INCOME_AMT NUMBER(38,2) COMMENT 'Client income',
	INCOME_LEVEL_1_SEGMENT VARCHAR(50) COMMENT 'Client level 1 income Segment : $30k - $50k',
	INCOME_LEVEL_1_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client level 1 income Segment ORDER',
	INCOME_LEVEL_2_SEGMENT VARCHAR(50) COMMENT 'Client level 2 income Segment : Lower Income',
	INCOME_LEVEL_2_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client level 2 income Segment ORDER',
	CLIENT_AUA_SEGMENT VARCHAR(50) COMMENT 'Client AUA Segment : 25k-100k',
	CLIENT_AUA_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client AUA Segment ORDER',
	AGE_SEGMENT VARCHAR(50) COMMENT 'Client Age Segment : 25-34',
	AGE_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client Age Segment ORDER',
	NEW_CLIENT_IND VARCHAR(16777216) COMMENT 'New client indicator',
	CLIENT_START_DT TIMESTAMP_NTZ(9) COMMENT 'Client Start Date'
);
create or replace TABLE DIM_DATE (
	ID NUMBER(38,0) COMMENT 'Surrogate key of the dimension',
	DATE DATE NOT NULL,
	FULL_DATE_DESC VARCHAR(64) NOT NULL,
	DAY_NUM_IN_WEEK NUMBER(1,0) NOT NULL,
	DAY_NUM_IN_MONTH NUMBER(2,0) NOT NULL,
	DAY_NUM_IN_YEAR NUMBER(3,0) NOT NULL,
	DAY_NAME VARCHAR(10) NOT NULL,
	DAY_ABBREV VARCHAR(3) NOT NULL,
	WEEKDAY_IND VARCHAR(64) NOT NULL,
	US_HOLIDAY_IND VARCHAR(64),
	_HOLIDAY_IND VARCHAR(64),
	MONTH_END_IND VARCHAR(64) NOT NULL,
	WEEK_BEGIN_DATE_NKEY NUMBER(9,0) NOT NULL,
	WEEK_BEGIN_DATE DATE NOT NULL,
	WEEK_END_DATE_NKEY NUMBER(9,0) NOT NULL,
	WEEK_END_DATE DATE NOT NULL,
	WEEK_NUM_IN_YEAR NUMBER(9,0) NOT NULL,
	MONTH_NAME VARCHAR(10) NOT NULL,
	MONTH_ABBREV VARCHAR(3) NOT NULL,
	MONTH_NUM_IN_YEAR NUMBER(2,0) NOT NULL,
	YEARMONTH VARCHAR(10) NOT NULL,
	QUARTER NUMBER(1,0) NOT NULL,
	YEARQUARTER VARCHAR(10) NOT NULL,
	YEAR NUMBER(5,0) NOT NULL,
	FISCAL_WEEK_NUM NUMBER(2,0) NOT NULL,
	FISCAL_MONTH_NUM NUMBER(2,0) NOT NULL,
	FISCAL_YEARMONTH VARCHAR(10) NOT NULL,
	FISCAL_QUARTER NUMBER(1,0) NOT NULL,
	FISCAL_YEARQUARTER VARCHAR(10) NOT NULL,
	FISCAL_HALFYEAR NUMBER(1,0) NOT NULL,
	FISCAL_YEAR NUMBER(5,0) NOT NULL,
	SQL_TIMESTAMP TIMESTAMP_NTZ(9),
	CURRENT_ROW_IND VARCHAR(1) DEFAULT 'Y',
	EFFECTIVE_DATE DATE DEFAULT CAST(CURRENT_TIMESTAMP() AS DATE),
	EXPIRATION_DATE DATE DEFAULT CAST('9999-12-31' AS DATE),
	MONTH_NAME_YEAR VARCHAR(100),
	MONTH_NAME_YEAR_ORD NUMBER(38,0)
)COMMENT='Type 0 Dimension Table Housing Calendar and Fiscal Year Date Attributes'
;
create or replace TABLE DIM_FINANCIAL_INSTRUMENTS (
	ID NUMBER(38,0) autoincrement COMMENT 'Surrogate key of the dimension',
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_END_DT TIMESTAMP_NTZ(9) COMMENT 'End Date of the image/version',
	MD_HASH_NAT_KEYS VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed natural keys to be historized for an occurrence',
	MD_HASHDIFF_TYPE1 VARCHAR(40) DEFAULT '0' COMMENT 'Represents the whole set of hashed type 1 attributes to be historized for an occurrence',
	MD_HASHDIFF_TYPE2 VARCHAR(40) DEFAULT '0' COMMENT 'Represents the whole set of hashed type 2 attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_MODIFY_DT TIMESTAMP_NTZ(9) COMMENT 'Modification Date Time of the occurrence',
	MD_MODIFY_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_SECURITY_TYPE VARCHAR(1000) COMMENT 'Capabilities for RLS',
	INVESTMENT_PRODUCT_ID VARCHAR(16777216),
	SYMBOL VARCHAR(512),
	NAME VARCHAR(1000),
	ASSET_CATEGORY VARCHAR(512),
	CATEGORY VARCHAR(512),
	PRODUCT_GROUP VARCHAR(512),
	ISSUER_COMPANY_CODE VARCHAR(4),
	ISSUER_COMPANY_NAME VARCHAR(1000)
);
create or replace TABLE DIM_PLANS (
	ID NUMBER(38,0) autoincrement COMMENT 'Column description',
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_END_DT TIMESTAMP_NTZ(9) COMMENT 'End Date of the image/version',
	MD_HASH_NAT_KEYS VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed natural keys to be historized for an occurrence',
	MD_HASHDIFF_TYPE1 VARCHAR(40) DEFAULT '0' COMMENT 'Represents the whole set of hashed type 1 attributes to be historized for an occurrence',
	MD_HASHDIFF_TYPE2 VARCHAR(40) DEFAULT '0' COMMENT 'Represents the whole set of hashed type 2 attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_MODIFY_DT TIMESTAMP_NTZ(9) COMMENT 'Modification Date Time of the occurrence',
	MD_MODIFY_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_SECURITY_TYPE VARCHAR(1000) COMMENT 'Capabilities for RLS',
	PLAN_CODE VARCHAR(8000),
	PLAN_LABEL VARCHAR(8000),
	ACCOUNT_TYPE VARCHAR(16777216),
	GROUP_TYPE_CODE VARCHAR(8000),
	ACCUMULATION_TYPE VARCHAR(8000)
);
create or replace TABLE WT_DIM_ACCOUNTS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_END_DT TIMESTAMP_NTZ(9) COMMENT 'End Date of the image/version',
	MD_HASH_NAT_KEYS VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed natural keys to be historized for an occurrence',
	MD_HASHDIFF_TYPE1 VARCHAR(40) DEFAULT '0' COMMENT 'Represents the whole set of hashed type 1 attributes to be historized for an occurrence',
	MD_HASHDIFF_TYPE2 VARCHAR(40) DEFAULT '0' COMMENT 'Represents the whole set of hashed type 2 attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_MODIFY_DT TIMESTAMP_NTZ(9) COMMENT 'Modification Date Time of the occurrence',
	MD_MODIFY_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_SECURITY_TYPE VARCHAR(1000) COMMENT 'Capabilities for RLS',
	CONTRACT_ID VARCHAR(1000) COMMENT 'Capabilities for RLS',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	UNIVERIS_CLIENT_ID NUMBER(38,0) COMMENT 'Univeris Client ID',
	PLAN_CODE VARCHAR(8000) COMMENT 'The plan mnemonic code',
	PLAN_LABEL VARCHAR(8000) COMMENT 'The plan mnemonic label',
	ACCOUNT_TYPE VARCHAR(14) COMMENT 'The type of the account Registered or not registered',
	OPEN_DATE TIMESTAMP_NTZ(9) COMMENT 'The setup date UNIVERIS and open date NBIN of the account',
	CLOSE_DATE TIMESTAMP_NTZ(9) COMMENT 'The close date of the account',
	GROUP_TYPE_CODE VARCHAR(8000) COMMENT 'The group type code such as RRSP,LEV,RRSP,LIRA...',
	ACCUMULATION_TYPE VARCHAR(1000) COMMENT 'Accumulation type',
	ADMINISTRATOR_TYPE VARCHAR(8000) COMMENT 'Client Name, Broker/Nominee or Third party',
	ACCOUNT_AUA_SEGMENT VARCHAR(512) COMMENT 'Advisor AUA Segment : 25k-100k',
	ACCOUNT_AUA_SEGMENT_ORDER NUMBER(38,0) COMMENT 'Advisor AUA Segment ORDER',
	ACCOUNT_IND NUMBER(1,0) COMMENT 'Total Number of Client Accounts Flag'
);
create or replace TABLE WT_DIM_ACCOUNTS_BKP (
	HK_HUB VARCHAR(40),
	MD_START_DT TIMESTAMP_NTZ(9),
	MD_END_DT TIMESTAMP_NTZ(9),
	MD_HASH_NAT_KEYS VARCHAR(64),
	MD_HASHDIFF_TYPE1 VARCHAR(40),
	MD_HASHDIFF_TYPE2 VARCHAR(40),
	MD_CREATION_DT TIMESTAMP_NTZ(9),
	MD_CREATION_AUDIT_ID VARCHAR(1000),
	MD_MODIFY_DT TIMESTAMP_NTZ(9),
	MD_MODIFY_AUDIT_ID VARCHAR(1000),
	MD_SOURCE VARCHAR(1000),
	MD_SRC_SYSTEM VARCHAR(100),
	MD_EXTRACT_DT TIMESTAMP_NTZ(9),
	MD_SECURITY_TYPE VARCHAR(1000),
	CONTRACT_ID VARCHAR(1000),
	PLAN_MNEMONIC_CD VARCHAR(8000),
	PLAN_MNEMONIC_LBL VARCHAR(8000),
	ACCOUNT_TYPE VARCHAR(14),
	SETUP_DATE TIMESTAMP_NTZ(9),
	CLOSE_DATE TIMESTAMP_NTZ(9),
	GROUP_TYPE_CD VARCHAR(8000),
	ADMINISTRATOR_TYPE VARCHAR(8000)
);
create or replace TABLE WT_DIM_ACCOUNTS_SV (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_END_DT TIMESTAMP_NTZ(9) COMMENT 'End Date of the image/version',
	MD_HASH_NAT_KEYS VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed natural keys to be historized for an occurrence',
	MD_HASHDIFF_TYPE1 VARCHAR(40) DEFAULT '0' COMMENT 'Represents the whole set of hashed type 1 attributes to be historized for an occurrence',
	MD_HASHDIFF_TYPE2 VARCHAR(40) DEFAULT '0' COMMENT 'Represents the whole set of hashed type 2 attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_MODIFY_DT TIMESTAMP_NTZ(9) COMMENT 'Modification Date Time of the occurrence',
	MD_MODIFY_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_SECURITY_TYPE VARCHAR(1000) COMMENT 'Capabilities for RLS',
	CONTRACT_ID VARCHAR(1000) COMMENT 'Capabilities for RLS',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	UNIVERIS_CLIENT_ID NUMBER(38,0) COMMENT 'Univeris Client ID',
	PLAN_CODE VARCHAR(8000) COMMENT 'The plan mnemonic code',
	PLAN_LABEL VARCHAR(8000) COMMENT 'The plan mnemonic label',
	ACCOUNT_TYPE VARCHAR(14) COMMENT 'The type of the account Registered or not registered',
	OPEN_DATE TIMESTAMP_NTZ(9) COMMENT 'The setup date UNIVERIS and open date NBIN of the account',
	CLOSE_DATE TIMESTAMP_NTZ(9) COMMENT 'The close date of the account',
	GROUP_TYPE_CODE VARCHAR(8000) COMMENT 'The group type code such as RRSP,LEV,RRSP,LIRA...',
	ACCUMULATION_TYPE VARCHAR(1000) COMMENT 'Accumulation type',
	ADMINISTRATOR_TYPE VARCHAR(8000) COMMENT 'Client Name, Broker/Nominee or Third party'
);
create or replace TABLE WT_DIM_ADVISOR (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_END_DT TIMESTAMP_NTZ(9) COMMENT 'End Date of the image/version',
	MD_HASH_NAT_KEYS VARCHAR(64) COMMENT 'Represents the whole set of hashed natural keys to be historized for an occurrence',
	MD_HASHDIFF_TYPE1 VARCHAR(40) COMMENT 'Represents the whole set of hashed type 1 attributes to be historized for an occurrence',
	MD_HASHDIFF_TYPE2 VARCHAR(40) COMMENT 'Represents the whole set of hashed type 2 attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_MODIFY_DT TIMESTAMP_NTZ(9) COMMENT 'Modification Date Time of the occurrence',
	MD_MODIFY_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_SECURITY_TYPE VARCHAR(1000) COMMENT 'Capabilities for RLS',
	ID VARCHAR(50),
	MASTER_CODE VARCHAR(50),
	COMPANY_CODE VARCHAR(50),
	COMPANY_NAME VARCHAR(512),
	REGULATORY_ORGANIZATION_NAME VARCHAR(512),
	REGULATORY_ORGANIZATION_CODE VARCHAR(50),
	DEALER_CODE VARCHAR(50),
	DEALER_NAME VARCHAR(512),
	REGION_CODE VARCHAR(512),
	REGION_NAME VARCHAR(512),
	REGION_VP VARCHAR(16777216) COMMENT 'full name of the RVP',
	BRANCHCODE VARCHAR(50) COMMENT 'Code of the representative branch code',
	BRANCHNAME VARCHAR(512) COMMENT 'Name of the representative branch',
	TEAM_CODE NUMBER(38,0) COMMENT 'Representant Group ID',
	TEAM_NAME VARCHAR(512) COMMENT 'Advisor team description',
	ADVISOR_FULLNAME VARCHAR(512) COMMENT 'Representative name',
	FIRSTNAME VARCHAR(512) COMMENT 'Representative first name',
	LASTNAME VARCHAR(512) COMMENT 'Representative last name',
	ADVISOR_CORPORATION_NAME VARCHAR(512) COMMENT 'Representative corporation name',
	STATUS VARCHAR(512) COMMENT 'Active RR code indicator',
	GROUP_RSP_INDICATOR VARCHAR(512),
	PROVINCE_CODE VARCHAR(16777216) COMMENT 'province code',
	PROVINCE VARCHAR(16777216) COMMENT 'province name',
	ADVISOR_AUA_SEGMENT VARCHAR(512),
	ADVISOR_AUA_SEGMENT_ORDER NUMBER(38,0),
	ADVISOR_START_DATE TIMESTAMP_NTZ(9),
	NEW_ADVISOR NUMBER(38,0),
	ADVISOR_EFFECTIVENESS_DT TIMESTAMP_NTZ(9) COMMENT 'Its the date after one year of advisor joining date , implemented as part of Organic growth',
	DEPARTED_ADVISOR_IND NUMBER(1,0) COMMENT 'DEPARTED ADVISOR INDICATOR',
	PRIMARY_ROLE VARCHAR(500),
	END_DATE TIMESTAMP_NTZ(9) COMMENT 'Departure date of the advisor (TBD)',
	REASON VARCHAR(1000) COMMENT 'Reason of departure',
	NEW_FIRM VARCHAR(1000) COMMENT 'Departure destination',
	NEW_FIRM_TYPE VARCHAR(1000) COMMENT 'Departure destination Type',
	NEW_FIRM_BACK_OFFICE VARCHAR(1000) COMMENT 'Departure destination Back-Office',
	PRESTIGE_STATUS VARCHAR(100) COMMENT 'Prestige Status',
	TRANSITION_PERIOD_END_DATE TIMESTAMP_NTZ(9) COMMENT 'Advisor transition end date',
	DEAL_ASSESTS NUMBER(11,0) COMMENT 'Deal assets',
	EXPECTED_ASSESTS NUMBER(11,0) COMMENT 'Expected assets',
	PREVIOUS_FIRM VARCHAR(100) COMMENT 'Previous Firm of the Advisor',
	PREVIOUS_FIRM_TYPE VARCHAR(100) COMMENT 'Previous Firm type of the Advisor',
	AGE_SEGMENT VARCHAR(50) COMMENT 'Advisor Age Segment : 25-34',
	AGE_SEGMENT_ORD NUMBER(2,0) COMMENT 'Advisor Age Segment ORDER',
	SUSPENDED_IND NUMBER(1,0)
);
create or replace TABLE WT_DIM_CLIENTS (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_END_DT TIMESTAMP_NTZ(9) COMMENT 'End Date of the image/version',
	MD_HASH_NAT_KEYS VARCHAR(64) COMMENT 'Represents the whole set of hashed natural keys to be historized for an occurrence',
	MD_HASHDIFF_TYPE1 VARCHAR(40) COMMENT 'Represents the whole set of hashed type 1 attributes to be historized for an occurrence',
	MD_HASHDIFF_TYPE2 VARCHAR(40) COMMENT 'Represents the whole set of hashed type 2 attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_MODIFY_DT TIMESTAMP_NTZ(9) COMMENT 'Modification Date Time of the occurrence',
	MD_MODIFY_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_SECURITY_TYPE VARCHAR(1000) COMMENT 'Capabilities for RLS',
	CLIENT_ID VARCHAR(100) COMMENT 'Client ID',
	PROVINCE_DESC VARCHAR(100) COMMENT 'Client province description',
	PROVINCE_CODE VARCHAR(10) COMMENT 'Client province code',
	COUNTRY_DESC VARCHAR(100) COMMENT 'Client country description',
	COUNTRY_CODE VARCHAR(10) COMMENT 'Client country code',
	INCOME_AMT NUMBER(38,2) COMMENT 'Client income',
	INCOME_LEVEL_1_SEGMENT VARCHAR(50) COMMENT 'Client level 1 income Segment : $30k - $50k',
	INCOME_LEVEL_1_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client level 1 income Segment ORDER',
	INCOME_LEVEL_2_SEGMENT VARCHAR(50) COMMENT 'Client level 2 income Segment : Lower Income',
	INCOME_LEVEL_2_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client level 2 income Segment ORDER',
	CLIENT_AUA_SEGMENT VARCHAR(50) COMMENT 'Client AUA Segment : 25k-100k',
	CLIENT_AUA_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client AUA Segment ORDER',
	AGE_SEGMENT VARCHAR(50) COMMENT 'Client Age Segment : 25-34',
	AGE_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client Age Segment ORDER',
	NEW_CLIENT_IND VARCHAR(16777216) COMMENT 'New client indicator',
	CLIENT_START_DT TIMESTAMP_NTZ(9) COMMENT 'Client Start Date'
);
create or replace TABLE WT_DIM_FINANCIAL_INSTRUMENTS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_END_DT TIMESTAMP_NTZ(9) COMMENT 'End Date of the image/version',
	MD_HASH_NAT_KEYS VARCHAR(64) COMMENT 'Represents the whole set of hashed natural keys to be historized for an occurrence',
	MD_HASHDIFF_TYPE1 VARCHAR(40) COMMENT 'Represents the whole set of hashed type 1 attributes to be historized for an occurrence',
	MD_HASHDIFF_TYPE2 VARCHAR(40) COMMENT 'Represents the whole set of hashed type 2 attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_MODIFY_DT TIMESTAMP_NTZ(9) COMMENT 'Modification Date Time of the occurrence',
	MD_MODIFY_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_SECURITY_TYPE VARCHAR(1000) COMMENT 'Capabilities for RLS',
	INVESTMENT_PRODUCT_ID VARCHAR(16777216),
	SYMBOL VARCHAR(512),
	NAME VARCHAR(1000),
	ASSET_CATEGORY VARCHAR(512),
	CATEGORY VARCHAR(512),
	PRODUCT_GROUP VARCHAR(512),
	ISSUER_COMPANY_CODE VARCHAR(4),
	ISSUER_COMPANY_NAME VARCHAR(1000)
);
create or replace TABLE WT_DIM_PLANS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASH_NAT_KEYS VARCHAR(64) COMMENT 'Represents the whole set of hashed natural keys to be historized for an occurrence',
	MD_HASHDIFF_TYPE2 VARCHAR(40) COMMENT 'Represents the whole set of hashed type 2 attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_SECURITY_TYPE VARCHAR(1000) COMMENT 'Capabilities for RLS',
	PLAN_CODE VARCHAR(8000),
	PLAN_LABEL VARCHAR(8000),
	ACCOUNT_TYPE VARCHAR(16777216),
	GROUP_TYPE_CODE VARCHAR(8000),
	ACCUMULATION_TYPE VARCHAR(8000)
);
create or replace view VW_DIM_ADVISORS(
	MD_SRCSYSTEM,
	ID,
	"Master code",
	"Company code",
	"Company name",
	"Regulatory organization code",
	"Regulatory organization name",
	"Dealer code",
	"Dealer name",
	"Region code",
	"Region name",
	"Region VP",
	"Branch code",
	"Branch name",
	"Team code",
	"Team name",
	"Advisor fullname",
	"Last name",
	"First name",
	"Advisor corporation name",
	"Status",
	"Group RSP indicator",
	"Province code",
	"Province",
	"Advisor AUA segment",
	"Advisor AUA segment order",
	"Advisor starting date",
	"New Advisor",
	"Advisor effectiveness date",
	"Primary Role",
	"End date",
	"Departure reason",
	"New Firm",
	"New firm type",
	"New firm back office",
	"Prestige status",
	"Advisor Age Segment",
	"Advisor Age Segment Order",
	"Transition Period End",
	"Deal Assets",
	"Expected Assets",
	"Previous Firm Name",
	"Previous Firm Type"
) as 
SELECT
MD_SRC_SYSTEM AS MD_SRCSYSTEM ,
ID AS ID ,
MASTER_CODE AS 	"Master code" ,
COMPANY_CODE AS "Company code" ,
COMPANY_NAME AS	"Company name" ,
REGULATORY_ORGANIZATION_CODE AS	"Regulatory organization code",
REGULATORY_ORGANIZATION_NAME AS	"Regulatory organization name" ,
DEALER_CODE AS "Dealer code" ,
DEALER_NAME AS	"Dealer name" ,
REGION_CODE AS	"Region code",
REGION_NAME AS	"Region name" ,
REGION_VP AS "Region VP" ,
BRANCHCODE AS "Branch code" ,
BRANCHNAME AS	"Branch name" ,
TEAM_CODE AS	"Team code" ,
TEAM_NAME AS	"Team name" ,
ADVISOR_FULLNAME AS	"Advisor fullname",
LASTNAME AS	"Last name" ,
FIRSTNAME AS	"First name" ,
ADVISOR_CORPORATION_NAME as	"Advisor corporation name" ,
STATUS AS 	"Status" ,
GROUP_RSP_INDICATOR AS 	"Group RSP indicator" ,
PROVINCE_CODE as	"Province code" ,
PROVINCE AS 	"Province" ,
ADVISOR_AUA_SEGMENT as	"Advisor AUA segment" ,
ADVISOR_AUA_SEGMENT_ORDER as	"Advisor AUA segment order" , 	
ADVISOR_START_DATE as	"Advisor starting date" ,
NEW_ADVISOR as	"New Advisor" ,
CASE WHEN ADVISOR_EFFECIVENESS_DT='10000-12-31 00:00:00' THEN '9999-12-31 00:00:00' ELSE ADVISOR_EFFECIVENESS_DT END as	"Advisor effectiveness date",   --otherwise PowerBI won't accept this date	
PRIMARY_ROLE as "Primary Role",
END_DATE AS "End date",
REASON AS "Departure reason",
NEW_FIRM AS "New Firm",
NEW_FIRM_TYPE AS "New firm type",
NEW_FIRM_BACK_OFFICE AS "New firm back office",
PRESTIGE_STATUS AS "Prestige Status",
AGE_SEGMENT AS "Advisor Age Segment",
AGE_SEGMENT_ORD AS "Advisor Age Segment Order",
TRANSITION_PERIOD_END_DATE AS "Transition Period End",
DEAL_ASSESTS AS "Deal Assets",
EXPECTED_ASSESTS AS "Expected Assets",
PREVIOUS_FIRM AS "Previous Firm Name",
PREVIOUS_FIRM_TYPE AS "Previous Firm Type"

FROM "SHARED".DIM_ADVISOR;
create or replace view VW_DIM_CLIENTS(
	MD_SRCSYSTEM,
	ID,
	"Client ID",
	"Client type",
	"Province",
	"Country",
	"Income Segmentation",
	"Income Seg ORD",
	"Salary",
	"Salary ORD",
	"Client AUA segment",
	"Client AUA segment order",
	"Age segmentation",
	"Age segmentation ORD",
	"New Client",
	"Client Start Date"
) as 
SELECT
MD_SRC_SYSTEM AS MD_SRCSYSTEM ,
ID ,
--	HOUSEHOLD_ID VARCHAR(16777216),
CLIENT_ID as  "Client ID",
NULL as	"Client type" ,
PROVINCE_DESC AS 	"Province" ,
COUNTRY_DESC as	"Country" ,
INCOME_LEVEL_2_SEGMENT as	"Income Segmentation" ,
INCOME_LEVEL_2_SEGMENT_ORD as	"Income Seg ORD" ,
INCOME_LEVEL_1_SEGMENT AS 	"Salary" ,
INCOME_LEVEL_1_SEGMENT_ORD as	"Salary ORD" ,
CLIENT_AUA_SEGMENT as	"Client AUA segment" ,
CLIENT_AUA_SEGMENT_ORD as	"Client AUA segment order" ,
AGE_SEGMENT as	"Age segmentation" ,
AGE_SEGMENT_ORD as	"Age segmentation ORD" ,
--	IVR_PRIM_BDT DATE,
--	CORP_CD VARCHAR(30),
--	MD_LOADDATE TIMESTAMP_NTZ(9),
---	"Creation Date" DATE,
NEW_CLIENT_IND as	"New Client",
CLIENT_START_DT AS "Client Start Date"
FROM "SHARED".DIM_CLIENTS;
create or replace view VW_DIM_MARKETPRODUCTS(
	MD_SRCSYSTEM,
	ID,
	"PRODUCT ID",
	"Symbol",
	"Name",
	"Asset category",
	"Category",
	"Group",
	"Issuer company code",
	"Issuer company name"
) as 
SELECT
MD_SRC_SYSTEM AS MD_SRCSYSTEM ,
	ID ,
INVESTMENT_PRODUCT_ID AS "PRODUCT ID",
SYMBOL as	"Symbol"  ,
NAME as	"Name" ,
ASSET_CATEGORY AS "Asset category" ,
CATEGORY as	"Category",
PRODUCT_GROUP as	"Group" ,
ISSUER_COMPANY_CODE as	"Issuer company code",
ISSUER_COMPANY_NAME as	"Issuer company name" 
--MD_START_DT as	MD_LOADDATE 
FROM  SHARED.DIM_FINANCIAL_INSTRUMENTS;
create or replace view VW_DIM_PLANS(
	MD_SRCSYSTEM,
	ID,
	"Plan code",
	"Plan label",
	"Account type",
	"Group type code",
	"Accumulation type"
) as 
SELECT
MD_SRC_SYSTEM AS MD_SRCSYSTEM ,
	ID ,
PLAN_CODE AS "Plan code" ,
PLAN_LABEL AS	"Plan label" ,
ACCOUNT_TYPE AS	"Account type" ,
GROUP_TYPE_CODE AS	"Group type code" ,
ACCUMULATION_TYPE AS	"Accumulation type" 
--MD_START_DT AS	MD_LOADDATE 
FROM  SHARED.DIM_PLANS;
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_IAS_NBIN_TO_DM_WTPLAN"("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;
BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_PLANS WHERE MD_SRC_SYSTEM = ''''IAS'''' '';
INS_INSERT := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_PLANS (HK_HUB,MD_HASH_NAT_KEYS,MD_SOURCE,MD_SRC_SYSTEM,MD_EXTRACT_DT,PLAN_CODE,PLAN_LABEL,ACCOUNT_TYPE,GROUP_TYPE_CODE,ACCUMULATION_TYPE,MD_CREATION_DT,MD_START_DT)
SELECT RDV.HK_HUB,
	RDV.HK_HUB,
	RDV.MD_SOURCE,
	RDV.MD_SRC_SYSTEM,
	RDV.MD_EXTRACT_DT,
	RDV.PLAN_CODE,
	RDV.PLAN_LABEL,
	RDV.ACCOUNT_TYPE,
	RDV.GROUP_TYPE_CODE,
	RDV.ACCUMULATION_TYPE,
	CURRENT_TIMESTAMP,
	TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
FROM (
	SELECT *
	FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE
	) rdv
	JOIN (
	SELECT *
	FROM (
		SELECT *
			,ROW_NUMBER() OVER (
				PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
				) RN
		FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE lv
		) SATHUB
	WHERE SATHUB.RN = 1
	) lv ON lv.HK_HUB = rdv.HK_HUB
WHERE rdv.MD_ACTIVE = ''''A'''' AND lv.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') AND rdv.MD_SRC_SYSTEM = ''''IAS''''
              '';
INS_UPDATE :=''
UPDATE DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_PLANS
SET
	MD_HASHDIFF_TYPE2=SHA1(
				CONCAT(
				COALESCE(PLAN_LABEL,''''#NULL#''''), ''''|'''',
				COALESCE(ACCOUNT_TYPE,''''#NULL#''''), ''''|'''',
				COALESCE(GROUP_TYPE_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(ACCUMULATION_TYPE,''''#NULL#''''), ''''|''''
				))
Where HK_HUB <> ''''0''''
AND MD_SRC_SYSTEM = ''''IAS''''
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_NBIN_BDV_SHARED_TO_DM_WT_DIMFINANCIALINSTRUMENTS"("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''TRUNCATE TABLE DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_FINANCIAL_INSTRUMENTS  '';
INS_INSERT := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_FINANCIAL_INSTRUMENTS(
HK_HUB
,MD_START_DT
,MD_HASH_NAT_KEYS
,MD_CREATION_DT
,MD_SOURCE
,MD_CREATION_AUDIT_ID
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,INVESTMENT_PRODUCT_ID
,SYMBOL
,NAME
,ASSET_CATEGORY
,CATEGORY
,PRODUCT_GROUP
,ISSUER_COMPANY_CODE
,ISSUER_COMPANY_NAME
)
SELECT 
HUB.HK_HUB
,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
,HUB.HK_HUB
,CURRENT_TIMESTAMP
,HUB.MD_SOURCE
,''''-1''''
,CVBDV.MD_SRC_SYSTEM
,CVBDV.MD_EXTRACT_DT
,HUB.INVESTMENT_PRODUCT_ID
,CVBDV.SYMBOL
,CVBDV.NAME
,CVBDV.ASSET_CATEGORY
,CVBDV.CATEGORY
,CVBDV.PRODUCT_GROUP
,CVBDV.ISSUER_COMPANY_CODE
,CVBDV.ISSUER_COMPANY_NAME
FROM (SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) BDV WHERE BDV.RN = 1 AND BDV.MD_ACTIVE =''''A'''') CVBDV JOIN DB_IAWT_''||ENV||''_DWH.SHARED_RDV.HUB_INVESTMENT_PRODUCT_TYPE HUB ON CVBDV.HK_HUB = HUB.HK_HUB
			
              '';
INS_UPDATE :='' UPDATE DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_FINANCIAL_INSTRUMENTS
SET
	MD_HASHDIFF_TYPE2=SHA1(
				CONCAT(
				COALESCE(SYMBOL ,''''#NULL#''''), ''''|'''',
				COALESCE("NAME" ,''''#NULL#''''), ''''|'''',
				COALESCE(ASSET_CATEGORY ,''''#NULL#''''), ''''|'''',
				COALESCE(CATEGORY ,''''#NULL#''''), ''''|'''',
				COALESCE(PRODUCT_GROUP ,''''#NULL#''''), ''''|'''',
				COALESCE(ISSUER_COMPANY_CODE ,''''#NULL#''''), ''''|'''',
				COALESCE(ISSUER_COMPANY_NAME ,''''#NULL#'''')
				))
Where HK_HUB <> ''''0'''';
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_RDV_BDV_IAS_SHARED_TO_DM_WT_DIMACCOUNT"("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000), "I_AUDIT_ID" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
I_AUDIT_ID :=CHAR(39)||I_AUDIT_ID||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_ACCOUNTS WHERE MD_SRC_SYSTEM = ''''IAS-UNIVERIS'''' '';
INS_INSERT := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_ACCOUNTS (
HK_HUB
,MD_START_DT
,MD_HASH_NAT_KEYS
,MD_CREATION_DT
,MD_CREATION_AUDIT_ID
,MD_SOURCE
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,CONTRACT_ID
,UNIVERIS_PLAN_ID
,UNIVERIS_CLIENT_ID
,PLAN_CODE
,PLAN_LABEL
,ACCOUNT_TYPE
,OPEN_DATE
,CLOSE_DATE
,GROUP_TYPE_CODE
,ACCUMULATION_TYPE
,ADMINISTRATOR_TYPE
,ACCOUNT_AUA_SEGMENT
,ACCOUNT_AUA_SEGMENT_ORDER
,ACCOUNT_IND )
SELECT hub.HK_HUB
,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
,hub.HK_HUB
,CURRENT_TIMESTAMP
,''||I_AUDIT_ID||''
,rdv.MD_SOURCE
,rdv.MD_SRC_SYSTEM
,rdv.MD_EXTRACT_DT
,hub.CONTRACT_ID
,hub.UNIVERIS_PLAN_ID
,hub.UNIVERIS_CLIENT_ID
,bdv2.PLAN_CODE
,bdv2.PLAN_LABEL
,bdv2.ACCOUNT_TYPE
,rdv.SETUP_DT
,rdv.CLOSE_DT
,bdv2.GROUP_TYPE_CODE
,bdv2.ACCUMULATION_TYPE
,rdv.ADMINISTRATOR_TYPE
,satseg2.ACCOUNT_AUA_SEGMENT
,satseg2.ACCOUNT_AUA_SEGMENT_ORDER
,bdv2.ACCOUNT_IND
	FROM (
	SELECT *
			FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_IAS_UNIVERIS
			)rdv
		JOIN (
		SELECT *
			FROM (
				SELECT *
					,ROW_NUMBER() OVER (
						PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
						) RN
				FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_IAS_UNIVERIS
				) SATHUB
			WHERE SATHUB.RN = 1 AND SATHUB.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
			) rdvcv ON rdvcv.HK_HUB = rdv.HK_HUB
		JOIN
		(
			SELECT bdv.*
			FROM (
				SELECT *
				FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_CONTRACT_COMPUTE
				) bdv
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN1
					FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_CONTRACT_COMPUTE
					) SATHUB1
				WHERE SATHUB1.RN1 = 1 AND SATHUB1.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) bdvcv ON bdvcv.HK_HUB = bdv.HK_HUB
			
			)bdv2 ON bdv2.HK_HUB = rdv.HK_HUB
			JOIN DB_IAWT_''||ENV||''_DWH.SHARED_RDV.HUB_CONTRACT hub ON hub.HK_HUB = rdv.HK_HUB
			LEFT JOIN
			(
			SELECT satseg.*
			FROM (
				SELECT *
				FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_CONTRACT_AUA_SEG_COMPUTE
				) satseg
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN2
					FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_CONTRACT_AUA_SEG_COMPUTE
					) SATHUB2
				WHERE SATHUB2.RN2 = 1 AND SATHUB2.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) satsegcv ON satsegcv.HK_HUB = satseg.HK_HUB
			)satseg2 ON satseg2.HK_HUB = hub.HK_HUB	
			WHERE rdv.MD_ACTIVE = ''''A''''
			AND
			 bdv2.MD_ACTIVE = ''''A''''
			AND
			 bdv2.MD_SRC_SYSTEM = ''''IAS-UNIVERIS''''	
			AND
			 satseg2.MD_ACTIVE = ''''A''''
			
              '';
INS_UPDATE :='' UPDATE DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_ACCOUNTS
SET
	MD_HASHDIFF_TYPE2=SHA1(
				CONCAT(
				COALESCE(PLAN_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(PLAN_LABEL,''''#NULL#''''), ''''|'''',
				COALESCE(ACCOUNT_TYPE,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(OPEN_DATE),''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(CLOSE_DATE),''''#NULL#''''), ''''|'''',
				COALESCE(GROUP_TYPE_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(ACCUMULATION_TYPE,''''#NULL#''''), ''''|'''',
				COALESCE(ADMINISTRATOR_TYPE,''''#NULL#''''), ''''|'''',
				COALESCE(ACCOUNT_AUA_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(ACCOUNT_AUA_SEGMENT_ORDER),''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(ACCOUNT_IND),''''#NULL#'''')
				))
Where HK_HUB <> ''''0'''' and MD_SRC_SYSTEM = ''''IAS-UNIVERIS'''';
'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_RDV_BDV_INVESTIA_SHARED_TO_DM_WT_DIMACCOUNT"("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000), "I_AUDIT_ID" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
I_AUDIT_ID :=CHAR(39)||I_AUDIT_ID||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_ACCOUNTS WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''' '';
INS_INSERT := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_ACCOUNTS (
HK_HUB
,MD_START_DT
,MD_HASH_NAT_KEYS
,MD_CREATION_DT
,MD_CREATION_AUDIT_ID
,MD_SOURCE
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,CONTRACT_ID
,UNIVERIS_PLAN_ID
,UNIVERIS_CLIENT_ID
,PLAN_CODE
,PLAN_LABEL
,ACCOUNT_TYPE
,OPEN_DATE
,CLOSE_DATE
,GROUP_TYPE_CODE
,ACCUMULATION_TYPE
,ADMINISTRATOR_TYPE
,ACCOUNT_AUA_SEGMENT
,ACCOUNT_AUA_SEGMENT_ORDER
,ACCOUNT_IND )
SELECT hub.HK_HUB
,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
,hub.HK_HUB
,CURRENT_TIMESTAMP
,''||I_AUDIT_ID||''
,rdv.MD_SOURCE
,rdv.MD_SRC_SYSTEM
,rdv.MD_EXTRACT_DT
,hub.CONTRACT_ID
,hub.UNIVERIS_PLAN_ID
,hub.UNIVERIS_CLIENT_ID
,bdv2.PLAN_CODE
,bdv2.PLAN_LABEL
,bdv2.ACCOUNT_TYPE
,rdv.SETUP_DT
,rdv.CLOSE_DT
,bdv2.GROUP_TYPE_CODE
,bdv2.ACCUMULATION_TYPE
,rdv.ADMINISTRATOR_TYPE
,satseg2.ACCOUNT_AUA_SEGMENT
,satseg2.ACCOUNT_AUA_SEGMENT_ORDER
,bdv2.ACCOUNT_IND
	FROM (
	SELECT *
			FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_INVESTIA_UNIVERIS
			)rdv
		JOIN (
		SELECT *
			FROM (
				SELECT *
					,ROW_NUMBER() OVER (
						PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
						) RN
				FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_INVESTIA_UNIVERIS
				) SATHUB
			WHERE SATHUB.RN = 1 AND SATHUB.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
			) rdvcv ON rdvcv.HK_HUB = rdv.HK_HUB
		JOIN
		(
			SELECT bdv.*
			FROM (
				SELECT *
				FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_CONTRACT_COMPUTE
				) bdv
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN1
					FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_CONTRACT_COMPUTE
					) SATHUB1
				WHERE SATHUB1.RN1 = 1 AND SATHUB1.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) bdvcv ON bdvcv.HK_HUB = bdv.HK_HUB
			
			)bdv2 ON bdv2.HK_HUB = rdv.HK_HUB
			JOIN DB_IAWT_''||ENV||''_DWH.SHARED_RDV.HUB_CONTRACT hub ON hub.HK_HUB = rdv.HK_HUB
			LEFT JOIN
			(
			SELECT satseg.*
			FROM (
				SELECT *
				FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_CONTRACT_AUA_SEG_COMPUTE
				) satseg
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN2
					FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_CONTRACT_AUA_SEG_COMPUTE
					) SATHUB2
				WHERE SATHUB2.RN2 = 1 AND SATHUB2.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) satsegcv ON satsegcv.HK_HUB = satseg.HK_HUB
			)satseg2 ON satseg2.HK_HUB = hub.HK_HUB	
			WHERE rdv.MD_ACTIVE = ''''A''''
			AND
			 bdv2.MD_ACTIVE = ''''A''''
			AND
			 bdv2.MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS''''	
			AND
			 satseg2.MD_ACTIVE = ''''A''''
			
              '';
INS_UPDATE :='' UPDATE DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_ACCOUNTS
SET
	MD_HASHDIFF_TYPE2=SHA1(
				CONCAT(
				COALESCE(PLAN_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(PLAN_LABEL,''''#NULL#''''), ''''|'''',
				COALESCE(ACCOUNT_TYPE,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(OPEN_DATE),''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(CLOSE_DATE),''''#NULL#''''), ''''|'''',
				COALESCE(GROUP_TYPE_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(ACCUMULATION_TYPE,''''#NULL#''''), ''''|'''',
				COALESCE(ADMINISTRATOR_TYPE,''''#NULL#''''), ''''|'''',
				COALESCE(ACCOUNT_AUA_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(ACCOUNT_AUA_SEGMENT_ORDER),''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(ACCOUNT_IND),''''#NULL#'''')
				))
Where HK_HUB <> ''''0'''' and MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''';
'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_RDV_BDV_INVESTIA_UNIVERIS_SHARED_TO_DM_WT_DIMCLIENTS"("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_CLIENTS WHERE MD_SRC_SYSTEM = ''''INVESTIA_UNIVERIS'''' '';
INS_INSERT := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_CLIENTS (
HK_HUB
,MD_START_DT
,MD_HASH_NAT_KEYS
,MD_CREATION_DT
,MD_SOURCE
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,CLIENT_ID
,PROVINCE_DESC
,PROVINCE_CODE
,COUNTRY_DESC
,COUNTRY_CODE
,INCOME_AMT
,INCOME_LEVEL_1_SEGMENT
,INCOME_LEVEL_1_SEGMENT_ORD
,INCOME_LEVEL_2_SEGMENT
,INCOME_LEVEL_2_SEGMENT_ORD
,CLIENT_AUA_SEGMENT
,CLIENT_AUA_SEGMENT_ORD
,AGE_SEGMENT
,AGE_SEGMENT_ORD
,NEW_CLIENT_IND )
SELECT hub.HK_HUB
	,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
	,hub.HK_HUB
	,CURRENT_TIMESTAMP
	,rdv.MD_SOURCE
	,rdv.MD_SRC_SYSTEM
	,rdv.MD_EXTRACT_DT
	,hub.CLIENT_ID
	,BUSINESS_RULES.SHARED_CLIENTS.UDF_CONV_BR_ALL_CLIENTS_PROVINCE_005(rdv.IVR_RES_CD,CASE WHEN rdv.IVR_RES_CD IN (''''SK'''',''''MB'''',''''NS'''',''''NL'''',''''PE'''',''''QC'''',''''ON'''',''''BC'''',''''NB'''',''''AB'''',''''NT'''',''''YT'''',''''NU'''') THEN ''''CAN'''' WHEN LEN(rdv.IVR_RES_CD) = 3 THEN rdv.IVR_RES_CD ELSE ''''Unknown'''' END)
	,rdv.IVR_RES_CD
	,CASE WHEN rdv.IVR_RES_CD IN (''''SK'''',''''MB'''',''''NS'''',''''NL'''',''''PE'''',''''QC'''',''''ON'''',''''BC'''',''''NB'''',''''AB'''',''''NT'''',''''YT'''',''''NU'''') THEN ''''CAN'''' WHEN LEN(rdv.IVR_RES_CD) = 3 THEN rdv.IVR_RES_CD ELSE ''''Unknown'''' END
	,CASE WHEN rdv.IVR_RES_CD IN (''''SK'''',''''MB'''',''''NS'''',''''NL'''',''''PE'''',''''QC'''',''''ON'''',''''BC'''',''''NB'''',''''AB'''',''''NT'''',''''YT'''',''''NU'''') THEN ''''CAN'''' WHEN LEN(rdv.IVR_RES_CD) = 3 THEN rdv.IVR_RES_CD ELSE ''''Unknown'''' END
	,bdv2.INCOME_AMT
	,bdv2.INCOME_LEVEL_1_SEGMENT
	,bdv2.INCOME_LEVEL_1_SEGMENT_ORD
	,bdv2.INCOME_LEVEL_2_SEGMENT
	,bdv2.INCOME_LEVEL_2_SEGMENT_ORD
	,satseg2.CLIENT_AUA_SEGMENT
	,satseg2.CLIENT_AUA_SEGMENT_ORDER
	,bdv2.AGE_SEGMENT
	,bdv2.AGE_SEGMENT_ORD
	,bdv2.NEW_CLIENT_IND
	FROM (
	SELECT *
			FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_INVESTIA_UNIVERIS
			)rdv
		JOIN (
		SELECT *
			FROM (
				SELECT *
					,ROW_NUMBER() OVER (
						PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
						) RN
				FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_INVESTIA_UNIVERIS
				) SATHUB
			WHERE SATHUB.RN = 1 AND SATHUB.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
			) rdvcv ON rdvcv.HK_HUB = rdv.HK_HUB
		JOIN
		(
			SELECT bdv.*
			FROM (
				SELECT *
				FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_COMPUTE
				) bdv
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN1
					FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_COMPUTE
					) SATHUB1
				WHERE SATHUB1.RN1 = 1 AND SATHUB1.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) bdvcv ON bdvcv.HK_HUB = bdv.HK_HUB
			
			)bdv2 ON bdv2.HK_HUB = rdv.HK_HUB
			JOIN DB_IAWT_''||ENV||''_DWH.SHARED_RDV.HUB_PARTY_ROLE_ACCOUNT_HOLDER hub ON hub.HK_HUB = rdv.HK_HUB
			LEFT JOIN
			(
			SELECT satseg.*
			FROM (
				SELECT *
				FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_AUA_SEG_COMPUTE
				) satseg
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN2
					FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_AUA_SEG_COMPUTE
					) SATHUB2
				WHERE SATHUB2.RN2 = 1 AND SATHUB2.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) satsegcv ON satsegcv.HK_HUB = satseg.HK_HUB
			)satseg2 ON satseg2.HK_HUB = hub.HK_HUB	
			WHERE rdv.MD_ACTIVE = ''''A''''
			AND
			 bdv2.MD_ACTIVE = ''''A''''
			AND
			 bdv2.MD_SRC_SYSTEM = ''''INVESTIA_UNIVERIS''''	
			AND
			 satseg2.MD_ACTIVE = ''''A''''
			AND
			 satseg2.MD_SRC_SYSTEM = ''''INVESTIA_UNIVERIS''''
              '';
			  
INS_UPDATE :='' UPDATE DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_CLIENTS
SET
	MD_HASHDIFF_TYPE2=SHA1(
				CONCAT(
				COALESCE(PROVINCE_DESC,''''#NULL#''''), ''''|'''',
				COALESCE(PROVINCE_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(COUNTRY_DESC,''''#NULL#''''), ''''|'''',
				COALESCE(COUNTRY_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(INCOME_AMT),''''#NULL#''''), ''''|'''',
				COALESCE(INCOME_LEVEL_1_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(INCOME_LEVEL_1_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(INCOME_LEVEL_2_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(INCOME_LEVEL_2_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(CLIENT_AUA_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(CLIENT_AUA_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(AGE_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(AGE_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(NEW_CLIENT_IND,''''#NULL#'''')
				))
Where HK_HUB <> ''''0'''' AND MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''';
'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_RDV_BDV_NBIN_SHARED_TO_DM_WT_DIMACCOUNT"("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000), "I_AUDIT_ID" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
I_AUDIT_ID :=CHAR(39)||I_AUDIT_ID||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_ACCOUNTS WHERE MD_SRC_SYSTEM = ''''IAS'''' '';
INS_INSERT := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_ACCOUNTS (
HK_HUB
,MD_START_DT
,MD_HASH_NAT_KEYS
,MD_CREATION_DT
,MD_CREATION_AUDIT_ID
,MD_SOURCE
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,CONTRACT_ID
,UNIVERIS_PLAN_ID
,UNIVERIS_CLIENT_ID
,PLAN_CODE
,PLAN_LABEL
,ACCOUNT_TYPE
,OPEN_DATE
,CLOSE_DATE
,GROUP_TYPE_CODE
,ACCUMULATION_TYPE
,ADMINISTRATOR_TYPE
,ACCOUNT_AUA_SEGMENT
,ACCOUNT_AUA_SEGMENT_ORDER
,ACCOUNT_IND )
SELECT hub.HK_HUB
,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
,hub.HK_HUB
,CURRENT_TIMESTAMP
,''||I_AUDIT_ID||''
,rdv.MD_SOURCE
,rdv.MD_SRC_SYSTEM
,rdv.MD_EXTRACT_DT
,hub.CONTRACT_ID
,hub.UNIVERIS_PLAN_ID
,hub.UNIVERIS_CLIENT_ID
,bdv2.PLAN_CODE
,bdv2.PLAN_LABEL
,bdv2.ACCOUNT_TYPE
,rdv.A_C_OPEN_DATE
,rdv.A_C_CLOSING_DATE
,bdv2.GROUP_TYPE_CODE
,bdv2.ACCUMULATION_TYPE
,rdv.ADMINISTRATOR_TYPE
,satseg2.ACCOUNT_AUA_SEGMENT
,satseg2.ACCOUNT_AUA_SEGMENT_ORDER
,bdv2.ACCOUNT_IND
	FROM (
	SELECT *
			FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_IAS_NBIN
			)rdv
		JOIN (
		SELECT *
			FROM (
				SELECT *
					,ROW_NUMBER() OVER (
						PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
						) RN
				FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_IAS_NBIN
				) SATHUB
			WHERE SATHUB.RN = 1 AND SATHUB.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
			) rdvcv ON rdvcv.HK_HUB = rdv.HK_HUB
		JOIN
		(
			SELECT bdv.*
			FROM (
				SELECT *
				FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_CONTRACT_COMPUTE
				) bdv
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN1
					FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_CONTRACT_COMPUTE
					) SATHUB1
				WHERE SATHUB1.RN1 = 1 AND SATHUB1.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) bdvcv ON bdvcv.HK_HUB = bdv.HK_HUB
			
			)bdv2 ON bdv2.HK_HUB = rdv.HK_HUB
			JOIN DB_IAWT_''||ENV||''_DWH.SHARED_RDV.HUB_CONTRACT hub ON hub.HK_HUB = rdv.HK_HUB
			LEFT JOIN
			(
			SELECT satseg.*
			FROM (
				SELECT *
				FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_CONTRACT_AUA_SEG_COMPUTE
				) satseg
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN2
					FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_CONTRACT_AUA_SEG_COMPUTE
					) SATHUB2
				WHERE SATHUB2.RN2 = 1 AND SATHUB2.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) satsegcv ON satsegcv.HK_HUB = satseg.HK_HUB
			)satseg2 ON satseg2.HK_HUB = hub.HK_HUB	
			WHERE rdv.MD_ACTIVE = ''''A''''
			AND
			 bdv2.MD_ACTIVE = ''''A''''
			AND
			 bdv2.MD_SRC_SYSTEM = ''''IAS''''	
			AND
			 satseg2.MD_ACTIVE = ''''A''''
			
              '';
INS_UPDATE :='' UPDATE DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_ACCOUNTS
SET
	MD_HASHDIFF_TYPE2=SHA1(
				CONCAT(
				COALESCE(PLAN_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(PLAN_LABEL,''''#NULL#''''), ''''|'''',
				COALESCE(ACCOUNT_TYPE,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(OPEN_DATE),''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(CLOSE_DATE),''''#NULL#''''), ''''|'''',
				COALESCE(GROUP_TYPE_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(ACCUMULATION_TYPE,''''#NULL#''''), ''''|'''',
				COALESCE(ADMINISTRATOR_TYPE,''''#NULL#''''), ''''|'''',
				COALESCE(ACCOUNT_AUA_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(ACCOUNT_AUA_SEGMENT_ORDER),''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(ACCOUNT_IND),''''#NULL#'''')
				))
Where HK_HUB <> ''''0'''' and MD_SRC_SYSTEM = ''''IAS'''';
'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_RDV_BDV_SHARED_TO_DM_WT_DIMCLIENTS"("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_CLIENTS WHERE MD_SRC_SYSTEM = ''''IAS'''' '';
INS_INSERT := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_CLIENTS (
HK_HUB
,MD_START_DT
,MD_HASH_NAT_KEYS
,MD_CREATION_DT
,MD_SOURCE
,MD_CREATION_AUDIT_ID
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,CLIENT_ID
,PROVINCE_DESC
,PROVINCE_CODE
,COUNTRY_DESC
,COUNTRY_CODE
,INCOME_AMT
,INCOME_LEVEL_1_SEGMENT
,INCOME_LEVEL_1_SEGMENT_ORD
,INCOME_LEVEL_2_SEGMENT
,INCOME_LEVEL_2_SEGMENT_ORD
,CLIENT_AUA_SEGMENT
,CLIENT_AUA_SEGMENT_ORD
,AGE_SEGMENT
,AGE_SEGMENT_ORD
,NEW_CLIENT_IND
,CLIENT_START_DT )
SELECT hub.HK_HUB
	,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
	,hub.HK_HUB
	,CURRENT_TIMESTAMP
	,rdv.MD_SOURCE
	,CURRENT_TIMESTAMP
	,rdv.MD_SRC_SYSTEM
	,rdv.MD_EXTRACT_DT
	,hub.CLIENT_ID
	,BUSINESS_RULES.SHARED_CLIENTS.UDF_CONV_BR_ALL_CLIENTS_PROVINCE_005(rdv.CLIENT_RESIDENCE_REGION,rdv.CLIENT_RESIDENCE)
	,rdv.CLIENT_RESIDENCE_REGION
	,rdv.CLIENT_RESIDENCE
	,rdv.CLIENT_RESIDENCE
	,bdv2.INCOME_AMT
	,bdv2.INCOME_LEVEL_1_SEGMENT
	,bdv2.INCOME_LEVEL_1_SEGMENT_ORD
	,bdv2.INCOME_LEVEL_2_SEGMENT
	,bdv2.INCOME_LEVEL_2_SEGMENT_ORD
	,satseg2.CLIENT_AUA_SEGMENT
	,satseg2.CLIENT_AUA_SEGMENT_ORDER
	,bdv2.AGE_SEGMENT
	,bdv2.AGE_SEGMENT_ORD
	,bdv2.NEW_CLIENT_IND
	,bdv2.CLIENT_START_DT
	FROM (
	SELECT *
			FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_IAS_NBIN
			)rdv
		JOIN (
		SELECT *
			FROM (
				SELECT *
					,ROW_NUMBER() OVER (
						PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
						) RN
				FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_IAS_NBIN
				) SATHUB
			WHERE SATHUB.RN = 1 AND SATHUB.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
			) rdvcv ON rdvcv.HK_HUB = rdv.HK_HUB
		JOIN
		(
			SELECT bdv.*
			FROM (
				SELECT *
				FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_COMPUTE
				) bdv
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN1
					FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_COMPUTE
					) SATHUB1
				WHERE SATHUB1.RN1 = 1 AND SATHUB1.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) bdvcv ON bdvcv.HK_HUB = bdv.HK_HUB
			
			)bdv2 ON bdv2.HK_HUB = rdv.HK_HUB
			JOIN DB_IAWT_''||ENV||''_DWH.SHARED_RDV.HUB_PARTY_ROLE_ACCOUNT_HOLDER hub ON hub.HK_HUB = rdv.HK_HUB
			LEFT JOIN
			(
			SELECT satseg.*
			FROM (
				SELECT *
				FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_AUA_SEG_COMPUTE
				) satseg
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN2
					FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_AUA_SEG_COMPUTE
					) SATHUB2
				WHERE SATHUB2.RN2 = 1 AND SATHUB2.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) satsegcv ON satsegcv.HK_HUB = satseg.HK_HUB
			)satseg2 ON satseg2.HK_HUB = hub.HK_HUB	
			WHERE rdv.MD_ACTIVE = ''''A''''
			AND
			 bdv2.MD_ACTIVE = ''''A''''
			AND
			 bdv2.MD_SRC_SYSTEM = ''''IAS''''	
			AND
			 satseg2.MD_ACTIVE = ''''A''''
			AND
			 satseg2.MD_SRC_SYSTEM = ''''IAS''''
              '';
INS_UPDATE :='' UPDATE DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_CLIENTS
SET
	MD_HASHDIFF_TYPE2=SHA1(
				CONCAT(
				COALESCE(PROVINCE_DESC,''''#NULL#''''), ''''|'''',
				COALESCE(PROVINCE_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(COUNTRY_DESC,''''#NULL#''''), ''''|'''',
				COALESCE(COUNTRY_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(INCOME_AMT),''''#NULL#''''), ''''|'''',
				COALESCE(INCOME_LEVEL_1_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(INCOME_LEVEL_1_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(INCOME_LEVEL_2_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(INCOME_LEVEL_2_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(CLIENT_AUA_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(CLIENT_AUA_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(AGE_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(AGE_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(NEW_CLIENT_IND,''''#NULL#'''') , ''''|'''',
				COALESCE(TO_VARCHAR(CLIENT_START_DT),''''#NULL#'''')
				))
Where HK_HUB <> ''''0'''' AND MD_SRC_SYSTEM = ''''IAS'''';
'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_RDV_BDV_UNIVERIS_SHARED_TO_DM_WT_DIMCLIENTS"("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_CLIENTS WHERE MD_SRC_SYSTEM = ''''IAS-UNIVERIS'''' '';
INS_INSERT := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_CLIENTS (
HK_HUB
,MD_START_DT
,MD_HASH_NAT_KEYS
,MD_CREATION_DT
,MD_SOURCE
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,CLIENT_ID
,PROVINCE_DESC
,PROVINCE_CODE
,COUNTRY_DESC
,COUNTRY_CODE
,INCOME_AMT
,INCOME_LEVEL_1_SEGMENT
,INCOME_LEVEL_1_SEGMENT_ORD
,INCOME_LEVEL_2_SEGMENT
,INCOME_LEVEL_2_SEGMENT_ORD
,CLIENT_AUA_SEGMENT
,CLIENT_AUA_SEGMENT_ORD
,AGE_SEGMENT
,AGE_SEGMENT_ORD
,NEW_CLIENT_IND )
SELECT hub.HK_HUB
	,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
	,hub.HK_HUB
	,CURRENT_TIMESTAMP
	,rdv.MD_SOURCE
	,rdv.MD_SRC_SYSTEM
	,rdv.MD_EXTRACT_DT
	,hub.CLIENT_ID
	,BUSINESS_RULES.SHARED_CLIENTS.UDF_CONV_BR_ALL_CLIENTS_PROVINCE_005(rdv.IVR_RES_CD,CASE WHEN rdv.IVR_RES_CD IN (''''SK'''',''''MB'''',''''NS'''',''''NL'''',''''PE'''',''''QC'''',''''ON'''',''''BC'''',''''NB'''',''''AB'''',''''NT'''',''''YT'''',''''NU'''') THEN ''''CAN'''' WHEN LEN(rdv.IVR_RES_CD) = 3 THEN rdv.IVR_RES_CD ELSE ''''Unknown'''' END)
	,rdv.IVR_RES_CD
	,CASE WHEN rdv.IVR_RES_CD IN (''''SK'''',''''MB'''',''''NS'''',''''NL'''',''''PE'''',''''QC'''',''''ON'''',''''BC'''',''''NB'''',''''AB'''',''''NT'''',''''YT'''',''''NU'''') THEN ''''CAN'''' WHEN LEN(rdv.IVR_RES_CD) = 3 THEN rdv.IVR_RES_CD ELSE ''''Unknown'''' END
	,CASE WHEN rdv.IVR_RES_CD IN (''''SK'''',''''MB'''',''''NS'''',''''NL'''',''''PE'''',''''QC'''',''''ON'''',''''BC'''',''''NB'''',''''AB'''',''''NT'''',''''YT'''',''''NU'''') THEN ''''CAN'''' WHEN LEN(rdv.IVR_RES_CD) = 3 THEN rdv.IVR_RES_CD ELSE ''''Unknown'''' END
	,bdv2.INCOME_AMT
	,bdv2.INCOME_LEVEL_1_SEGMENT
	,bdv2.INCOME_LEVEL_1_SEGMENT_ORD
	,bdv2.INCOME_LEVEL_2_SEGMENT
	,bdv2.INCOME_LEVEL_2_SEGMENT_ORD
	,satseg2.CLIENT_AUA_SEGMENT
	,satseg2.CLIENT_AUA_SEGMENT_ORDER
	,bdv2.AGE_SEGMENT
	,bdv2.AGE_SEGMENT_ORD
	,bdv2.NEW_CLIENT_IND
	FROM (
	SELECT *
			FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_IAS_UNIVERIS
			)rdv
		JOIN (
		SELECT *
			FROM (
				SELECT *
					,ROW_NUMBER() OVER (
						PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
						) RN
				FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_IAS_UNIVERIS
				) SATHUB
			WHERE SATHUB.RN = 1 AND SATHUB.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
			) rdvcv ON rdvcv.HK_HUB = rdv.HK_HUB
		JOIN
		(
			SELECT bdv.*
			FROM (
				SELECT *
				FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_COMPUTE
				) bdv
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN1
					FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_COMPUTE
					) SATHUB1
				WHERE SATHUB1.RN1 = 1 AND SATHUB1.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) bdvcv ON bdvcv.HK_HUB = bdv.HK_HUB
			
			)bdv2 ON bdv2.HK_HUB = rdv.HK_HUB
			JOIN DB_IAWT_''||ENV||''_DWH.SHARED_RDV.HUB_PARTY_ROLE_ACCOUNT_HOLDER hub ON hub.HK_HUB = rdv.HK_HUB
			LEFT JOIN
			(
			SELECT satseg.*
			FROM (
				SELECT *
				FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_AUA_SEG_COMPUTE
				) satseg
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN2
					FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_AUA_SEG_COMPUTE
					) SATHUB2
				WHERE SATHUB2.RN2 = 1 AND SATHUB2.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) satsegcv ON satsegcv.HK_HUB = satseg.HK_HUB
			)satseg2 ON satseg2.HK_HUB = hub.HK_HUB	
			WHERE rdv.MD_ACTIVE = ''''A''''
			AND
			 bdv2.MD_ACTIVE = ''''A''''
			AND
			 bdv2.MD_SRC_SYSTEM = ''''IAS-UNIVERIS''''	
			AND
			 satseg2.MD_ACTIVE = ''''A''''
			AND
			 satseg2.MD_SRC_SYSTEM = ''''IAS-UNIVERIS''''
              '';
			  
INS_UPDATE :='' UPDATE DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_CLIENTS
SET
	MD_HASHDIFF_TYPE2=SHA1(
				CONCAT(
				COALESCE(PROVINCE_DESC,''''#NULL#''''), ''''|'''',
				COALESCE(PROVINCE_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(COUNTRY_DESC,''''#NULL#''''), ''''|'''',
				COALESCE(COUNTRY_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(INCOME_AMT),''''#NULL#''''), ''''|'''',
				COALESCE(INCOME_LEVEL_1_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(INCOME_LEVEL_1_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(INCOME_LEVEL_2_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(INCOME_LEVEL_2_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(CLIENT_AUA_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(CLIENT_AUA_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(AGE_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(AGE_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(NEW_CLIENT_IND,''''#NULL#'''')
				))
Where HK_HUB <> ''''0'''' AND MD_SRC_SYSTEM = ''''IAS-UNIVERIS'''';
'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_UNIVERIS_BDV_SHARED_TO_DM_WT_DIMPLANS"("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;
BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_PLANS WHERE MD_SRC_SYSTEM = ''''IAS-UNIVERIS'''' '';
INS_INSERT := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_PLANS (HK_HUB,MD_HASH_NAT_KEYS,MD_SOURCE,MD_SRC_SYSTEM,MD_EXTRACT_DT,PLAN_CODE,PLAN_LABEL,ACCOUNT_TYPE,GROUP_TYPE_CODE,ACCUMULATION_TYPE,MD_CREATION_DT,MD_START_DT)
SELECT RDV.HK_HUB,
	RDV.HK_HUB,
	RDV.MD_SOURCE,
	RDV.MD_SRC_SYSTEM,
	RDV.MD_EXTRACT_DT,
	RDV.PLAN_CODE,
	RDV.PLAN_LABEL,
	RDV.ACCOUNT_TYPE,
	RDV.GROUP_TYPE_CODE,
	RDV.ACCUMULATION_TYPE,
	CURRENT_TIMESTAMP,
	TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
FROM (
	SELECT *
	FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE
	) rdv
	JOIN (
	SELECT *
	FROM (
		SELECT *
			,ROW_NUMBER() OVER (
				PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
				) RN
		FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE lv
		) SATHUB
	WHERE SATHUB.RN = 1
	) lv ON lv.HK_HUB = rdv.HK_HUB
WHERE rdv.MD_ACTIVE = ''''A'''' AND lv.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') AND rdv.MD_SRC_SYSTEM = ''''IAS-UNIVERIS''''
              '';
INS_UPDATE :=''
UPDATE DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_PLANS
SET
	MD_HASHDIFF_TYPE2=SHA1(
				CONCAT(
				COALESCE(PLAN_LABEL,''''#NULL#''''), ''''|'''',
				COALESCE(ACCOUNT_TYPE,''''#NULL#''''), ''''|'''',
				COALESCE(GROUP_TYPE_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(ACCUMULATION_TYPE,''''#NULL#''''), ''''|''''
				))
Where HK_HUB <> ''''0''''
AND MD_SRC_SYSTEM = ''''IAS-UNIVERIS''''
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
use schema SHARED_BKP;

create or replace TABLE DIM_ACCOUNTS (
	HK_HUB VARCHAR(64),
	MD_SRCSYSTEM VARCHAR(8),
	DIM_ACCOUNT_PLN_SYSID VARCHAR(16777216),
	DIM_ACCOUNT_IVR_SYSID VARCHAR(16777216),
	PLAN_MNEMONIC_CD VARCHAR(8000),
	PLAN_MNEMONIC_LBL VARCHAR(8000),
	ACCOUNT_TYPE VARCHAR(14),
	PLAN_STATUS VARCHAR(8000),
	SETUP_DATE TIMESTAMP_NTZ(9),
	CLOSE_DATE TIMESTAMP_NTZ(9),
	GROUP_TYPE_CD VARCHAR(8000),
	ADMINISTRATOR_TYPE VARCHAR(8000)
);
create or replace TABLE DIM_ADVISORS (
	MD_SRCSYSTEM VARCHAR(50),
	ID VARCHAR(50),
	MASTER_CODE VARCHAR(50),
	COMPANY_CODE VARCHAR(6),
	COMPANY_NAME VARCHAR(20),
	REGULATORY_ORGANIZATION_CODE VARCHAR(5),
	REGULATORY_ORGANIZATION_NAME VARCHAR(53),
	DEALER_CODE VARCHAR(50),
	DEALER_NAME VARCHAR(512),
	REGION_CODE VARCHAR(50),
	REGION_NAME VARCHAR(512),
	REGION_VP VARCHAR(16777216),
	BRANCH_CODE VARCHAR(50),
	BRANCH_NAME VARCHAR(512),
	TEAM_CODE NUMBER(38,5),
	TEAM_NAME VARCHAR(512),
	ADVISOR_FULLNAME VARCHAR(16777216),
	LAST_NAME VARCHAR(512),
	FIRST_NAME VARCHAR(512),
	ADVISOR_CORPORATION_NAME VARCHAR(512),
	STATUS VARCHAR(512),
	GROUP_RSP_INDICATOR VARCHAR(512),
	PROVINCE VARCHAR(512),
	ADVISOR_AUA_SEGMENT VARCHAR(16777216),
	ADVISOR_AUA_SEGMENT_ORDER NUMBER(1,0),
	MD_LOADDATE TIMESTAMP_NTZ(9),
	CREATION_DATE DATE,
	NEW_ADVISOR NUMBER(1,0)
);
create or replace TABLE DIM_CLIENTS (
	MD_SRCSYSTEM VARCHAR(50),
	ID VARCHAR(16777216),
	CLIENT_TYPE VARCHAR(30),
	PROVINCE VARCHAR(50),
	COUNTRY VARCHAR(60),
	INCOME_SEGMENTATION VARCHAR(16777216),
	INCOME_SEG_ORD NUMBER(1,0),
	SALARY VARCHAR(16777216),
	SALARY_ORD NUMBER(1,0),
	CLIENT_AUA_SEGMENT VARCHAR(16777216),
	ADVISOR_AUA_SEGMENT_ORDER NUMBER(1,0),
	AGE_SEGMENTATION VARCHAR(16777216),
	AGE_SEGMENTATION_ORD NUMBER(1,0),
	IVR_PRIM_BDT DATE,
	CORP_CD VARCHAR(30),
	MD_LOADDATE TIMESTAMP_NTZ(9),
	CREATION_DATE DATE,
	NEW_CLIENT NUMBER(1,0)
);
create or replace TABLE DIM_DATE (
	DATE DATE NOT NULL,
	FULL_DATE_DESC VARCHAR(64) NOT NULL,
	DAY_NUM_IN_WEEK NUMBER(1,0) NOT NULL,
	DAY_NUM_IN_MONTH NUMBER(2,0) NOT NULL,
	DAY_NUM_IN_YEAR NUMBER(3,0) NOT NULL,
	DAY_NAME VARCHAR(10) NOT NULL,
	DAY_ABBREV VARCHAR(3) NOT NULL,
	WEEKDAY_IND VARCHAR(64) NOT NULL,
	US_HOLIDAY_IND VARCHAR(64) NOT NULL,
	_HOLIDAY_IND VARCHAR(64) NOT NULL,
	MONTH_END_IND VARCHAR(64) NOT NULL,
	WEEK_BEGIN_DATE_NKEY NUMBER(9,0) NOT NULL,
	WEEK_BEGIN_DATE DATE NOT NULL,
	WEEK_END_DATE_NKEY NUMBER(9,0) NOT NULL,
	WEEK_END_DATE DATE NOT NULL,
	WEEK_NUM_IN_YEAR NUMBER(9,0) NOT NULL,
	MONTH_NAME VARCHAR(10) NOT NULL,
	MONTH_ABBREV VARCHAR(3) NOT NULL,
	MONTH_NUM_IN_YEAR NUMBER(2,0) NOT NULL,
	YEARMONTH VARCHAR(10) NOT NULL,
	QUARTER NUMBER(1,0) NOT NULL,
	YEARQUARTER VARCHAR(10) NOT NULL,
	YEAR NUMBER(5,0) NOT NULL,
	FISCAL_WEEK_NUM NUMBER(2,0) NOT NULL,
	FISCAL_MONTH_NUM NUMBER(2,0) NOT NULL,
	FISCAL_YEARMONTH VARCHAR(10) NOT NULL,
	FISCAL_QUARTER NUMBER(1,0) NOT NULL,
	FISCAL_YEARQUARTER VARCHAR(10) NOT NULL,
	FISCAL_HALFYEAR NUMBER(1,0) NOT NULL,
	FISCAL_YEAR NUMBER(5,0) NOT NULL,
	SQL_TIMESTAMP TIMESTAMP_NTZ(9),
	CURRENT_ROW_IND VARCHAR(1) DEFAULT 'Y',
	EFFECTIVE_DATE DATE DEFAULT CAST(CURRENT_TIMESTAMP() AS DATE),
	EXPIRATION_DATE DATE DEFAULT CAST('9999-12-31' AS DATE)
)COMMENT='Type 0 Dimension Table Housing Calendar and Fiscal Year Date Attributes'
;
create or replace TABLE DIM_MARKETPRODUCTS (
	MD_SRCSYSTEM VARCHAR(50),
	ID VARCHAR(16777216),
	SYMBOL VARCHAR(512),
	NAME_S VARCHAR(512),
	ASSET_CATEGORY VARCHAR(512),
	CATEGORY VARCHAR(512),
	GROUP_S VARCHAR(512),
	ISSUER_COMPANY_CODE VARCHAR(4),
	ISSUER_COMPANY_NAME VARCHAR(1000),
	MD_LOADDATE TIMESTAMP_NTZ(7)
);
create or replace TABLE DIM_PLANS (
	MD_SRCSYSTEM VARCHAR(16777216),
	ID VARCHAR(8000),
	PLAN_CODE VARCHAR(8000),
	PLAN_LABEL VARCHAR(8000),
	ACCOUNT_TYPE VARCHAR(16777216),
	GROUP_TYPE_CODE VARCHAR(8000),
	ACCUMULATION_TYPE VARCHAR(100),
	MD_LOADDATE TIMESTAMP_NTZ(7)
);
create or replace TABLE DIM_REGISTERED_REPRESENTATIVES (
	MD_SRCSYSTEM VARCHAR(8),
	ID VARCHAR(16777216),
	COMPANY_CODE VARCHAR(50),
	COMPANY_NAME VARCHAR(512),
	REGULATORY_ORGANIZATION_CODE VARCHAR(50),
	REGULATORY_ORGANIZATION_NAME VARCHAR(512),
	DEALER_CODE VARCHAR(50),
	DEALER_NAME VARCHAR(512),
	REGION_CODE VARCHAR(50),
	REGION_NAME VARCHAR(512),
	REGION_VP VARCHAR(16777216),
	BRANCH_CODE VARCHAR(16777216),
	BRANCH_NAME VARCHAR(16777216),
	TEAM_CODE VARCHAR(50),
	TEAM_NAME VARCHAR(512),
	RR_FULLNAME VARCHAR(16777216),
	RR_CODE VARCHAR(16777216),
	LAST_NAME VARCHAR(16777216),
	FIRST_NAME VARCHAR(16777216),
	RR_CORPORATION_NAME VARCHAR(16777216),
	STATUS VARCHAR(16777216),
	GROUP_RSP_INDICATOR VARCHAR(512),
	MD_LOADDATE TIMESTAMP_NTZ(7)
);
create or replace TABLE WORKING_TABLE_DIM_ACCOUNTS_MERGE (
	HK_HUB VARCHAR(64),
	MD_SRCSYSTEM VARCHAR(8),
	DIM_ACCOUNT_PLN_SYSID VARCHAR(16777216),
	DIM_ACCOUNT_IVR_SYSID VARCHAR(16777216),
	PLAN_MNEMONIC_CD VARCHAR(8000),
	PLAN_MNEMONIC_LBL VARCHAR(8000),
	ACCOUNT_TYPE VARCHAR(14),
	PLAN_STATUS VARCHAR(8000),
	SETUP_DATE TIMESTAMP_NTZ(9),
	CLOSE_DATE TIMESTAMP_NTZ(9),
	GROUP_TYPE_CD VARCHAR(8000),
	ADMINISTRATOR_TYPE VARCHAR(8000)
);
create or replace view VW_DIM_ADVISORS_ACCESS(
	MD_SRCSYSTEM,
	ID,
	"Master code",
	"Company code",
	"Company name",
	"Regulatory organization code",
	"Regulatory organization name",
	"Dealer code",
	"Dealer name",
	"Region code",
	"Region name",
	"Region VP",
	"Branch code",
	"Branch name",
	"Team code",
	"Team name",
	"Advisor fullname",
	"Last name",
	"First name",
	"Advisor corporation name",
	"Status",
	"Group RSP indicator",
	"Province",
	"Advisor AUA segment",
	"Advisor AUA segment order"
) as 

SELECT R.MD_SRC_SYSTEM, ID,MASTER_CODE ,COMPANY_CODE ,COMPANY_NAME ,REGULATORY_ORGANIZATION_CODE ,REGULATORY_ORGANIZATION_NAME ,DEALER_CODE , DEALER_NAME , REGION_CODE ,REGION_NAME , REGION_VP , BRANCHCODE ,BRANCHNAME , TEAM_CODE ,TEAM_NAME , ADVISOR_FULLNAME ,LASTNAME , FIRSTNAME , ADVISOR_CORPORATION_NAME ,STATUS , GROUP_RSP_INDICATOR ,PROVINCE , ADVISOR_AUA_SEGMENT , ADVISOR_AUA_SEGMENT_ORDER 
FROM DB_IAWT_DEV_DM.SHARED.DIM_ADVISOR R
INNER JOIN DB_IAWT_DEV_DM.BR.DIM_USER U
ON U.USER_LOGIN = CURRENT_USER()  AND  (R.MD_SRC_SYSTEM = U.CAPACITY  OR U.CAPACITY  ='ALL');
create or replace view VW_DIM_PLANS_ACCESS(
	MD_SRCSYSTEM,
	ID,
	"Plan code",
	"Plan label",
	"Account type",
	"Group type code",
	"Accumulation type"
) as 

SELECT R.MD_SRC_SYSTEM, ID,PLAN_CODE ,PLAN_LABEL ,ACCOUNT_TYPE , GROUP_TYPE_CODE , ACCUMULATION_TYPE 
FROM DB_IAWT_DEV_DM.SHARED.DIM_PLANS R
INNER JOIN DB_IAWT_DEV_DM.BR.DIM_USER U
ON U.USER_LOGIN = CURRENT_USER()  AND  (R.MD_SRC_SYSTEM=U.CAPACITY  OR U.CAPACITY  ='ALL');
use schema STRATEGIC;

create or replace TABLE ACCOUNTS_CLIENTS_SUMMARY_DAILY (
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	NB_MANAGED NUMBER(20,2) COMMENT 'Number of managed accounts',
	NB_FEE_BASED NUMBER(20,2) COMMENT 'Number of fee based accounts',
	NB_COMMISSION NUMBER(20,2) COMMENT 'Number of commision based accounts',
	NB_CLIENT NUMBER(20,2) COMMENT 'Number of Clientss',
	NB_ACCOUNT NUMBER(20,2) COMMENT 'Number of accounts',
	PROCESS_DATE TIMESTAMP_NTZ(9) COMMENT 'process date'
);
create or replace TABLE ACCOUNTS_CLIENTS_SUMMARY_RVP_DAILY (
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	RVPID NUMBER(10,0) COMMENT 'RVP ID',
	NB_MANAGED NUMBER(20,2) COMMENT 'Number of managed accounts',
	NB_FEE_BASED NUMBER(20,2) COMMENT 'Number of fee based accounts',
	NB_COMMISSION NUMBER(20,2) COMMENT 'Number of commision based accounts',
	NB_CLIENT NUMBER(20,2) COMMENT 'Number of Clientss',
	NB_ACCOUNT NUMBER(20,2) COMMENT 'Number of accounts',
	PROCESS_DATE TIMESTAMP_NTZ(9) COMMENT 'process date'
);
create or replace TABLE ASSETS_SUMMARY_BYACCOUNTTYPE_DAILY (
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	VALUE NUMBER(20,2) COMMENT 'Asset Summary Value for Account Type',
	ACCOUNT_TYPE VARCHAR(1000) COMMENT 'Account Type'
);
create or replace TABLE ASSETS_SUMMARY_BYACCOUNTTYPE_RVP_DAILY (
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	RVPID NUMBER(10,0) COMMENT 'RVP Ids',
	VALUE NUMBER(20,2) COMMENT 'Asset Summary Value for Account Type',
	ACCOUNT_TYPE VARCHAR(1000) COMMENT 'Account Types'
);
create or replace TABLE ASSETS_SUMMARY_BYCOMMISSIONTYPE (
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	PROCESS_DATE TIMESTAMP_NTZ(9),
	VALUE VARCHAR(16777216),
	COMMISSION_TYPE VARCHAR(16777216)
);
create or replace TABLE ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT_DAILY (
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	PROCESS_DATE TIMESTAMP_NTZ(9) COMMENT 'process date',
	COMMISSION_TYPE VARCHAR(16777216) COMMENT 'Commission type',
	EQT NUMBER(20,2) COMMENT 'EQT',
	MUT NUMBER(20,2) COMMENT 'MUT',
	FIX NUMBER(20,2) COMMENT 'FIX',
	OFF NUMBER(20,2) COMMENT 'OFF',
	CASH NUMBER(20,2) COMMENT 'CASH',
	TOTAL NUMBER(20,2) COMMENT 'TOTAL'
);
create or replace TABLE ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT_RVP_DAILY (
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	RVPID NUMBER(10,0),
	PROCESS_DATE TIMESTAMP_NTZ(9) COMMENT 'process date',
	COMMISSION_TYPE VARCHAR(16777216) COMMENT 'Commission type',
	EQT NUMBER(20,2) COMMENT 'EQT',
	MUT NUMBER(20,2) COMMENT 'MUT',
	FIX NUMBER(20,2) COMMENT 'FIX',
	OFF NUMBER(20,2) COMMENT 'OFF',
	CASH NUMBER(20,2) COMMENT 'CASH',
	TOTAL NUMBER(20,2) COMMENT 'TOTAL'
);
create or replace TABLE ASSETS_SUMMARY_BYCOMMISSIONTYPE_DAILY (
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	PROCESS_DATE TIMESTAMP_NTZ(9) COMMENT 'process date',
	VALUE VARCHAR(16777216) COMMENT 'value',
	COMMISSION_TYPE VARCHAR(16777216) COMMENT 'Commission type'
);
create or replace TABLE ASSETS_SUMMARY_BYCOMMISSIONTYPE_RVP_DAILY (
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	RVPID NUMBER(10,0) COMMENT 'RVP ID',
	PROCESS_DATE TIMESTAMP_NTZ(9) COMMENT 'process date',
	VALUE VARCHAR(16777216) COMMENT 'value',
	COMMISSION_TYPE VARCHAR(16777216) COMMENT 'Commission type'
);
create or replace TABLE ASSETS_SUMMARY_BYPRODUCT_DAILY (
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	PROCESS_DATE TIMESTAMP_NTZ(9),
	VALUE VARCHAR(16777216),
	PRODUCT_CODE VARCHAR(16777216)
);
create or replace TABLE ASSETS_SUMMARY_BYPRODUCT_RVP_DAILY (
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	RVPID NUMBER(10,0),
	PROCESS_DATE TIMESTAMP_NTZ(9),
	VALUE VARCHAR(16777216),
	PRODUCT_CODE VARCHAR(16777216)
);
create or replace TABLE ASSETS_SUMMARY_BYPROVINCE_DAILY (
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	PROCESS_DATE TIMESTAMP_NTZ(9) COMMENT 'Processed Date',
	VALUE NUMBER(20,2) COMMENT 'Asset Summary Value for Province Code',
	PROVINCE_CODE VARCHAR(1000) COMMENT 'Province Code'
);
create or replace TABLE ASSETS_SUMMARY_BYPROVINCE_RVP_DAILY (
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	RVPID NUMBER(10,0) COMMENT 'RVP Ids',
	PROCESS_DATE TIMESTAMP_NTZ(9) COMMENT 'Processed Date',
	VALUE NUMBER(20,2) COMMENT 'Asset Summary Value for Province',
	PROVINCE_CODE VARCHAR(1000) COMMENT 'Province Code'
);
create or replace view VW_ACCOUNTS_CLIENTS_SUMMARY_DAILY(
	LOAD_DATE,
	NB_MANAGED,
	NB_FEEBASED,
	NB_COMMISSION,
	NB_CLIENT,
	NB_ACCOUNT,
	BALANCE_DATE
) as select 	MD_START_DT as Load_Date,
NB_MANAGED as nb_Managed,
	NB_FEE_BASED as nb_Feebased,
	NB_COMMISSION as nb_Commission,
	NB_CLIENT as nb_Client,
	NB_ACCOUNT as nb_Account,
	PROCESS_DATE as Balance_Date
	from DB_IAWT_DEV_DM.STRATEGIC.ACCOUNTS_CLIENTS_SUMMARY_DAILY;
create or replace view VW_ACCOUNTS_CLIENTS_SUMMARY_RVP_DAILY(
	LOAD_DATE,
	RVP,
	NB_MANAGED,
	NB_FEE_BASED,
	NB_COMMISSION,
	NB_CLIENT,
	NB_ACCOUNT,
	BALANCE_DATE
) as select 	MD_START_DT as Load_Date,
RVPID as RVP,
	NB_MANAGED  as nb_Managed,
	NB_FEE_BASED as nb_Feebased,
	NB_COMMISSION as nb_Commission,
	NB_CLIENT as nb_Client,
	NB_ACCOUNT as nb_Account,
	PROCESS_DATE as Balance_Date
from DB_IAWT_DEV_DM.STRATEGIC.ACCOUNTS_CLIENTS_SUMMARY_RVP_DAILY;
create or replace view VW_ASSETS_SUMMARY_BYACCOUNTTYPE_DAILY(
	LOAD_DATE,
	AUA,
	PROGRAM_TYPE
) as select 	MD_START_DT as Load_Date,
VALUE as AUA,
	ACCOUNT_TYPE as Program_Type
from DB_IAWT_DEV_DM.STRATEGIC.ASSETS_SUMMARY_BYACCOUNTTYPE_DAILY;
create or replace view VW_ASSETS_SUMMARY_BYACCOUNTTYPE_RVP_DAILY(
	LOAD_DATE,
	RVP,
	AUA,
	PROGRAM_TYPE
) as select 	MD_START_DT as Load_Date,
RVPID as RVP,
	VALUE as AUA,
	ACCOUNT_TYPE as Program_Type
from DB_IAWT_DEV_DM.STRATEGIC.ASSETS_SUMMARY_BYACCOUNTTYPE_RVP_DAILY;
create or replace view VW_ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT_DAILY(
	LOAD_DATE,
	BALANCE_DATE,
	COMMISSION_TYPE,
	EQUITY,
	MUTUAL_FUNDS,
	FIXED_INCOME,
	OFFBOOK_ASSETS,
	CASH,
	AUA
) as select 	MD_START_DT as Load_Date,
PROCESS_DATE as Balance_Date,
	COMMISSION_TYPE as Commission_type,
	EQT as Equity,
	MUT as Mutual_Funds,
	FIX as Fixed_Income,
	OFF as Offbook_Assets,
	CASH as Cash,
	TOTAL as AUA
from DB_IAWT_DEV_DM.STRATEGIC.ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT_DAILY;
create or replace view VW_ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT_RVP_DAILY(
	LOAD_DATE,
	RVP,
	BALANCE_DATE,
	COMMISSION_TYPE,
	EQUITY,
	MUTUAL_FUNDS,
	FIXED_INCOME,
	OFFBOOK_ASSETS,
	CASH,
	AUA
) as select 	MD_START_DT as Load_Date,
RVPID as RVP,
	PROCESS_DATE as Balance_Date,
	COMMISSION_TYPE as Commission_type,
	EQT as Equity,
	MUT as Mutual_Funds,
	FIX as Fixed_Income,
	OFF as Offbook_Assets,
	CASH as Cash,
	TOTAL as AUA
from DB_IAWT_DEV_DM.STRATEGIC.ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT_RVP_DAILY;
create or replace view VW_ASSETS_SUMMARY_BYCOMMISSIONTYPE_DAILY(
	LOAD_DATE,
	BALANCE_DATE,
	AUA,
	COMMISSION_TYPE
) as select 	MD_START_DT as Load_Date,
PROCESS_DATE as Balance_Date,
	VALUE as AUA,
	COMMISSION_TYPE as Commission_type
from DB_IAWT_DEV_DM.STRATEGIC.ASSETS_SUMMARY_BYCOMMISSIONTYPE_DAILY;
create or replace view VW_ASSETS_SUMMARY_BYCOMMISSIONTYPE_RVP_DAILY(
	LOAD_DATE,
	RVP,
	BALANCE_DATE,
	AUA,
	COMMISSION_TYPE
) as select 	MD_START_DT as Load_Date,
RVPID as RVP,
	PROCESS_DATE as Balance_Date,
	VALUE as AUA,
	COMMISSION_TYPE as Commission_type
from DB_IAWT_DEV_DM.STRATEGIC.ASSETS_SUMMARY_BYCOMMISSIONTYPE_RVP_DAILY;
create or replace view VW_ASSETS_SUMMARY_BYPRODUCT_DAILY(
	LOAD_DATE,
	BALANCE_DATE,
	AUA,
	PRODUCT_TYPE
) as select 	MD_START_DT as Load_Date,
PROCESS_DATE as Balance_Date,
	VALUE as AUA,
	PRODUCT_CODE as Product_Type
from DB_IAWT_DEV_DM.STRATEGIC.ASSETS_SUMMARY_BYPRODUCT_DAILY;
create or replace view VW_ASSETS_SUMMARY_BYPRODUCT_RVP_DAILY(
	LOAD_DATE,
	RVP,
	BALANCE_DATE,
	AUA,
	PRODUCT_TYPE
) as select 	MD_START_DT as Load_Date,
RVPID as RVP,
	PROCESS_DATE as Balance_Date,
	VALUE as AUA,
	PRODUCT_CODE as Product_Type
from DB_IAWT_DEV_DM.STRATEGIC.ASSETS_SUMMARY_BYPRODUCT_RVP_DAILY;
create or replace view VW_ASSETS_SUMMARY_BYPROVINCE_DAILY(
	LOAD_DATE,
	BALANCE_DATE,
	AUA,
	PROVINCE
) as select 	MD_START_DT as Load_Date,
PROCESS_DATE as Balance_Date,
	VALUE as AUA,
	PROVINCE_CODE as Province
from DB_IAWT_DEV_DM.STRATEGIC.ASSETS_SUMMARY_BYPROVINCE_DAILY;
create or replace view VW_ASSETS_SUMMARY_BYPROVINCE_RVP_DAILY(
	LOAD_DATE,
	RVP,
	BALANCE_DATE,
	AUA,
	PROVINCE
) as select 	MD_START_DT as Load_Date,
RVPID as RVP,
	PROCESS_DATE as Balance_Date,
	VALUE as AUA,
	PROVINCE_CODE as Province
from DB_IAWT_DEV_DM.STRATEGIC.ASSETS_SUMMARY_BYPROVINCE_RVP_DAILY;
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_ACCOUNTS_CLIENTS_SUMMARY_DAILY"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAWT_''||ENV||''_DM.STRATEGIC.ACCOUNTS_CLIENTS_SUMMARY_DAILY WHERE MD_START_DT = TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')'';
INS_QUERY := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.STRATEGIC.ACCOUNTS_CLIENTS_SUMMARY_DAILY(
	MD_START_DT,
	MD_SOURCE,	
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	NB_MANAGED,
	NB_FEE_BASED,
	NB_COMMISSION,
	NB_CLIENT,
	NB_ACCOUNT,
	PROCESS_DATE)
	(SELECT
	V.MD_START_DT,
	V.MD_SOURCE,
	CURRENT_DATE,
	CONCAT(''||CHAR(39)||JOB_AUDIT_ID||CHAR(39)||'',''''#'''',''||CHAR(39)||JOB_NAME||CHAR(39)||'',''''-'''',''||CHAR(39)||RUN_ID||CHAR(39)||''),
	V.MD_SRC_SYSTEM,
	V.MD_EXTRACT_DT,
	V.NB_MANAGED,
	V.NB_FEE_BASED,
	V.NB_COMMISSION,
	V.NB_CLIENT,
	V.NB_ACCOUNT,
	V.PROCESS_DATE
	FROM DB_IAWT_''||ENV||''_STG.IAPW_PORTAL_API.VW_ACCOUNTS_CLIENTS_SUMMARY V)'';

	
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_ACCOUNTS_CLIENTS_SUMMARY_RVP_DAILY"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAWT_''||ENV||''_DM.STRATEGIC.ACCOUNTS_CLIENTS_SUMMARY_RVP_DAILY WHERE MD_START_DT = TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')'';
INS_QUERY := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.STRATEGIC.ACCOUNTS_CLIENTS_SUMMARY_RVP_DAILY(
	MD_START_DT,
	MD_SOURCE,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	RVPID,
	NB_MANAGED,
	NB_FEE_BASED,
	NB_COMMISSION,
	NB_CLIENT,
	NB_ACCOUNT,
	PROCESS_DATE)
	(SELECT
	V.MD_START_DT,
	V.MD_SOURCE,
	CURRENT_DATE,
	CONCAT(''||CHAR(39)||JOB_AUDIT_ID||CHAR(39)||'',''''#'''',''||CHAR(39)||JOB_NAME||CHAR(39)||'',''''-'''',''||CHAR(39)||RUN_ID||CHAR(39)||''),
	V.MD_SRC_SYSTEM,
	V.MD_EXTRACT_DT,
	V.RVPID,
	V.NB_MANAGED,
	V.NB_FEE_BASED,
	V.NB_COMMISSION,
	V.NB_CLIENT,
	V.NB_ACCOUNT,
	V.PROCESS_DATE
	FROM DB_IAWT_''||ENV||''_STG.IAPW_PORTAL_API.VW_ACCOUNTS_CLIENTS_SUMMARY_RVP V)'';
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_ASSEST_SUMMARY_BYACCOUNTTYPE"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYACCOUNTTYPE_DAILY WHERE MD_START_DT = TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')'';
INS_QUERY := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYACCOUNTTYPE_DAILY(
	MD_START_DT,
	MD_SOURCE,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	VALUE,
	ACCOUNT_TYPE)
	(SELECT
	V.MD_START_DT,
	V.MD_SOURCE,
	CURRENT_DATE,
	CONCAT(''||CHAR(39)||JOB_AUDIT_ID||CHAR(39)||'',''''#'''',''||CHAR(39)||JOB_NAME||CHAR(39)||'',''''-'''',''||CHAR(39)||RUN_ID||CHAR(39)||''),
	V.MD_SRC_SYSTEM,
	V.MD_EXTRACT_DT,
	V.VALUE,
	V.ACCOUNT_TYPE
	FROM DB_IAWT_''||ENV||''_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYACCOUNTTYPE V)'';

	
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_ASSEST_SUMMARY_BYACCOUNTTYPE_RVP"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYACCOUNTTYPE_RVP_DAILY WHERE MD_START_DT = TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')'';
INS_QUERY := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYACCOUNTTYPE_RVP_DAILY(
	MD_START_DT,
	MD_SOURCE,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	RVPID,
	VALUE,
	ACCOUNT_TYPE)
	(SELECT
	V.MD_START_DT,
	V.MD_SOURCE,
	CURRENT_DATE,
	CONCAT(''||CHAR(39)||JOB_AUDIT_ID||CHAR(39)||'',''''#'''',''||CHAR(39)||JOB_NAME||CHAR(39)||'',''''-'''',''||CHAR(39)||RUN_ID||CHAR(39)||''),
	V.MD_SRC_SYSTEM,
	V.MD_EXTRACT_DT,
	V.RVPID,
	V.VALUE,
	V.ACCOUNT_TYPE
	FROM DB_IAWT_''||ENV||''_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYACCOUNTTYPE_RVP V)'';
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_ASSEST_SUMMARY_BYCOMMISSIONTYPE"("ENV" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_INSERT STRING;
BEGIN
INS_INSERT := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYCOMMISSIONTYPE (
	MD_START_DT
	,MD_SOURCE
	,MD_SRC_SYSTEM
	,MD_EXTRACT_DT
	,PROCESS_DATE
	,VALUE
	,COMMISSION_TYPE
	,MD_CREATION_DT
	)
SELECT src.MD_START_DT
	,src.MD_SOURCE
	,src.MD_SRC_SYSTEM
	,src.MD_EXTRACT_DT
	,src.PROCESS_DATE
	,src.VALUE
	,src.COMMISSION_TYPE
	,CURRENT_TIMESTAMP
FROM DB_IAWT_''||ENV||''_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_LAST_13_MONTHS_BYCOMMISSIONTYPE src
LEFT JOIN DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYCOMMISSIONTYPE dtl ON src.PROCESS_DATE = dtl.PROCESS_DATE
	AND src.COMMISSION_TYPE = dtl.COMMISSION_TYPE
WHERE (
		dtl.COMMISSION_TYPE IS NULL
		OR dtl.PROCESS_DATE IS NULL
		)
'';
EXECUTE IMMEDIATE :INS_INSERT;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_ASSEST_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT_DAILY WHERE MD_START_DT = TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')'';
INS_QUERY := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT_DAILY(
	MD_START_DT,
	MD_SOURCE,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	PROCESS_DATE,
	COMMISSION_TYPE,
	EQT,
	MUT,
	FIX,
	OFF,
	CASH,
	TOTAL)
	(SELECT
	V.MD_START_DT,
	V.MD_SOURCE,
	CURRENT_DATE,
	CONCAT(''||CHAR(39)||JOB_AUDIT_ID||CHAR(39)||'',''''#'''',''||CHAR(39)||JOB_NAME||CHAR(39)||'',''''-'''',''||CHAR(39)||RUN_ID||CHAR(39)||''),
	V.MD_SRC_SYSTEM,
	V.MD_EXTRACT_DT,
	V.PROCESS_DATE,
	V.COMMISSION_TYPE,
	V.EQT,
	V.MUT,
	V.FIX,
	V.OFF,
	V.CASH,
	V.TOTAL
	FROM DB_IAWT_''||ENV||''_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT V)'';

	
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_ASSEST_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT_RVP"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT_RVP_DAILY WHERE MD_START_DT = TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')'';
INS_QUERY := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT_RVP_DAILY(
	MD_START_DT,
	MD_SOURCE,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	RVPID,
	PROCESS_DATE,
	COMMISSION_TYPE,
	EQT,
	MUT,
	FIX,
	OFF,
	CASH,
	TOTAL)
	(SELECT
	V.MD_START_DT,
	V.MD_SOURCE,
	CURRENT_DATE,
	CONCAT(''||CHAR(39)||JOB_AUDIT_ID||CHAR(39)||'',''''#'''',''||CHAR(39)||JOB_NAME||CHAR(39)||'',''''-'''',''||CHAR(39)||RUN_ID||CHAR(39)||''),
	V.MD_SRC_SYSTEM,
	V.MD_EXTRACT_DT,
	V.RVPID,
	V.PROCESS_DATE,
	V.COMMISSION_TYPE,
	V.EQT,
	V.MUT,
	V.FIX,
	V.OFF,
	V.CASH,
	V.TOTAL
	FROM DB_IAWT_''||ENV||''_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT_RVP V)'';
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_ASSEST_SUMMARY_BYCOMMISSIONTYPE_DAILY"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYCOMMISSIONTYPE_DAILY WHERE MD_START_DT = TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')'';
INS_QUERY := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYCOMMISSIONTYPE_DAILY(
	MD_START_DT,
	MD_SOURCE,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	PROCESS_DATE,
	VALUE,
	COMMISSION_TYPE)
	(SELECT
	V.MD_START_DT,
	V.MD_SOURCE,
	CURRENT_DATE,
	CONCAT(''||CHAR(39)||JOB_AUDIT_ID||CHAR(39)||'',''''#'''',''||CHAR(39)||JOB_NAME||CHAR(39)||'',''''-'''',''||CHAR(39)||RUN_ID||CHAR(39)||''),
	V.MD_SRC_SYSTEM,
	V.MD_EXTRACT_DT,
	V.PROCESS_DATE,
	V.VALUE,
	V.COMMISSION_TYPE
	FROM DB_IAWT_''||ENV||''_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYCOMMISSIONTYPE V)'';

	
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_ASSEST_SUMMARY_BYCOMMISSIONTYPE_RVP_DAILY"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYCOMMISSIONTYPE_RVP_DAILY WHERE MD_START_DT = TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')'';
INS_QUERY := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYCOMMISSIONTYPE_RVP_DAILY(
	MD_START_DT,
	MD_SOURCE,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	RVPID,
	PROCESS_DATE,
	VALUE,
	COMMISSION_TYPE)
	(SELECT
	V.MD_START_DT,
	V.MD_SOURCE,
	CURRENT_DATE,
	CONCAT(''||CHAR(39)||JOB_AUDIT_ID||CHAR(39)||'',''''#'''',''||CHAR(39)||JOB_NAME||CHAR(39)||'',''''-'''',''||CHAR(39)||RUN_ID||CHAR(39)||''),
	V.MD_SRC_SYSTEM,
	V.MD_EXTRACT_DT,
	V.RVPID,
	V.PROCESS_DATE,
	V.VALUE,
	V.COMMISSION_TYPE
	FROM DB_IAWT_''||ENV||''_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYCOMMISSIONTYPE_RVP V)'';
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_ASSEST_SUMMARY_BYPRODUCT"("ENV" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_INSERT STRING;
BEGIN
INS_INSERT := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYPRODUCT_DAILY (MD_START_DT,MD_SOURCE,MD_SRC_SYSTEM,MD_EXTRACT_DT,PROCESS_DATE,VALUE,PRODUCT_CODE,MD_CREATION_DT)
SELECT src.MD_START_DT,
src.MD_SOURCE,
src.MD_SRC_SYSTEM,
src.MD_EXTRACT_DT,
src.PROCESS_DATE,
src.VALUE,
src.PRODUCT_CODE,
CURRENT_TIMESTAMP
FROM DB_IAWT_''||ENV||''_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_LAST_13_MONTHS_BYPRODUCT src
LEFT JOIN DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYPRODUCT_DAILY dtl ON src.PRODUCT_CODE = dtl.PRODUCT_CODE AND src.PROCESS_DATE = dtl.PROCESS_DATE
WHERE (dtl.PRODUCT_CODE IS NULL OR dtl.PROCESS_DATE IS NULL)
'';
EXECUTE IMMEDIATE :INS_INSERT;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_ASSEST_SUMMARY_BYPRODUCT"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYPRODUCT_DAILY WHERE MD_START_DT = TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')'';
INS_QUERY := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYPRODUCT_DAILY(
	MD_START_DT,
	MD_SOURCE,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	PROCESS_DATE,
	VALUE,
	PRODUCT_CODE)
	(SELECT
	V.MD_START_DT,
	V.MD_SOURCE,
	CURRENT_DATE,
	CONCAT(''||CHAR(39)||JOB_AUDIT_ID||CHAR(39)||'',''''#'''',''||CHAR(39)||JOB_NAME||CHAR(39)||'',''''-'''',''||CHAR(39)||RUN_ID||CHAR(39)||''),
	V.MD_SRC_SYSTEM,
	V.MD_EXTRACT_DT,
	V.PROCESS_DATE,
	V.VALUE,
	V.PRODUCT_CODE
	FROM DB_IAWT_''||ENV||''_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYPRODUCT V)'';

	
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_ASSEST_SUMMARY_BYPRODUCT_RVP"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYPRODUCT_RVP_DAILY WHERE MD_START_DT = TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')'';
INS_QUERY := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYPRODUCT_RVP_DAILY(
	MD_START_DT,
	MD_SOURCE,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	RVPID,
	PROCESS_DATE,
	VALUE,
	PRODUCT_CODE)
	(SELECT
	V.MD_START_DT,
	V.MD_SOURCE,
	CURRENT_DATE,
	CONCAT(''||CHAR(39)||JOB_AUDIT_ID||CHAR(39)||'',''''#'''',''||CHAR(39)||JOB_NAME||CHAR(39)||'',''''-'''',''||CHAR(39)||RUN_ID||CHAR(39)||''),
	V.MD_SRC_SYSTEM,
	V.MD_EXTRACT_DT,
	V.RVPID,
	V.PROCESS_DATE,
	V.VALUE,
	V.PRODUCT_CODE
	FROM DB_IAWT_''||ENV||''_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYPRODUCT_RVP V)'';
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_ASSEST_SUMMARY_BYPROVINCE"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYPROVINCE_DAILY WHERE MD_START_DT = TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')'';
INS_QUERY := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYPROVINCE_DAILY(
	MD_START_DT,
	MD_SOURCE,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	PROCESS_DATE,
	VALUE,
	PROVINCE_CODE)
	(SELECT
	V.MD_START_DT,
	V.MD_SOURCE,
	CURRENT_DATE,
	CONCAT(''||CHAR(39)||JOB_AUDIT_ID||CHAR(39)||'',''''#'''',''||CHAR(39)||JOB_NAME||CHAR(39)||'',''''-'''',''||CHAR(39)||RUN_ID||CHAR(39)||''),
	V.MD_SRC_SYSTEM,
	V.MD_EXTRACT_DT,
	V.PROCESS_DATE,
	V.VALUE,
	V.PROVINCE_CODE
	FROM DB_IAWT_''||ENV||''_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYPROVINCE V)'';

	
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_ASSEST_SUMMARY_BYPROVINCE_RVP"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYPROVINCE_RVP_DAILY WHERE MD_START_DT = TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')'';
INS_QUERY := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYPROVINCE_RVP_DAILY(
	MD_START_DT,
	MD_SOURCE,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	RVPID,
	PROCESS_DATE,
	VALUE,
	PROVINCE_CODE)
	(SELECT
	V.MD_START_DT,
	V.MD_SOURCE,
	CURRENT_DATE,
	CONCAT(''||CHAR(39)||JOB_AUDIT_ID||CHAR(39)||'',''''#'''',''||CHAR(39)||JOB_NAME||CHAR(39)||'',''''-'''',''||CHAR(39)||RUN_ID||CHAR(39)||''),
	V.MD_SRC_SYSTEM,
	V.MD_EXTRACT_DT,
	V.RVPID,
	V.PROCESS_DATE,
	V.VALUE,
	V.PROVINCE_CODE
	FROM DB_IAWT_''||ENV||''_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYPROVINCE_RVP V)'';
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_ASSETS_SUMMARY_BYCOMMISSIONTYPE_RVP_DAILY"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20), "JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216), "RUN_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYCOMMISSIONTYPE_RVP_DAILY WHERE MD_START_DT = TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')'';
INS_QUERY := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.STRATEGIC.ASSETS_SUMMARY_BYCOMMISSIONTYPE_RVP_DAILY(
	MD_START_DT,
	MD_SOURCE,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	RVPID,
	PROCESS_DATE,
	VALUE,
	COMMISSION_TYPE)
	(SELECT
	V.MD_START_DT,
	V.MD_SOURCE,
	CURRENT_DATE,
	CONCAT(''||CHAR(39)||JOB_AUDIT_ID||CHAR(39)||'',''''#'''',''||CHAR(39)||JOB_NAME||CHAR(39)||'',''''-'''',''||CHAR(39)||RUN_ID||CHAR(39)||''),
	V.MD_SRC_SYSTEM,
	V.MD_EXTRACT_DT,
	V.RVPID,
	V.PROCESS_DATE,
	V.VALUE,
	V.COMMISSION_TYPE
	FROM DB_IAWT_''||ENV||''_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYCOMMISSIONTYPE_RVP V)'';
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_BDV_SHARED_TO_DM_WT_DIMADVISOR"("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;
BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_ADVISOR WHERE 1=1 '';
INS_INSERT := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_ADVISOR (HK_HUB,MD_START_DT,MD_HASH_NAT_KEYS,MD_CREATION_DT,MD_CREATION_AUDIT_ID,MD_SOURCE,MD_SRC_SYSTEM,MD_EXTRACT_DT,MASTER_CODE,COMPANY_CODE,COMPANY_NAME,REGULATORY_ORGANIZATION_NAME,REGULATORY_ORGANIZATION_CODE,DEALER_CODE,DEALER_NAME,REGION_CODE,REGION_NAME,REGION_VP,BRANCHCODE,BRANCHNAME,TEAM_CODE,TEAM_NAME,ADVISOR_FULLNAME,FIRSTNAME,LASTNAME,ADVISOR_CORPORATION_NAME,STATUS,GROUP_RSP_INDICATOR,PROVINCE_CODE,PROVINCE,ADVISOR_AUA_SEGMENT,ADVISOR_AUA_SEGMENT_ORDER,ADVISOR_START_DATE,NEW_ADVISOR,ADVISOR_EFFECTIVENESS_DT,DEPARTED_ADVISOR_IND,PRIMARY_ROLE,END_DATE,REASON,NEW_FIRM,NEW_FIRM_TYPE,NEW_FIRM_BACK_OFFICE,PRESTIGE_STATUS,TRANSITION_PERIOD_END_DATE,DEAL_ASSESTS,EXPECTED_ASSESTS,PREVIOUS_FIRM,PREVIOUS_FIRM_TYPE,AGE_SEGMENT,AGE_SEGMENT_ORD,SUSPENDED_IND)
select rdv.HK_HUB,
TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD''''),
rdv.HK_HUB,
CURRENT_TIMESTAMP,
''''-1'''',
rdv.MD_SOURCE,
rdv.MD_SRC_SYSTEM,
rdv.MD_EXTRACT_DT,
lv1.MASTER_CODE,
rdv.COMPANY_CODE,
rdv.COMPANY_NAME,
rdv.REGULATORY_ORGANIZATION_NAME,
rdv.REGULATORY_ORGANIZATION_CODE,
rdv.DEALER_CODE,
rdv.DEALER_NAME,
rdv.REGION_CODE,
rdv.REGION_NAME,
rdv.REGION_VP,
rdv.BRANCHCODE,
rdv.BRANCHNAME,
rdv.TEAM_CODE,
rdv.TEAM_NAME,
rdv.ADVISOR_FULLNAME,
rdv.FIRSTNAME,
rdv.LASTNAME,
rdv.ADVISOR_CORPORATION_NAME,
rdv.STATUS,
rdv.GROUP_RSP_INDICATOR,
rdv.PROVINCE_CODE,
rdv.PROVINCE,
lv3.ADVISOR_AUA_SEGMENT,
lv3.ADVISOR_AUA_SEGMENT_ORDER,
rdv.ADVISOR_START_DATE,
rdv.NEW_ADVISOR,
DATEADD(''''YY'''',1,rdv.ADVISOR_START_DATE),
rdv.DEPARTED_ADVISOR_IND,
rdv.PRIMARY_ROLE,
rdv.END_DATE,
rdv.REASON,
rdv.NEW_FIRM,
rdv.NEW_FIRM_TYPE,
rdv.NEW_FIRM_BACK_OFFICE,
rdv.PRESTIGE_STATUS,
rdv.TRANSITION_PERIOD_END_DATE,
rdv.DEAL_ASSESTS,
rdv.EXPECTED_ASSESTS,
rdv.PREVIOUS_FIRM,
rdv.PREVIOUS_FIRM_TYPE,
rdv.AGE_SEGMENT,
rdv.AGE_SEGMENT_ORD,
lv3.SUSPENDED_IND
	FROM (
		SELECT *
		FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH
		) rdv
		JOIN (
		SELECT *
		FROM (
			SELECT *
				,ROW_NUMBER() OVER (
					PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
					) RN
			FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH lv
			) SATHUB
		WHERE SATHUB.RN = 1
		) lv ON lv.HK_HUB = rdv.HK_HUB AND lv.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') AND lv.MD_ACTIVE =''''A''''
	JOIN DB_IAWT_DEV_DWH.SHARED_BDV.HUB_PARTY_ROLE_ADVISOR lv1 ON lv1.HK_HUB = rdv.HK_HUB
	LEFT JOIN (
		SELECT rdv2.*
		FROM (
			SELECT *
			FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ADVISOR_AUA_SEG_COMPUTE
			) rdv2
			JOIN (
			SELECT *
			FROM (
				SELECT *
					,ROW_NUMBER() OVER (
						PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
						) RN1
				FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ADVISOR_AUA_SEG_COMPUTE lv2
				) SATHUB1
			WHERE SATHUB1.RN1 = 1
			) lv2 ON lv2.HK_HUB = rdv2.HK_HUB AND lv2.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') AND rdv2.MD_ACTIVE =''''A''''
		) lv3 ON lv3.HK_HUB = rdv.HK_HUB
		WHERE lv3.ADVISOR_AUA_SEGMENT != 0
		'';
INS_UPDATE :=''UPDATE DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_ADVISOR
SET
	MD_HASHDIFF_TYPE2=SHA1(
				CONCAT(
				COALESCE(COMPANY_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(COMPANY_NAME,''''#NULL#''''), ''''|'''',
				COALESCE(REGULATORY_ORGANIZATION_NAME,''''#NULL#'''') ,''''|'''',
				COALESCE(REGULATORY_ORGANIZATION_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(DEALER_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(DEALER_NAME,''''#NULL#''''), ''''|'''',
				COALESCE(REGION_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(REGION_NAME,''''#NULL#'''') ,''''|'''',
				COALESCE(REGION_VP,''''#NULL#''''), ''''|'''',
				COALESCE(BRANCHCODE,''''#NULL#''''), ''''|'''',
				COALESCE(BRANCHNAME,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(TEAM_CODE),''''#NULL#''''), ''''|'''',
				COALESCE(TEAM_NAME,''''#NULL#'''') ,''''|'''',
				COALESCE(ADVISOR_FULLNAME,''''#NULL#''''), ''''|'''',
				COALESCE(FIRSTNAME,''''#NULL#''''), ''''|'''',
				COALESCE(LASTNAME,''''#NULL#''''), ''''|'''',
				COALESCE(ADVISOR_CORPORATION_NAME,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(STATUS),''''#NULL#'''') ,''''|'''',
				COALESCE(GROUP_RSP_INDICATOR,''''#NULL#''''), ''''|'''',
				COALESCE(PROVINCE_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(PROVINCE,''''#NULL#''''), ''''|'''',
				COALESCE(ADVISOR_AUA_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(ADVISOR_AUA_SEGMENT_ORDER),''''#NULL#'''') ,''''|'''',
				COALESCE(TO_VARCHAR(ADVISOR_START_DATE),''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(NEW_ADVISOR),''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(DEPARTED_ADVISOR_IND),''''#NULL#''''), ''''|'''',
				COALESCE(PRIMARY_ROLE,''''#NULL#'''')
				,''''|'''',COALESCE(TRIM(AGE_SEGMENT),''''#NULL#'''')
				,''''|'''',COALESCE(TRIM(AGE_SEGMENT_ORD),''''#NULL#'''')
				,''''|'''',COALESCE(TO_VARCHAR(SUSPENDED_IND),''''#NULL#'''')
				)),
	MD_HASHDIFF_TYPE1 = SHA1(
				CONCAT(COALESCE(TRIM(TO_VARCHAR(END_DATE)),''''#NULL#''''), ''''|''''
				,  COALESCE(to_varchar(REASON) , ''''#NULL#''''), ''''|''''
				,  COALESCE(to_varchar(NEW_FIRM) , ''''#NULL#''''), ''''|''''
				,  COALESCE(to_varchar(NEW_FIRM_TYPE) , ''''#NULL#''''), ''''|''''
				,  COALESCE(to_varchar(NEW_FIRM_BACK_OFFICE) , ''''#NULL#''''), ''''|''''
				,  COALESCE(to_varchar(PRESTIGE_STATUS) , ''''#NULL#''''), ''''|''''
				,  COALESCE(to_varchar(TRANSITION_PERIOD_END_DATE) , ''''#NULL#''''), ''''|''''
				,  COALESCE(to_varchar(DEAL_ASSESTS) , ''''#NULL#''''), ''''|''''
				,  COALESCE(to_varchar(EXPECTED_ASSESTS) , ''''#NULL#''''), ''''|''''
				,  COALESCE(PREVIOUS_FIRM , ''''#NULL#''''), ''''|''''
				,  COALESCE(PREVIOUS_FIRM_TYPE, ''''#NULL#'''')				
				))
Where HK_HUB <> ''''0'''';
	'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
use schema TOOLS;

create or replace TABLE DATA_DICTIONARY (
	TABLENAME VARCHAR(512) COMMENT 'Table name',
	COLUMNNAME VARCHAR(512) COMMENT 'Column name',
	COLUMNTYPE VARCHAR(512) COMMENT 'Column type',
	DESCRIPTION VARCHAR(16777216) COMMENT 'A brief description of the column'
);
create or replace TABLE ENTITY_TYPES_COLUMNS_PATTERNS (
	COLUMN_ID VARCHAR(500) COMMENT 'HKHUB, HKLINK, MD_CREATION_DATE,...',
	COLUMN_ORDER NUMBER(38,0) COMMENT 'Order of the column in the entity',
	ENTITY_TYPE_ID VARCHAR(500) COMMENT 'HUB, SAT_WITH_ACTIVE_FLAG, LINK, ...',
	COLUMN_TYPE VARCHAR(500) COMMENT 'HASHKEY, METADATA,...',
	COLUMN_NAME_PATTERN VARCHAR(1000) COMMENT 'Pattern to build the column name',
	COLUMN_TYPE_PATTERN VARCHAR(1000) COMMENT 'Pattern to build the colmun type',
	COLUMN_OPTIONS_PATTERN VARCHAR(1000) COMMENT 'Pattern to build the column options',
	COLUMN_COMMENTS_PATTERN VARCHAR(1000) COMMENT 'Pattern to build colomn comments',
	COLUMN_DESC VARCHAR(4000) COMMENT 'Column description'
);
create or replace TABLE ENTITY_TYPES_PATTERNS (
	ENTITY_TYPE_ID VARCHAR(500) COMMENT 'HUB, SAT_WITH_ACTIVE_FLAG, LINK, ...',
	ENTITY_CATEGORY VARCHAR(500) COMMENT 'STAGING, DATAVAULT,...',
	ENTITY_TYPE_NAME_PATTERN VARCHAR(1000) COMMENT 'Pattern to build the table name',
	ENTITY_OPTIONS_PATTERN VARCHAR(1000) COMMENT 'Pattern to build the table options',
	ENTITY_DESC VARCHAR(4000) COMMENT 'Entity type description'
);
CREATE OR REPLACE PROCEDURE "SP_CONV_FACT_INSERT"("INSERT_COLS" VARCHAR(16777216), "SELECT_COLS" VARCHAR(16777216), "SRC_TBL" VARCHAR(16777216), "TGT_TBL" VARCHAR(16777216), "TRUNC_TBL" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var INS_QUERY = "INSERT INTO "+ TGT_TBL + "(" + INSERT_COLS + ") SELECT " + SELECT_COLS + " FROM " + SRC_TBL + " SRC LEFT JOIN "+ TGT_TBL +" FACT ON SRC.HK_LINK = FACT.HK_LINK  WHERE FACT.HK_LINK IS NULL ;"
var TRUN_QUERY = "TRUNCATE TABLE " + TGT_TBL +";"


if (TRUNC_TBL == ''Y'')
    {
    
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
	}
	

   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();		
   

';
CREATE OR REPLACE PROCEDURE "SP_CONV_SCD_CLOSE"("INSERT_COLS" VARCHAR(16777216), "SELECT_COLS" VARCHAR(16777216), "UPD_COLS" VARCHAR(16777216), "MER_SELECT_COLS" VARCHAR(16777216), "SRC_TBL" VARCHAR(16777216), "TGT_TBL" VARCHAR(16777216), "TRUNC_TBL" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var INS_QUERY = "MERGE INTO " +TGT_TBL+ " TGT USING (SELECT " +SELECT_COLS+ " FROM " +SRC_TBL+ " SRC LEFT JOIN (SELECT * FROM " +TGT_TBL+ " WHERE MD_END_DT IS NULL ) DIM  WHERE ((SRC.MD_HASH_NAT_KEYS IS NULL) OR (SRC.MD_HASHDIFF_TYPE2 <> DIM.MD_HASHDIFF_TYPE2)) AND ( (SRC.MD_START_DT IS NULL) OR (DIM.MD_START_DT < SRC.MD_START_DT)) ) MER ON MER.MD_HASH_NAT_KEYS = TGT.MD_HASH_NAT_KEYS WHEN MATCHED THEN UPDATE SET " +UPD_COLS+ " WHEN NOT MATCHED THEN INSERT ("+INSERT_COLS+") VALUES ("+MER_SELECT_COLS+");";
var TRUN_QUERY = "TRUNCATE TABLE " + TGT_TBL +";";

if (TRUNC_TBL == ''Y'')
    {
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
	}
   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();		
';
CREATE OR REPLACE PROCEDURE "SP_CONV_SCD_INSERT_AUDIT_ID"("INSERT_COLS" VARCHAR(16777216), "SELECT_COLS" VARCHAR(16777216), "SRC_TBL" VARCHAR(16777216), "TGT_TBL" VARCHAR(16777216), "TRUNC_TBL" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var INS_QUERY = "INSERT INTO "+ TGT_TBL + "(" + INSERT_COLS + ") SELECT " + SELECT_COLS + " FROM " + SRC_TBL + " SRC LEFT JOIN (SELECT * FROM "+ TGT_TBL +" WHERE MD_END_DT IS NULL ) DIM ON SRC.MD_HASH_NAT_KEYS = DIM.MD_HASH_NAT_KEYS  WHERE ((DIM.MD_HASH_NAT_KEYS IS NULL) OR (SRC.MD_HASHDIFF_TYPE2 <> DIM.MD_HASHDIFF_TYPE2));"
var TRUN_QUERY = "TRUNCATE TABLE " + TGT_TBL +";"


if (TRUNC_TBL == ''Y'')
    {
    
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
	}
	

   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();		
   

';
CREATE OR REPLACE PROCEDURE "SP_CONV_SCD_UPDATE_AUDIT_ID"("INSERT_COLS" VARCHAR(16777216), "SELECT_COLS" VARCHAR(16777216), "UPD_COLS" VARCHAR(16777216), "MER_SELECT_COLS" VARCHAR(16777216), "SRC_TBL" VARCHAR(16777216), "TGT_TBL" VARCHAR(16777216), "TRUNC_TBL" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var INS_QUERY = "MERGE INTO "+ TGT_TBL +" TGT USING ( SELECT "+ SELECT_COLS +" FROM "+ SRC_TBL +" SRC LEFT JOIN "+ TGT_TBL +" DIM WHERE SRC.MD_HASH_NAT_KEYS = DIM.MD_HASH_NAT_KEYS AND SRC.MD_HASH_NAT_KEYS IS NOT NULL AND DIM.MD_HASH_NAT_KEYS IS NOT NULL AND SRC.MD_HASHDIFF_TYPE1 <> DIM.MD_HASHDIFF_TYPE1 GROUP BY "+ SELECT_COLS +" ) MER ON MER.MD_HASH_NAT_KEYS = TGT.MD_HASH_NAT_KEYS WHEN MATCHED THEN UPDATE SET "+ UPD_COLS +" WHEN NOT MATCHED THEN INSERT ("+ INSERT_COLS +") VALUES ("+ MER_SELECT_COLS +");";
var TRUN_QUERY = "TRUNCATE TABLE " + TGT_TBL +";";

if (TRUNC_TBL == ''Y'')
    {
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
	}
   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();		
';
use schema TRANSACTIONS;

create or replace TABLE FACT_TRANSACTIONS (
	ID NUMBER(38,0) autoincrement COMMENT 'Surrogate key of the dimension',
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_SECURITY_TYPE VARCHAR(1000) COMMENT 'Capabilities for RLS',
	SK_DIM_CLIENTS NUMBER(38,0),
	SK_DIM_ADVISORS NUMBER(38,0),
	SK_DIM_PLANS NUMBER(38,0),
	SK_DIM_MARKETPRODUCTS NUMBER(38,0),
	TRADE_DATE TIMESTAMP_NTZ(9),
	GROSS_AMOUNT NUMBER(38,12),
	CASH_FLOW VARCHAR(16777216),
	CASH_FLOW_TYPE VARCHAR(8),
	ADMINISTRATORY_TYPE VARCHAR(8000),
	DEPARTED_ADVISOR_IND NUMBER(1,0) COMMENT 'DEPARTED ADVISOR INDICATOR',
	DAYS_LAST_PRICED NUMBER(4,0),
	TRANSACTION_ID VARCHAR(100) COMMENT 'The ID of the transaction',
	SK_DIM_ACCOUNTS NUMBER(38,0),
	SK_DEPARTED_ADVISOR NUMBER(38,0)
);
create or replace TABLE FACT_TRANSACTIONS_BKUP (
	ID NUMBER(38,0),
	HK_LINK VARCHAR(40),
	MD_START_DT TIMESTAMP_NTZ(9),
	MD_CREATION_DT TIMESTAMP_NTZ(9),
	MD_CREATION_AUDIT_ID VARCHAR(1000),
	MD_SOURCE VARCHAR(1000),
	MD_SRC_SYSTEM VARCHAR(100),
	MD_EXTRACT_DT TIMESTAMP_NTZ(9),
	MD_SECURITY_TYPE VARCHAR(1000),
	SK_DIM_CLIENTS NUMBER(38,0),
	SK_DIM_ADVISORS NUMBER(38,0),
	SK_DIM_PLANS NUMBER(38,0),
	SK_DIM_MARKETPRODUCTS NUMBER(38,0),
	TRADE_DATE TIMESTAMP_NTZ(9),
	GROSS_AMOUNT NUMBER(38,12),
	CASH_FLOW VARCHAR(16777216),
	CASH_FLOW_TYPE VARCHAR(8),
	ADMINISTRATORY_TYPE VARCHAR(8000),
	DEPARTED_ADVISOR_IND NUMBER(1,0),
	DAYS_LAST_PRICED NUMBER(4,0),
	TRANSACTION_ID VARCHAR(100),
	SK_DIM_ACCOUNTS NUMBER(38,0),
	SK_DEPARTED_ADVISOR NUMBER(38,0)
);
create or replace TABLE WT_FACT_TRANSACTIONS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_SECURITY_TYPE VARCHAR(1000) COMMENT 'Capabilities for RLS',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for the REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
	SK_DIM_CLIENTS NUMBER(38,0),
	SK_DIM_ADVISORS NUMBER(38,0),
	SK_DIM_PLANS NUMBER(38,0),
	SK_DIM_MARKETPRODUCTS NUMBER(38,0),
	TRADE_DATE TIMESTAMP_NTZ(9),
	GROSS_AMOUNT NUMBER(38,12),
	CASH_FLOW VARCHAR(16777216),
	CASH_FLOW_TYPE VARCHAR(8),
	ADMINISTRATORY_TYPE VARCHAR(8000),
	DEPARTED_ADVISOR_IND NUMBER(1,0) COMMENT 'DEPARTED ADVISOR INDICATOR',
	DAYS_LAST_PRICED NUMBER(4,0),
	TRANSACTION_ID VARCHAR(100) COMMENT 'The ID of the transaction',
	SK_DIM_ACCOUNTS NUMBER(38,0),
	SK_DEPARTED_ADVISOR NUMBER(38,0)
);
create or replace view VW_FACT_TRANSACTIONS(
	ID,
	SK_DIM_CLIENTS,
	SK_DIM_ADVISORS,
	SK_DIM_PLANS,
	SK_DIM_MARKETPRODUCTS,
	"Trade date",
	"Gross amount",
	CASH_FLOW,
	CASH_FLOW_TYPE,
	"Administratory type",
	"Departed advisor indicator",
	MD_SRCSYSTEM,
	SK_DEPARTED_ADVISOR
) as 
SELECT  
	ID ,
	SK_DIM_CLIENTS ,
	SK_DIM_ADVISORS ,
	SK_DIM_PLANS ,
	SK_DIM_MARKETPRODUCTS ,
	TRADE_DATE  AS "Trade date",
	GROSS_AMOUNT AS "Gross amount",
	CASH_FLOW ,
	CASH_FLOW_TYPE ,
	ADMINISTRATORY_TYPE AS "Administratory type",
	DEPARTED_ADVISOR_IND  AS "Departed advisor indicator",
	MD_SRC_SYSTEM  AS MD_SRCSYSTEM,
	SK_DEPARTED_ADVISOR 
FROM TRANSACTIONS.FACT_TRANSACTIONS
WHERE DATE(TRADE_DATE) >= (SELECT DATE(DATEADD(YEAR, -2,MAX(TRADE_DATE) ))  FROM TRANSACTIONS.FACT_TRANSACTIONS)
order by SK_DIM_MARKETPRODUCTS,SK_DIM_ADVISORS,SK_DIM_CLIENTS,SK_DIM_PLANS, SK_DEPARTED_ADVISOR;
create or replace view VW_INITIAL_LOADING_WT_FACT_TRANSACTIONS(
	MD_START_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	SK_DIM_CLIENTS,
	SK_DIM_ADVISORS,
	SK_DIM_PLANS,
	SK_DIM_MARKETPRODUCTS,
	TRADE_DATE,
	GROSS_AMOUNT,
	CASH_FLOW,
	CASH_FLOW_TYPE,
	ADMINISTRATORY_TYPE,
	DEPARTED_ADVISOR_IND,
	DAYS_LAST_PRICED,
	TRANSACTION_ID
) as
SELECT
	DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.MD_START_DT,
	DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.MD_SOURCE,
	DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.MD_SRC_SYSTEM,
	DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.MD_EXTRACT_DT,
	DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.HK_HUB_PARTY_ROLE_ADVISOR,
	DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.HK_HUB_INVESTMENT_PRODUCT_TYPE,
	CAST(CAST(
	(CASE WHEN SHARED.DIM_CLIENTS.ID IS NULL THEN -1
	ELSE SHARED.DIM_CLIENTS.ID
END) AS VARCHAR(252)) AS FLOAT) AS SK_DIM_CLIENTS,
	CAST(CAST(
	(CASE WHEN SHARED.DIM_ADVISOR.ID IS NULL THEN -1
	ELSE SHARED.DIM_ADVISOR.ID
END) AS VARCHAR(252)) AS FLOAT) AS SK_DIM_ADVISORS,
	CAST(CAST(
	(CASE WHEN SHARED.DIM_PLANS.ID IS NULL THEN -1
	ELSE SHARED.DIM_PLANS.ID
END) AS VARCHAR(251)) AS FLOAT) SK_DIM_PLANS,
	CAST(CAST(
	(CASE WHEN SHARED.DIM_FINANCIAL_INSTRUMENTS.ID IS NULL THEN -1
	ELSE SHARED.DIM_FINANCIAL_INSTRUMENTS.ID
END) AS VARCHAR(252)) AS FLOAT) SK_DIM_MARKETPRODUCTS,
	DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.TRADE_DATE,
	DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.GROSS_AMOUNT,
	DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.CASH_FLOW,
	DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.CASH_FLOW_TYPE,
	DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.ADMINISTRATORY_TYPE,
	DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.DEPARTED_ADVISOR_IND,
	DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.DAYS_LAST_PRICED,
	DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.TRANSACTION_ID
FROM
	(
SHARED.DIM_CLIENTS
RIGHT OUTER JOIN (SHARED.DIM_PLANS
RIGHT OUTER JOIN (SHARED.DIM_ADVISOR
RIGHT OUTER JOIN (SHARED.DIM_FINANCIAL_INSTRUMENTS
RIGHT OUTER JOIN DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION ON
	(DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.HK_HUB_INVESTMENT_PRODUCT_TYPE = SHARED.DIM_FINANCIAL_INSTRUMENTS.HK_HUB)
	AND ((SHARED.DIM_FINANCIAL_INSTRUMENTS.MD_START_DT <= DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.MD_START_DT)
		AND ((SHARED.DIM_FINANCIAL_INSTRUMENTS.MD_END_DT > DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.MD_START_DT)
			OR SHARED.DIM_FINANCIAL_INSTRUMENTS.MD_END_DT IS NULL))) ON
	(DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.HK_HUB_PARTY_ROLE_ADVISOR = SHARED.DIM_ADVISOR.HK_HUB)
	AND ((SHARED.DIM_ADVISOR.MD_START_DT <= DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.MD_START_DT)
		AND ((SHARED.DIM_ADVISOR.MD_END_DT > DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.MD_START_DT)
			OR SHARED.DIM_ADVISOR.MD_END_DT IS NULL))) ON
	(DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = SHARED.DIM_PLANS.HK_HUB)
	AND ((SHARED.DIM_PLANS.MD_START_DT <= DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.MD_START_DT)
		AND ((SHARED.DIM_PLANS.MD_END_DT > DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.MD_START_DT)
			OR SHARED.DIM_PLANS.MD_END_DT IS NULL))) ON
	(DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = SHARED.DIM_CLIENTS.HK_HUB)
	AND ((SHARED.DIM_CLIENTS.MD_START_DT <= DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.MD_START_DT)
		AND ((SHARED.DIM_CLIENTS.MD_END_DT > DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION.MD_START_DT)
			OR SHARED.DIM_CLIENTS.MD_END_DT IS NULL)));
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_BDV_TRANSACTIONS_TO_DM_WT_FACT_TRANSACTIONS"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
TRUNC_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
TRUNC_QUERY := ''TRUNCATE TABLE DB_IAWT_''||ENV||''_DM.TRANSACTIONS.WT_FACT_TRANSACTIONS;'';
INS_QUERY := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.TRANSACTIONS.WT_FACT_TRANSACTIONS(
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	SK_DIM_CLIENTS,
	SK_DIM_ADVISORS,
	SK_DIM_PLANS,
	SK_DIM_MARKETPRODUCTS,
	TRADE_DATE,
	GROSS_AMOUNT,
	CASH_FLOW,
	CASH_FLOW_TYPE,
	ADMINISTRATORY_TYPE,
	DEPARTED_ADVISOR_IND,
	DAYS_LAST_PRICED,
	TRANSACTION_ID,
	SK_DIM_ACCOUNTS,
	SK_DEPARTED_ADVISOR)
	(SELECT
	TFT.MD_SOURCE,
	TFT.MD_SRC_SYSTEM,
	TFT.MD_EXTRACT_DT,
	TFT.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	TFT.HK_HUB_PARTY_ROLE_ADVISOR,
	TFT.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	TFT.HK_HUB_INVESTMENT_PRODUCT_TYPE,
	CASE WHEN DC.ID IS NULL THEN ''''-1'''' ELSE DC.ID END AS o_CLIENT_ID,
	CASE WHEN DA.ID IS NULL THEN ''''-1'''' ELSE DFI.ID END AS O_ADV_ID,
	CASE WHEN DP.ID IS NULL THEN ''''-1'''' ELSE DP.ID END AS o_PLAN_ID,
	CASE WHEN DFI.ID IS NULL THEN ''''-1'''' ELSE DFI.ID END AS o_PRODUCT_ID,
	TFT.TRADE_DATE,
	TFT.GROSS_AMOUNT,
	TFT.CASH_FLOW,
	TFT.CASH_FLOW_TYPE,
	TFT.ADMINISTRATORY_TYPE,
	TFT.DEPARTED_ADVISOR_IND,
	TFT.DAYS_LAST_PRICED,
	TFT.TRANSACTION_ID,
	DA.ID AS DIM_ACCT_ID,
	DAD.ID AS DEPARTEDADV_ID
	FROM DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION TFT
	RIGHT OUTER JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_FINANCIAL_INSTRUMENTS DFI
	ON TFT.HK_HUB_INVESTMENT_PRODUCT_TYPE = DFI.HK_HUB
	RIGHT OUTER JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_ADVISOR DA
	ON TFT.HK_HUB_PARTY_ROLE_ADVISOR = DA.HK_HUB
	RIGHT OUTER JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_PLANS DP
	ON TFT.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = DP.HK_HUB
	RIGHT OUTER JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_CLIENTS DC
	ON TFT.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = DC.HK_HUB
	RIGHT OUTER JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_ACCOUNTS DAC
	ON TFT.HK_HUB_CONTRACT = DAC.HK_HUB
	RIGHT OUTER JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_ADVISOR DAD
	ON TFT.DEPARTED_ADVISOR_MASTER_CODE = DAD.MASTER_CODE
	WHERE
	TFT.MD_START_DT = TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') 
	AND (DFI.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (DFI.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR DFI.MD_END_DT IS NULL))
	AND (DA.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (DA.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR DA.MD_END_DT IS NULL))
	AND (DP.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (DP.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR DP.MD_END_DT IS NULL))
	AND (DC.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (DC.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR DC.MD_END_DT IS NULL))
	AND (DAC.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (DAC.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR DAC.MD_END_DT IS NULL))
	AND (DAD.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (DAD.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR DAD.MD_END_DT IS NULL)));
              '';
UPD_QUERY := ''UPDATE DB_IAWT_''||ENV||''_DM.TRANSACTIONS.WT_FACT_TRANSACTIONS SET
	HK_LINK = SHA1(UPPER(CONCAT(
	  COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(TRANSACTION_ID), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_PARTY_ROLE_ADVISOR), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_INVESTMENT_PRODUCT_TYPE), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(TRADE_DATE), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(CASH_FLOW), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(CASH_FLOW_TYPE), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(ADMINISTRATORY_TYPE), ''''#NULL#''''), ''''|''''
	, COALESCE(TO_VARCHAR(DEPARTED_ADVISOR_IND),''''#NULL#'''')
	, COALESCE(TO_VARCHAR(DAYS_LAST_PRICED),''''#NULL#'''')
	)))
Where 1=1'';
	
EXECUTE IMMEDIATE :TRUNC_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_BDV_TRANSACTION_TO_DM_WT_FACT_TRANSACTIONS"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
TRUNC_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
TRUNC_QUERY := ''TRUNCATE TABLE  DB_IAWT_''||ENV||''_DM.TRANSACTIONS.WT_FACT_TRANSACTIONS'';
INS_QUERY := ''INSERT INTO DB_IAWT_''||ENV||''_DM.TRANSACTIONS.WT_FACT_TRANSACTIONS(
MD_START_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
HK_HUB_PARTY_ROLE_ADVISOR,
HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
HK_HUB_INVESTMENT_PRODUCT_TYPE,
SK_DIM_CLIENTS,
SK_DIM_ADVISORS,
SK_DIM_PLANS,
SK_DIM_MARKETPRODUCTS,
TRADE_DATE,
GROSS_AMOUNT,
CASH_FLOW,
CASH_FLOW_TYPE,
ADMINISTRATORY_TYPE
)
(
WITH 
	JNR_BDVLINKTRANS_LEFTJOIN_FACTTRANS AS (
	SELECT
	A.HK_LINK											AS FACT_HK_LINK,
	B.ACCOUNT_RAP_CODE 									AS 	ACCOUNT_RAP_CODE,
	B.ADMINISTRATORY_TYPE 								AS 	ADMINISTRATORY_TYPE,
	B.CASH_FLOW 										AS 	CASH_FLOW,
	B.CASH_FLOW_TYPE 									AS 	CASH_FLOW_TYPE,
	B.CLIENT_ID 										AS 	CLIENT_ID,
	B.CONTRACT_ID 										AS 	CONTRACT_ID,
	B.GROSS_AMOUNT 										AS 	GROSS_AMOUNT,
	B.HK_HUB_CONTRACT 									AS 	HK_HUB_CONTRACT,
	B.HK_HUB_INVESTMENT_PRODUCT_TYPE 					AS 	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	B.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 			AS 	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	B.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 					AS 	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	B.HK_HUB_PARTY_ROLE_ADVISOR 						AS 	HK_HUB_PARTY_ROLE_ADVISOR,
	B.HK_LINK 											AS 	HK_LINK,
	B.INVESTMENT_PRODUCT_ID 							AS 	INVESTMENT_PRODUCT_ID,
	B.MASTER_CODE 										AS 	MASTER_CODE,
	B.MD_CREATION_AUDIT_ID 								AS 	MD_CREATION_AUDIT_ID,
	B.MD_CREATION_DT 									AS 	MD_CREATION_DT,
	B.MD_EXTRACT_DT 									AS 	MD_EXTRACT_DT,
	B.MD_SOURCE 										AS 	MD_SOURCE,
	B.MD_SRC_SYSTEM 									AS 	MD_SRC_SYSTEM,
	B.MD_START_DT 										AS 	MD_START_DT,
	B.ORD_TRANSACTION_TYPE 								AS 	ORD_TRANSACTION_TYPE,
	B.RETAIL_PLAN 										AS 	RETAIL_PLAN,
	B.TRADE_DATE 										AS 	TRADE_DATE,
	B.TRANSACTION_ID 									AS 	TRANSACTION_ID,
	B.TRANSACTION_TYPE 									AS 	TRANSACTION_TYPE
	FROM  DB_IAWT_''||ENV||''_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION B
	LEFT JOIN DB_IAWT_''||ENV||''_DM.TRANSACTIONS.FACT_TRANSACTIONS A
	ON B.HK_LINK=A.HK_LINK
	WHERE B.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')and (B.MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''')
	AND A.HK_LINK IS NULL
	),
	JOINER_TRAN_PRODUCT AS (
	SELECT
	A.HK_HUB											AS 	PRODUCT_HK_HUB,
	A.ID												AS 	PRODUCT_ID,
	CASE WHEN A.ID IS NULL THEN ''''-1'''' ELSE A.ID END 	AS 	O_PRODUCT_ID,
	B.ACCOUNT_RAP_CODE 									AS 	ACCOUNT_RAP_CODE,
	B.ADMINISTRATORY_TYPE 								AS 	ADMINISTRATORY_TYPE,
	B.CASH_FLOW 										AS 	CASH_FLOW,
	B.CASH_FLOW_TYPE 									AS 	CASH_FLOW_TYPE,
	B.CLIENT_ID 										AS 	CLIENT_ID,
	B.CONTRACT_ID 										AS 	CONTRACT_ID,
	B.GROSS_AMOUNT 										AS 	GROSS_AMOUNT,
	B.HK_HUB_CONTRACT 									AS 	HK_HUB_CONTRACT,
	B.HK_HUB_INVESTMENT_PRODUCT_TYPE 					AS 	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	B.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 			AS 	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	B.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 					AS 	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	B.HK_HUB_PARTY_ROLE_ADVISOR 						AS 	HK_HUB_PARTY_ROLE_ADVISOR,
	B.HK_LINK 											AS 	HK_LINK,
	B.INVESTMENT_PRODUCT_ID 							AS 	INVESTMENT_PRODUCT_ID,
	B.MASTER_CODE 										AS 	MASTER_CODE,
	B.MD_CREATION_AUDIT_ID 								AS 	MD_CREATION_AUDIT_ID,
	B.MD_CREATION_DT 									AS 	MD_CREATION_DT,
	B.MD_EXTRACT_DT 									AS 	MD_EXTRACT_DT,
	B.MD_SOURCE 										AS 	MD_SOURCE,
	B.MD_SRC_SYSTEM 									AS 	MD_SRC_SYSTEM,
	B.MD_START_DT 										AS 	MD_START_DT,
	B.ORD_TRANSACTION_TYPE 								AS 	ORD_TRANSACTION_TYPE,
	B.RETAIL_PLAN 										AS 	RETAIL_PLAN,
	B.TRADE_DATE 										AS 	TRADE_DATE,
	B.TRANSACTION_ID 									AS 	TRANSACTION_ID,
	B.TRANSACTION_TYPE 									AS 	TRANSACTION_TYPE
	FROM JNR_BDVLINKTRANS_LEFTJOIN_FACTTRANS B
	LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_FINANCIAL_INSTRUMENTS A
	ON B.HK_HUB_INVESTMENT_PRODUCT_TYPE = A.HK_HUB
	WHERE (A.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (A.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR A.MD_END_DT IS NULL))
	),
	JOINER_PRODUCT_TRAN_ACCOUNT AS (
	SELECT
	A.HK_HUB 											AS 	ADV_HK_HUB,
	A.ID												AS 	ADV_ID,
	CASE WHEN A.ID IS NULL THEN ''''-1'''' ELSE A.ID END 	AS 	O_ADV_ID,
	B.PRODUCT_HK_HUB									AS 	PRODUCT_HK_HUB,
	B.PRODUCT_ID										AS 	PRODUCT_ID,
	B.O_PRODUCT_ID										AS 	O_PRODUCT_ID,
	B.ACCOUNT_RAP_CODE 									AS 	ACCOUNT_RAP_CODE,
	B.ADMINISTRATORY_TYPE 								AS 	ADMINISTRATORY_TYPE,
	B.CASH_FLOW 										AS 	CASH_FLOW,
	B.CASH_FLOW_TYPE 									AS 	CASH_FLOW_TYPE,
	B.CLIENT_ID 										AS 	CLIENT_ID,
	B.CONTRACT_ID 										AS 	CONTRACT_ID,
	B.GROSS_AMOUNT 										AS 	GROSS_AMOUNT,
	B.HK_HUB_CONTRACT 									AS 	HK_HUB_CONTRACT,
	B.HK_HUB_INVESTMENT_PRODUCT_TYPE 					AS 	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	B.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 			AS 	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	B.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 					AS 	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	B.HK_HUB_PARTY_ROLE_ADVISOR 						AS 	HK_HUB_PARTY_ROLE_ADVISOR,
	B.HK_LINK 											AS 	HK_LINK,
	B.INVESTMENT_PRODUCT_ID 							AS 	INVESTMENT_PRODUCT_ID,
	B.MASTER_CODE 										AS 	MASTER_CODE,
	B.MD_CREATION_AUDIT_ID 								AS 	MD_CREATION_AUDIT_ID,
	B.MD_CREATION_DT 									AS 	MD_CREATION_DT,
	B.MD_EXTRACT_DT 									AS 	MD_EXTRACT_DT,
	B.MD_SOURCE 										AS 	MD_SOURCE,
	B.MD_SRC_SYSTEM 									AS 	MD_SRC_SYSTEM,
	B.MD_START_DT 										AS 	MD_START_DT,
	B.ORD_TRANSACTION_TYPE 								AS 	ORD_TRANSACTION_TYPE,
	B.RETAIL_PLAN 										AS 	RETAIL_PLAN,
	B.TRADE_DATE 										AS 	TRADE_DATE,
	B.TRANSACTION_ID 									AS 	TRANSACTION_ID,
	B.TRANSACTION_TYPE 									AS 	TRANSACTION_TYPE
	FROM JOINER_TRAN_PRODUCT B 
	LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_ADVISOR A
	ON B.HK_HUB_PARTY_ROLE_ADVISOR = A.HK_HUB
	WHERE (A.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (A.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR A.MD_END_DT IS NULL))
	),
	JOINER_PRODUCT_TRAN_ADVISOR_PLAN AS (
	SELECT 
	A.HK_HUB											AS 	PLAN_HK_HUB,
	A.ID 												AS 	PLAN_ID,
	CASE WHEN A.ID IS NULL THEN ''''-1'''' ELSE A.ID END 	AS 	O_PLAN_ID,
	B.ADV_HK_HUB 										AS 	ADV_HK_HUB,
	B.ADV_ID											AS 	ADV_ID,
	B.O_ADV_ID 											AS 	O_ADV_ID,
	B.PRODUCT_HK_HUB									AS 	PRODUCT_HK_HUB,
	B.PRODUCT_ID										AS 	PRODUCT_ID,
	B.O_PRODUCT_ID										AS 	O_PRODUCT_ID,
	B.ACCOUNT_RAP_CODE 									AS 	ACCOUNT_RAP_CODE,
	B.ADMINISTRATORY_TYPE 								AS 	ADMINISTRATORY_TYPE,
	B.CASH_FLOW 										AS 	CASH_FLOW,
	B.CASH_FLOW_TYPE 									AS 	CASH_FLOW_TYPE,
	B.CLIENT_ID 										AS 	CLIENT_ID,
	B.CONTRACT_ID 										AS 	CONTRACT_ID,
	B.GROSS_AMOUNT 										AS 	GROSS_AMOUNT,
	B.HK_HUB_CONTRACT 									AS 	HK_HUB_CONTRACT,
	B.HK_HUB_INVESTMENT_PRODUCT_TYPE 					AS 	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	B.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 			AS 	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	B.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 					AS 	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	B.HK_HUB_PARTY_ROLE_ADVISOR 						AS 	HK_HUB_PARTY_ROLE_ADVISOR,
	B.HK_LINK 											AS 	HK_LINK,
	B.INVESTMENT_PRODUCT_ID 							AS 	INVESTMENT_PRODUCT_ID,
	B.MASTER_CODE 										AS 	MASTER_CODE,
	B.MD_CREATION_AUDIT_ID 								AS 	MD_CREATION_AUDIT_ID,
	B.MD_CREATION_DT 									AS 	MD_CREATION_DT,
	B.MD_EXTRACT_DT 									AS 	MD_EXTRACT_DT,
	B.MD_SOURCE 										AS 	MD_SOURCE,
	B.MD_SRC_SYSTEM 									AS 	MD_SRC_SYSTEM,
	B.MD_START_DT 										AS 	MD_START_DT,
	B.ORD_TRANSACTION_TYPE 								AS 	ORD_TRANSACTION_TYPE,
	B.RETAIL_PLAN 										AS 	RETAIL_PLAN,
	B.TRADE_DATE 										AS 	TRADE_DATE,
	B.TRANSACTION_ID 									AS 	TRANSACTION_ID,
	B.TRANSACTION_TYPE 									AS 	TRANSACTION_TYPE
	FROM JOINER_PRODUCT_TRAN_ACCOUNT B 
	LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_PLANS A
	ON B.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = A.HK_HUB
	WHERE (A.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (A.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR A.MD_END_DT IS NULL))
	),
	JOINER_PRODUCT_TRAN_ADVISOR_PLAN_CLIENT AS (
	SELECT
	A.HK_HUB											AS 	CLT_HK_HUB,
	A.ID 												AS 	CLT_ID,
	CASE WHEN A.ID IS NULL THEN ''''-1'''' ELSE A.ID END 	AS 	O_CLIENT_ID,
	B.PLAN_HK_HUB										AS 	PLAN_HK_HUB,
	B.PLAN_ID 											AS 	PLAN_ID,
	B.O_PLAN_ID  										AS 	O_PLAN_ID,
	B.ADV_HK_HUB 										AS 	ADV_HK_HUB,
	B.ADV_ID											AS 	ADV_ID,
	B.O_ADV_ID 											AS 	O_ADV_ID,
	B.PRODUCT_HK_HUB									AS 	PRODUCT_HK_HUB,
	B.PRODUCT_ID										AS 	PRODUCT_ID,
	B.O_PRODUCT_ID										AS 	O_PRODUCT_ID,
	B.ACCOUNT_RAP_CODE 									AS 	ACCOUNT_RAP_CODE,
	B.ADMINISTRATORY_TYPE 								AS 	ADMINISTRATORY_TYPE,
	B.CASH_FLOW 										AS 	CASH_FLOW,
	B.CASH_FLOW_TYPE 									AS 	CASH_FLOW_TYPE,
	B.CLIENT_ID 										AS 	CLIENT_ID,
	B.CONTRACT_ID 										AS 	CONTRACT_ID,
	B.GROSS_AMOUNT 										AS 	GROSS_AMOUNT,
	B.HK_HUB_CONTRACT 									AS 	HK_HUB_CONTRACT,
	B.HK_HUB_INVESTMENT_PRODUCT_TYPE 					AS 	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	B.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 			AS 	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	B.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 					AS 	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	B.HK_HUB_PARTY_ROLE_ADVISOR 						AS 	HK_HUB_PARTY_ROLE_ADVISOR,
	B.HK_LINK 											AS 	HK_LINK,
	B.INVESTMENT_PRODUCT_ID 							AS 	INVESTMENT_PRODUCT_ID,
	B.MASTER_CODE 										AS 	MASTER_CODE,
	B.MD_CREATION_AUDIT_ID 								AS 	MD_CREATION_AUDIT_ID,
	B.MD_CREATION_DT 									AS 	MD_CREATION_DT,
	B.MD_EXTRACT_DT 									AS 	MD_EXTRACT_DT,
	B.MD_SOURCE 										AS 	MD_SOURCE,
	B.MD_SRC_SYSTEM 									AS 	MD_SRC_SYSTEM,
	B.MD_START_DT 										AS 	MD_START_DT,
	B.ORD_TRANSACTION_TYPE 								AS 	ORD_TRANSACTION_TYPE,
	B.RETAIL_PLAN 										AS 	RETAIL_PLAN,
	B.TRADE_DATE 										AS 	TRADE_DATE,
	B.TRANSACTION_ID 									AS 	TRANSACTION_ID,
	B.TRANSACTION_TYPE 									AS 	TRANSACTION_TYPE
	FROM JOINER_PRODUCT_TRAN_ADVISOR_PLAN B 
	LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_CLIENTS A 
	ON B.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = A.HK_HUB
	WHERE (A.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (A.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR A.MD_END_DT IS NULL))
	),
	AGG_TRANSACTION AS (
	SELECT
	SUM(GROSS_AMOUNT)										AS 	O_SUM_GROSS_AMOUNT,
	MAX(MD_START_DT)										AS 	O_MAX_MD_START_DT,
	MAX(MD_EXTRACT_DT)										AS  o_MAX_MD_EXTRACT_DT,
	MAX(MD_SOURCE)											AS 	o_MAX_MD_SOURCE,
	MAX(MD_SRC_SYSTEM)										AS 	O_MAX_MD_SRC_SYSTEM,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	O_CLIENT_ID,
	O_ADV_ID,
	O_PLAN_ID,
	O_PRODUCT_ID,
	TRADE_DATE,
	CASH_FLOW,
	CASH_FLOW_TYPE,
	ADMINISTRATORY_TYPE
	FROM JOINER_PRODUCT_TRAN_ADVISOR_PLAN_CLIENT 
	GROUP BY HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,HK_HUB_PARTY_ROLE_ADVISOR,HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,HK_HUB_INVESTMENT_PRODUCT_TYPE,O_CLIENT_ID,O_ADV_ID,O_PLAN_ID,O_PRODUCT_ID,TRADE_DATE,CASH_FLOW,CASH_FLOW_TYPE,ADMINISTRATORY_TYPE
	)
	SELECT 
	O_MAX_MD_START_DT,
	O_MAX_MD_SOURCE,
	O_MAX_MD_SRC_SYSTEM,
	O_MAX_MD_EXTRACT_DT,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	O_CLIENT_ID,
	O_ADV_ID,
	O_PLAN_ID,
	O_PRODUCT_ID,
	TRADE_DATE,
	O_SUM_GROSS_AMOUNT,
	CASH_FLOW,
	CASH_FLOW_TYPE,
	ADMINISTRATORY_TYPE
	FROM AGG_TRANSACTION)'';
UPD_QUERY := ''UPDATE DB_IAWT_''||ENV||''_DM.TRANSACTIONS.WT_FACT_TRANSACTIONS
SET
HK_LINK = SHA1(UPPER(CONCAT(
	  COALESCE(TRIM(MD_SRC_SYSTEM), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_PARTY_ROLE_ADVISOR), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_INVESTMENT_PRODUCT_TYPE), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(TRADE_DATE), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(CASH_FLOW), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(CASH_FLOW_TYPE), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(ADMINISTRATORY_TYPE), ''''NULL'''')
	)))
Where 1=1'';
EXECUTE IMMEDIATE :TRUNC_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END

';
CREATE OR REPLACE PROCEDURE "SP_CONV_LOADDM_BDV_TRANSACTION_TO_DM_WT_FACT_TRANSACTIONS_UNIVERIS"("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''TRUNCATE TABLE DB_IAWT_''||ENV||''_DM.TRANSACTIONS.WT_FACT_TRANSACTIONS  '';
INS_INSERT := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.TRANSACTIONS.WT_FACT_TRANSACTIONS(
MD_START_DT	
,MD_SOURCE	
,MD_SRC_SYSTEM	
,MD_EXTRACT_DT	 	
,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER		
,HK_HUB_PARTY_ROLE_ADVISOR
,HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES		
,HK_HUB_INVESTMENT_PRODUCT_TYPE		
,SK_DIM_CLIENTS		
,SK_DIM_ADVISORS		
,SK_DIM_PLANS	
,SK_DIM_MARKETPRODUCTS		
,TRADE_DATE		
,GROSS_AMOUNT		
,CASH_FLOW		
,CASH_FLOW_TYPE	
,ADMINISTRATORY_TYPE
)
SELECT
MAX(TR.MD_START_DT)	
,MAX(TR.MD_SOURCE)	
,MAX(TR.MD_SRC_SYSTEM)	
,MAX(TR.MD_EXTRACT_DT)	 	
,TR.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	
,TR.HK_HUB_PARTY_ROLE_ADVISOR	
,TR.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES	
,TR.HK_HUB_INVESTMENT_PRODUCT_TYPE	
,TR.o_CLIENT_ID	
,TR.o_ADV_ID	
,TR.o_PLAN_ID
,TR.o_PRODUCT_ID	
,TR.TRADE_DATE	
,SUM(TR.GROSS_AMOUNT)	
,TR.CASH_FLOW	
,TR.CASH_FLOW_TYPE	
,TR.ADMINISTRATORY_TYPE
FROM
(
SELECT * FROM (SELECT * FROM DB_IAWT_''||ENV||''_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (MD_SRC_SYSTEM = ''''IAS-UNIVERIS'''')) TRF
LEFT JOIN
(SELECT HK_LINK FROM DB_IAWT_''||ENV||''_DM.TRANSACTIONS.FACT_TRANSACTIONS ) FACT
ON TRF.HK_LINK = FACT.HK_LINK
LEFT JOIN
(SELECT (CASE WHEN ID IS NULL THEN -1 ELSE ID END) o_PRODUCT_ID, HK_HUB  FROM (SELECT * FROM DB_IAWT_''||ENV||''_DM.SHARED.DIM_FINANCIAL_INSTRUMENTS WHERE (MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (MD_END_DT> TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') OR (MD_END_DT IS NULL)))) PROD ) PROD
ON TRF.HK_HUB_INVESTMENT_PRODUCT_TYPE = PROD.HK_HUB
LEFT JOIN
(SELECT (CASE WHEN ID IS NULL THEN -1 ELSE ID END) O_ADV_ID , HK_HUB  FROM (SELECT * FROM DB_IAWT_''||ENV||''_DM.SHARED.DIM_ADVISOR WHERE (MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (MD_END_DT> TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') OR (MD_END_DT IS NULL)))) ADV) ADV
ON TRF.HK_HUB_PARTY_ROLE_ADVISOR = ADV.HK_HUB
LEFT JOIN
(SELECT (CASE WHEN ID IS NULL THEN -1 ELSE ID END) O_PLAN_ID , HK_HUB  FROM (SELECT * FROM DB_IAWT_''||ENV||''_DM.SHARED.DIM_PLANS WHERE (MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (MD_END_DT> TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') OR (MD_END_DT IS NULL)))) PLN) PLN
ON TRF.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES= PLN.HK_HUB
LEFT JOIN
(SELECT (CASE WHEN ID IS NULL THEN -1 ELSE ID END) O_CLIENT_ID , HK_HUB  FROM (SELECT * FROM DB_IAWT_''||ENV||''_DM.SHARED.DIM_CLIENTS WHERE (MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (MD_END_DT> TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') OR (MD_END_DT IS NULL)))) CLT) CLT
ON TRF.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = CLT.HK_HUB
WHERE FACT.HK_LINK IS NULL)TR 

GROUP BY (TR.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,TR.HK_HUB_PARTY_ROLE_ADVISOR,TR.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,TR.HK_HUB_INVESTMENT_PRODUCT_TYPE,TR.o_CLIENT_ID,TR.o_ADV_ID,TR.o_PLAN_ID,TR.o_PRODUCT_ID,TR.TRADE_DATE,TR.CASH_FLOW,TR.CASH_FLOW_TYPE,TR.ADMINISTRATORY_TYPE)	
              '';
INS_UPDATE :='' UPDATE DB_IAWT_''||ENV||''_DM.TRANSACTIONS.WT_FACT_TRANSACTIONS
SET 
HK_LINK = SHA1(UPPER(CONCAT(
	  COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(HK_HUB_PARTY_ROLE_ADVISOR), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(HK_HUB_INVESTMENT_PRODUCT_TYPE), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(TRADE_DATE), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(CASH_FLOW), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(CASH_FLOW_TYPE), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(ADMINISTRATORY_TYPE), ''''#NULL#'''')
	)))
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE "SP_CONV_M_LOADDM_BDV_TRANSACTIONS_TO_DM_WT_FACT_TRANSACTIONS"("ENV" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
TRUNC_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
TRUNC_QUERY := ''TRUNCATE TABLE  DB_IAWT_''||ENV||''_DM.TRANSACTIONS.WT_FACT_TRANSACTIONS'';
INS_QUERY := ''INSERT INTO DB_IAWT_''||ENV||''_DM.TRANSACTIONS.WT_FACT_TRANSACTIONS
MD_START_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
HK_HUB_PARTY_ROLE_ADVISOR,
HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
HK_HUB_INVESTMENT_PRODUCT_TYPE,
SK_DIM_CLIENTS,
SK_DIM_ADVISORS,
SK_DIM_PLANS,
SK_DIM_MARKETPRODUCTS,
TRADE_DATE,
GROSS_AMOUNT,
CASH_FLOW,
CASH_FLOW_TYPE,
ADMINISTRATORY_TYPE)
(WITH 
	JNR_BDVLINKTRANS_LEFTJOIN_FACTTRANS AS (
	SELECT
	A.HK_LINK 										AS 	fact_HK_LINK,
	B.ACCOUNT_RAP_CODE 								AS 	ACCOUNT_RAP_CODE,
	B.ADMINISTRATORY_TYPE 							AS 	ADMINISTRATORY_TYPE,
	B.CASH_FLOW 									AS 	CASH_FLOW,
	B.CASH_FLOW_TYPE 								AS 	CASH_FLOW_TYPE,
	B.CLIENT_ID 									AS 	CLIENT_ID,
	B.CONTRACT_ID 									AS 	CONTRACT_ID,
	B.GROSS_AMOUNT 									AS 	GROSS_AMOUNT,
	B.HK_HUB_CONTRACT 								AS 	HK_HUB_CONTRACT,
	B.HK_HUB_INVESTMENT_PRODUCT_TYPE 				AS 	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	B.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 		AS 	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	B.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 				AS 	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	B.HK_HUB_PARTY_ROLE_ADVISOR 					AS 	HK_HUB_PARTY_ROLE_ADVISOR,
	B.HK_LINK 										AS 	HK_LINK,
	B.INVESTMENT_PRODUCT_ID 						AS 	INVESTMENT_PRODUCT_ID,
	B.MASTER_CODE 									AS 	MASTER_CODE,
	B.MD_CREATION_AUDIT_ID 							AS 	MD_CREATION_AUDIT_ID,
	B.MD_CREATION_DT 								AS 	MD_CREATION_DT,
	B.MD_EXTRACT_DT 								AS 	MD_EXTRACT_DT,
	B.MD_SOURCE 									AS 	MD_SOURCE,
	B.MD_SRC_SYSTEM 								AS 	MD_SRC_SYSTEM,
	B.MD_START_DT 									AS 	MD_START_DT,
	B.ORD_TRANSACTION_TYPE 							AS 	ORD_TRANSACTION_TYPE,
	B.RETAIL_PLAN 									AS 	RETAIL_PLAN,
	B.TRADE_DATE 									AS 	TRADE_DATE,
	B.TRANSACTION_ID 								AS 	TRANSACTION_ID,
	B.TRANSACTION_TYPE								AS 	TRANSACTION_TYPE
	FROM DB_IAWT_''||ENV||''_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION B 
	LEFT JOIN DB_IAWT_''||ENV||''_DM.TRANSACTIONS.FACT_TRANSACTIONS A 
	ON B.HK_LINK = A.HK_LINK
	WHERE B.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')
	),
	Joiner_TRAN_PRODUCT AS (
	SELECT 
	A.HK_HUB 											AS 	Product_HK_HUB,
	A.ID 												AS 	Product_ID,
	CASE WHEN A.ID IS NULL THEN ''''-1'''' ELSE A.ID END 	AS 	O_PRODUCT_ID,
	B.ACCOUNT_RAP_CODE 									AS 	ACCOUNT_RAP_CODE,
	B.ADMINISTRATORY_TYPE 								AS 	ADMINISTRATORY_TYPE,
	B.CASH_FLOW 										AS 	CASH_FLOW,
	B.CASH_FLOW_TYPE 									AS 	CASH_FLOW_TYPE,
	B.CLIENT_ID 										AS 	CLIENT_ID,
	B.CONTRACT_ID 										AS 	CONTRACT_ID,
	B.fact_HK_LINK 										AS 	fact_HK_LINK,
	B.GROSS_AMOUNT 										AS 	GROSS_AMOUNT,
	B.HK_HUB_CONTRACT 									AS 	HK_HUB_CONTRACT,
	B.HK_HUB_INVESTMENT_PRODUCT_TYPE 					AS 	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	B.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 			AS 	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	B.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 					AS 	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	B.HK_HUB_PARTY_ROLE_ADVISOR 						AS 	HK_HUB_PARTY_ROLE_ADVISOR,
	B.HK_LINK 											AS 	HK_LINK,
	B.INVESTMENT_PRODUCT_ID 							AS 	INVESTMENT_PRODUCT_ID,
	B.MASTER_CODE 										AS 	MASTER_CODE,
	B.MD_CREATION_AUDIT_ID 								AS 	MD_CREATION_AUDIT_ID,
	B.MD_CREATION_DT 									AS 	MD_CREATION_DT,
	B.MD_EXTRACT_DT 									AS 	MD_EXTRACT_DT,
	B.MD_SOURCE 										AS 	MD_SOURCE,
	B.MD_SRC_SYSTEM 									AS 	MD_SRC_SYSTEM,
	B.MD_START_DT 										AS 	MD_START_DT,
	B.ORD_TRANSACTION_TYPE 								AS 	ORD_TRANSACTION_TYPE,
	B.RETAIL_PLAN 										AS 	RETAIL_PLAN,
	B.TRADE_DATE 										AS 	TRADE_DATE,
	B.TRANSACTION_ID 									AS 	TRANSACTION_ID,
	B.TRANSACTION_TYPE 									AS 	TRANSACTION_TYPE
	FROM JNR_BDVLINKTRANS_LEFTJOIN_FACTTRANS B 
	LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_FINANCIAL_INSTRUMENTS A
	ON B.HK_HUB_INVESTMENT_PRODUCT_TYPE = A.HK_HUB
	WHERE (A.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (A.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR A.MD_END_DT IS NULL))
	),
	Joiner_PRODUCT_TRAN_ACCOUNT AS (
	SELECT
		A.HK_HUB 												AS 	ADV_HK_HUB,
		A.ID													AS 	ADV_ID,
		CASE WHEN A.ID IS NULL THEN ''''-1'''' ELSE A.ID END 		AS 	O_ADV_ID,
		B.Product_HK_HUB 										AS 	Product_HK_HUB,
		B.Product_ID 											AS 	Product_ID,
		B.O_PRODUCT_ID 											AS 	O_PRODUCT_ID,
		B.ACCOUNT_RAP_CODE 										AS 	ACCOUNT_RAP_CODE,
		B.ADMINISTRATORY_TYPE 									AS 	ADMINISTRATORY_TYPE,
		B.CASH_FLOW 											AS 	CASH_FLOW,
		B.CASH_FLOW_TYPE 										AS 	CASH_FLOW_TYPE,
		B.CLIENT_ID 											AS 	CLIENT_ID,
		B.CONTRACT_ID 											AS 	CONTRACT_ID,
		B.fact_HK_LINK 											AS 	fact_HK_LINK,
		B.GROSS_AMOUNT 											AS 	GROSS_AMOUNT,
		B.HK_HUB_CONTRACT 										AS 	HK_HUB_CONTRACT,
		B.HK_HUB_INVESTMENT_PRODUCT_TYPE	 					AS 	HK_HUB_INVESTMENT_PRODUCT_TYPE,
		B.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 				AS 	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
		B.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 						AS 	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
		B.HK_HUB_PARTY_ROLE_ADVISOR 							AS 	HK_HUB_PARTY_ROLE_ADVISOR,
		B.HK_LINK 												AS 	HK_LINK,
		B.INVESTMENT_PRODUCT_ID 								AS 	INVESTMENT_PRODUCT_ID,
		B.MASTER_CODE 											AS 	MASTER_CODE,
		B.MD_CREATION_AUDIT_ID 									AS 	MD_CREATION_AUDIT_ID,
		B.MD_CREATION_DT 										AS 	MD_CREATION_DT,
		B.MD_EXTRACT_DT 										AS 	MD_EXTRACT_DT,
		B.MD_SOURCE 											AS 	MD_SOURCE,
		B.MD_SRC_SYSTEM 										AS 	MD_SRC_SYSTEM,
		B.MD_START_DT 											AS 	MD_START_DT,
		B.ORD_TRANSACTION_TYPE 									AS 	ORD_TRANSACTION_TYPE,
		B.RETAIL_PLAN 											AS 	RETAIL_PLAN,
		B.TRADE_DATE 											AS 	TRADE_DATE,
		B.TRANSACTION_ID 										AS 	TRANSACTION_ID,
		B.TRANSACTION_TYPE 										AS 	TRANSACTION_TYPE
		FROM Joiner_TRAN_PRODUCT B
		LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_ADVISOR A
		ON B.HK_HUB_PARTY_ROLE_ADVISOR = A.HK_HUB
		WHERE (A.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (A.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR A.MD_END_DT IS NULL))
		),
		Joiner_PRODUCT_TRAN_ADVISOR_PLAN AS (
		SELECT
		A.HK_HUB												AS 	PLAN_HK_HUB,
		A.ID 													AS 	PLAN_ID,
		CASE WHEN A.ID IS NULL THEN ''''-1'''' ELSE A.ID END 		AS 	O_PLAN_ID,
		B.ADV_HK_HUB											AS 	ADV_HK_HUB,
		B.ADV_ID 												AS 	ADV_ID,
		B.O_ADV_ID 												AS 	O_ADV_ID,
		B.Product_HK_HUB 										AS 	Product_HK_HUB,
		B.Product_ID 											AS 	Product_ID,
		B.O_PRODUCT_ID 											AS 	O_PRODUCT_ID,
		B.ACCOUNT_RAP_CODE 										AS 	ACCOUNT_RAP_CODE,
		B.ADMINISTRATORY_TYPE 									AS 	ADMINISTRATORY_TYPE,
		B.CASH_FLOW 											AS 	CASH_FLOW,
		B.CASH_FLOW_TYPE 										AS 	CASH_FLOW_TYPE,
		B.CLIENT_ID 											AS 	CLIENT_ID,
		B.CONTRACT_ID 											AS 	CONTRACT_ID,
		B.fact_HK_LINK 											AS 	fact_HK_LINK,
		B.GROSS_AMOUNT 											AS 	GROSS_AMOUNT,
		B.HK_HUB_CONTRACT 										AS 	HK_HUB_CONTRACT,
		B.HK_HUB_INVESTMENT_PRODUCT_TYPE	 					AS 	HK_HUB_INVESTMENT_PRODUCT_TYPE,
		B.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 				AS 	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
		B.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 						AS 	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
		B.HK_HUB_PARTY_ROLE_ADVISOR 							AS 	HK_HUB_PARTY_ROLE_ADVISOR,
		B.HK_LINK 												AS 	HK_LINK,
		B.INVESTMENT_PRODUCT_ID 								AS 	INVESTMENT_PRODUCT_ID,
		B.MASTER_CODE 											AS 	MASTER_CODE,
		B.MD_CREATION_AUDIT_ID 									AS 	MD_CREATION_AUDIT_ID,
		B.MD_CREATION_DT 										AS 	MD_CREATION_DT,
		B.MD_EXTRACT_DT 										AS 	MD_EXTRACT_DT,
		B.MD_SOURCE 											AS 	MD_SOURCE,
		B.MD_SRC_SYSTEM 										AS 	MD_SRC_SYSTEM,
		B.MD_START_DT 											AS 	MD_START_DT,
		B.ORD_TRANSACTION_TYPE 									AS 	ORD_TRANSACTION_TYPE,
		B.RETAIL_PLAN 											AS 	RETAIL_PLAN,
		B.TRADE_DATE 											AS 	TRADE_DATE,
		B.TRANSACTION_ID 										AS 	TRANSACTION_ID,
		B.TRANSACTION_TYPE 										AS 	TRANSACTION_TYPE
		FROM Joiner_PRODUCT_TRAN_ACCOUNT B
		LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_PLANS A
		ON B.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = A.HK_HUB
		WHERE (A.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (A.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR A.MD_END_DT IS NULL))
		),
		Joiner_PRODUCT_TRAN_ADVISOR_PLAN_CLIENT AS (
		SELECT
		A.HK_HUB												AS 	CLT_HK_HUB,
		A.ID 													AS 	CLT_ID,
		CASE WHEN A.ID IS NULL THEN ''''-1'''' ELSE A.ID END 		AS 	O_CLT_ID,
		B.PLAN_HK_HUB 											AS 	PLAN_HK_HUB,
		B.PLAN_ID 												AS 	PLAN_ID,
		B.O_PLAN_ID 											AS 	O_PLAN_ID,
		B.ADV_HK_HUB											AS 	ADV_HK_HUB,
		B.ADV_ID 												AS 	ADV_ID,
		B.O_ADV_ID 												AS 	O_ADV_ID,
		B.Product_HK_HUB 										AS 	PRODUCT_HK_HUB,
		B.Product_ID 											AS 	PRODUCT_ID,
		B.O_PRODUCT_ID 											AS 	O_PRODUCT_ID,
		B.ACCOUNT_RAP_CODE 										AS 	ACCOUNT_RAP_CODE,
		B.ADMINISTRATORY_TYPE 									AS 	ADMINISTRATORY_TYPE,
		B.CASH_FLOW 											AS 	CASH_FLOW,
		B.CASH_FLOW_TYPE 										AS 	CASH_FLOW_TYPE,
		B.CLIENT_ID 											AS 	CLIENT_ID,
		B.CONTRACT_ID 											AS 	CONTRACT_ID,
		B.fact_HK_LINK 											AS 	FACT_HK_LINK,
		B.GROSS_AMOUNT 											AS 	GROSS_AMOUNT,
		B.HK_HUB_CONTRACT 										AS 	HK_HUB_CONTRACT,
		B.HK_HUB_INVESTMENT_PRODUCT_TYPE	 					AS 	HK_HUB_INVESTMENT_PRODUCT_TYPE,
		B.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 				AS 	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
		B.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 						AS 	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
		B.HK_HUB_PARTY_ROLE_ADVISOR 							AS 	HK_HUB_PARTY_ROLE_ADVISOR,
		B.HK_LINK 												AS 	HK_LINK,
		B.INVESTMENT_PRODUCT_ID 								AS 	INVESTMENT_PRODUCT_ID,
		B.MASTER_CODE 											AS 	MASTER_CODE,
		B.MD_CREATION_AUDIT_ID 									AS 	MD_CREATION_AUDIT_ID,
		B.MD_CREATION_DT 										AS 	MD_CREATION_DT,
		B.MD_EXTRACT_DT 										AS 	MD_EXTRACT_DT,
		B.MD_SOURCE 											AS 	MD_SOURCE,
		B.MD_SRC_SYSTEM 										AS 	MD_SRC_SYSTEM,
		B.MD_START_DT 											AS 	MD_START_DT,
		B.ORD_TRANSACTION_TYPE 									AS 	ORD_TRANSACTION_TYPE,
		B.RETAIL_PLAN 											AS 	RETAIL_PLAN,
		B.TRADE_DATE 											AS 	TRADE_DATE,
		B.TRANSACTION_ID 										AS 	TRANSACTION_ID,
		B.TRANSACTION_TYPE 										AS 	TRANSACTION_TYPE
		FROM Joiner_PRODUCT_TRAN_ADVISOR_PLAN B
		LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_CLIENTS A 
		ON B.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = A.HK_HUB
		WHERE (A.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (A.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR A.MD_END_DT IS NULL))
		),
		Agg_Transaction AS (
		SELECT 
		SUM(GROSS_AMOUNT)										AS 	O_SUM_GROSS_AMOUNT,
		MAX(MD_START_DT)										AS 	O_MAX_MD_START_DT,
		MAX(MD_EXTRACT_DT)										AS  o_MAX_MD_EXTRACT_DT,
		MAX(MD_SOURCE)											AS 	o_MAX_MD_SOURCE,
		MAX(MD_SRC_SYSTEM)										AS 	O_MAX_MD_SRC_SYSTEM,
		CLT_HK_HUB,
		CLT_ID,
		O_CLT_ID,
		PLAN_HK_HUB,
		PLAN_ID,
		O_PLAN_ID,
		ADV_HK_HUB,
		ADV_ID,
		O_ADV_ID,
		Product_HK_HUB,
		Product_ID,
		O_PRODUCT_ID,
		ACCOUNT_RAP_CODE,
		ADMINISTRATORY_TYPE,
		CASH_FLOW,
		CASH_FLOW_TYPE,
		CLIENT_ID,
		CONTRACT_ID,
		fact_HK_LINK,
		GROSS_AMOUNT,
		HK_HUB_CONTRACT,
		HK_HUB_INVESTMENT_PRODUCT_TYPE,
		HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
		HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
		HK_HUB_PARTY_ROLE_ADVISOR,
		HK_LINK,
		INVESTMENT_PRODUCT_ID,
		MASTER_CODE,
		MD_CREATION_AUDIT_ID,
		MD_CREATION_DT,
		MD_EXTRACT_DT,
		MD_SOURCE,
		MD_SRC_SYSTEM,
		MD_START_DT,
		ORD_TRANSACTION_TYPE,
		RETAIL_PLAN,
		TRADE_DATE,
		TRANSACTION_ID,
		TRANSACTION_TYPE
		FROM Joiner_PRODUCT_TRAN_ADVISOR_PLAN_CLIENT
		GROUP BY CLT_HK_HUB,CLT_ID,O_CLT_ID,PLAN_HK_HUB,PLAN_ID,O_PLAN_ID,ADV_HK_HUB,ADV_ID,O_ADV_ID,PRODUCT_HK_HUB,PRODUCT_ID,O_PRODUCT_ID,ACCOUNT_RAP_CODE,ADMINISTRATORY_TYPE,CASH_FLOW,CASH_FLOW_TYPE,CLIENT_ID,CONTRACT_ID,FACT_HK_LINK,GROSS_AMOUNT,HK_HUB_CONTRACT,HK_HUB_INVESTMENT_PRODUCT_TYPE,HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,HK_HUB_PARTY_ROLE_ADVISOR,HK_LINK,INVESTMENT_PRODUCT_ID,MASTER_CODE,MD_CREATION_AUDIT_ID,MD_CREATION_DT,MD_EXTRACT_DT,MD_SOURCE,MD_SRC_SYSTEM,MD_START_DT,ORD_TRANSACTION_TYPE,RETAIL_PLAN,TRADE_DATE,TRANSACTION_ID,TRANSACTION_TYPE
		)
		SELECT
		O_MAX_MD_START_DT,
		O_MAX_MD_SOURCE,
		O_MAX_MD_SRC_SYSTEM,
		O_MAX_MD_EXTRACT_DT,
		HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
		HK_HUB_PARTY_ROLE_ADVISOR,
		HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
		HK_HUB_INVESTMENT_PRODUCT_TYPE,
		O_CLT_ID,
		O_ADV_ID,
		O_PLAN_ID,
		O_PRODUCT_ID,
		TRADE_DATE,
		O_SUM_GROSS_AMOUNT,
		CASH_FLOW,
		CASH_FLOW_TYPE,
		ADMINISTRATORY_TYPE
		FROM Agg_Transaction)'';
UPD_QUERY := ''UPDATE DB_IAWT_''||ENV||''_DM.TRANSACTIONS.WT_FACT_TRANSACTIONS
SET
HK_LINK = SHA1(UPPER(CONCAT(
	  COALESCE(TRIM(MD_SRC_SYSTEM), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_PARTY_ROLE_ADVISOR), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_INVESTMENT_PRODUCT_TYPE), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(TRADE_DATE), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(CASH_FLOW), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(CASH_FLOW_TYPE), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(ADMINISTRATORY_TYPE), ''''NULL'''')
	)))
Where 1=1'';
EXECUTE IMMEDIATE :TRUNC_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END

';
CREATE OR REPLACE PROCEDURE "SP_CONV_M_LOADDM_BDV_TRANSACTIONS_TO_DM_WT_FACT_TRANSACTIONS"("ENV" VARCHAR(1000), "DATA_START_DATE" VARCHAR(20))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
TRUNC_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
TRUNC_QUERY := ''TRUNCATE TABLE  DB_IAWT_''||ENV||''_DM.TRANSACTIONS.WT_FACT_TRANSACTIONS'';
INS_QUERY := ''INSERT INTO DB_IAWT_''||ENV||''_DM.TRANSACTIONS.WT_FACT_TRANSACTIONS(
MD_START_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
HK_HUB_PARTY_ROLE_ADVISOR,
HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
HK_HUB_INVESTMENT_PRODUCT_TYPE,
SK_DIM_CLIENTS,
SK_DIM_ADVISORS,
SK_DIM_PLANS,
SK_DIM_MARKETPRODUCTS,
TRADE_DATE,
GROSS_AMOUNT,
CASH_FLOW,
CASH_FLOW_TYPE,
ADMINISTRATORY_TYPE)
(WITH 
	JNR_BDVLINKTRANS_LEFTJOIN_FACTTRANS AS (
	SELECT
	A.HK_LINK 										AS 	fact_HK_LINK,
	B.ACCOUNT_RAP_CODE 								AS 	ACCOUNT_RAP_CODE,
	B.ADMINISTRATORY_TYPE 							AS 	ADMINISTRATORY_TYPE,
	B.CASH_FLOW 									AS 	CASH_FLOW,
	B.CASH_FLOW_TYPE 								AS 	CASH_FLOW_TYPE,
	B.CLIENT_ID 									AS 	CLIENT_ID,
	B.CONTRACT_ID 									AS 	CONTRACT_ID,
	B.GROSS_AMOUNT 									AS 	GROSS_AMOUNT,
	B.HK_HUB_CONTRACT 								AS 	HK_HUB_CONTRACT,
	B.HK_HUB_INVESTMENT_PRODUCT_TYPE 				AS 	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	B.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 		AS 	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	B.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 				AS 	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	B.HK_HUB_PARTY_ROLE_ADVISOR 					AS 	HK_HUB_PARTY_ROLE_ADVISOR,
	B.HK_LINK 										AS 	HK_LINK,
	B.INVESTMENT_PRODUCT_ID 						AS 	INVESTMENT_PRODUCT_ID,
	B.MASTER_CODE 									AS 	MASTER_CODE,
	B.MD_CREATION_AUDIT_ID 							AS 	MD_CREATION_AUDIT_ID,
	B.MD_CREATION_DT 								AS 	MD_CREATION_DT,
	B.MD_EXTRACT_DT 								AS 	MD_EXTRACT_DT,
	B.MD_SOURCE 									AS 	MD_SOURCE,
	B.MD_SRC_SYSTEM 								AS 	MD_SRC_SYSTEM,
	B.MD_START_DT 									AS 	MD_START_DT,
	B.ORD_TRANSACTION_TYPE 							AS 	ORD_TRANSACTION_TYPE,
	B.RETAIL_PLAN 									AS 	RETAIL_PLAN,
	B.TRADE_DATE 									AS 	TRADE_DATE,
	B.TRANSACTION_ID 								AS 	TRANSACTION_ID,
	B.TRANSACTION_TYPE								AS 	TRANSACTION_TYPE
	FROM DB_IAWT_''||ENV||''_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION B 
	LEFT JOIN DB_IAWT_''||ENV||''_DM.TRANSACTIONS.FACT_TRANSACTIONS A 
	ON B.HK_LINK = A.HK_LINK
	WHERE B.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')
	),
	Joiner_TRAN_PRODUCT AS (
	SELECT 
	A.HK_HUB 											AS 	Product_HK_HUB,
	A.ID 												AS 	Product_ID,
	CASE WHEN A.ID IS NULL THEN ''''-1'''' ELSE A.ID END 	AS 	O_PRODUCT_ID,
	B.ACCOUNT_RAP_CODE 									AS 	ACCOUNT_RAP_CODE,
	B.ADMINISTRATORY_TYPE 								AS 	ADMINISTRATORY_TYPE,
	B.CASH_FLOW 										AS 	CASH_FLOW,
	B.CASH_FLOW_TYPE 									AS 	CASH_FLOW_TYPE,
	B.CLIENT_ID 										AS 	CLIENT_ID,
	B.CONTRACT_ID 										AS 	CONTRACT_ID,
	B.fact_HK_LINK 										AS 	fact_HK_LINK,
	B.GROSS_AMOUNT 										AS 	GROSS_AMOUNT,
	B.HK_HUB_CONTRACT 									AS 	HK_HUB_CONTRACT,
	B.HK_HUB_INVESTMENT_PRODUCT_TYPE 					AS 	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	B.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 			AS 	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	B.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 					AS 	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	B.HK_HUB_PARTY_ROLE_ADVISOR 						AS 	HK_HUB_PARTY_ROLE_ADVISOR,
	B.HK_LINK 											AS 	HK_LINK,
	B.INVESTMENT_PRODUCT_ID 							AS 	INVESTMENT_PRODUCT_ID,
	B.MASTER_CODE 										AS 	MASTER_CODE,
	B.MD_CREATION_AUDIT_ID 								AS 	MD_CREATION_AUDIT_ID,
	B.MD_CREATION_DT 									AS 	MD_CREATION_DT,
	B.MD_EXTRACT_DT 									AS 	MD_EXTRACT_DT,
	B.MD_SOURCE 										AS 	MD_SOURCE,
	B.MD_SRC_SYSTEM 									AS 	MD_SRC_SYSTEM,
	B.MD_START_DT 										AS 	MD_START_DT,
	B.ORD_TRANSACTION_TYPE 								AS 	ORD_TRANSACTION_TYPE,
	B.RETAIL_PLAN 										AS 	RETAIL_PLAN,
	B.TRADE_DATE 										AS 	TRADE_DATE,
	B.TRANSACTION_ID 									AS 	TRANSACTION_ID,
	B.TRANSACTION_TYPE 									AS 	TRANSACTION_TYPE
	FROM JNR_BDVLINKTRANS_LEFTJOIN_FACTTRANS B 
	LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_FINANCIAL_INSTRUMENTS A
	ON B.HK_HUB_INVESTMENT_PRODUCT_TYPE = A.HK_HUB
	WHERE (A.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (A.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR A.MD_END_DT IS NULL))
	),
	Joiner_PRODUCT_TRAN_ACCOUNT AS (
	SELECT
		A.HK_HUB 												AS 	ADV_HK_HUB,
		A.ID													AS 	ADV_ID,
		CASE WHEN A.ID IS NULL THEN ''''-1'''' ELSE A.ID END 		AS 	O_ADV_ID,
		B.Product_HK_HUB 										AS 	Product_HK_HUB,
		B.Product_ID 											AS 	Product_ID,
		B.O_PRODUCT_ID 											AS 	O_PRODUCT_ID,
		B.ACCOUNT_RAP_CODE 										AS 	ACCOUNT_RAP_CODE,
		B.ADMINISTRATORY_TYPE 									AS 	ADMINISTRATORY_TYPE,
		B.CASH_FLOW 											AS 	CASH_FLOW,
		B.CASH_FLOW_TYPE 										AS 	CASH_FLOW_TYPE,
		B.CLIENT_ID 											AS 	CLIENT_ID,
		B.CONTRACT_ID 											AS 	CONTRACT_ID,
		B.fact_HK_LINK 											AS 	fact_HK_LINK,
		B.GROSS_AMOUNT 											AS 	GROSS_AMOUNT,
		B.HK_HUB_CONTRACT 										AS 	HK_HUB_CONTRACT,
		B.HK_HUB_INVESTMENT_PRODUCT_TYPE	 					AS 	HK_HUB_INVESTMENT_PRODUCT_TYPE,
		B.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 				AS 	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
		B.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 						AS 	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
		B.HK_HUB_PARTY_ROLE_ADVISOR 							AS 	HK_HUB_PARTY_ROLE_ADVISOR,
		B.HK_LINK 												AS 	HK_LINK,
		B.INVESTMENT_PRODUCT_ID 								AS 	INVESTMENT_PRODUCT_ID,
		B.MASTER_CODE 											AS 	MASTER_CODE,
		B.MD_CREATION_AUDIT_ID 									AS 	MD_CREATION_AUDIT_ID,
		B.MD_CREATION_DT 										AS 	MD_CREATION_DT,
		B.MD_EXTRACT_DT 										AS 	MD_EXTRACT_DT,
		B.MD_SOURCE 											AS 	MD_SOURCE,
		B.MD_SRC_SYSTEM 										AS 	MD_SRC_SYSTEM,
		B.MD_START_DT 											AS 	MD_START_DT,
		B.ORD_TRANSACTION_TYPE 									AS 	ORD_TRANSACTION_TYPE,
		B.RETAIL_PLAN 											AS 	RETAIL_PLAN,
		B.TRADE_DATE 											AS 	TRADE_DATE,
		B.TRANSACTION_ID 										AS 	TRANSACTION_ID,
		B.TRANSACTION_TYPE 										AS 	TRANSACTION_TYPE
		FROM Joiner_TRAN_PRODUCT B
		LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_ADVISOR A
		ON B.HK_HUB_PARTY_ROLE_ADVISOR = A.HK_HUB
		WHERE (A.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (A.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR A.MD_END_DT IS NULL))
		),
		Joiner_PRODUCT_TRAN_ADVISOR_PLAN AS (
		SELECT
		A.HK_HUB												AS 	PLAN_HK_HUB,
		A.ID 													AS 	PLAN_ID,
		CASE WHEN A.ID IS NULL THEN ''''-1'''' ELSE A.ID END 		AS 	O_PLAN_ID,
		B.ADV_HK_HUB											AS 	ADV_HK_HUB,
		B.ADV_ID 												AS 	ADV_ID,
		B.O_ADV_ID 												AS 	O_ADV_ID,
		B.Product_HK_HUB 										AS 	Product_HK_HUB,
		B.Product_ID 											AS 	Product_ID,
		B.O_PRODUCT_ID 											AS 	O_PRODUCT_ID,
		B.ACCOUNT_RAP_CODE 										AS 	ACCOUNT_RAP_CODE,
		B.ADMINISTRATORY_TYPE 									AS 	ADMINISTRATORY_TYPE,
		B.CASH_FLOW 											AS 	CASH_FLOW,
		B.CASH_FLOW_TYPE 										AS 	CASH_FLOW_TYPE,
		B.CLIENT_ID 											AS 	CLIENT_ID,
		B.CONTRACT_ID 											AS 	CONTRACT_ID,
		B.fact_HK_LINK 											AS 	fact_HK_LINK,
		B.GROSS_AMOUNT 											AS 	GROSS_AMOUNT,
		B.HK_HUB_CONTRACT 										AS 	HK_HUB_CONTRACT,
		B.HK_HUB_INVESTMENT_PRODUCT_TYPE	 					AS 	HK_HUB_INVESTMENT_PRODUCT_TYPE,
		B.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 				AS 	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
		B.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 						AS 	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
		B.HK_HUB_PARTY_ROLE_ADVISOR 							AS 	HK_HUB_PARTY_ROLE_ADVISOR,
		B.HK_LINK 												AS 	HK_LINK,
		B.INVESTMENT_PRODUCT_ID 								AS 	INVESTMENT_PRODUCT_ID,
		B.MASTER_CODE 											AS 	MASTER_CODE,
		B.MD_CREATION_AUDIT_ID 									AS 	MD_CREATION_AUDIT_ID,
		B.MD_CREATION_DT 										AS 	MD_CREATION_DT,
		B.MD_EXTRACT_DT 										AS 	MD_EXTRACT_DT,
		B.MD_SOURCE 											AS 	MD_SOURCE,
		B.MD_SRC_SYSTEM 										AS 	MD_SRC_SYSTEM,
		B.MD_START_DT 											AS 	MD_START_DT,
		B.ORD_TRANSACTION_TYPE 									AS 	ORD_TRANSACTION_TYPE,
		B.RETAIL_PLAN 											AS 	RETAIL_PLAN,
		B.TRADE_DATE 											AS 	TRADE_DATE,
		B.TRANSACTION_ID 										AS 	TRANSACTION_ID,
		B.TRANSACTION_TYPE 										AS 	TRANSACTION_TYPE
		FROM Joiner_PRODUCT_TRAN_ACCOUNT B
		LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_PLANS A
		ON B.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = A.HK_HUB
		WHERE (A.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (A.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR A.MD_END_DT IS NULL))
		),
		Joiner_PRODUCT_TRAN_ADVISOR_PLAN_CLIENT AS (
		SELECT
		A.HK_HUB												AS 	CLT_HK_HUB,
		A.ID 													AS 	CLT_ID,
		CASE WHEN A.ID IS NULL THEN ''''-1'''' ELSE A.ID END 		AS 	O_CLT_ID,
		B.PLAN_HK_HUB 											AS 	PLAN_HK_HUB,
		B.PLAN_ID 												AS 	PLAN_ID,
		B.O_PLAN_ID 											AS 	O_PLAN_ID,
		B.ADV_HK_HUB											AS 	ADV_HK_HUB,
		B.ADV_ID 												AS 	ADV_ID,
		B.O_ADV_ID 												AS 	O_ADV_ID,
		B.Product_HK_HUB 										AS 	PRODUCT_HK_HUB,
		B.Product_ID 											AS 	PRODUCT_ID,
		B.O_PRODUCT_ID 											AS 	O_PRODUCT_ID,
		B.ACCOUNT_RAP_CODE 										AS 	ACCOUNT_RAP_CODE,
		B.ADMINISTRATORY_TYPE 									AS 	ADMINISTRATORY_TYPE,
		B.CASH_FLOW 											AS 	CASH_FLOW,
		B.CASH_FLOW_TYPE 										AS 	CASH_FLOW_TYPE,
		B.CLIENT_ID 											AS 	CLIENT_ID,
		B.CONTRACT_ID 											AS 	CONTRACT_ID,
		B.fact_HK_LINK 											AS 	FACT_HK_LINK,
		B.GROSS_AMOUNT 											AS 	GROSS_AMOUNT,
		B.HK_HUB_CONTRACT 										AS 	HK_HUB_CONTRACT,
		B.HK_HUB_INVESTMENT_PRODUCT_TYPE	 					AS 	HK_HUB_INVESTMENT_PRODUCT_TYPE,
		B.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 				AS 	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
		B.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 						AS 	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
		B.HK_HUB_PARTY_ROLE_ADVISOR 							AS 	HK_HUB_PARTY_ROLE_ADVISOR,
		B.HK_LINK 												AS 	HK_LINK,
		B.INVESTMENT_PRODUCT_ID 								AS 	INVESTMENT_PRODUCT_ID,
		B.MASTER_CODE 											AS 	MASTER_CODE,
		B.MD_CREATION_AUDIT_ID 									AS 	MD_CREATION_AUDIT_ID,
		B.MD_CREATION_DT 										AS 	MD_CREATION_DT,
		B.MD_EXTRACT_DT 										AS 	MD_EXTRACT_DT,
		B.MD_SOURCE 											AS 	MD_SOURCE,
		B.MD_SRC_SYSTEM 										AS 	MD_SRC_SYSTEM,
		B.MD_START_DT 											AS 	MD_START_DT,
		B.ORD_TRANSACTION_TYPE 									AS 	ORD_TRANSACTION_TYPE,
		B.RETAIL_PLAN 											AS 	RETAIL_PLAN,
		B.TRADE_DATE 											AS 	TRADE_DATE,
		B.TRANSACTION_ID 										AS 	TRANSACTION_ID,
		B.TRANSACTION_TYPE 										AS 	TRANSACTION_TYPE
		FROM Joiner_PRODUCT_TRAN_ADVISOR_PLAN B
		LEFT JOIN DB_IAWT_''||ENV||''_DM.SHARED.DIM_CLIENTS A 
		ON B.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = A.HK_HUB
		WHERE (A.MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AND (A.MD_END_DT> TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') OR A.MD_END_DT IS NULL))
		),
		Agg_Transaction AS (
		SELECT 
		SUM(GROSS_AMOUNT)										AS 	O_SUM_GROSS_AMOUNT,
		MAX(MD_START_DT)										AS 	O_MAX_MD_START_DT,
		MAX(MD_EXTRACT_DT)										AS  o_MAX_MD_EXTRACT_DT,
		MAX(MD_SOURCE)											AS 	o_MAX_MD_SOURCE,
		MAX(MD_SRC_SYSTEM)										AS 	O_MAX_MD_SRC_SYSTEM,
		CLT_HK_HUB,
		CLT_ID,
		O_CLT_ID,
		PLAN_HK_HUB,
		PLAN_ID,
		O_PLAN_ID,
		ADV_HK_HUB,
		ADV_ID,
		O_ADV_ID,
		Product_HK_HUB,
		Product_ID,
		O_PRODUCT_ID,
		ACCOUNT_RAP_CODE,
		ADMINISTRATORY_TYPE,
		CASH_FLOW,
		CASH_FLOW_TYPE,
		CLIENT_ID,
		CONTRACT_ID,
		fact_HK_LINK,
		GROSS_AMOUNT,
		HK_HUB_CONTRACT,
		HK_HUB_INVESTMENT_PRODUCT_TYPE,
		HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
		HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
		HK_HUB_PARTY_ROLE_ADVISOR,
		HK_LINK,
		INVESTMENT_PRODUCT_ID,
		MASTER_CODE,
		MD_CREATION_AUDIT_ID,
		MD_CREATION_DT,
		MD_EXTRACT_DT,
		MD_SOURCE,
		MD_SRC_SYSTEM,
		MD_START_DT,
		ORD_TRANSACTION_TYPE,
		RETAIL_PLAN,
		TRADE_DATE,
		TRANSACTION_ID,
		TRANSACTION_TYPE
		FROM Joiner_PRODUCT_TRAN_ADVISOR_PLAN_CLIENT
		GROUP BY CLT_HK_HUB,CLT_ID,O_CLT_ID,PLAN_HK_HUB,PLAN_ID,O_PLAN_ID,ADV_HK_HUB,ADV_ID,O_ADV_ID,PRODUCT_HK_HUB,PRODUCT_ID,O_PRODUCT_ID,ACCOUNT_RAP_CODE,ADMINISTRATORY_TYPE,CASH_FLOW,CASH_FLOW_TYPE,CLIENT_ID,CONTRACT_ID,FACT_HK_LINK,GROSS_AMOUNT,HK_HUB_CONTRACT,HK_HUB_INVESTMENT_PRODUCT_TYPE,HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,HK_HUB_PARTY_ROLE_ADVISOR,HK_LINK,INVESTMENT_PRODUCT_ID,MASTER_CODE,MD_CREATION_AUDIT_ID,MD_CREATION_DT,MD_EXTRACT_DT,MD_SOURCE,MD_SRC_SYSTEM,MD_START_DT,ORD_TRANSACTION_TYPE,RETAIL_PLAN,TRADE_DATE,TRANSACTION_ID,TRANSACTION_TYPE
		)
		SELECT
		O_MAX_MD_START_DT,
		O_MAX_MD_SOURCE,
		O_MAX_MD_SRC_SYSTEM,
		O_MAX_MD_EXTRACT_DT,
		HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
		HK_HUB_PARTY_ROLE_ADVISOR,
		HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
		HK_HUB_INVESTMENT_PRODUCT_TYPE,
		O_CLT_ID,
		O_ADV_ID,
		O_PLAN_ID,
		O_PRODUCT_ID,
		TRADE_DATE,
		O_SUM_GROSS_AMOUNT,
		CASH_FLOW,
		CASH_FLOW_TYPE,
		ADMINISTRATORY_TYPE
		FROM Agg_Transaction)'';
UPD_QUERY := ''UPDATE DB_IAWT_''||ENV||''_DM.TRANSACTIONS.WT_FACT_TRANSACTIONS
SET
HK_LINK = SHA1(UPPER(CONCAT(
	  COALESCE(TRIM(MD_SRC_SYSTEM), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_PARTY_ROLE_ADVISOR), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(HK_HUB_INVESTMENT_PRODUCT_TYPE), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(TRADE_DATE), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(CASH_FLOW), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(CASH_FLOW_TYPE), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(ADMINISTRATORY_TYPE), ''''NULL'''')
	)))
Where 1=1'';
EXECUTE IMMEDIATE :TRUNC_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END

';
use schema TRANSACTIONS_BKP;

create or replace TABLE DIM_REGISTERED_REPRESENTATIVES (
	MD_SRCSYSTEM VARCHAR(8),
	ID VARCHAR(16777216),
	COMPANY_CODE VARCHAR(50),
	COMPANY_NAME VARCHAR(512),
	REGULATORY_ORGANIZATION_CODE VARCHAR(50),
	REGULATORY_ORGANIZATION_NAME VARCHAR(512),
	DEALER_CODE VARCHAR(50),
	DEALER_NAME VARCHAR(512),
	REGION_CODE VARCHAR(50),
	REGION_NAME VARCHAR(512),
	REGION_VP VARCHAR(16777216),
	BRANCH_CODE VARCHAR(16777216),
	BRANCH_NAME VARCHAR(16777216),
	TEAM_CODE VARCHAR(50),
	TEAM_NAME VARCHAR(512),
	RR_FULLNAME VARCHAR(16777216),
	RR_CODE VARCHAR(16777216),
	LAST_NAME VARCHAR(16777216),
	FIRST_NAME VARCHAR(16777216),
	RR_CORPORATION_NAME VARCHAR(16777216),
	STATUS VARCHAR(16777216),
	GROUP_RSP_INDICATOR VARCHAR(512),
	MD_LOADDATE TIMESTAMP_NTZ(7)
);
create or replace TABLE FACT_TRANSACTIONS (
	ID VARCHAR(16777216),
	SK_DIM_CLIENTS VARCHAR(16777216),
	SK_DIM_ADVISORS VARCHAR(50),
	SK_DIM_PLANS VARCHAR(16777216),
	SK_DIM_MARKETPRODUCTS VARCHAR(16777216),
	PLAN_CODE VARCHAR(8000),
	TRADE_DATE TIMESTAMP_NTZ(9),
	GROSS_AMOUNT NUMBER(38,12),
	TRANSACTION_TYPE VARCHAR(21),
	ORD_TRANSACTION_TYPE NUMBER(1,0),
	MD_LOADDATE TIMESTAMP_NTZ(9),
	MD_SRCSYSTEM VARCHAR(50),
	CASH_FLOW VARCHAR(12),
	ADMINISTRATORY_TYPE VARCHAR(8000),
	NEW_MONEY VARCHAR(3)
);
create or replace TABLE FACT_TRANSACTIONS2 (
	ID VARCHAR(16777216),
	SK_DIM_CLIENTS VARCHAR(16777216),
	SK_DIM_ADVISORS VARCHAR(50),
	SK_DIM_PLANS VARCHAR(16777216),
	SK_DIM_MARKETPRODUCTS VARCHAR(16777216),
	PLAN_CODE VARCHAR(8000),
	TRADE_DATE TIMESTAMP_NTZ(9),
	GROSS_AMOUNT NUMBER(38,12),
	TRANSACTION_TYPE VARCHAR(21),
	ORD_TRANSACTION_TYPE NUMBER(1,0),
	MD_LOADDATE TIMESTAMP_NTZ(9),
	MD_SRCSYSTEM VARCHAR(50),
	CASH_FLOW VARCHAR(12),
	ADMINISTRATORY_TYPE VARCHAR(8000),
	NEW_MONEY VARCHAR(3)
);
create or replace TABLE TRANSACTIONS_ACCP (
	ID VARCHAR(100)
);
create or replace TABLE TRANSACTIONS_SRC (
	ID VARCHAR(100)
);