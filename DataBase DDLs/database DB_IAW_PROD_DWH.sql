date : 2023-02-21

select GET_DDL('DATABASE', 'DB_IAW_PROD_DWH',TRUE);
"create or replace database DB_IAW_PROD_DWH;

create or replace schema DB_IAW_PROD_DWH.BUSINESS_RULES;

CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.BR_ALL_ADVISOR_AUA_SEGMENTATION_002(""I_ADVISOR_SUM_AUA"" FLOAT)
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS ' 
 var RESULT = {o_AGE_SEGMENTUnknown,o_AGE_SEGMENT_ORD0};  
    
  switch(true) {
  case I_ADVISOR_SUM_AUA == 0 
    RESULT = {o_AGE_SEGMENT0,o_AGE_SEGMENT_ORD-1}
    break;
  case I_ADVISOR_SUM_AUA = 1000000 
    RESULT = {o_AGE_SEGMENT= 1M,o_AGE_SEGMENT_ORD1}
    break;
  case I_ADVISOR_SUM_AUA  parseFloat(1000000) && I_ADVISOR_SUM_AUA = parseFloat(5000000)
    RESULT = {o_AGE_SEGMENT1M-5M,o_AGE_SEGMENT_ORD2}
    break;  
  case I_ADVISOR_SUM_AUA  5000000 && I_ADVISOR_SUM_AUA = 10000000
    RESULT = {o_AGE_SEGMENT5M-10M,o_AGE_SEGMENT_ORD3}
    break; 
   case I_ADVISOR_SUM_AUA  10000000 && I_ADVISOR_SUM_AUA = 20000000
    RESULT = {o_AGE_SEGMENT10M-20M,o_AGE_SEGMENT_ORD4}
    break;  
   case I_ADVISOR_SUM_AUA  20000000 && I_ADVISOR_SUM_AUA = 30000000
    RESULT = {o_AGE_SEGMENT20M-30M,o_AGE_SEGMENT_ORD5}
    break;    
   case I_ADVISOR_SUM_AUA  30000000 && I_ADVISOR_SUM_AUA = 50000000
    RESULT = {o_AGE_SEGMENT30M-50M,o_AGE_SEGMENT_ORD6}
    break; 
    case I_ADVISOR_SUM_AUA  50000000 
    RESULT = {o_AGE_SEGMENT 50M,o_AGE_SEGMENT_ORD7}
    break;  
  default
    RESULT = {o_AGE_SEGMENTUnknown,o_AGE_SEGMENT_ORD0}
}   
 
  return RESULT;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.BR_UNIVERIS_CLIENTS_INCOME_SEGMENTATION_006(""I_SALARY_DESC"" VARCHAR(100))
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
  
  
  var RESULT = {}
 switch(true) {
    case I_SALARY_DESC === Less or Equal to $30,000 
    RESULT = {o_IncomeSegmentation($30k),o_IncomeSegmentation_Ord1}
    break;
  case I_SALARY_DESC === $30,001 to $50,000
    RESULT = {o_IncomeSegmentation$30k - $50k,o_IncomeSegmentation_Ord2}
    break;  
   case I_SALARY_DESC === $50,001 to $70,000
   RESULT = {o_IncomeSegmentation$50k - $70k,o_IncomeSegmentation_Ord3}
    break;    
   case I_SALARY_DESC === $70,001 to $100,000
    RESULT = {o_IncomeSegmentation$70k - $100k,o_IncomeSegmentation_Ord4}
    break;  
    case I_SALARY_DESC === $100,001 to $200,000
    RESULT = {o_IncomeSegmentation$100k - $200k,o_IncomeSegmentation_Ord5}
    break; 
   case I_SALARY_DESC === $200,001 to 300,000
   RESULT = {o_IncomeSegmentation$200k - $300k,o_IncomeSegmentation_Ord6}
    break; 
   case I_SALARY_DESC === Greater or Equal to $300,001  I_SALARY_DESC === More or Equal to $300,001
    RESULT = {o_IncomeSegmentation$300k+,o_IncomeSegmentation_Ord7}
    break;    
  default
    RESULT = {o_AGE_SEGMENTUnknown,o_AGE_SEGMENT_ORD8}
}   
  return RESULT;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.BR_UNIVERIS_TRANSACTIONS_CASH_FLOW_002(""I_TRX_MNEM_ENG"" VARCHAR(100))
RETURNS VARCHAR(100)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '  
  return   I_TRX_MNEM_ENG.indexOf(XIN) = 0 I_TRX_MNEM_ENG.indexOf(DXI) = 0  I_TRX_MNEM_ENG.indexOf(XOT) = 0 I_TRX_MNEM_ENG.indexOf(DXO) = 0 YesNo;
 
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.BR_UNIVERIS_TRANSACTIONS_CASH_FLOW_002(""I_TRX_MNEM_ENG"" VARCHAR(100), ""I_GROSS_AMOUNT"" FLOAT)
RETURNS VARCHAR(100)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS ' 
  RESULT = OTHER;
  if ((I_TRX_MNEM_ENG.indexOf(XIN) = 0 I_TRX_MNEM_ENG.indexOf(DXI) = 0  I_TRX_MNEM_ENG.indexOf(XOT) = 0 I_TRX_MNEM_ENG.indexOf(DXO) = 0))
   {
     IF (I_GROSS_AMOUNT FLOAT = 0)
       RESULT = IN FLOW;
     ELSE   
       RESULT = OUT FLOW;
   }
  return   RESULT;
 
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.BR_UNIVERIS_TRANSACTIONS_CASH_FLOW_003(""I_TRX_MNEM_ENG"" VARCHAR(100), ""I_GROSS_AMOUNT"" FLOAT)
RETURNS VARCHAR(100)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS ' 
  RESULT = OTHER;
  if (I_TRX_MNEM_ENG.indexOf(XIN) = 0 I_TRX_MNEM_ENG.indexOf(DXI) = 0  I_TRX_MNEM_ENG.indexOf(XOT) = 0 I_TRX_MNEM_ENG.indexOf(DXO) = 0)
   {
     if (I_GROSS_AMOUNT  = 0)
      
       RESULT = IN FLOW;
       
    else  
       RESULT = OUT FLOW;
   }
  return   RESULT;
 
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.SP_CONV_BR_ALL_ACCOUNT_AUA_SEGMENTATION_001(""I_ACCOUNT_SUM_AUA"" FLOAT)
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '  
  
  var RESULT = {}
 switch(true) {
   case I_ACCOUNT_SUM_AUA == 0 
    RESULT = {o_ACCOUNT_AUA_SEGMENT0,o_ACCOUNT_AUA_SEGMENT_ORDER-1}
    break; 
    case I_ACCOUNT_SUM_AUA  1000000 
    RESULT = {o_ACCOUNT_AUA_SEGMENT= 1M,o_ACCOUNT_AUA_SEGMENT_ORDER1}
    break;
  case I_ACCOUNT_SUM_AUA =1000000  && I_ACCOUNT_SUM_AUA = 5000000 
    RESULT = {o_ACCOUNT_AUA_SEGMENT1M-5M,o_ACCOUNT_AUA_SEGMENT_ORDER2}
    break;  
   case I_ACCOUNT_SUM_AUA =5000000  && I_ACCOUNT_SUM_AUA = 10000000 
    RESULT = {o_ACCOUNT_AUA_SEGMENT5M-10M,o_ACCOUNT_AUA_SEGMENT_ORDER3}
    break;   
   case I_ACCOUNT_SUM_AUA =10000000  && I_ACCOUNT_SUM_AUA = 20000000 
    RESULT = {o_ACCOUNT_AUA_SEGMENT10M-20M,o_ACCOUNT_AUA_SEGMENT_ORDER4}
    break;   
   break;   
   case I_ACCOUNT_SUM_AUA =20000000  && I_ACCOUNT_SUM_AUA = 30000000 
    RESULT = {o_ACCOUNT_AUA_SEGMENT20M-30M,o_ACCOUNT_AUA_SEGMENT_ORDER5}
    break;      
  case I_ACCOUNT_SUM_AUA =30000000  && I_ACCOUNT_SUM_AUA = 50000000 
    RESULT = {o_ACCOUNT_AUA_SEGMENT30M-50M,o_ACCOUNT_AUA_SEGMENT_ORDER6}
    break; 
    case  I_ACCOUNT_SUM_AUA  50000000
     RESULT = {o_ACCOUNT_AUA_SEGMENT 50M,o_ACCOUNT_AUA_SEGMENT_ORDER7}
    break; 
   
  default
     RESULT = {o_ACCOUNT_AUA_SEGMENTUnknown,o_ACCOUNT_AUA_SEGMENT_ORDER0}
}   
  return RESULT;
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.SP_CONV_BR_ALL_ACCOUNT_AUA_SEGMENTATION_002(""I_ACCOUNT_SUM_AUA"" FLOAT)
RETURNS OBJECT
LANGUAGE JAVASCRIPT
AS '  
  
  var RESULT = {}
 switch(true) {
   case I_ACCOUNT_SUM_AUA == 0 
    RESULT = {o_ACCOUNT_AUA_SEGMENT0,o_ACCOUNT_AUA_SEGMENT_ORDER-1}
    break; 
    case I_ACCOUNT_SUM_AUA = 1000000 
    RESULT = {o_ACCOUNT_AUA_SEGMENT = 1M ,o_ACCOUNT_AUA_SEGMENT_ORDER1}
    break;
  case I_ACCOUNT_SUM_AUA  1000000  && I_ACCOUNT_SUM_AUA = 5000000 
    RESULT = {o_ACCOUNT_AUA_SEGMENT1M-5M,o_ACCOUNT_AUA_SEGMENT_ORDER2}
    break;  
   case I_ACCOUNT_SUM_AUA  5000000  && I_ACCOUNT_SUM_AUA = 10000000 
    RESULT = {o_ACCOUNT_AUA_SEGMENT5M-10M,o_ACCOUNT_AUA_SEGMENT_ORDER3}
    break;   
   case I_ACCOUNT_SUM_AUA  10000000  && I_ACCOUNT_SUM_AUA = 20000000 
    RESULT = {o_ACCOUNT_AUA_SEGMENT10M-20M,o_ACCOUNT_AUA_SEGMENT_ORDER4}
    break;   
   break;   
   case I_ACCOUNT_SUM_AUA  20000000  && I_ACCOUNT_SUM_AUA = 30000000 
    RESULT = {o_ACCOUNT_AUA_SEGMENT20M-30M,o_ACCOUNT_AUA_SEGMENT_ORDER5}
    break;      
  case I_ACCOUNT_SUM_AUA  30000000  && I_ACCOUNT_SUM_AUA = 50000000 
    RESULT = {o_ACCOUNT_AUA_SEGMENT30M-50M,o_ACCOUNT_AUA_SEGMENT_ORDER6}
    break; 
    case  I_ACCOUNT_SUM_AUA  50000000 
     RESULT = {o_ACCOUNT_AUA_SEGMENT 50M,o_ACCOUNT_AUA_SEGMENT_ORDER7}
    break; 
   
  default
     RESULT = {o_ACCOUNT_AUA_SEGMENTUnknown,o_ACCOUNT_AUA_SEGMENT_ORDER0}
}   
  return RESULT;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.SP_CONV_BR_ALL_ADVISOR_001(""I_ADVISORSTARTDATE"" VARCHAR(29), ""I_LOADDATE"" VARCHAR(29))
RETURNS VARCHAR(1)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS ' 
  var d2 = new Date(I_LOADDATE);   
  var d1 = new Date(I_ADVISORSTARTDATE);  
  var diff = d2.getTime() - d1.getTime();
  var year_diff = Math.floor(diff  (1000  60  60  24));  
  return year_diff = 365  ''1'' ''0'';    
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.SP_CONV_BR_ALL_ADVISOR_003(""I_ADVISORDATEOFBIRTH"" VARCHAR(29), ""I_ASOFDATE"" VARCHAR(29), ""I_ISCORPORATION"" BOOLEAN)
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
 
  var RESULT = {o_AGE_SEGMENTUnknown,o_AGE_SEGMENT_ORD6}
  var d1 = new Date(I_ADVISORDATEOFBIRTH);   
  var d2 = new Date(I_ASOFDATE);  
  var diff = d2.getTime() - d1.getTime();
  var year_diff = Math.floor((diff  (1000  60  60  24))365.25);    
  if (I_ISCORPORATION )
   {
    return {o_AGE_SEGMENTCorporate,o_AGE_SEGMENT_ORD8} 
   }
 switch(true) {
  case year_diff  0 
    RESULT = {o_AGE_SEGMENTUnknown,o_AGE_SEGMENT_ORD7}
    break;
  case year_diff  25 
    RESULT = {o_AGE_SEGMENTUnder 25,o_AGE_SEGMENT_ORD1}
    break;
  case year_diff = 25 && year_diff  45
    RESULT = {o_AGE_SEGMENT25-44,o_AGE_SEGMENT_ORD2}
    break;  
  case year_diff = 45 && year_diff  55
    RESULT = {o_AGE_SEGMENT45-54,o_AGE_SEGMENT_ORD3}
    break;  
   case year_diff = 55 && year_diff  61
    RESULT = {o_AGE_SEGMENT55-60,o_AGE_SEGMENT_ORD4}
    break;   
   case year_diff = 61
    RESULT = {o_AGE_SEGMENTOver 60,o_AGE_SEGMENT_ORD5}
    break;    
  default
    RESULT = {o_AGE_SEGMENTUnknown,o_AGE_SEGMENT_ORD6}
}   
  return RESULT;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.SP_CONV_BR_ALL_ADVISOR_003(""I_ADVISOR_SUM_AUA"" FLOAT)
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS ' 
 var RESULT = {o_AGE_SEGMENTUnknown,o_AGE_SEGMENT_ORD0};  
    
  switch(true) {
  case I_ADVISOR_SUM_AUA == 0 
    RESULT = {o_AGE_SEGMENT0,o_AGE_SEGMENT_ORD-1}
    break;
  case I_ADVISOR_SUM_AUA = 1000000 
    RESULT = {o_AGE_SEGMENT= 1M,o_AGE_SEGMENT_ORD1}
    break;
  case I_ADVISOR_SUM_AUA  parseFloat(1000000) && I_ADVISOR_SUM_AUA = parseFloat(5000000)
    RESULT = {o_AGE_SEGMENT1M-5M,o_AGE_SEGMENT_ORD2}
    break;  
  case I_ADVISOR_SUM_AUA  5000000 && I_ADVISOR_SUM_AUA = 10000000
    RESULT = {o_AGE_SEGMENT5M-10M,o_AGE_SEGMENT_ORD3}
    break; 
   case I_ADVISOR_SUM_AUA  10000000 && I_ADVISOR_SUM_AUA = 20000000
    RESULT = {o_AGE_SEGMENT10M-20M,o_AGE_SEGMENT_ORD4}
    break;  
   case I_ADVISOR_SUM_AUA  20000000 && I_ADVISOR_SUM_AUA = 30000000
    RESULT = {o_AGE_SEGMENT20M-30M,o_AGE_SEGMENT_ORD5}
    break;    
   case I_ADVISOR_SUM_AUA  30000000 && I_ADVISOR_SUM_AUA = 50000000
    RESULT = {o_AGE_SEGMENT30M-50M,o_AGE_SEGMENT_ORD6}
    break; 
    case I_ADVISOR_SUM_AUA  50000000 
    RESULT = {o_AGE_SEGMENT 50M,o_AGE_SEGMENT_ORD7}
    break;  
  default
    RESULT = {o_AGE_SEGMENTUnknown,o_AGE_SEGMENT_ORD0}
}   
 
  return RESULT;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.SP_CONV_BR_ALL_ADVISOR_003(""I_ADVISOR_SUM_AUA"" VARCHAR(16777216))
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS ' 
 var RESULT = {o_AGE_SEGMENTUnknown,o_AGE_SEGMENT_ORD0};
   switch(true) {
  case I_ADVISOR_SUM_AUA = 0 
    RESULT = {o_AGE_SEGMENT0,o_AGE_SEGMENT_ORD-1}
    break;
  case I_ADVISOR_SUM_AUA = 1000000 
    RESULT = {o_AGE_SEGMENT= 1M,o_AGE_SEGMENT_ORD1}
    break;
  case I_ADVISOR_SUM_AUA  1000000 && I_ADVISOR_SUM_AUA = 5000000
    RESULT = {o_AGE_SEGMENT1M-5M,o_AGE_SEGMENT_ORD2}
    break;  
  case I_ADVISOR_SUM_AUA  5000000 && I_ADVISOR_SUM_AUA = 10000000
    RESULT = {o_AGE_SEGMENT5M-10M,o_AGE_SEGMENT_ORD3}
    break; 
   case I_ADVISOR_SUM_AUA  10000000 && I_ADVISOR_SUM_AUA = 20000000
    RESULT = {o_AGE_SEGMENT10M-20M,o_AGE_SEGMENT_ORD4}
    break;  
   case I_ADVISOR_SUM_AUA  20000000 && I_ADVISOR_SUM_AUA = 30000000
    RESULT = {o_AGE_SEGMENT20M-30M,o_AGE_SEGMENT_ORD5}
    break;    
   case I_ADVISOR_SUM_AUA  30000000 && I_ADVISOR_SUM_AUA = 50000000
    RESULT = {o_AGE_SEGMENT30M-50M,o_AGE_SEGMENT_ORD6}
    break; 
    case I_ADVISOR_SUM_AUA  50000000 
    RESULT = {o_AGE_SEGMENT 50M,o_AGE_SEGMENT_ORD7}
    break;  
  default
    RESULT = {o_AGE_SEGMENTUnknown,o_AGE_SEGMENT_ORD0}
}   
 
  return RESULT;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.SP_CONV_BR_ALL_ADVISOR_AUA_SEGMENTATION_002(""I_ADVISOR_SUM_AUA"" FLOAT)
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS ' 
 var RESULT = {o_AGE_SEGMENTUnknown,o_AGE_SEGMENT_ORD0};  
    
  switch(true) {
  case I_ADVISOR_SUM_AUA == 0 
    RESULT = {o_AGE_SEGMENT0,o_AGE_SEGMENT_ORD-1}
    break;
  case I_ADVISOR_SUM_AUA = 1000000 
    RESULT = {o_AGE_SEGMENT= 1M,o_AGE_SEGMENT_ORD1}
    break;
  case I_ADVISOR_SUM_AUA  parseFloat(1000000) && I_ADVISOR_SUM_AUA = parseFloat(5000000)
    RESULT = {o_AGE_SEGMENT1M-5M,o_AGE_SEGMENT_ORD2}
    break;  
  case I_ADVISOR_SUM_AUA  5000000 && I_ADVISOR_SUM_AUA = 10000000
    RESULT = {o_AGE_SEGMENT5M-10M,o_AGE_SEGMENT_ORD3}
    break; 
   case I_ADVISOR_SUM_AUA  10000000 && I_ADVISOR_SUM_AUA = 20000000
    RESULT = {o_AGE_SEGMENT10M-20M,o_AGE_SEGMENT_ORD4}
    break;  
   case I_ADVISOR_SUM_AUA  20000000 && I_ADVISOR_SUM_AUA = 30000000
    RESULT = {o_AGE_SEGMENT20M-30M,o_AGE_SEGMENT_ORD5}
    break;    
   case I_ADVISOR_SUM_AUA  30000000 && I_ADVISOR_SUM_AUA = 50000000
    RESULT = {o_AGE_SEGMENT30M-50M,o_AGE_SEGMENT_ORD6}
    break; 
    case I_ADVISOR_SUM_AUA  50000000 
    RESULT = {o_AGE_SEGMENT 50M,o_AGE_SEGMENT_ORD7}
    break;  
  default
    RESULT = {o_AGE_SEGMENTUnknown,o_AGE_SEGMENT_ORD0}
}   
 
  return RESULT;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.SP_CONV_BR_ALL_CLIENTS_001(""I_CLIENT_INCOME"" FLOAT)
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
  
 var  RESULT = null;
 switch(true) {
    case I_CLIENT_INCOME == -1 
    RESULT = {o_INCOME_LEVEL_2_SEGMENTUnknown,o_INCOME_LEVEL_2_SEGMENT_ORD8}
    break;
  case I_CLIENT_INCOME = 30
    RESULT = {o_INCOME_LEVEL_2_SEGMENT''(=$30k)'',o_INCOME_LEVEL_2_SEGMENT_ORD1}
    break;  
   case I_CLIENT_INCOME  30  && I_CLIENT_INCOME = 50
    RESULT = {o_INCOME_LEVEL_2_SEGMENT$30k - $50k,o_INCOME_LEVEL_2_SEGMENT_ORD2}
    break;  
  case I_CLIENT_INCOME  50  && I_CLIENT_INCOME = 70
    RESULT = {o_INCOME_LEVEL_2_SEGMENT$50k - $70k,o_INCOME_LEVEL_2_SEGMENT_ORD3}
    break; 
   case I_CLIENT_INCOME  70  && I_CLIENT_INCOME = 100
    RESULT = {o_INCOME_LEVEL_2_SEGMENT$70k - $100k,o_INCOME_LEVEL_2_SEGMENT_ORD4}
    break;   
    case I_CLIENT_INCOME  100  && I_CLIENT_INCOME = 200
    RESULT = {o_INCOME_LEVEL_2_SEGMENT$70k - $100k,o_INCOME_LEVEL_2_SEGMENT_ORD5}
    break; 
    case I_CLIENT_INCOME  200  && I_CLIENT_INCOME = 300
    RESULT = {o_INCOME_LEVEL_2_SEGMENT$200k - $300k,o_INCOME_LEVEL_2_SEGMENT_ORD6}
    break;    
   case I_CLIENT_INCOME  300
    RESULT = {o_INCOME_LEVEL_2_SEGMENT$200k - $300k,o_INCOME_LEVEL_2_SEGMENT_ORD7}
    break; 
  default
    RESULT = {o_INCOME_LEVEL_2_SEGMENTUnknown,o_INCOME_LEVEL_2_SEGMENT_ORD8}
}   
  return RESULT;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.SP_CONV_BR_ALL_CLIENTS_002(""I_CLIENT_INCOME"" FLOAT)
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
  
 var  RESULT = null;
 switch(true) {
    case I_CLIENT_INCOME == -1 
    RESULT = {o_INCOME_LEVEL_1_SEGMENTUnknown,o_INCOME_LEVEL_1_SEGMENT_ORD5}
    break;
  case I_CLIENT_INCOME = 30
    RESULT = {o_INCOME_LEVEL_1_SEGMENTLower,o_INCOME_LEVEL_1_SEGMENT_ORD1}
    break;  
   case I_CLIENT_INCOME  30  && I_CLIENT_INCOME = 70
    RESULT = {o_INCOME_LEVEL_1_SEGMENTMiddle,o_INCOME_LEVEL_1_SEGMENT_ORD2}
    break;    
  case I_CLIENT_INCOME  70  && I_CLIENT_INCOME = 200
    RESULT = {o_INCOME_LEVEL_1_SEGMENTUpper,o_INCOME_LEVEL_1_SEGMENT_ORD3}
    break;  
   case I_CLIENT_INCOME  200
    RESULT = {o_INCOME_LEVEL_1_SEGMENTHigh,o_INCOME_LEVEL_1_SEGMENT_ORD4}
    break; 
  default
    RESULT = {o_INCOME_LEVEL_1_SEGMENTUnknown,o_INCOME_LEVEL_1_SEGMENT_ORD5}
}   
  return RESULT;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.SP_CONV_BR_ALL_CLIENTS_003(""I_CLIENTDATEOFBIRTH"" VARCHAR(29), ""I_ASOFDATE"" VARCHAR(29), ""I_IS_CORPORATION"" BOOLEAN)
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
  
  if (I_IS_CORPORATION  == null  && I_CLIENTDATEOFBIRTH == null)
   {
    return {o_AGE_SEGMENTUnknown,o_AGE_SEGMENT_ORD8};
    }
  if (I_IS_CORPORATION)
  {
    return {o_AGE_SEGMENT''Corporate'',o_AGE_SEGMENT_ORD9};
  }
  var RESULT = {};
  var d1 = new Date(I_CLIENTDATEOFBIRTH);   
  var d2 = new Date(I_ASOFDATE);  
  var diff = d2.getTime() - d1.getTime();
  var year_diff = Math.floor((diff  (1000  60  60  24))365.25);    
  
 switch(true) {
    case year_diff  25 
    RESULT = {o_AGE_SEGMENTUnder 25,o_AGE_SEGMENT_ORD1}
    break;
  case year_diff = 25 && year_diff  35
    RESULT = {o_AGE_SEGMENT25-34,o_AGE_SEGMENT_ORD2}
    break;  
   case year_diff = 35 && year_diff  45
    RESULT = {o_AGE_SEGMENT35-44,o_AGE_SEGMENT_ORD3}
    break;    
  case year_diff = 45 && year_diff  55
    RESULT = {o_AGE_SEGMENT45-54,o_AGE_SEGMENT_ORD4}
    break;  
   case year_diff = 55 && year_diff  65
    RESULT = {o_AGE_SEGMENT55-64,o_AGE_SEGMENT_ORD5}
    break; 
   case year_diff = 65 && year_diff  75
    RESULT = {o_AGE_SEGMENT65-74,o_AGE_SEGMENT_ORD6}
    break; 
   case year_diff = 75
    RESULT = {o_AGE_SEGMENTOver 75,o_AGE_SEGMENT_ORD7}
    break;    
  default
    RESULT = {o_AGE_SEGMENTUnknown,o_AGE_SEGMENT_ORD8}
}   
  return RESULT;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.SP_CONV_BR_ALL_CLIENTS_PROVINCE_005(""I_COUNTRY_CODE"" VARCHAR(10), ""I_PROVINCE_CODE"" VARCHAR(10))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '  
  
  var RESULT = {}
  if (I_COUNTRY_CODE  != CAN && I_PROVINCE_CODE != null )
  {
   return ''Outside Canada'';
  }
 switch(true) {
    case I_PROVINCE_CODE == SK 
    RESULT =  Saskatchewan;
    break;
    case I_PROVINCE_CODE == MB 
    RESULT =  Manitoba;
    break;
    case I_PROVINCE_CODE == NS 
    RESULT =  Nova Scotia;
    break;
    case I_PROVINCE_CODE == NL 
    RESULT =  Newfoundland and Labrador;
    break;
    case I_PROVINCE_CODE == PE 
    RESULT =  Prince Edward Island;
    break;
    case I_PROVINCE_CODE == QC 
    RESULT =  Quebec;
    break;
    case I_PROVINCE_CODE == ON 
    RESULT =  Ontario;
    break;
    case I_PROVINCE_CODE == BC 
    RESULT =  British Columbia;
    break;
    case I_PROVINCE_CODE == NB 
    RESULT =  New Brunswick;
    break;
    case I_PROVINCE_CODE == AB 
    RESULT =  Alberta;
    break;
    case I_PROVINCE_CODE == NT 
    RESULT =  Northwest Territories;
    break;
    case I_PROVINCE_CODE == YT 
    RESULT =  Yukon;
    break;
    case I_PROVINCE_CODE == NU 
    RESULT =  Nunavut; 
    break;
  default
    RESULT = Unknown
}   
  return RESULT;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.SP_CONV_BR_ALL_CLIENT_AUA_SEGMENTATION_002(""I_CLIENT_SUM_AUA"" FLOAT)
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '  
  
  var RESULT = {}
 switch(true) {
    case I_CLIENT_SUM_AUA  25000 
    RESULT = {o_CLIENT_AUA_SEGMENT25k,o_CLIENT_AUA_SEGMENT_ORDER1}
    break;
  case I_CLIENT_SUM_AUA =25000 &&  I_CLIENT_SUM_AUA = 100000 
    RESULT = {o_CLIENT_AUA_SEGMENT25k-100k,o_CLIENT_AUA_SEGMENT_ORDER2}
    break;  
   case I_CLIENT_SUM_AUA =100000 &&  I_CLIENT_SUM_AUA = 250000
   RESULT = {o_CLIENT_AUA_SEGMENT100k-250k,o_CLIENT_AUA_SEGMENT_ORDER3}
    break;    
   case I_CLIENT_SUM_AUA =250000 &&  I_CLIENT_SUM_AUA = 500000 
    RESULT = {o_CLIENT_AUA_SEGMENT250k-500k,o_CLIENT_AUA_SEGMENT_ORDER4}
    break;  
    case I_CLIENT_SUM_AUA  500000
    RESULT = {o_CLIENT_AUA_SEGMENT 500k,o_CLIENT_AUA_SEGMENT_ORDER5}
    break; 
   
  default
    RESULT = {o_CLIENT_AUA_SEGMENTUnknown,o_CLIENT_AUA_SEGMENT_ORDER6}
}   
  return RESULT;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.SP_CONV_BR_ALL_FINANCIA_INSTRUMENTS_CATEGORY_001(""I_ASSET_CATEGORY"" VARCHAR(100), ""I_DESCRIPTION_EN"" VARCHAR(100))
RETURNS VARCHAR(100)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '  
  
 var  RESULT  = ;
 switch(true) {
   case  [Mutual Fund,  Mutual Funds].includes(I_DESCRIPTION_EN)
        RESULT = Mutual Funds;
    break; 
   case  I_DESCRIPTION_EN == Fixed Income Securities
        RESULT = Fixed Income;
    break; 
  case  [Bonds,  Conv. Marginable Security,StripBonds,StripCoupons].includes(I_ASSET_CATEGORY)
        RESULT = Fixed Income;
    break;  
   case  [Call - Stock Option,Option Eligible].includes(I_ASSET_CATEGORY)
        RESULT = Options;
    break;  
   case  [Common Stock,  Unit without Debt].includes(I_ASSET_CATEGORY)
        RESULT = Equities;
    break;   
   case I_ASSET_CATEGORY == Mutual Funds
         RESULT = Mutual Funds;
    break;    
   default
     RESULT = I_DESCRIPTION_EN
}   
  return RESULT;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.SP_CONV_BR_UNIVERIS_CLIENTS_AGE_SEGMENTATION_008(""I_CLIENTDATEOFBIRTH"" VARCHAR(29), ""I_ASOFDATE"" VARCHAR(29), ""I_CORP_CD"" VARCHAR(16777216))
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
  
  if ((I_CORP_CD  == null  I_CORP_CD  != ''C'') && I_CLIENTDATEOFBIRTH == null)
   {
    return {o_AGE_SEGMENTUnknown,o_AGE_SEGMENT_ORD8};
    }
  if (I_CORP_CD == ''C'')
  {
    return {o_AGE_SEGMENT''Corporate'',o_AGE_SEGMENT_ORD9};
  }
  var RESULT = {o_AGE_SEGMENTUnknown,o_AGE_SEGMENT_ORD6}
  var d1 = new Date(I_CLIENTDATEOFBIRTH);   
  var d2 = new Date(I_ASOFDATE);  
  var diff = d2.getTime() - d1.getTime();
  var year_diff = Math.floor((diff  (1000  60  60  24))365.25);    
  
 switch(true) {
    case year_diff  25 
    RESULT = {o_AGE_SEGMENTUnder 25,o_AGE_SEGMENT_ORD1}
    break;
  case year_diff = 25 && year_diff  35
    RESULT = {o_AGE_SEGMENT25-34,o_AGE_SEGMENT_ORD2}
    break;  
   case year_diff = 35 && year_diff  45
    RESULT = {o_AGE_SEGMENT35-44,o_AGE_SEGMENT_ORD3}
    break;    
  case year_diff = 45 && year_diff  55
    RESULT = {o_AGE_SEGMENT45-54,o_AGE_SEGMENT_ORD4}
    break;  
   case year_diff = 55 && year_diff  65
    RESULT = {o_AGE_SEGMENT55-64,o_AGE_SEGMENT_ORD5}
    break; 
   case year_diff = 65 && year_diff  75
    RESULT = {o_AGE_SEGMENT65-74,o_AGE_SEGMENT_ORD6}
    break; 
   case year_diff = 75
    RESULT = {o_AGE_SEGMENTOver 75,o_AGE_SEGMENT_ORD7}
    break;    
  default
    RESULT = {o_AGE_SEGMENTUnknown,o_AGE_SEGMENT_ORD8}
}   
  return RESULT;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.SP_CONV_BR_UNIVERIS_CLIENTS_INCOME_SEGMENTATION_006(""I_SALARY_DESC"" VARCHAR(100))
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
  
  
  var RESULT = {}
 switch(true) {
    case I_SALARY_DESC === Less or Equal to $30,000 
    RESULT = {o_IncomeSegmentation($30k),o_IncomeSegmentation_Ord1}
    break;
  case I_SALARY_DESC === $30,001 to $50,000
    RESULT = {o_IncomeSegmentation$30k - $50k,o_IncomeSegmentation_Ord2}
    break;  
   case I_SALARY_DESC === $50,001 to $70,000
   RESULT = {o_IncomeSegmentation$50k - $70k,o_IncomeSegmentation_Ord3}
    break;    
   case I_SALARY_DESC === $70,001 to $100,000
    RESULT = {o_IncomeSegmentation$70k - $100k,o_IncomeSegmentation_Ord4}
    break;  
    case I_SALARY_DESC === $100,001 to $200,000
    RESULT = {o_IncomeSegmentation$100k - $200k,o_IncomeSegmentation_Ord5}
    break; 
   case I_SALARY_DESC === $200,001 to 300,000
   RESULT = {o_IncomeSegmentation$200k - $300k,o_IncomeSegmentation_Ord6}
    break; 
   case I_SALARY_DESC === Greater or Equal to $300,001  I_SALARY_DESC === More or Equal to $300,001
    RESULT = {o_IncomeSegmentation$300k+,o_IncomeSegmentation_Ord7}
    break;    
  default
    RESULT = {o_AGE_SEGMENTUnknown,o_AGE_SEGMENT_ORD8}
}   
  return RESULT;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.SP_CONV_BR_UNIVERIS_CLIENTS_SALARY_SEGMENTATION_007(""I_SALARY_DESC"" VARCHAR(100))
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
  
  
  var RESULT = {}
 switch(true) {
    case I_SALARY_DESC === Less or Equal to $30,000 
    RESULT = {o_SalarySegmentationLower,o_SalarySegmentation_Ord1}
    break;
  case I_SALARY_DESC === $30,001 to $50,000  I_SALARY_DESC === $50,001 to $70,000
    RESULT = {o_SalarySegmentationMiddle,o_SalarySegmentation_Ord2};
    break;
   case I_SALARY_DESC === $70,001 to $100,000   I_SALARY_DESC === $100,001 to $200,000
    RESULT = {o_SalarySegmentationUpper,o_SalarySegmentation_Ord3}
    break;  
    case I_SALARY_DESC === $200,001 to 300,000  I_SALARY_DESC === Greater or Equal to $300,001  I_SALARY_DESC === More or Equal to $300,001
   RESULT = {o_SalarySegmentationHigh,o_SalarySegmentation_Ord4}
    break; 
   default
    RESULT = {o_SalarySegmentationUnknown,o_SalarySegmentation_Ord5}
}   
  return RESULT;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.SP_CONV_BR_UNIVERIS_TRANSACTIONS_TRANSACTION_TYPE_001(""I_SPR_CTGY"" VARCHAR(100), ""I_TRX_MNEM_ENG"" VARCHAR(100))
RETURNS VARIANT
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '  
  
 var  RESULT  = {};
 switch(true) {
   case  I_SPR_CTGY == PUR
        RESULT = {o_TRANSACTION_TYPEPurchases,o_ORD_TRANSACTION_TYPE1};
    break; 
   case  I_SPR_CTGY == RED
        RESULT = {o_TRANSACTION_TYPERedemptions,o_ORD_TRANSACTION_TYPE2};
    break; 
   case  I_TRX_MNEM_ENG.indexOf(SWI) = 0
        RESULT = {o_TRANSACTION_TYPESwitch In,o_ORD_TRANSACTION_TYPE3};
    break; 
   case  I_TRX_MNEM_ENG.indexOf(SWO) = 0
        RESULT = {o_TRANSACTION_TYPESwitch Out,o_ORD_TRANSACTION_TYPE4};
    break;  
  case  I_TRX_MNEM_ENG.indexOf(TIN) = 0
        RESULT = {o_TRANSACTION_TYPETransfer In,o_ORD_TRANSACTION_TYPE5};
    break;  
   case  I_TRX_MNEM_ENG.indexOf(TOT) = 0
        RESULT = {o_TRANSACTION_TYPETransfer Out,o_ORD_TRANSACTION_TYPE6};
    break;  
   case  I_TRX_MNEM_ENG.indexOf(XIN) = 0 I_TRX_MNEM_ENG.indexOf(DXI) = 0 
        RESULT = {o_TRANSACTION_TYPEExternal Transfer In,o_ORD_TRANSACTION_TYPE7};
    break;  
   case  I_TRX_MNEM_ENG.indexOf(XOT) = 0 I_TRX_MNEM_ENG.indexOf(DXO) = 0 
        RESULT = {o_TRANSACTION_TYPEExternal Transfer Out,o_ORD_TRANSACTION_TYPE8};
    break;  
   default
     RESULT = {o_TRANSACTION_TYPEOthers,o_ORD_TRANSACTION_TYPE9};
}   
  return RESULT;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.SP_CONV_LOADBDV_RDV_IAS_CERTS_HUB_SAT_TO_BDV_WT_ADVISOR_IAS_CERTS(""ENV"" VARCHAR(1000), ""DATA_START_DATE"" VARCHAR(20))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
TRUNC_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
TRUNC_QUERY := ''TRUNCATE TABLE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_ADVISOR_IAS_CERTS'';

INS_QUERY:= ''INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_ADVISOR_IAS_CERTS (
HK_HUB,
MD_HASHDIFF,
MD_CREATION_DT,
MD_CREATION_AUDIT_ID,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
MD_ACTIVE,
CID,
FIRST_NAME,
LAST_NAME,
FULL_NAME,
PRIMARY_ROLE,
RVP,
BRANCH_NRD,
BRANCH_NAME,
PROVINCE,
IS_ACTIVE,
TRADE_NAME,
PORTAL_IDS,
BEGIN_DT,
END_DT,
RR_CD,
ADVISOR_BIRTH_DATE,
MD_START_DT
)
(
WITH
  LV AS (
  SELECT
	HK_HUB AS LV_HK_HUB,
	MAX(MD_START_DT) AS O_DATA_START_DATE
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_ADVISOR_IAS_CERTS
	WHERE MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')
	GROUP BY HK_HUB
  ),
  Jnr_SAT AS (
  SELECT
  A.LV_HK_HUB 					AS  LV_HK_HUB,
  C.O_DATA_START_DATE 			AS  O_DATA_START_DATE,
  B.HK_HUB 						AS 	HK_HUB,
  B.MD_START_DT 				AS 	MD_START_DT,
  B.MD_HASHDIFF 				AS 	MD_HASHDIFF,
  B.MD_CREATION_DT 				AS 	MD_CREATION_DT,
  B.MD_CREATION_AUDIT_ID 		AS 	MD_CREATION_AUDIT_ID,
  B.MD_SOURCE 					AS 	MD_SOURCE,
  B.MD_SRC_SYSTEM 				AS 	MD_SRC_SYSTEM,
  B.MD_EXTRACT_DT 				AS 	MD_EXTRACT_DT,
  B.MD_ACTIVE 					AS 	MD_ACTIVE,
  B.FIRST_NAME 					AS 	FIRST_NAME,
  B.LAST_NAME 					AS 	LAST_NAME,
  B.FULL_NAME 					AS 	FULL_NAME,
  B.PRIMARY_ROLE 				AS 	PRIMARY_ROLE,
  B.RVP 						AS 	RVP,
  B.BRANCH_NRD 					AS 	BRANCH_NRD,
  B.BRANCH_NAME 				AS 	BRANCH_NAME,
  B.PROVINCE 					AS 	PROVINCE,
  B.IS_ACTIVE 					AS 	IS_ACTIVE,
  B.TRADE_NAME 					AS 	TRADE_NAME,
  B.PORTAL_IDS 					AS 	PORTAL_IDS,
  B.BEGIN_DT 					AS 	BEGIN_DT,
  B.END_DT 						AS 	END_DT,
  B.ADVISOR_BIRTH_DATE 			AS 	ADVISOR_BIRTH_DATE
  FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_ADVISOR_IAS_CERTS B
  JOIN LV A
  ON B.HK_HUB = A.LV_HK_HUB
  JOIN LV C 
  ON B.MD_START_DT = C.O_DATA_START_DATE
  WHERE B.MD_ACTIVE = ''''A''''
  ),
  JNR_SAT_HUB AS (
  SELECT
	B.CID AS HUB_CID,
	B.HK_HUB AS HUB_HK_HUB,
	B.MD_EXTRACT_DT AS HUB_MD_EXTRACT_DT,
	B.MD_SRC_SYSTEM AS HUB_MD_SRC_SYSTEM,
	B.RR_CD AS HUB_RR_CD,
	A.LV_HK_HUB 				AS 	LV_HK_HUB,
	A.O_DATA_START_DATE 		AS 	O_DATA_START_DATE,
	A.HK_HUB 					AS 	HK_HUB,
	A.MD_START_DT 				AS 	MD_START_DT,
	A.MD_HASHDIFF 				AS 	MD_HASHDIFF,
	A.MD_CREATION_DT 			AS 	MD_CREATION_DT,
	A.MD_CREATION_AUDIT_ID 		AS 	MD_CREATION_AUDIT_ID,
	A.MD_SOURCE 				AS 	MD_SOURCE,
	A.MD_SRC_SYSTEM 			AS 	MD_SRC_SYSTEM,
	A.MD_EXTRACT_DT 			AS 	MD_EXTRACT_DT,
	A.MD_ACTIVE 				AS 	MD_ACTIVE,
	A.FIRST_NAME 				AS 	FIRST_NAME,
	A.LAST_NAME 				AS 	LAST_NAME,
	A.FULL_NAME 				AS 	FULL_NAME,
	A.PRIMARY_ROLE 				AS 	PRIMARY_ROLE,
	A.RVP 						AS 	RVP,
	A.BRANCH_NRD 				AS 	BRANCH_NRD,
	A.BRANCH_NAME 				AS 	BRANCH_NAME,
	A.PROVINCE 					AS 	PROVINCE,
	A.IS_ACTIVE 				AS 	IS_ACTIVE,
	A.TRADE_NAME 				AS 	TRADE_NAME,
	A.PORTAL_IDS 				AS 	PORTAL_IDS,
	A.BEGIN_DT 					AS 	BEGIN_DT,
	A.END_DT 					AS 	END_DT,
	A.ADVISOR_BIRTH_DATE 		AS 	ADVISOR_BIRTH_DATE
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.HUB_ADVISOR_IAS_CERTS B
	JOIN Jnr_SAT A
	ON B.HK_HUB = A.HK_HUB	
  )
  SELECT 
	HK_HUB,
	MD_HASHDIFF,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	MD_ACTIVE,
	HUB_CID,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
	PRIMARY_ROLE,
	RVP,
	BRANCH_NRD,
	BRANCH_NAME,
	PROVINCE,
	IS_ACTIVE,
	TRADE_NAME,
	PORTAL_IDS,
	BEGIN_DT,
	END_DT,
	HUB_RR_CD,
	ADVISOR_BIRTH_DATE,
	TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')
	FROM JNR_SAT_HUB)'';
  

EXECUTE IMMEDIATE :TRUNC_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END


';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.BUSINESS_RULES.SP_CONV_MPLT_BR_ALL_CLIENTS_004(""I_ASOFDATE"" VARCHAR(29), ""I_CLIENT_CONTRACT_START_DATE"" VARCHAR(29))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '  
 var  RESULT = ;
 if (I_ASOFDATE == null  I_CLIENT_CONTRACT_START_DATE == null)
 
    return Unknown;
  
    else 
   
   (I_ASOFDATE === I_CLIENT_CONTRACT_START_DATE)RESULT = YesRESULT = No  ;
  
   return RESULT;
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_ALL_ACCOUNT_AUA_SEGMENTATION_001(""I_ACCOUNT_SUM_AUA"" FLOAT)
RETURNS OBJECT
LANGUAGE JAVASCRIPT
AS '  
  
  var RESULT = {}
 switch(true) {
   case I_ACCOUNT_SUM_AUA == 0 
    RESULT = {o_ACCOUNT_AUA_SEGMENT0,o_ACCOUNT_AUA_SEGMENT_ORDER-1}
    break; 
    case I_ACCOUNT_SUM_AUA == 1000000 
    RESULT = {o_ACCOUNT_AUA_SEGMENT = 1M ,o_ACCOUNT_AUA_SEGMENT_ORDER1}
    break;
  case I_ACCOUNT_SUM_AUA  1000000  && I_ACCOUNT_SUM_AUA = 5000000 
    RESULT = {o_ACCOUNT_AUA_SEGMENT1M-5M,o_ACCOUNT_AUA_SEGMENT_ORDER2}
    break;  
   case I_ACCOUNT_SUM_AUA  5000000  && I_ACCOUNT_SUM_AUA = 10000000 
    RESULT = {o_ACCOUNT_AUA_SEGMENT5M-10M,o_ACCOUNT_AUA_SEGMENT_ORDER3}
    break;   
   case I_ACCOUNT_SUM_AUA  10000000  && I_ACCOUNT_SUM_AUA = 20000000 
    RESULT = {o_ACCOUNT_AUA_SEGMENT10M-20M,o_ACCOUNT_AUA_SEGMENT_ORDER4}
    break;   
   break;   
   case I_ACCOUNT_SUM_AUA  20000000  && I_ACCOUNT_SUM_AUA = 30000000 
    RESULT = {o_ACCOUNT_AUA_SEGMENT20M-30M,o_ACCOUNT_AUA_SEGMENT_ORDER5}
    break;      
  case I_ACCOUNT_SUM_AUA  30000000  && I_ACCOUNT_SUM_AUA = 50000000 
    RESULT = {o_ACCOUNT_AUA_SEGMENT30M-50M,o_ACCOUNT_AUA_SEGMENT_ORDER6}
    break; 
    case  I_ACCOUNT_SUM_AUA  50000000 
     RESULT = {o_ACCOUNT_AUA_SEGMENT 50M,o_ACCOUNT_AUA_SEGMENT_ORDER7}
    break; 
   
  default
     RESULT = {o_ACCOUNT_AUA_SEGMENTUnknown,o_ACCOUNT_AUA_SEGMENT_ORDER0}
}   
  return RESULT;
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_ALL_ADVISOR_001(""I_ADVISORSTARTDATE"" VARCHAR(29), ""I_LOADDATE"" VARCHAR(29))
RETURNS VARCHAR(1)
LANGUAGE JAVASCRIPT
AS ' 
  var d2 = new Date(I_LOADDATE);   
  var d1 = new Date(I_ADVISORSTARTDATE);  
  var diff = d2.getTime() - d1.getTime();
  var year_diff = Math.floor(diff / (1000 * 60 * 60 * 24));  
  return year_diff <= 365 ? ''1'': ''0'';    
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_ALL_ADVISOR_003(""I_ADVISORDATEOFBIRTH"" VARCHAR(29), ""I_ASOFDATE"" VARCHAR(29), ""I_ISCORPORATION"" VARCHAR(100))
RETURNS VARIANT
LANGUAGE JAVASCRIPT
AS '
 
  var RESULT = {o_AGE_SEGMENT:""Unknown"",o_AGE_SEGMENT_ORD:6};
  if (I_ISCORPORATION == ""True"")
   {
    return {o_AGE_SEGMENT:""Corporate"",o_AGE_SEGMENT_ORD:8,o_AGE:-1} 
   }
  if (I_ADVISORDATEOFBIRTH == null || I_ADVISORDATEOFBIRTH == """" ) 
  {
    return RESULT;
  }
  var d1 = new Date(I_ADVISORDATEOFBIRTH);   
  var d2 = new Date(I_ASOFDATE);  
  var diff = d2.getTime() - d1.getTime();
  var year_diff = Math.floor((diff / (1000 * 60 * 60 * 24))/365.25);    
  
 switch(true) {
  case year_diff < 0 :
    RESULT = {o_AGE_SEGMENT:""Unknown"",o_AGE_SEGMENT_ORD:7,o_AGE:year_diff}
    break;
  case year_diff < 25 :
    RESULT = {o_AGE_SEGMENT:""Under 25"",o_AGE_SEGMENT_ORD:1,o_AGE:year_diff}
    break;
  case year_diff >= 25 && year_diff < 45:
    RESULT = {o_AGE_SEGMENT:""25-44"",o_AGE_SEGMENT_ORD:2,o_AGE:year_diff}
    break;  
  case year_diff >= 45 && year_diff < 55:
    RESULT = {o_AGE_SEGMENT:""45-54"",o_AGE_SEGMENT_ORD:3,o_AGE:year_diff}
    break;  
   case year_diff >= 55 && year_diff < 61:
    RESULT = {o_AGE_SEGMENT:""55-60"",o_AGE_SEGMENT_ORD:4,o_AGE:year_diff}
    break;   
   case year_diff >= 61:
    RESULT = {o_AGE_SEGMENT:""Over 60"",o_AGE_SEGMENT_ORD:5,o_AGE:year_diff}
    break;    
  default:
    RESULT = {o_AGE_SEGMENT:""Unknown"",o_AGE_SEGMENT_ORD:6,o_AGE:year_diff}
}   
  return RESULT;
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_ALL_ADVISOR_AUA_SEGMENTATION_002(""I_ADVISOR_SUM_AUA"" FLOAT)
RETURNS VARIANT
LANGUAGE JAVASCRIPT
AS ' 
 var RESULT = {o_ADVISOR_AUA_SEGMENT:""Unknown"",o_ADVISOR_AUA_SEGMENT_ORDER:0};  
    
  switch(true) {
  case I_ADVISOR_SUM_AUA == 0 :
    RESULT = {o_ADVISOR_AUA_SEGMENT:""0"",o_ADVISOR_AUA_SEGMENT_ORDER:-1}
    break;
  case I_ADVISOR_SUM_AUA <= 1000000 :
    RESULT = {o_ADVISOR_AUA_SEGMENT:""<= 1M"",o_ADVISOR_AUA_SEGMENT_ORDER:1}
    break;
  case I_ADVISOR_SUM_AUA > parseFloat(1000000) && I_ADVISOR_SUM_AUA <= parseFloat(5000000):
    RESULT = {o_ADVISOR_AUA_SEGMENT:""1M-5M"",o_ADVISOR_AUA_SEGMENT_ORDER:2}
    break;  
  case I_ADVISOR_SUM_AUA > 5000000 && I_ADVISOR_SUM_AUA <= 10000000:
    RESULT = {o_ADVISOR_AUA_SEGMENT:""5M-10M"",o_ADVISOR_AUA_SEGMENT_ORDER:3}
    break; 
   case I_ADVISOR_SUM_AUA > 10000000 && I_ADVISOR_SUM_AUA <= 20000000:
    RESULT = {o_ADVISOR_AUA_SEGMENT:""10M-20M"",o_ADVISOR_AUA_SEGMENT_ORDER:4}
    break;  
   case I_ADVISOR_SUM_AUA > 20000000 && I_ADVISOR_SUM_AUA <= 30000000:
    RESULT = {o_ADVISOR_AUA_SEGMENT:""20M-30M"",o_ADVISOR_AUA_SEGMENT_ORDER:5}
    break;    
   case I_ADVISOR_SUM_AUA > 30000000 && I_ADVISOR_SUM_AUA <= 50000000:
    RESULT = {o_ADVISOR_AUA_SEGMENT:""30M-50M"",o_ADVISOR_AUA_SEGMENT_ORDER:6}
    break; 
    case I_ADVISOR_SUM_AUA > 50000000 :
    RESULT = {o_ADVISOR_AUA_SEGMENT:""> 50M"",o_ADVISOR_AUA_SEGMENT_ORDER:7}
    break;  
  default:
    RESULT = {o_ADVISOR_AUA_SEGMENT:""Unknown"",o_ADVISOR_AUA_SEGMENT_ORDER:0}
}   
 
  return RESULT;
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_ALL_CLIENTS_001(""I_CLIENT_INCOME"" FLOAT)
RETURNS OBJECT
LANGUAGE JAVASCRIPT
AS '
  
 var  RESULT = null;
 switch(true) {
    case I_CLIENT_INCOME == -1 :
    RESULT = {o_INCOME_LEVEL_2_SEGMENT:""Unknown"",o_INCOME_LEVEL_2_SEGMENT_ORD:8}
    break;
  case I_CLIENT_INCOME <= 30:
    RESULT = {o_INCOME_LEVEL_2_SEGMENT:''(<=$30k)'',o_INCOME_LEVEL_2_SEGMENT_ORD:1}
    break;  
   case I_CLIENT_INCOME > 30  && I_CLIENT_INCOME <= 50:
    RESULT = {o_INCOME_LEVEL_2_SEGMENT:""$30k - $50k"",o_INCOME_LEVEL_2_SEGMENT_ORD:2}
    break;  
  case I_CLIENT_INCOME > 50  && I_CLIENT_INCOME <= 70:
    RESULT = {o_INCOME_LEVEL_2_SEGMENT:""$50k - $70k"",o_INCOME_LEVEL_2_SEGMENT_ORD:3}
    break; 
   case I_CLIENT_INCOME > 70  && I_CLIENT_INCOME <= 100:
    RESULT = {o_INCOME_LEVEL_2_SEGMENT:""$70k - $100k"",o_INCOME_LEVEL_2_SEGMENT_ORD:4}
    break;   
    case I_CLIENT_INCOME > 100  && I_CLIENT_INCOME <= 200:
    RESULT = {o_INCOME_LEVEL_2_SEGMENT:""$100k - $200k"",o_INCOME_LEVEL_2_SEGMENT_ORD:5}
    break; 
    case I_CLIENT_INCOME > 200  && I_CLIENT_INCOME <= 300:
    RESULT = {o_INCOME_LEVEL_2_SEGMENT:""$200k - $300k"",o_INCOME_LEVEL_2_SEGMENT_ORD:6}
    break;    
   case I_CLIENT_INCOME > 300:
    RESULT = {o_INCOME_LEVEL_2_SEGMENT:""$300k+"",o_INCOME_LEVEL_2_SEGMENT_ORD:7}
    break; 
  default:
    RESULT = {o_INCOME_LEVEL_2_SEGMENT:""Unknown"",o_INCOME_LEVEL_2_SEGMENT_ORD:8}
}   
  return RESULT;
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_ALL_CLIENTS_002(""I_CLIENT_INCOME"" FLOAT)
RETURNS OBJECT
LANGUAGE JAVASCRIPT
AS '
  
 var  RESULT = null;
 switch(true) {
    case I_CLIENT_INCOME == -1 :
    RESULT = {o_INCOME_LEVEL_1_SEGMENT:""Unknown"",o_INCOME_LEVEL_1_SEGMENT_ORD:5}
    break;
  case I_CLIENT_INCOME <= 30:
    RESULT = {o_INCOME_LEVEL_1_SEGMENT:""Lower"",o_INCOME_LEVEL_1_SEGMENT_ORD:1}
    break;  
   case I_CLIENT_INCOME > 30  && I_CLIENT_INCOME <= 70:
    RESULT = {o_INCOME_LEVEL_1_SEGMENT:""Middle"",o_INCOME_LEVEL_1_SEGMENT_ORD:2}
    break;    
  case I_CLIENT_INCOME > 70  && I_CLIENT_INCOME <= 200:
    RESULT = {o_INCOME_LEVEL_1_SEGMENT:""Upper"",o_INCOME_LEVEL_1_SEGMENT_ORD:3}
    break;  
   case I_CLIENT_INCOME > 200:
    RESULT = {o_INCOME_LEVEL_1_SEGMENT:""High"",o_INCOME_LEVEL_1_SEGMENT_ORD:4}
    break; 
  default:
    RESULT = {o_INCOME_LEVEL_1_SEGMENT:""Unknown"",o_INCOME_LEVEL_1_SEGMENT_ORD:5}
}   
  return RESULT;
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_ALL_CLIENTS_003(""I_CLIENTDATEOFBIRTH"" VARCHAR(29), ""I_ASOFDATE"" VARCHAR(29), ""I_IS_CORPORATION"" BOOLEAN)
RETURNS OBJECT
LANGUAGE JAVASCRIPT
AS '
  
  if (I_IS_CORPORATION  == null  && I_CLIENTDATEOFBIRTH == null)
   {
    return {o_AGE_SEGMENT:""Unknown"",o_AGE_SEGMENT_ORD:8};
    }
  if (I_IS_CORPORATION)
  {
    return {o_AGE_SEGMENT:""Corporate"",o_AGE_SEGMENT_ORD:9};
  }
  var RESULT = {};
  var d1 = new Date(I_CLIENTDATEOFBIRTH);   
  var d2 = new Date(I_ASOFDATE);  
  var diff = d2.getTime() - d1.getTime();
  var year_diff = Math.floor((diff / (1000 * 60 * 60 * 24))/365.25);    
  
 switch(true) {
    case year_diff < 25 :
    RESULT = {o_AGE_SEGMENT:""Under 25"",o_AGE_SEGMENT_ORD:1}
    break;
  case year_diff >= 25 && year_diff < 35:
    RESULT = {o_AGE_SEGMENT:""25-34"",o_AGE_SEGMENT_ORD:2}
    break;  
   case year_diff >= 35 && year_diff < 45:
    RESULT = {o_AGE_SEGMENT:""35-44"",o_AGE_SEGMENT_ORD:3}
    break;    
  case year_diff >= 45 && year_diff < 55:
    RESULT = {o_AGE_SEGMENT:""45-54"",o_AGE_SEGMENT_ORD:4}
    break;  
   case year_diff >= 55 && year_diff < 65:
    RESULT = {o_AGE_SEGMENT:""55-64"",o_AGE_SEGMENT_ORD:5}
    break; 
   case year_diff >= 65 && year_diff < 75:
    RESULT = {o_AGE_SEGMENT:""65-74"",o_AGE_SEGMENT_ORD:6}
    break; 
   case year_diff >= 75:
    RESULT = {o_AGE_SEGMENT:""Over 75"",o_AGE_SEGMENT_ORD:7}
    break;    
  default:
    RESULT = {o_AGE_SEGMENT:""Unknown"",o_AGE_SEGMENT_ORD:8}
}   
  return RESULT;
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_ALL_CLIENTS_004(""I_ASOFDATE"" VARCHAR(29), ""I_CLIENT_CONTRACT_START_DATE"" VARCHAR(29))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
AS '  
 var  RESULT = """";
 if (I_ASOFDATE == null || I_CLIENT_CONTRACT_START_DATE == null)
 
    return ""Unknown"";
  
    else 
   
   (I_ASOFDATE === I_CLIENT_CONTRACT_START_DATE)?RESULT = ""Yes"":RESULT = ""No""  ;
  
   return RESULT;
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_ALL_CLIENTS_PROVINCE_005(""I_PROVINCE_CODE"" VARCHAR(10), ""I_COUNTRY_CODE"" VARCHAR(10))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
AS '  
  
  var RESULT = {}
  if (I_COUNTRY_CODE  != ""CAN"" && I_COUNTRY_CODE != null )
  {
   return ''Outside Canada'';
  }
 switch(true) {
    case I_PROVINCE_CODE == ""SK"" :
    RESULT =  ""Saskatchewan"";
    break;
    case I_PROVINCE_CODE == ""MB"" :
    RESULT =  ""Manitoba"";
    break;
    case I_PROVINCE_CODE == ""NS"" :
    RESULT =  ""Nova Scotia"";
    break;
    case I_PROVINCE_CODE == ""NL"" :
    RESULT =  ""Newfoundland and Labrador"";
    break;
    case I_PROVINCE_CODE == ""PE"" :
    RESULT =  ""Prince Edward Island"";
    break;
    case I_PROVINCE_CODE == ""QC"" :
    RESULT =  ""Quebec"";
    break;
    case I_PROVINCE_CODE == ""ON"" :
    RESULT =  ""Ontario"";
    break;
    case I_PROVINCE_CODE == ""BC"" :
    RESULT =  ""British Columbia"";
    break;
    case I_PROVINCE_CODE == ""NB"" :
    RESULT =  ""New Brunswick"";
    break;
    case I_PROVINCE_CODE == ""AB"" :
    RESULT =  ""Alberta"";
    break;
    case I_PROVINCE_CODE == ""NT"" :
    RESULT =  ""Northwest Territories"";
    break;
    case I_PROVINCE_CODE == ""YT"" :
    RESULT =  ""Yukon"";
    break;
    case I_PROVINCE_CODE == ""NU"" :
    RESULT =  ""Nunavut""; 
    break;
  default:
    RESULT = ""Unknown""
}   
  return RESULT;
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_ALL_CLIENT_AUA_SEGMENTATION_002(""I_CLIENT_SUM_AUA"" FLOAT)
RETURNS OBJECT
LANGUAGE JAVASCRIPT
AS '  
  
  var RESULT = {}
 switch(true) {
    case I_CLIENT_SUM_AUA < 25000 :
    RESULT = {o_CLIENT_AUA_SEGMENT:""<25k"",o_CLIENT_AUA_SEGMENT_ORDER:1}
    break;
  case I_CLIENT_SUM_AUA >=25000 &&  I_CLIENT_SUM_AUA <= 100000 :
    RESULT = {o_CLIENT_AUA_SEGMENT:""25k-100k"",o_CLIENT_AUA_SEGMENT_ORDER:2}
    break;  
   case I_CLIENT_SUM_AUA >=100000 &&  I_CLIENT_SUM_AUA <= 250000:
   RESULT = {o_CLIENT_AUA_SEGMENT:""100k-250k"",o_CLIENT_AUA_SEGMENT_ORDER:3}
    break;    
   case I_CLIENT_SUM_AUA >=250000 &&  I_CLIENT_SUM_AUA <= 500000: 
    RESULT = {o_CLIENT_AUA_SEGMENT:""250k-500k"",o_CLIENT_AUA_SEGMENT_ORDER:4}
    break;  
    case I_CLIENT_SUM_AUA > 500000:
    RESULT = {o_CLIENT_AUA_SEGMENT:""> 500k"",o_CLIENT_AUA_SEGMENT_ORDER:5}
    break; 
   
  default:
    RESULT = {o_CLIENT_AUA_SEGMENT:""Unknown"",o_CLIENT_AUA_SEGMENT_ORDER:6}
}   
  return RESULT;
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_ALL_FINANCIA_INSTRUMENTS_CATEGORY_001(""I_ASSET_CATEGORY"" VARCHAR(100), ""I_DESCRIPTION_EN"" VARCHAR(100))
RETURNS VARCHAR(100)
LANGUAGE JAVASCRIPT
AS '  
  
 var  RESULT  = ;
 switch(true) {
   case  [Mutual Fund,  Mutual Funds].includes(I_DESCRIPTION_EN)
        RESULT = Mutual Funds;
    break; 
   case  I_DESCRIPTION_EN == Fixed Income Securities
        RESULT = Fixed Income;
    break; 
  case  [Bonds,  Conv. Marginable Security,StripBonds,StripCoupons].includes(I_ASSET_CATEGORY)
        RESULT = Fixed Income;
    break;  
   case  [Call - Stock Option,Option Eligible].includes(I_ASSET_CATEGORY)
        RESULT = Options;
    break;  
   case  [Common Stock,  Unit without Debt].includes(I_ASSET_CATEGORY)
        RESULT = Equities;
    break;   
   case I_ASSET_CATEGORY == Mutual Funds
         RESULT = Mutual Funds;
    break;    
   default
     RESULT = I_DESCRIPTION_EN
}   
  return RESULT;
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_ALL_REVENUE_001(""I_SOURCECODE"" VARCHAR(512))
RETURNS VARIANT
LANGUAGE JAVASCRIPT
AS '
  var RESULT = {o_REVENUE_TYPE:""Unkown"",o_REVENUE_SUBTYPE:""Unknown""};
  switch(I_SOURCECODE) {
  case ''OFF'':
    RESULT = {o_REVENUE_TYPE:""Trade commissions"",o_REVENUE_SUBTYPE:""OffBook commission""}
    break;
  case ''FXF'':
    RESULT = {o_REVENUE_TYPE:""Fee based/Managed"",o_REVENUE_SUBTYPE:""Fixed fees""}
    break;
  case ''MGD'':
    RESULT = {o_REVENUE_TYPE:""Fee based/Managed"",o_REVENUE_SUBTYPE:""Managed""}
    break;  
  case ''JRN'':
    RESULT = {o_REVENUE_TYPE:""Trailers"",o_REVENUE_SUBTYPE:""Trailer fees and GIC""}
    break;  
   case ''MNL'':
    RESULT = {o_REVENUE_TYPE:""Trade commissions"",o_REVENUE_SUBTYPE:""Others""}
    break;   
   case ''INS'':
    RESULT = {o_REVENUE_TYPE:""Insurances"",o_REVENUE_SUBTYPE:""Insurances""}
    break;
   case ''TRD'':
    RESULT = {o_REVENUE_TYPE:""Trade commissions"",o_REVENUE_SUBTYPE:""Trade commissions""}
    break; 
  default:
    RESULT = {o_REVENUE_TYPE:""Unkown"",o_REVENUE_SUBTYPE:""Unknown""}
} 
  return RESULT;
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_TBP_CUSTOMER_AGE_SEGMENTATION_001(""I_BIRTH_DATE"" VARCHAR(29), ""I_REFERENCE_DATE"" VARCHAR(29), ""I_BIRTH_DATE_DIFF"" VARCHAR(16777216))
RETURNS OBJECT
LANGUAGE JAVASCRIPT
AS '  
  var RESULT = {o_AGE:0,o_AGE_SEGMENT:""Unknown"",o_AGE_SEGMENT_ORD:6}
  var birth_diff = new Date(I_BIRTH_DATE_DIFF);
  var d1 = new Date(I_BIRTH_DATE);   
  var d2 = new Date(I_REFERENCE_DATE);  
  var diff = d2.getTime() - d1.getTime();
  var year_diff = Math.floor((diff / (1000 * 60 * 60 * 24))/365.25);    
  age = birth_diff > d2 ? year_diff-1 : year_diff
 switch(true) {
    case age < 18 :
    RESULT = {o_AGE:age,o_AGE_GROUP:""younger than 18"",o_AGE_GROUP_SORT:1}
    break;
  case age >= 18 && year_diff < 30:
    RESULT = {o_AGE:age,o_AGE_GROUP:""18 to 29 years old"",o_AGE_GROUP_SORT:2}
    break;  
   case year_diff >= 30 && year_diff < 50:
    RESULT = {o_AGE:age,o_AGE_GROUP:""30 to 49 years old"",o_AGE_GROUP_SORT:3}
    break;    
  case year_diff >= 50 && year_diff < 65:
    RESULT = {o_AGE:age,o_AGE_GROUP:""50 to 65 years old"",o_AGE_GROUP_SORT:4}
    break;
      default:
    RESULT = {o_AGE:age,o_AGE_GROUP:""65 years old or older"",o_AGE_GROUP_SORT:5} 
}   
  return RESULT;
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_TBP_CUSTOMER_AGE_SEGMENTATION_001_COPY1(""I_BIRTH_DATE"" VARCHAR(29), ""I_REFERENCE_DATE"" VARCHAR(29))
RETURNS OBJECT
LANGUAGE JAVASCRIPT
AS '  
  var RESULT = {o_AGE_GROUP:""younger than 18"",o_AGE_GROUP_SORT:1}  
  return RESULT;
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_CLIENTS_AGE_SEGMENTATION_008(""I_CLIENTDATEOFBIRTH"" VARCHAR(29), ""I_ASOFDATE"" VARCHAR(29), ""I_CORP_CD"" VARCHAR(16777216))
RETURNS OBJECT
LANGUAGE JAVASCRIPT
AS '
  
  if ((I_CORP_CD  == null ) && I_CLIENTDATEOFBIRTH == null)
   {
    return {o_AGE_SEGMENT:""Unknown"",o_AGE_SEGMENT_ORD:8};
    }
  if (I_CORP_CD == ''C'')
  {
    return {o_AGE_SEGMENT:""Corporate"",o_AGE_SEGMENT_ORD:9};
  }
  var RESULT = {o_AGE_SEGMENT:""Unknown"",o_AGE_SEGMENT_ORD:6}
  var d1 = new Date(I_CLIENTDATEOFBIRTH);   
  var d2 = new Date(I_ASOFDATE);  
  var diff = d2.getTime() - d1.getTime();
  var year_diff = Math.floor((diff / (1000 * 60 * 60 * 24))/365.25);    
  
 switch(true) {
    case year_diff < 25 :
    RESULT = {o_AGE_SEGMENT:""Under 25"",o_AGE_SEGMENT_ORD:1}
    break;
  case year_diff >= 25 && year_diff < 35:
    RESULT = {o_AGE_SEGMENT:""25-34"",o_AGE_SEGMENT_ORD:2}
    break;  
   case year_diff >= 35 && year_diff < 45:
    RESULT = {o_AGE_SEGMENT:""35-44"",o_AGE_SEGMENT_ORD:3}
    break;    
  case year_diff >= 45 && year_diff < 55:
    RESULT = {o_AGE_SEGMENT:""45-54"",o_AGE_SEGMENT_ORD:4}
    break;  
   case year_diff >= 55 && year_diff < 65:
    RESULT = {o_AGE_SEGMENT:""55-64"",o_AGE_SEGMENT_ORD:5}
    break; 
   case year_diff >= 65 && year_diff < 75:
    RESULT = {o_AGE_SEGMENT:""65-74"",o_AGE_SEGMENT_ORD:6}
    break; 
   case year_diff >= 75:
    RESULT = {o_AGE_SEGMENT:""Over 75"",o_AGE_SEGMENT_ORD:7}
    break;    
  default:
    RESULT = {o_AGE_SEGMENT:""Unknown"",o_AGE_SEGMENT_ORD:8}
}   
  return RESULT; ';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_CLIENTS_INCOME_SEGMENTATION_006(""I_SALARY_DESC"" VARCHAR(100))
RETURNS OBJECT
LANGUAGE JAVASCRIPT
AS '    
  var RESULT = {}
 switch(true) {
    case I_SALARY_DESC === ""Less or Equal to $30,000"" :
    RESULT = {o_INCOME_SEGMENT:""(<$30k)"",o_INCOME_SEGMENT_ORD:1}
    break;
  case I_SALARY_DESC === ""$30,001 to $50,000"":
    RESULT = {o_INCOME_SEGMENT:""$30k - $50k"",o_INCOME_SEGMENT_ORD:2}
    break;  
   case I_SALARY_DESC === ""$50,001 to $70,000"":
   RESULT = {o_INCOME_SEGMENT:""$50k - $70k"",o_INCOME_SEGMENT_ORD:3}
    break;    
   case I_SALARY_DESC === ""$70,001 to $100,000"":
    RESULT = {o_INCOME_SEGMENT:""$70k - $100k"",o_INCOME_SEGMENT_ORD:4}
    break;  
    case I_SALARY_DESC === ""$100,001 to $200,000"":
    RESULT = {o_INCOME_SEGMENT:""$100k - $200k"",o_INCOME_SEGMENT_ORD:5}
    break; 
   case I_SALARY_DESC === ""$200,001 to $300,000"":
   RESULT = {o_INCOME_SEGMENT:""$200k - $300k"",o_INCOME_SEGMENT_ORD:6}
    break; 
   case I_SALARY_DESC === ""Greater or Equal to $300,001"" || I_SALARY_DESC === ""More or Equal to $300,001"":
    RESULT = {o_INCOME_SEGMENT:""$300k+"",o_INCOME_SEGMENT_ORD:7}
    break;    
  default:
    RESULT = {o_INCOME_SEGMENT:""Unknown"",o_INCOME_SEGMENT_ORD:8}
}   
  return RESULT;
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_CLIENTS_SALARY_SEGMENTATION_007(""I_SALARY_DESC"" VARCHAR(100))
RETURNS OBJECT
LANGUAGE JAVASCRIPT
AS '
  
  var RESULT = {}
 switch(true) {
    case I_SALARY_DESC === ""Less or Equal to $30,000"" :
    RESULT = {o_SALARY_SEGMENT:""Lower"",o_SALARY_SEGMENT_ORD:1}
    break;
  case I_SALARY_DESC === ""$30,001 to $50,000"" || I_SALARY_DESC === ""$50,001 to $70,000"":
    RESULT = {o_SALARY_SEGMENT:""Middle"",o_SALARY_SEGMENT_ORD:2};
    break;
   case I_SALARY_DESC === ""$70,001 to $100,000"" ||  I_SALARY_DESC === ""$100,001 to $200,000"":
    RESULT = {o_SALARY_SEGMENT:""Upper"",o_SALARY_SEGMENT_ORD:3}
    break;  
    case I_SALARY_DESC === ""$200,001 to $300,000"" || I_SALARY_DESC === ""Greater or Equal to $300,001"" || I_SALARY_DESC === ""More or Equal to $300,001"":
   RESULT = {o_SALARY_SEGMENT:""High"",o_SALARY_SEGMENT_ORD:4}
    break; 
   default:
    RESULT = {o_SALARY_SEGMENT:""Unknown"",o_SALARY_SEGMENT_ORD:5}
}   
  return RESULT;
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_REVENUE_REVENUE_SUBTYPE_003(""I_COM_PROD_MNEM"" VARCHAR(5), ""I_COM_PROD_LONG_DESC"" VARCHAR(40))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
AS '
  var RESULT = I_COM_PROD_LONG_DESC;
  switch (true) {
  case ([''MFTRX'',''BONUS'',''COMM''].includes(I_COM_PROD_MNEM)) :
    RESULT = ""Trade commissions""
    break;
 case ([''ADJUS'',''OTHER''].includes(I_COM_PROD_MNEM)):
    RESULT = ""Others""
    break;
 case ([''REF'',''SREF''].includes(I_COM_PROD_MNEM)):
    RESULT = ""Referals""
    break;
  case ([''TOF'',''TF''].includes(I_COM_PROD_MNEM)):
    RESULT = ""Charge back client fees""
    break;  
  case (I_COM_PROD_MNEM === ''GICC''):
    RESULT = ""GIC commissions""
    break;    
   default:
    RESULT =  I_COM_PROD_LONG_DESC;
} 
  return RESULT;
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_REVENUE_REVENUE_TYPE_002(""I_COM_PROD_CD"" VARCHAR(2), ""I_SRC_SYSTEM"" VARCHAR(100))
RETURNS VARCHAR(100)
LANGUAGE JAVASCRIPT
AS '
 
 if ( [""02"",""10""].includes(I_COM_PROD_CD)){
  return ""Trailers"";
  }
  if (I_SRC_SYSTEM === ""INVESTIA-UNIVERIS"" && [""35"",""37""].includes(I_COM_PROD_CD))
  {   
     return ""Fee based/Managed""
   } 
    return ""Trade commissions""
 
 
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_CASH_FLOW_002(""I_TRX_MNEM_ENG"" VARCHAR(100))
RETURNS VARCHAR(100)
LANGUAGE JAVASCRIPT
AS '  
  return   I_TRX_MNEM_ENG.indexOf(""XIN"") >= 0 ||I_TRX_MNEM_ENG.indexOf(""DXI"") >= 0 || I_TRX_MNEM_ENG.indexOf(""XOT"") >= 0 ||I_TRX_MNEM_ENG.indexOf(""DXO"") >= 0? ""Yes"":""No"";
 
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_CASH_FLOW_003(""I_TRX_MNEM_ENG"" VARCHAR(100), ""I_GROSS_AMOUNT"" FLOAT)
RETURNS VARCHAR(100)
LANGUAGE JAVASCRIPT
AS ' 
  RESULT = ""OTHER"";
  if (I_TRX_MNEM_ENG.indexOf(""XIN"") >= 0 ||I_TRX_MNEM_ENG.indexOf(""DXI"") >= 0 || I_TRX_MNEM_ENG.indexOf(""XOT"") >= 0 ||I_TRX_MNEM_ENG.indexOf(""DXO"") >= 0)
   {
     if (I_GROSS_AMOUNT  >= 0)
      
       RESULT = ""IN FLOW"";
       
    else  
       RESULT = ""OUT FLOW"";
   }
  return   RESULT;
 
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_TRANSACTION_TYPE_001(""I_SPR_CTGY"" VARCHAR(100), ""I_TRX_MNEM_ENG"" VARCHAR(100))
RETURNS OBJECT
LANGUAGE JAVASCRIPT
AS '  
  
 var  RESULT  = {};
 switch(true) {
   case  I_SPR_CTGY == ""PUR"":
        RESULT = {o_TRANSACTION_TYPE:""Purchases"",o_ORD_TRANSACTION_TYPE:1};
    break; 
   case  I_SPR_CTGY == ""RED"":
        RESULT = {o_TRANSACTION_TYPE:""Redemptions"",o_ORD_TRANSACTION_TYPE:2};
    break; 
   case  I_TRX_MNEM_ENG.indexOf(""SWI"") >= 0:
        RESULT = {o_TRANSACTION_TYPE:""Switch In"",o_ORD_TRANSACTION_TYPE:3};
    break; 
   case  I_TRX_MNEM_ENG.indexOf(""SWO"") >= 0:
        RESULT = {o_TRANSACTION_TYPE:""Switch Out"",o_ORD_TRANSACTION_TYPE:4};
    break;  
  case  I_TRX_MNEM_ENG.indexOf(""TIN"") >= 0:
        RESULT = {o_TRANSACTION_TYPE:""Transfer In"",o_ORD_TRANSACTION_TYPE:5};
    break;  
   case  I_TRX_MNEM_ENG.indexOf(""TOT"") >= 0:
        RESULT = {o_TRANSACTION_TYPE:""Transfer Out"",o_ORD_TRANSACTION_TYPE:6};
    break;  
   case  I_TRX_MNEM_ENG.indexOf(""XIN"") >= 0 ||I_TRX_MNEM_ENG.indexOf(""DXI"") >= 0 :
        RESULT = {o_TRANSACTION_TYPE:""External Transfer In"",o_ORD_TRANSACTION_TYPE:7};
    break;  
   case  I_TRX_MNEM_ENG.indexOf(""XOT"") >= 0 ||I_TRX_MNEM_ENG.indexOf(""DXO"") >= 0 :
        RESULT = {o_TRANSACTION_TYPE:""External Transfer Out"",o_ORD_TRANSACTION_TYPE:8};
    break;  
   default:
     RESULT = {o_TRANSACTION_TYPE:""Others"",o_ORD_TRANSACTION_TYPE:9};
}   
  return RESULT;
';
create or replace schema DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_BDV;

create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_BDV.LINK_INVESTMENT (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ADVISOR',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	MD_SEQ VARCHAR(50) COMMENT 'The value of METADATA$FILE_ROW_NUMBER',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Master code of the advisor',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product Type ID',
	CLIENT_ID VARCHAR(100) COMMENT 'Client ID',
	PLN_MNEM VARCHAR(512) COMMENT 'Plan code',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	ASC_1_RESP_PLAN_TYPES VARCHAR(10) COMMENT 'subtype of the RESP plans',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_BDV.SAT_LINK_INVESTMENT (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	RR_CD VARCHAR(50) COMMENT 'Advisor RR code',
	PLN_SYSID VARCHAR(1000) COMMENT 'Its the plan system id',
	BALANCE_DATE TIMESTAMP_NTZ(9) COMMENT 'Holding balance date',
	HOLDING_VALUE NUMBER(38,9) COMMENT 'Holding amount',
	AUA NUMBER(38,12) COMMENT 'AUA ammount',
	AUM NUMBER(38,12) COMMENT 'Number of AUM',
	AUM_CLARINGTON NUMBER(38,12) COMMENT 'Clarington AUM',
	AUM_IA NUMBER(38,12) COMMENT 'IA AUM',
	CASH_POSITION NUMBER(38,12) COMMENT ' CASH value at that point of time',
	PROGRAM_TYPE VARCHAR(50) COMMENT 'Programe type',
	ACCOUNT_PROGRAM_TYPE VARCHAR(50) COMMENT 'Account of the Program',
	ADMINISTRATORY_TYPE VARCHAR(1000) COMMENT 'Type of Admistratory',
	AUA_ACCRUED_INTEREST NUMBER(38,2)
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_BDV.WT_INVESTMENT_CASH_IAS_NBIN (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ADVISOR',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	MD_SEQ VARCHAR(50) COMMENT 'The value of METADATA$FILE_ROW_NUMBER',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	A_C_SUMM_SD_NET_AMT NUMBER(38,2) COMMENT 'A/C Summ settelment date Net Amt',
	A_C_SUMM_TD_NET_AMT NUMBER(38,2) COMMENT 'A/C Summ trade date Net Amt',
	A_C_SUMM_BALANCE_BUS_DATE DATE COMMENT 'Update business date',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	RR_CD VARCHAR(50) COMMENT 'Advisor RR code',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product Type ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Master code of the advisor',
	A_C_CLIENT VARCHAR(100) COMMENT 'Client ID',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID',
	ASC_1_RESP_PLAN_TYPES VARCHAR(100) COMMENT 'subtype of the RESP plans',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	A_C_CURRENCY VARCHAR(10) COMMENT 'Currency of the account',
	COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
	ISSUER_COMPANY_NAME VARCHAR(100) COMMENT 'The issuer company name',
	ASC_3_MANAGED_TYPE VARCHAR(10) COMMENT 'To be defined : J, L, ...',
	ADMINISTRATOR_TYPE VARCHAR(100) COMMENT 'Nominee, Client name, ...',
	EXCHANGERATE NUMBER(38,8) COMMENT 'Conversion rate from USD to CAD',
	A_C_ACCOUNT_CLASS VARCHAR(3) COMMENT 'Account class : 038, 040, ...',
	RETAIL_PLAN_RESP VARCHAR(1) COMMENT 'To be defined....'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_BDV.WT_INVESTMENT_IAS_NBIN (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ADVISOR',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	MD_SEQ VARCHAR(50) COMMENT 'The value of METADATA$FILE_ROW_NUMBER',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	TRAN_SUMM_CURR_MKT_VALUE NUMBER(38,2) COMMENT 'Market value of the holding in CAD or USD',
	TRAN_SUMM_BUSINESS_DATE DATE COMMENT 'Update business date',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	RR_CD VARCHAR(50) COMMENT 'Advisor RR code',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product Type ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Master code of the advisor',
	A_C_CLIENT VARCHAR(100) COMMENT 'Client ID',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID',
	ASC_1_RESP_PLAN_TYPES VARCHAR(100) COMMENT 'subtype of the RESP plans',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	A_C_CURRENCY VARCHAR(10) COMMENT 'Currency of the account',
	COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
	ISSUER_COMPANY_NAME VARCHAR(100) COMMENT 'The issuer company name',
	ASC_3_MANAGED_TYPE VARCHAR(10) COMMENT 'To be defined : J, L, ...',
	ADMINISTRATOR_TYPE VARCHAR(100) COMMENT 'Nominee, Client name, ...',
	EXCHANGERATE NUMBER(38,8) COMMENT 'Conversion rate from USD to CAD',
	A_C_ACCOUNT_CLASS VARCHAR(3) COMMENT 'Account class : 038, 040, ...',
	RETAIL_PLAN_RESP VARCHAR(1) COMMENT 'To be defined',
	MKT_PRICE_DATE TIMESTAMP_NTZ(9) COMMENT 'Mkt Price Date',
	MARKET_PRICE_BID NUMBER(29,8) COMMENT 'Market Price Bid',
	MARKET_PRICE_ASK NUMBER(29,8) COMMENT 'Market Price Ask',
	MARKET_PRICE_CLOSE NUMBER(29,8) COMMENT 'Market Price Close',
	PRICE_CURRENCY VARCHAR(3) COMMENT 'Price Currency',
	TRAN_SUMM_CURR_MKT_PRICE NUMBER(29,8) COMMENT 'Tran Summ Curr Mkt Price',
	TRAN_SUMM_SFK_QTY NUMBER(29,4) COMMENT 'Tran Summ Sfk Qty',
	TRAN_SUMM_TRADE_QTY NUMBER(38,4) COMMENT 'Units calculated by trade date',
	TI_FACE_VALUE NUMBER(29,5) COMMENT 'TI Face Value',
	TI_BASIS_POINT NUMBER(29,5) COMMENT 'TI Basis Point'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_BDV.WT_INVESTMENT_IAS_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ADVISOR',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	MD_SEQ VARCHAR(50) COMMENT 'The value of METADATA$FILE_ROW_NUMBER',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product Type ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Master code of the advisor',
	RR_CD VARCHAR(50) COMMENT 'Advisor RR code',
	CLIENT_ID VARCHAR(100) COMMENT 'Client ID',
	PLN_MNEM VARCHAR(512) COMMENT 'Plan code',
	COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
	ISSUER_COMPANY_NAME VARCHAR(100) COMMENT 'The issuer company name',
	ADMINISTRATORY_TYPE VARCHAR(100) COMMENT 'Nominee, Client name, ...',
	BAL_DATE TIMESTAMP_NTZ(9) NOT NULL COMMENT 'Balance date',
	MV NUMBER(34,4) COMMENT 'Market value',
	AUA NUMBER(34,4) COMMENT 'AUA',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	IVD_LOAD_FLAG VARCHAR(3) COMMENT 'Front-end or back-end load indicator',
	WF_IND NUMBER(38,0)
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_BDV.WT_INVESTMENT_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ADVISOR',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	MD_SEQ VARCHAR(50) COMMENT 'The value of METADATA$FILE_ROW_NUMBER',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product Type ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Master code of the advisor',
	RR_CD VARCHAR(50) COMMENT 'Advisor RR code',
	CLIENT_ID VARCHAR(100) COMMENT 'Client ID',
	PLN_MNEM VARCHAR(512) COMMENT 'Plan code',
	COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
	ISSUER_COMPANY_NAME VARCHAR(100) COMMENT 'The issuer company name',
	ADMINISTRATORY_TYPE VARCHAR(100) COMMENT 'Nominee, Client name, ...',
	BAL_DATE TIMESTAMP_NTZ(9) NOT NULL COMMENT 'Balance date',
	MV NUMBER(34,4) COMMENT 'Market value',
	AUA NUMBER(34,4) COMMENT 'AUA',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	IVD_LOAD_FLAG VARCHAR(3) COMMENT 'Front-end or back-end load indicator',
	WF_IND NUMBER(38,0)
);
create or replace view DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_BDV.VW_INITIAL_LOADING_INVESTMENT_CASH_IAS_NBIN(
	MD_SEQ,
	HK_LINK,
	HK_HUB_CONTRACT,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	MD_START_DT,
	MD_CREATION_DT,
	MD_EXTRACT_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	A_C_SUMM_SD_NET_AMT,
	A_C_SUMM_TD_NET_AMT,
	A_C_SUMM_BALANCE_BUS_DATE,
	CONTRACT_ID,
	RR_CD,
	INVESTMENT_PRODUCT_ID,
	MASTER_CODE,
	A_C_CLIENT,
	ACCOUNT_RAP_CODE,
	ASC_1_RESP_PLAN_TYPES,
	RETAIL_PLAN,
	A_C_CURRENCY,
	COMMISSIONPCT,
	ISSUE_COMPANY_NAME,
	ASC_3_MANAGED_TYPE,
	ADMINISTRATOR_TYPE,
	A_C_ACCOUNT_CLASS,
	RETAIL_PLAN_RESP,
	EXCHANGERATE
) as
WITH LATEST_VERSION_SHARE AS (
	SELECT 
	SLH.HK_LINK,
	COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE,
	COMM_SHARE.MD_START_DT,
	COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR,
	COMM_SHARE.MASTER_CODE,
	COMM_SHARE.COMMISSIONPCT,
	COALESCE (COMM_SHARE.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLH.HK_LINK,COMM_SHARE.HK_LINK ORDER BY COMM_SHARE.MD_START_DT DESC ),1) AS RANK_SHARE
	FROM HOLDINGS_RDV.SAT_LINK_INVESTMENT_CASH_RR_IAS_NBIN SLH
	INNER JOIN HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
	    ON  SLH.HK_LINK=LH.HK_LINK
	LEFT JOIN 	( SELECT LCS.HK_LINK,LCS.HK_HUB_REGISTERED_REPRESENTATIVE,CS.MD_START_DT,LCS.HK_HUB_PARTY_ROLE_ADVISOR,LCS.MASTER_CODE,CS.COMMISSIONPCT,CS.MD_ACTIVE
	        	FROM SHARED_BDV.LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE LCS 
	        	INNER JOIN SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE CS 
	        		ON CS.HK_LINK=LCS.HK_LINK AND CS.MD_SRC_SYSTEM = 'IAS'
	    		) COMM_SHARE
	    ON LH.HK_HUB_REGISTERED_REPRESENTATIVE=COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE
	    AND  COMM_SHARE.MD_START_DT <= DATEADD(SECOND, 86399, SLH.MD_START_DT) 
),
LATEST_VERSION_CONTRACT AS (
	SELECT SLH.HK_LINK,
	CONTRACT.HK_HUB,
	CONTRACT.A_C_CLIENT, 
	CONTRACT.ACCOUNT_RAP_CODE,
	CONTRACT.ASC_1_RESP_PLAN_TYPES,
	CONTRACT.RETAIL_PLAN,
	CONTRACT.A_C_CURRENCY,
	CONTRACT.ASC_3_MANAGED_TYPE,
	CONTRACT.ADMINISTRATOR_TYPE,
	CONTRACT.A_C_ACCOUNT_CLASS,
	CONTRACT.RETAIL_PLAN_RESP,
	COALESCE (CONTRACT.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLH.HK_LINK,CONTRACT.HK_HUB ORDER BY CONTRACT.MD_START_DT DESC ),1) AS RANK_CONTRACT
	FROM HOLDINGS_RDV.SAT_LINK_INVESTMENT_CASH_RR_IAS_NBIN SLH
	INNER JOIN HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
    ON  SLH.HK_LINK=LH.HK_LINK
	LEFT JOIN  SHARED_RDV.SAT_CONTRACT_IAS_NBIN CONTRACT
	    ON LH.HK_HUB_CONTRACT = CONTRACT.HK_HUB
	    AND CONTRACT.MD_START_DT <= SLH.MD_START_DT
)
SELECT 	LH.MD_SEQ,	
		SHA1(UPPER(CONCAT(
		      COALESCE(TRIM(LH.MD_SEQ), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.MD_SOURCE), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.MD_SRC_SYSTEM), '#NULL#'), '|' 
		    , COALESCE(TRIM(SLH.MD_EXTRACT_DT), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.CONTRACT_ID), '#NULL#'), '|' 
		    , COALESCE(TRIM(COMM_SHARE.MASTER_CODE), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.INVESTMENT_PRODUCT_ID), '#NULL#'), '|' 
		    , COALESCE(TRIM(CONTRACT.A_C_CLIENT), '#NULL#'), '|' 
		    ,'#NULL#', '|' -- PLN_MNEM
		    ,COALESCE(TRIM(CONTRACT.ACCOUNT_RAP_CODE), '#NULL#'), '|' 
		    ,COALESCE(TRIM(CONTRACT.RETAIL_PLAN),'#NULL#'), '|'
		    ,COALESCE(TRIM(CONTRACT.ASC_1_RESP_PLAN_TYPES),'#NULL#'), '|' 
		    , '#NULL#' -- PLN_SYSID
	    ))) AS HK_LINK,
		COALESCE(LH.HK_HUB_CONTRACT,'0') AS HK_HUB_CONTRACT, 
		SHA1(CONCAT('IAS', '|' , 'IASCASH')) AS HK_HUB_INVESTMENT_PRODUCT_TYPE, 
		COALESCE(COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR,'0') AS HK_HUB_PARTY_ROLE_ADVISOR, 
		DECODE(TRUE, CONTRACT.A_C_CLIENT IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM(LH.MD_SRC_SYSTEM), '#NULL#'), '|' , COALESCE(TRIM(CONTRACT.A_C_CLIENT), '#NULL#')))))  AS HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
		DECODE(TRUE, CONTRACT.ASC_1_RESP_PLAN_TYPES IS NULL AND CONTRACT.RETAIL_PLAN IS NULL AND CONTRACT.ACCOUNT_RAP_CODE IS NULL ,'0', 
		SHA1(UPPER(CONCAT(COALESCE(TRIM(LH.MD_SRC_SYSTEM),'#NULL#') ,'|', '#NULL#','|',COALESCE(TRIM(CONTRACT.ACCOUNT_RAP_CODE),'#NULL#'), '|',  COALESCE(TRIM(CONTRACT.RETAIL_PLAN),'#NULL#'),'|', 
		COALESCE(TRIM(CASE WHEN CONTRACT.ACCOUNT_RAP_CODE <> 'Z' THEN NULL ELSE CONTRACT.ASC_1_RESP_PLAN_TYPES END),'#NULL#'))))) AS HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
		--DATEADD(DAY,1,SLH.A_C_SUMM_BALANCE_BUS_DATE) AS MD_START_DT, 
		SLH.MD_EXTRACT_DT AS MD_START_DT,
		CURRENT_TIMESTAMP() AS MD_CREATION_DT, 
		SLH.MD_EXTRACT_DT AS MD_EXTRACT_DT, 
		LH.MD_SOURCE AS MD_SOURCE, 
		LH.MD_SRC_SYSTEM AS MD_SRC_SYSTEM, 
		SLH.A_C_SUMM_SD_NET_AMT,
		SLH.A_C_SUMM_TD_NET_AMT,
		--SLH.A_C_SUMM_BALANCE_BUS_DATE ,
		CASE WHEN DATEDIFF( DAY, SLH.MD_EXTRACT_DT, SLH.A_C_SUMM_BALANCE_BUS_DATE ) <> -1 THEN DATEADD(DAY,-1,SLH.MD_EXTRACT_DT) ELSE SLH.A_C_SUMM_BALANCE_BUS_DATE END AS A_C_SUMM_BALANCE_BUS_DATE,
		LH.CONTRACT_ID AS CONTRACT_ID, 
		LH.RR_CD AS RR_CD, 
		LH.INVESTMENT_PRODUCT_ID AS INVESTMENT_PRODUCT_ID, 
		COMM_SHARE.MASTER_CODE AS MASTER_CODE, 
		CONTRACT.A_C_CLIENT AS A_C_CLIENT, 
		CONTRACT.ACCOUNT_RAP_CODE,
		CONTRACT.ASC_1_RESP_PLAN_TYPES AS ASC_1_RESP_PLAN_TYPES	,
		CONTRACT.RETAIL_PLAN,
		CONTRACT.A_C_CURRENCY,
		COMM_SHARE.COMMISSIONPCT,
		'' AS ISSUE_COMPANY_NAME,
		CONTRACT.ASC_3_MANAGED_TYPE,
		CONTRACT.ADMINISTRATOR_TYPE,
		CONTRACT.A_C_ACCOUNT_CLASS,
		CONTRACT.RETAIL_PLAN_RESP,
		LER.EXCHANGERATE
FROM HOLDINGS_RDV.SAT_LINK_INVESTMENT_CASH_RR_IAS_NBIN SLH
INNER JOIN HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
    ON  SLH.HK_LINK=LH.HK_LINK
LEFT JOIN LATEST_VERSION_SHARE COMM_SHARE
    ON LH.HK_HUB_REGISTERED_REPRESENTATIVE=COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE
    AND  COMM_SHARE.HK_LINK = SLH.HK_LINK 
    AND  COMM_SHARE.MD_ACTIVE = 'A' AND COMM_SHARE.RANK_SHARE = 1
LEFT JOIN LATEST_VERSION_CONTRACT CONTRACT
    ON LH.HK_HUB_CONTRACT = CONTRACT.HK_HUB
    AND CONTRACT.HK_LINK = SLH.HK_LINK 
    AND  CONTRACT.MD_ACTIVE = 'A' AND CONTRACT.RANK_CONTRACT = 1
LEFT JOIN SHARED_BDV.TRANSLINK_EXCHANGE_RATE LER
	ON LER.EXCHANGE_DATE = SLH.A_C_SUMM_BALANCE_BUS_DATE;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_BDV.VW_INITIAL_LOADING_INVESTMENT_IAS_NBIN(
	MD_SEQ,
	HK_LINK,
	HK_HUB_CONTRACT,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	MD_START_DT,
	MD_CREATION_DT,
	MD_EXTRACT_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	TRAN_SUMM_CURR_MKT_VALUE,
	TRAN_SUMM_BUSINESS_DATE,
	CONTRACT_ID,
	RR_CD,
	INVESTMENT_PRODUCT_ID,
	MASTER_CODE,
	A_C_CLIENT,
	ACCOUNT_RAP_CODE,
	ASC_1_RESP_PLAN_TYPES,
	RETAIL_PLAN,
	A_C_CURRENCY,
	COMMISSIONPCT,
	ISSUE_COMPANY_NAME,
	ASC_3_MANAGED_TYPE,
	ADMINISTRATOR_TYPE,
	A_C_ACCOUNT_CLASS,
	RETAIL_PLAN_RESP,
	EXCHANGERATE
) as
WITH LATEST_VERSION_SHARE AS (
	SELECT 
	SLH.HK_LINK,
	COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE,
	COMM_SHARE.MD_START_DT,
	COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR,
	COMM_SHARE.MASTER_CODE,
	COMM_SHARE.COMMISSIONPCT,
	COALESCE (COMM_SHARE.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLH.HK_LINK,COMM_SHARE.HK_LINK ORDER BY COMM_SHARE.MD_START_DT DESC ),1) AS RANK_SHARE
	FROM HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_IAS_NBIN SLH
	INNER JOIN HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
	    ON  SLH.HK_LINK=LH.HK_LINK
	LEFT JOIN 	( SELECT LCS.HK_LINK,LCS.HK_HUB_REGISTERED_REPRESENTATIVE,CS.MD_START_DT,LCS.HK_HUB_PARTY_ROLE_ADVISOR,LCS.MASTER_CODE,CS.COMMISSIONPCT,CS.MD_ACTIVE
	        	FROM SHARED_BDV.LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE LCS 
	        	INNER JOIN SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE CS 
	        		ON CS.HK_LINK=LCS.HK_LINK AND CS.MD_SRC_SYSTEM = 'IAS'
	    		) COMM_SHARE
	    ON LH.HK_HUB_REGISTERED_REPRESENTATIVE=COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE
	    AND  COMM_SHARE.MD_START_DT <= DATEADD(SECOND, 86399, SLH.MD_START_DT) 
),
LATEST_VERSION_PRODUCT AS (
	SELECT SLH.HK_LINK,
	PRODUCT.HK_HUB ,
	PRODUCT.ISSUER_COMPANY_NAME,
	COALESCE (PRODUCT.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLH.HK_LINK,PRODUCT.HK_HUB ORDER BY PRODUCT.MD_START_DT DESC ),1) AS RANK_PRODUCT
	FROM HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_IAS_NBIN SLH
	INNER JOIN HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
    ON  SLH.HK_LINK=LH.HK_LINK
	LEFT JOIN  
	(SELECT H.HK_HUB , P.ISSUER_COMPANY_NAME, P.MD_ACTIVE, P.MD_START_DT FROM SHARED_BDV.SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE P 
	INNER JOIN SHARED_RDV.HUB_INVESTMENT_PRODUCT_TYPE H ON H.HK_HUB = P.HK_HUB WHERE P.MD_SRC_SYSTEM = 'IAS') PRODUCT
	    ON LH.HK_HUB_INVESTMENT_PRODUCT_TYPE = PRODUCT.HK_HUB
	    AND PRODUCT.MD_START_DT <= SLH.MD_START_DT
),
LATEST_VERSION_CONTRACT AS (
	SELECT SLH.HK_LINK,
	CONTRACT.HK_HUB,
	CONTRACT.A_C_CLIENT, 
	CONTRACT.ACCOUNT_RAP_CODE,
	CONTRACT.ASC_1_RESP_PLAN_TYPES,
	CONTRACT.RETAIL_PLAN,
	CONTRACT.A_C_CURRENCY,
	CONTRACT.ASC_3_MANAGED_TYPE,
	CONTRACT.ADMINISTRATOR_TYPE,
	CONTRACT.A_C_ACCOUNT_CLASS,
	CONTRACT.RETAIL_PLAN_RESP,
	COALESCE (CONTRACT.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLH.HK_LINK,CONTRACT.HK_HUB ORDER BY CONTRACT.MD_START_DT DESC ),1) AS RANK_CONTRACT
	FROM HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_IAS_NBIN SLH
	INNER JOIN HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
    ON  SLH.HK_LINK=LH.HK_LINK
	LEFT JOIN  SHARED_RDV.SAT_CONTRACT_IAS_NBIN CONTRACT
	    ON LH.HK_HUB_CONTRACT = CONTRACT.HK_HUB
	    AND CONTRACT.MD_START_DT <= SLH.MD_START_DT
)
SELECT 	LH.MD_SEQ,	
		SHA1(UPPER(CONCAT(
		      COALESCE(TRIM(LH.MD_SEQ), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.MD_SOURCE), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.MD_SRC_SYSTEM), '#NULL#'), '|' 
		    , COALESCE(TRIM(SLH.MD_EXTRACT_DT), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.CONTRACT_ID), '#NULL#'), '|' 
		    , COALESCE(TRIM(COMM_SHARE.MASTER_CODE), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.INVESTMENT_PRODUCT_ID), '#NULL#'), '|' 
		    , COALESCE(TRIM(CONTRACT.A_C_CLIENT), '#NULL#'), '|' 
		    ,'#NULL#', '|' -- PLN_MNEM
		    ,COALESCE(TRIM(CONTRACT.ACCOUNT_RAP_CODE), '#NULL#'), '|' 
		    ,COALESCE(TRIM(CONTRACT.RETAIL_PLAN),'#NULL#'), '|'
		    ,COALESCE(TRIM(CONTRACT.ASC_1_RESP_PLAN_TYPES),'#NULL#'), '|' 
		    , '#NULL#' -- PLN_SYSID
	    ))) AS HK_LINK,
		COALESCE(LH.HK_HUB_CONTRACT,'0') AS HK_HUB_CONTRACT, 
		COALESCE(LH.HK_HUB_INVESTMENT_PRODUCT_TYPE,'0') AS HK_HUB_INVESTMENT_PRODUCT_TYPE, 
		COALESCE(COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR,'0') AS HK_HUB_PARTY_ROLE_ADVISOR, 
		DECODE(TRUE, CONTRACT.A_C_CLIENT IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM(LH.MD_SRC_SYSTEM), '#NULL#'), '|' , COALESCE(TRIM(CONTRACT.A_C_CLIENT), '#NULL#')))))  AS HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
		DECODE(TRUE, CONTRACT.ASC_1_RESP_PLAN_TYPES IS NULL AND CONTRACT.RETAIL_PLAN IS NULL AND CONTRACT.ACCOUNT_RAP_CODE IS NULL ,'0', 
		SHA1(UPPER(CONCAT(COALESCE(TRIM(LH.MD_SRC_SYSTEM),'#NULL#') ,'|', '#NULL#','|',COALESCE(TRIM(CONTRACT.ACCOUNT_RAP_CODE),'#NULL#'), '|',  COALESCE(TRIM(CONTRACT.RETAIL_PLAN),'#NULL#'),'|', 
		COALESCE(TRIM(CASE WHEN CONTRACT.ACCOUNT_RAP_CODE <> 'Z' THEN NULL ELSE CONTRACT.ASC_1_RESP_PLAN_TYPES END),'#NULL#'))))) AS HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
		--DATEADD(DAY,1,SLH.TRAN_SUMM_BUSINESS_DATE) AS MD_START_DT, 
		SLH.MD_EXTRACT_DT AS MD_START_DT, 
		CURRENT_TIMESTAMP() AS MD_CREATION_DT, 
		SLH.MD_EXTRACT_DT AS MD_EXTRACT_DT, 
		LH.MD_SOURCE AS MD_SOURCE, 
		LH.MD_SRC_SYSTEM AS MD_SRC_SYSTEM, 
		SLH.TRAN_SUMM_CURR_MKT_VALUE,
		--SLH.TRAN_SUMM_BUSINESS_DATE,
		CASE WHEN DATEDIFF( DAY, SLH.MD_EXTRACT_DT, SLH.TRAN_SUMM_BUSINESS_DATE ) <> -1 THEN DATEADD(DAY,-1,SLH.MD_EXTRACT_DT) ELSE SLH.TRAN_SUMM_BUSINESS_DATE END AS TRAN_SUMM_BUSINESS_DATE,
		LH.CONTRACT_ID AS CONTRACT_ID, 
		LH.RR_CD AS RR_CD, 
		LH.INVESTMENT_PRODUCT_ID AS INVESTMENT_PRODUCT_ID, 
		COMM_SHARE.MASTER_CODE AS MASTER_CODE, 
		CONTRACT.A_C_CLIENT AS A_C_CLIENT, 
		CONTRACT.ACCOUNT_RAP_CODE,
		CONTRACT.ASC_1_RESP_PLAN_TYPES AS ASC_1_RESP_PLAN_TYPES	,
		CONTRACT.RETAIL_PLAN,
		CONTRACT.A_C_CURRENCY,
		COMM_SHARE.COMMISSIONPCT,
		PRODUCT.ISSUER_COMPANY_NAME AS ISSUE_COMPANY_NAME,
		CONTRACT.ASC_3_MANAGED_TYPE,
		CONTRACT.ADMINISTRATOR_TYPE,
		CONTRACT.A_C_ACCOUNT_CLASS,
		CONTRACT.RETAIL_PLAN_RESP,
		LER.EXCHANGERATE
FROM HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_IAS_NBIN SLH
INNER JOIN HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
    ON  SLH.HK_LINK=LH.HK_LINK
LEFT JOIN LATEST_VERSION_SHARE COMM_SHARE
    ON LH.HK_HUB_REGISTERED_REPRESENTATIVE=COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE
    AND  COMM_SHARE.HK_LINK = SLH.HK_LINK 
    AND  COMM_SHARE.MD_ACTIVE = 'A' AND COMM_SHARE.RANK_SHARE = 1
LEFT JOIN LATEST_VERSION_CONTRACT CONTRACT
    ON LH.HK_HUB_CONTRACT = CONTRACT.HK_HUB
    AND CONTRACT.HK_LINK = SLH.HK_LINK 
    AND  CONTRACT.MD_ACTIVE = 'A' AND CONTRACT.RANK_CONTRACT = 1
LEFT JOIN LATEST_VERSION_PRODUCT PRODUCT 
	ON PRODUCT.HK_HUB = LH.HK_HUB_INVESTMENT_PRODUCT_TYPE 
	AND LH.HK_LINK = PRODUCT.HK_LINK
	AND PRODUCT.MD_ACTIVE = 'A' AND PRODUCT.RANK_PRODUCT = 1
LEFT JOIN SHARED_BDV.TRANSLINK_EXCHANGE_RATE LER
	ON LER.EXCHANGE_DATE = SLH.TRAN_SUMM_BUSINESS_DATE;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_BDV.VW_INVESTMENT(
	HK_LINK,
	HK_HUB_CONTRACT,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	MD_SEQ,
	MD_START_DT,
	MD_HASHDIFF,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	PLN_MNEM,
	ACCOUNT_RAP_CODE,
	RETAIL_PLAN,
	ASC_1_RESP_PLAN_TYPES,
	CONTRACT_ID,
	INVESTMENT_PRODUCT_ID,
	RR_CD,
	MASTER_CODE,
	CLIENT_ID,
	PLN_SYSID,
	BALANCE_DATE,
	HOLDING_VALUE,
	AUA,
	AUM,
	AUM_CLARINGTON,
	AUM_IA,
	CASH_POSITION,
	PROGRAM_TYPE,
	ACCOUNT_PROGRAM_TYPE,
	ADMINISTRATORY_TYPE,
	UNIVERIS_PLAN_ID,
	AUA_ACCRUED_INTEREST
) as
SELECT 
  	  HK_LINK
	, HK_HUB_CONTRACT
	, HK_HUB_INVESTMENT_PRODUCT_TYPE
	, HK_HUB_PARTY_ROLE_ADVISOR	  
	, HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
	, HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES
	, MD_SEQ
	, MD_START_DT 
	, MD_HASHDIFF 
	, MD_SOURCE
	, MD_SRC_SYSTEM
	, MD_EXTRACT_DT
	, NULL AS PLN_MNEM
	, ACCOUNT_RAP_CODE
	, RETAIL_PLAN
	, ASC_1_RESP_PLAN_TYPES
	, CONTRACT_ID 
	, INVESTMENT_PRODUCT_ID 
	, RR_CD
	, MASTER_CODE 
	, CLIENT_ID 
	, PLN_SYSID
	, BALANCE_DATE
	, HOLDING_VALUE
	, AUA
	, AUM
	, AUM_CLARINGTON
	, AUM_IA
	, CASH_POSITION
	, PROGRAM_TYPE
	, ACCOUNT_PROGRAM_TYPE
	, ADMINISTRATORY_TYPE
	, NULL AS UNIVERIS_PLAN_ID
	, AUA_ACCRUED_INTEREST
FROM HOLDINGS_BDV.VW_INVESTMENT_IAS_NBIN
UNION ALL
SELECT 
	  HK_LINK
	, HK_HUB_CONTRACT
	, HK_HUB_INVESTMENT_PRODUCT_TYPE
	, HK_HUB_PARTY_ROLE_ADVISOR	  
	, HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
	, HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES
	, MD_SEQ
	, MD_START_DT 
	, MD_HASHDIFF 
	, MD_SOURCE
	, MD_SRC_SYSTEM
	, MD_EXTRACT_DT
	, NULL
	, ACCOUNT_RAP_CODE
	, RETAIL_PLAN
	, ASC_1_RESP_PLAN_TYPES
	, CONTRACT_ID 
	, INVESTMENT_PRODUCT_ID 
	, RR_CD
	, MASTER_CODE 
	, CLIENT_ID 
	, PLN_SYSID
	, BALANCE_DATE
	, HOLDING_VALUE
	, AUA
	, AUM
	, AUM_CLARINGTON
	, AUM_IA
	, CASH_POSITION
	, PROGRAM_TYPE
	, ACCOUNT_PROGRAM_TYPE
	, ADMINISTRATORY_TYPE
	, NULL AS UNIVERIS_PLAN_ID
	, AUA AS AUA_ACCRUED_INTEREST
FROM HOLDINGS_BDV.VW_INVESTMENT_CASH_IAS_NBIN
UNION ALL
SELECT 
	  HK_LINK
	, HK_HUB_CONTRACT
	, HK_HUB_INVESTMENT_PRODUCT_TYPE
	, HK_HUB_PARTY_ROLE_ADVISOR
	, HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
	, HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES
	, MD_SEQ
	, MD_START_DT
	, MD_HASHDIFF 
	, MD_SOURCE
	, MD_SRC_SYSTEM
	, MD_EXTRACT_DT	
	, PLN_MNEM
	, NULL
	, NULL
	, NULL 
	, CONTRACT_ID
	, INVESTMENT_PRODUCT_ID
	, RR_CD 
	, MASTER_CODE
	, CLIENT_ID
	, CAST(UNIVERIS_PLAN_ID AS VARCHAR(18)) AS PLN_SYSID 
	, BAL_DATE
	, HOLDING_VALUE
	, AUA
	, AUM
	, AUM_CLARINGTON
	, AUM_IA
	, CASH_POSITION
	, PROGRAM_TYPE
	, ACCOUNT_PROGRAM_TYPE
	, ADMINISTRATORY_TYPE
	, UNIVERIS_PLAN_ID
	, NULL AS AUA_ACCRUED_INTEREST
FROM HOLDINGS_BDV.VW_INVESTMENT_IAS_UNIVERIS
UNION ALL
SELECT 
	  HK_LINK
	, HK_HUB_CONTRACT
	, HK_HUB_INVESTMENT_PRODUCT_TYPE
	, HK_HUB_PARTY_ROLE_ADVISOR
	, HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
	, HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES
	, MD_SEQ
	, MD_START_DT
	, MD_HASHDIFF 
	, MD_SOURCE
	, MD_SRC_SYSTEM
	, MD_EXTRACT_DT	
	, PLN_MNEM
	, NULL
	, NULL
	, NULL 
	, CONTRACT_ID
	, INVESTMENT_PRODUCT_ID
	, RR_CD 
	, MASTER_CODE
	, CLIENT_ID
	, CAST(UNIVERIS_PLAN_ID AS VARCHAR(18)) AS PLN_SYSID 
	, BAL_DATE
	, HOLDING_VALUE
	, AUA
	, AUM
	, AUM_CLARINGTON
	, AUM_IA
	, CASH_POSITION
	, PROGRAM_TYPE
	, ACCOUNT_PROGRAM_TYPE
	, ADMINISTRATORY_TYPE
	, UNIVERIS_PLAN_ID
	, NULL AS AUA_ACCRUED_INTEREST
FROM HOLDINGS_BDV.VW_INVESTMENT_INVESTIA_UNIVERIS;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_BDV.VW_INVESTMENT_CASH_IAS_NBIN(
	HK_LINK,
	HK_HUB_CONTRACT,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	MD_SEQ,
	MD_START_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	ACCOUNT_RAP_CODE,
	RETAIL_PLAN,
	ASC_1_RESP_PLAN_TYPES,
	CONTRACT_ID,
	INVESTMENT_PRODUCT_ID,
	RR_CD,
	MASTER_CODE,
	CLIENT_ID,
	PLN_SYSID,
	BALANCE_DATE,
	HOLDING_VALUE,
	AUA,
	AUM,
	AUM_CLARINGTON,
	AUM_IA,
	CASH_POSITION,
	PROGRAM_TYPE,
	ACCOUNT_PROGRAM_TYPE,
	ADMINISTRATORY_TYPE,
	MD_HASHDIFF
) as
WITH EXCLUSION AS
(
SELECT
    R.REPID,
    S.IND_EXCLUDE,
    S.MD_ACTIVE
FROM STEWARDSHIP_RDV.REF_MANUAL_ADVISOR_RVP_IAS R                    
INNER JOIN STEWARDSHIP_RDV.SAT_REF_MANUAL_ADVISOR_RVP_IAS S
ON R.HK_HUB = S.HK_HUB
QUALIFY ROW_NUMBER() OVER (PARTITION BY R.REPID ORDER BY S.MD_START_DT DESC)=1  
),
HOLIDAYS AS
(
SELECT HOLIDAY_DATE 
FROM SHARED_RDV.REF_HOLIDAYS_IAS_IAVM R
INNER JOIN SHARED_RDV.SAT_REF_HOLIDAYS_IAS_IAVM S
	ON R.HK_HUB =S.HK_HUB 
	AND S.MD_ACTIVE = 'A'		
),
IAS_CASH_POS AS 
(
	SELECT 
		  HK_LINK
		, HK_HUB_CONTRACT
		, HK_HUB_INVESTMENT_PRODUCT_TYPE
		, HK_HUB_PARTY_ROLE_ADVISOR
		, HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
		, HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES
		, MD_SEQ
		, MD_START_DT 
		, MD_SOURCE
		, MD_SRC_SYSTEM
		, MD_EXTRACT_DT
		, CONTRACT_ID
		, RR_CD
		, A_C_SUMM_BALANCE_BUS_DATE
		, A_C_CURRENCY
		, ACCOUNT_RAP_CODE
		, RETAIL_PLAN
		, ASC_1_RESP_PLAN_TYPES
		, MASTER_CODE
		, A_C_CLIENT
		, ASC_3_MANAGED_TYPE
		, ADMINISTRATOR_TYPE
		, COMMISSIONPCT
		, EXCHANGERATE
		-- This business rule is documented as BR_ALL_HOLDINGS_CASH_VALUE_007
		,  CASE 
			/* Today is the end of month */
			WHEN A_C_SUMM_BALANCE_BUS_DATE = LAST_DAY(A_C_SUMM_BALANCE_BUS_DATE) 										THEN (A_C_SUMM_SD_NET_AMT * -1)
		
			/* Today Friday and Tomorrow or after tomorrow is the end of month */
			WHEN DAYNAME(A_C_SUMM_BALANCE_BUS_DATE) = 'Fri' 
				AND ( 	
						DATEADD(DAY, 1, A_C_SUMM_BALANCE_BUS_DATE) = LAST_DAY(A_C_SUMM_BALANCE_BUS_DATE) 	
						OR DATEADD(DAY, 2, A_C_SUMM_BALANCE_BUS_DATE) = LAST_DAY(A_C_SUMM_BALANCE_BUS_DATE) 
					)																									THEN (A_C_SUMM_SD_NET_AMT * -1)
					
			/* Today Friday and Monday is a holiday and end of month */
			WHEN DAYNAME(A_C_SUMM_BALANCE_BUS_DATE) = 'Fri' 
				AND EXISTS(SELECT 1 FROM HOLIDAYS WHERE HOLIDAY_DATE = DATEADD(DAY, 3, A_C_SUMM_BALANCE_BUS_DATE)) 
				AND DATEADD(DAY, 3, A_C_SUMM_BALANCE_BUS_DATE) = LAST_DAY(A_C_SUMM_BALANCE_BUS_DATE)					THEN (A_C_SUMM_SD_NET_AMT * -1)

			/* Tomorrow is a Holiday and end of month */
			WHEN EXISTS(SELECT 1 FROM HOLIDAYS WHERE HOLIDAY_DATE = DATEADD(DAY, 1, A_C_SUMM_BALANCE_BUS_DATE))
				AND DATEADD(DAY, 1, A_C_SUMM_BALANCE_BUS_DATE) = LAST_DAY(A_C_SUMM_BALANCE_BUS_DATE)					THEN (A_C_SUMM_SD_NET_AMT * -1)
		
			/* Tomorrow Friday is a Holdiday and next Saturday or Sunday is end of month*/
			WHEN EXISTS(SELECT 1 FROM HOLIDAYS WHERE HOLIDAY_DATE = DATEADD(DAY, 1, A_C_SUMM_BALANCE_BUS_DATE))
				AND DAYNAME(DATEADD(DAY, 1, A_C_SUMM_BALANCE_BUS_DATE)) = 'Fri'
				AND ( 
						DATEADD(DAY, 2, A_C_SUMM_BALANCE_BUS_DATE) = LAST_DAY(A_C_SUMM_BALANCE_BUS_DATE) 	
						OR DATEADD(DAY, 3, A_C_SUMM_BALANCE_BUS_DATE) = LAST_DAY(A_C_SUMM_BALANCE_BUS_DATE) 
					)																									THEN (A_C_SUMM_SD_NET_AMT * -1)
		
			ELSE A_C_SUMM_TD_NET_AMT * -1
		END AS CASH_VALUE
    FROM HOLDINGS_BDV.WT_INVESTMENT_CASH_IAS_NBIN
)
SELECT 
	WT.HK_LINK,
	WT.HK_HUB_CONTRACT,
	WT.HK_HUB_INVESTMENT_PRODUCT_TYPE,
	WT.HK_HUB_PARTY_ROLE_ADVISOR,
	WT.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	WT.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	WT.MD_SEQ,
	WT.MD_START_DT, 
	WT.MD_SOURCE,
	WT.MD_SRC_SYSTEM,
	WT.MD_EXTRACT_DT,
	WT.ACCOUNT_RAP_CODE,
	WT.RETAIL_PLAN,
	WT.ASC_1_RESP_PLAN_TYPES,
	WT.CONTRACT_ID,
	'IASCASH' 																																AS INVESTMENT_PRODUCT_ID ,
	WT.RR_CD,
	WT.MASTER_CODE,
	WT.A_C_CLIENT																															AS CLIENT_ID,
	WT.CONTRACT_ID																															AS PLN_SYSID,
	--CASE WHEN DAYOFWEEK(WT.MD_START_DT) IN (0, 1) THEN DATEADD(DAY,-1,WT.MD_START_DT) ELSE WT.A_C_SUMM_BALANCE_BUS_DATE END                 AS BALANCE_DATE,
	CASE WHEN DATEDIFF( DAY, WT.MD_START_DT, WT.A_C_SUMM_BALANCE_BUS_DATE ) <> -1 THEN DATEADD(DAY,-1,WT.MD_START_DT) ELSE WT.A_C_SUMM_BALANCE_BUS_DATE END  AS BALANCE_DATE,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_HOLDING_VALUE_001
	WT.CASH_VALUE * COALESCE(WT.COMMISSIONPCT,100) * 0.01																					AS HOLDING_VALUE,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_AUA_002
	 round(DECODE(WT.A_C_CURRENCY,'CAD',wt.CASH_VALUE ,wt.CASH_VALUE * WT.EXCHANGERATE) * COALESCE(WT.COMMISSIONPCT,100) * 0.01 ,2) 	 	AS AUA,
	0 																																		AS AUM,
	0 																																		AS AUM_CLARINGTON,	
	0 																																		AS AUM_IA,
    --DECODE(WT.A_C_CURRENCY,'USD',WT.CASH_VALUE*WT.EXCHANGERATE,WT.CASH_VALUE) * COALESCE(WT.COMMISSIONPCT,100) * 0.01 						AS CASH_POSITION, -- To be confirmed
	 round(DECODE(WT.A_C_CURRENCY,'CAD',wt.CASH_VALUE ,wt.CASH_VALUE * WT.EXCHANGERATE) * COALESCE(WT.COMMISSIONPCT,100) * 0.01 ,2) 		AS CASH_POSITION,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_PROGRAM_TYPE_006
	CASE WT.ASC_3_MANAGED_TYPE WHEN '1' 
 							THEN 'SMAs'
							WHEN 'C' 
							THEN 'Managed Account Program'
							WHEN 'D' 
							THEN 'Managed Account Program'
							WHEN 'F' 
							THEN 'Fee-based'
							WHEN 'G' 
							THEN 'Managed Account Program'
							WHEN 'J' 
							THEN 'SMAs'
							WHEN 'L' 
							THEN 'SMAs'
							WHEN 'M' 
							THEN 'Managed Account Program'
							WHEN 'N' 
							THEN 'SMAs'
							WHEN 'Q' 
							THEN 'Managed Account Program'
							WHEN 'R' 
							THEN 'Fee-based'
							WHEN 'S' 
							THEN 'Fee-based'
							WHEN 'V' 
							THEN 'SMAs'
							WHEN 'X' 
							THEN 'SMAs'
							ELSE 'Commission-based'
	END 																																	AS PROGRAM_TYPE,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_PROGRAM_TYPE_006
	CASE WT.ASC_3_MANAGED_TYPE WHEN '1' 
							THEN 'SMAs'
							WHEN 'C' 
							THEN 'Managed Account Program'
							WHEN 'D' 
							THEN 'Managed Account Program'
							WHEN 'F' 
							THEN 'Fee-based'
							WHEN 'G' 
							THEN 'Managed Account Program'
							WHEN 'J' 
							THEN 'SMAs'
							WHEN 'L' 
							THEN 'SMAs'
							WHEN 'M' 
							THEN 'Managed Account Program'
							WHEN 'N' 
							THEN 'SMAs'
							WHEN 'Q' 
							THEN 'Managed Account Program'
							WHEN 'R' 
							THEN 'Fee-based'
							WHEN 'S' 
							THEN 'Fee-based'
							WHEN 'V' 
							THEN 'SMAs'
							WHEN 'X' 
							THEN 'SMAs'
							ELSE 'Commission-based'
	END 																																	AS ACCOUNT_PROGRAM_TYPE,
	WT.ADMINISTRATOR_TYPE 																													AS ADMINISTRATORY_TYPE,
	
	SHA1(CONCAT(
	  COALESCE(RR_CD,'#NULL#'), '|' 
	, COALESCE(PLN_SYSID,'#NULL#'), '|'
	, COALESCE(TO_VARCHAR(BALANCE_DATE),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(HOLDING_VALUE),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(AUA),'#NULL#'),'|'
	, COALESCE(TO_VARCHAR(AUM),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(AUM_IA),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(CASH_POSITION),'#NULL#'),'|' 
	, COALESCE(PROGRAM_TYPE,'#NULL#'),'|' 
	, COALESCE(ACCOUNT_PROGRAM_TYPE,'#NULL#'),'|' 
	, COALESCE(ADMINISTRATORY_TYPE,'#NULL#')
	))																																		AS MD_HASHDIFF	
FROM IAS_CASH_POS WT
LEFT JOIN EXCLUSION E 
	ON E.REPID = WT.MASTER_CODE AND E.IND_EXCLUDE = 1 AND E.MD_ACTIVE = 'A'
WHERE  WT.CONTRACT_ID NOT RLIKE '^[A-Z][A-Z].*'
	AND WT.CONTRACT_ID IS NOT NULL
	-- EXCLUDE RVP ADVISOR
	AND E.REPID IS NULL
	AND (WT.RR_CD NOT IN ('SEAA', 'SEZ9', 'QYYY'));
create or replace view DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_BDV.VW_INVESTMENT_IAS_NBIN(
	HK_LINK,
	HK_HUB_CONTRACT,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	MD_SEQ,
	MD_START_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	ACCOUNT_RAP_CODE,
	RETAIL_PLAN,
	ASC_1_RESP_PLAN_TYPES,
	CONTRACT_ID,
	INVESTMENT_PRODUCT_ID,
	RR_CD,
	MASTER_CODE,
	CLIENT_ID,
	PLN_SYSID,
	BALANCE_DATE,
	HOLDING_VALUE,
	AUA,
	AUM,
	AUM_CLARINGTON,
	AUM_IA,
	CASH_POSITION,
	PROGRAM_TYPE,
	ACCOUNT_PROGRAM_TYPE,
	ADMINISTRATORY_TYPE,
	MD_HASHDIFF,
	AUA_ACCRUED_INTEREST
) as
WITH EXCLUSION AS
(
SELECT
    R.REPID,
    S.IND_EXCLUDE,
    S.MD_ACTIVE
FROM STEWARDSHIP_RDV.REF_MANUAL_ADVISOR_RVP_IAS R                    
INNER JOIN STEWARDSHIP_RDV.SAT_REF_MANUAL_ADVISOR_RVP_IAS S
ON R.HK_HUB = S.HK_HUB
QUALIFY ROW_NUMBER() OVER (PARTITION BY R.REPID ORDER BY S.MD_START_DT DESC)=1  
)
SELECT  
	WT.HK_LINK,
	WT.HK_HUB_CONTRACT,
	WT.HK_HUB_INVESTMENT_PRODUCT_TYPE,
	WT.HK_HUB_PARTY_ROLE_ADVISOR,
	WT.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	WT.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	WT.MD_SEQ,
	WT.MD_START_DT,
	WT.MD_SOURCE,
	WT.MD_SRC_SYSTEM,
	WT.MD_EXTRACT_DT,
	WT.ACCOUNT_RAP_CODE,
	WT.RETAIL_PLAN,
	WT.ASC_1_RESP_PLAN_TYPES,	
	WT.CONTRACT_ID,
	WT.INVESTMENT_PRODUCT_ID,
	WT.RR_CD,
	WT.MASTER_CODE,
	WT.A_C_CLIENT																																	AS CLIENT_ID,
	WT.CONTRACT_ID																																	AS PLN_SYSID,
	CASE WHEN DATEDIFF( DAY, WT.MD_START_DT, WT.TRAN_SUMM_BUSINESS_DATE ) <> -1 THEN DATEADD(DAY,-1,WT.MD_START_DT) ELSE WT.TRAN_SUMM_BUSINESS_DATE END  AS BALANCE_DATE,
	--CASE WHEN DAYOFWEEK(WT.MD_START_DT) IN (0, 1) THEN DATEADD(DAY,-1,WT.MD_START_DT) ELSE WT.TRAN_SUMM_BUSINESS_DATE END  AS BALANCE_DATE,
	-- This check was done to resolve weekend and holidays AUA duplication issue
	-- The Business rule below is documented as BR_ALL_HOLDINGS_HOLDING_VALUE_001
	WT.TRAN_SUMM_CURR_MKT_VALUE * COALESCE(WT.COMMISSIONPCT,100) * 0.01																				AS HOLDING_VALUE,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_AUA_002
	DECODE(WT.A_C_CURRENCY,'USD',WT.TRAN_SUMM_CURR_MKT_VALUE*WT.EXCHANGERATE,WT.TRAN_SUMM_CURR_MKT_VALUE) * COALESCE(WT.COMMISSIONPCT,100) * 0.01 	AS AUA,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_AUM_003
	CASE	WHEN (WT.ISSUER_COMPANY_NAME LIKE '%IA Clarington%' OR WT.ISSUER_COMPANY_NAME LIKE '%Industrial Alliance%')
			THEN DECODE(WT.A_C_CURRENCY,'USD',WT.TRAN_SUMM_CURR_MKT_VALUE*WT.EXCHANGERATE,WT.TRAN_SUMM_CURR_MKT_VALUE) 
			* COALESCE(WT.COMMISSIONPCT,100) * 0.01  END																							AS AUM,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_AUM_CLARINGTON_004
	CASE	WHEN (WT.ISSUER_COMPANY_NAME LIKE '%IA Clarington%')
			THEN DECODE(WT.A_C_CURRENCY,'USD',WT.TRAN_SUMM_CURR_MKT_VALUE*WT.EXCHANGERATE,WT.TRAN_SUMM_CURR_MKT_VALUE) 
			* COALESCE(WT.COMMISSIONPCT,100) * 0.01 END  																							AS AUM_CLARINGTON,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_AUM_IA_005
	CASE	WHEN (WT.ISSUER_COMPANY_NAME LIKE '%Industrial Alliance%')
			THEN DECODE(WT.A_C_CURRENCY,'USD',WT.TRAN_SUMM_CURR_MKT_VALUE*WT.EXCHANGERATE,WT.TRAN_SUMM_CURR_MKT_VALUE) 
			* COALESCE(WT.COMMISSIONPCT,100) * 0.01 END  																							AS AUM_IA,
	0 																																				AS CASH_POSITION,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_PROGRAM_TYPE_006
 	CASE WT.ASC_3_MANAGED_TYPE WHEN '1' 
 							THEN 'SMAs'
							WHEN 'C' 
							THEN 'Managed Account Program'
							WHEN 'D' 
							THEN 'Managed Account Program'
							WHEN 'F' 
							THEN 'Fee-based'
							WHEN 'G' 
							THEN 'Managed Account Program'
							WHEN 'J' 
							THEN 'SMAs'
							WHEN 'L' 
							THEN 'SMAs'
							WHEN 'M' 
							THEN 'Managed Account Program'
							WHEN 'N' 
							THEN 'SMAs'
							WHEN 'Q' 
							THEN 'Managed Account Program'
							WHEN 'R' 
							THEN 'Fee-based'
							WHEN 'S' 
							THEN 'Fee-based'
							WHEN 'V' 
							THEN 'SMAs'
							WHEN 'X' 
							THEN 'SMAs'
							ELSE 'Commission-based'
	END 																																			AS PROGRAM_TYPE,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_PROGRAM_TYPE_006
	CASE WT.ASC_3_MANAGED_TYPE WHEN '1' 
							THEN 'SMAs'
							WHEN 'C' 
							THEN 'Managed Account Program'
							WHEN 'D' 
							THEN 'Managed Account Program'
							WHEN 'F' 
							THEN 'Fee-based'
							WHEN 'G' 
							THEN 'Managed Account Program'
							WHEN 'J' 
							THEN 'SMAs'
							WHEN 'L' 
							THEN 'SMAs'
							WHEN 'M' 
							THEN 'Managed Account Program'
							WHEN 'N' 
							THEN 'SMAs'
							WHEN 'Q' 
							THEN 'Managed Account Program'
							WHEN 'R' 
							THEN 'Fee-based'
							WHEN 'S' 
							THEN 'Fee-based'
							WHEN 'V' 
							THEN 'SMAs'
							WHEN 'X' 
							THEN 'SMAs'
							ELSE 'Commission-based'
	END 																																			AS ACCOUNT_PROGRAM_TYPE,
	WT.ADMINISTRATOR_TYPE 																															AS ADMINISTRATORY_TYPE,
		
	SHA1(CONCAT(
	  COALESCE(WT.RR_CD,'#NULL#'), '|' 
	, COALESCE(PLN_SYSID,'#NULL#'), '|'
	, COALESCE(TO_VARCHAR(BALANCE_DATE),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(HOLDING_VALUE),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(AUA),'#NULL#'),'|'
	, COALESCE(TO_VARCHAR(AUM),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(AUM_IA),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(CASH_POSITION),'#NULL#'),'|' 
	, COALESCE(PROGRAM_TYPE,'#NULL#'),'|' 
	, COALESCE(ACCOUNT_PROGRAM_TYPE,'#NULL#'),'|' 
	, COALESCE(ADMINISTRATORY_TYPE,'#NULL#')
	))																																				AS MD_HASHDIFF
	,
   round(
   (case    when (WT.Tran_Summ_Curr_Mkt_Value = 0 and WT.Tran_Summ_Curr_Mkt_Price = 0 and WT.Mkt_Price_Date != WT.Tran_Summ_Business_Date) then 0
            when WT.Market_Price_Close != 0 then WT.Market_Price_Close  
            when (WT.Market_Price_Bid != 0 and (WT.Tran_Summ_Trade_Qty+WT.Tran_Summ_Sfk_Qty) > 0) then WT.Market_Price_Bid 
            when WT.Market_Price_Ask != 0 then WT.Market_Price_Ask 
            else WT.Market_Price_Bid  end) *
   (case    when (WT.price_currency = 'USD') then WT.exchangeRate else 1  end)  *
    (WT.Tran_Summ_Trade_Qty+WT.Tran_Summ_Sfk_Qty) * (WT.TI_Basis_Point/WT.TI_Face_Value) ,2)
    *     COALESCE(WT.COMMISSIONPCT,100) * 0.01
   + 
    round((case when WT.TI_Face_Value = 1000 then round(WT.Tran_Summ_Trade_Qty+WT.Tran_Summ_Sfk_Qty / 1000, 3) 
           else  round(WT.Tran_Summ_Trade_Qty+WT.Tran_Summ_Sfk_Qty,0) end
    ) * 
  ifnull(ai.BASE_ACCRUED_INTEREST/100, 0) * 
  (case when (WT.price_currency = 'USD') then WT.exchangeRate else 1 end) , 2) * 
     COALESCE(WT.COMMISSIONPCT,100) * 0.01   AS AUA_ACCRUED_INTEREST
FROM HOLDINGS_BDV.WT_INVESTMENT_IAS_NBIN WT
LEFT JOIN EXCLUSION E 
	ON E.REPID = WT.MASTER_CODE AND E.IND_EXCLUDE = 1 AND E.MD_ACTIVE = 'A'
	left join HOLDINGS_RDV.LINK_ACCRUED_INTEREST_NBIN ai
	on ai.PROCESS_DATE = WT.TRAN_SUMM_BUSINESS_DATE
	AND ai.HK_HUB_INVESTMENT_PRODUCT_TYPE=WT.HK_HUB_INVESTMENT_PRODUCT_TYPE 
	WHERE 
	WT.CONTRACT_ID NOT RLIKE '^[A-Z][A-Z].*'
	AND WT.CONTRACT_ID IS NOT NULL
	-- EXCLUDE RVP ADVISOR
	AND E.REPID IS NULL
	AND (WT.RR_CD NOT IN ('SEAA', 'SEZ9', 'QYYY'));
create or replace view DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_BDV.VW_INVESTMENT_IAS_UNIVERIS(
	HK_LINK,
	HK_HUB_CONTRACT,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	MD_SEQ,
	MD_START_DT,
	MD_CREATION_DT,
	MD_EXTRACT_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	CONTRACT_ID,
	INVESTMENT_PRODUCT_ID,
	MASTER_CODE,
	CLIENT_ID,
	PLN_MNEM,
	UNIVERIS_PLAN_ID,
	RR_CD,
	ADMINISTRATORY_TYPE,
	BAL_DATE,
	HOLDING_VALUE,
	AUA,
	AUM,
	AUM_CLARINGTON,
	AUM_IA,
	CASH_POSITION,
	PROGRAM_TYPE,
	ACCOUNT_PROGRAM_TYPE,
	MD_HASHDIFF
) as 
WITH EXCLUSION AS
(
SELECT 
    R.REPID, 
    S.IND_EXCLUDE, 
	S.MD_ACTIVE
FROM STEWARDSHIP_RDV.REF_MANUAL_ADVISOR_RVP_IAS R 					
INNER JOIN STEWARDSHIP_RDV.SAT_REF_MANUAL_ADVISOR_RVP_IAS S 
ON R.HK_HUB = S.HK_HUB
QUALIFY ROW_NUMBER() OVER (PARTITION BY R.REPID ORDER BY S.MD_START_DT DESC)=1	
)
SELECT 
HK_LINK, 
HK_HUB_CONTRACT, 
HK_HUB_INVESTMENT_PRODUCT_TYPE, 
HK_HUB_PARTY_ROLE_ADVISOR, 
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES, 
MD_SEQ, 
MD_START_DT, 
MD_CREATION_DT, 
MD_EXTRACT_DT, 
MD_SOURCE, 
MD_SRC_SYSTEM, 
CONTRACT_ID, 
INVESTMENT_PRODUCT_ID, 
MASTER_CODE, 
CLIENT_ID, 
PLN_MNEM,
UNIVERIS_PLAN_ID,
RR_CD,
ADMINISTRATORY_TYPE, 
BAL_DATE, 
MV * COALESCE(COMMISSIONPCT,100) * 0.01 AS HOLDING_VALUE,
AUA * COALESCE(COMMISSIONPCT,100) * 0.01 AS AUA,
CASE WHEN ISSUER_COMPANY_NAME IN ('IA Clarington Investments Inc. (CCM)','IA Clarington GIF (IAC)','Industrial Alliance Insurance & Financial Services Inc. INA') 
		 THEN AUA * COALESCE(COMMISSIONPCT,100) * 0.01
		 ELSE 0
	END AS AUM,
CASE WHEN ISSUER_COMPANY_NAME IN ('IA Clarington Investments Inc. (CCM)','IA Clarington GIF (IAC)') 
		 THEN AUA * COALESCE(COMMISSIONPCT,100) * 0.01
		 ELSE 0
	END AS AUM_CLARINGTON,
CASE WHEN ISSUER_COMPANY_NAME IN ('Industrial Alliance Insurance & Financial Services Inc. INA') 
		 THEN AUA * COALESCE(COMMISSIONPCT,100) * 0.01
		 ELSE 0
	END AS AUM_IA,
0 AS CASH_POSITION,	
CASE WHEN IVD_LOAD_FLAG = 'FCL' OR WF_IND = 1 
		 THEN 'Fee-based'
		 ELSE 'Commission-based'
	END AS PROGRAM_TYPE,	
CASE WHEN COUNT(DISTINCT (CASE WHEN IVD_LOAD_FLAG = 'FCL' OR WF_IND = 1 
								   THEN 'Fee-based' 
								   ELSE 'Commission-based' 
							   END) ) OVER (PARTITION BY CLIENT_ID) = 2 
		 THEN 'Commission-based & Fee-based'
		 ELSE (CASE WHEN IVD_LOAD_FLAG = 'FCL' OR WF_IND = 1 
		 			THEN 'Fee-based'
		 			ELSE 'Commission-based'
		 		END)
	END AS ACCOUNT_PROGRAM_TYPE,
SHA1(CONCAT(
	  COALESCE(RR_CD,'#NULL#'), '|' 
	, COALESCE(TO_VARCHAR(BAL_DATE),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(HOLDING_VALUE),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(AUA),'#NULL#'),'|'
	, COALESCE(TO_VARCHAR(AUM),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(AUM_CLARINGTON),'#NULL#'),'|'
	, COALESCE(TO_VARCHAR(AUM_IA),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(CASH_POSITION),'#NULL#'),'|' 
	, COALESCE(PROGRAM_TYPE,'#NULL#'),'|' 
	, COALESCE(ACCOUNT_PROGRAM_TYPE,'#NULL#'),'|' 
	, COALESCE(ADMINISTRATORY_TYPE,'#NULL#')
	))	AS MD_HASHDIFF
FROM HOLDINGS_BDV.WT_INVESTMENT_IAS_UNIVERIS WT
LEFT JOIN EXCLUSION E 
ON E.REPID = WT.MASTER_CODE 
AND E.IND_EXCLUDE = 1 
AND E.MD_ACTIVE = 'A'
WHERE 
COMMISSIONPCT > 0 
AND MV > 0 
AND E.REPID IS NULL;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_BDV.VW_INVESTMENT_INVESTIA_UNIVERIS(
	HK_LINK,
	HK_HUB_CONTRACT,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	MD_SEQ,
	MD_START_DT,
	MD_CREATION_DT,
	MD_EXTRACT_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	CONTRACT_ID,
	INVESTMENT_PRODUCT_ID,
	MASTER_CODE,
	CLIENT_ID,
	PLN_MNEM,
	UNIVERIS_PLAN_ID,
	RR_CD,
	ADMINISTRATORY_TYPE,
	BAL_DATE,
	HOLDING_VALUE,
	AUA,
	AUM,
	AUM_CLARINGTON,
	AUM_IA,
	CASH_POSITION,
	PROGRAM_TYPE,
	ACCOUNT_PROGRAM_TYPE,
	MD_HASHDIFF
) as 
SELECT
HK_LINK, 
HK_HUB_CONTRACT, 
HK_HUB_INVESTMENT_PRODUCT_TYPE, 
HK_HUB_PARTY_ROLE_ADVISOR, 
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES, 
MD_SEQ, 
MD_START_DT, 
MD_CREATION_DT, 
MD_EXTRACT_DT, 
MD_SOURCE, 
MD_SRC_SYSTEM, 
CONTRACT_ID, 
INVESTMENT_PRODUCT_ID, 
MASTER_CODE, 
CLIENT_ID, 
PLN_MNEM,
UNIVERIS_PLAN_ID,
RR_CD,
ADMINISTRATORY_TYPE, 
BAL_DATE, 
MV * COALESCE(COMMISSIONPCT,100) * 0.01 AS HOLDING_VALUE,
AUA * COALESCE(COMMISSIONPCT,100) * 0.01 AS AUA,

CASE WHEN ISSUER_COMPANY_NAME IN ('IA Clarington Investments Inc. (CCM)','IA Clarington GIF (IAC)','Industrial Alliance Insurance & Financial Services Inc. INA') 
		 THEN AUA * COALESCE(COMMISSIONPCT,100) * 0.01
		 ELSE 0
	END AS AUM,

CASE WHEN ISSUER_COMPANY_NAME IN ('IA Clarington Investments Inc. (CCM)','IA Clarington GIF (IAC)') 
		 THEN AUA * COALESCE(COMMISSIONPCT,100) * 0.01
		 ELSE 0
	END AS AUM_CLARINGTON,

CASE WHEN ISSUER_COMPANY_NAME IN ('Industrial Alliance Insurance & Financial Services Inc. INA') 
		 THEN AUA * COALESCE(COMMISSIONPCT,100) * 0.01
		 ELSE 0
	END AS AUM_IA,

0 AS CASH_POSITION,	

CASE WHEN IVD_LOAD_FLAG = 'FCL' OR WF_IND = 1 
		 THEN 'Fee-based'
		 ELSE 'Commission-based'
	END AS PROGRAM_TYPE,
	
CASE WHEN COUNT(DISTINCT (CASE WHEN IVD_LOAD_FLAG = 'FCL' OR WF_IND = 1 
								   THEN 'Fee-based' 
								   ELSE 'Commission-based' 
							   END) ) OVER (PARTITION BY CLIENT_ID) = 2 
		 THEN 'Commission-based & Fee-based'
		 ELSE (CASE WHEN IVD_LOAD_FLAG = 'FCL' OR WF_IND = 1 
		 			THEN 'Fee-based'
		 			ELSE 'Commission-based'
		 		END)
	END AS ACCOUNT_PROGRAM_TYPE,

SHA1(CONCAT(
	  COALESCE(RR_CD,'#NULL#'), '|' 
	, COALESCE(TO_VARCHAR(BAL_DATE),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(HOLDING_VALUE),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(AUA),'#NULL#'),'|'
	, COALESCE(TO_VARCHAR(AUM),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(AUM_CLARINGTON),'#NULL#'),'|'
	, COALESCE(TO_VARCHAR(AUM_IA),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(CASH_POSITION),'#NULL#'),'|' 
	, COALESCE(PROGRAM_TYPE,'#NULL#'),'|' 
	, COALESCE(ACCOUNT_PROGRAM_TYPE,'#NULL#'),'|' 
	, COALESCE(ADMINISTRATORY_TYPE,'#NULL#')
	)) AS MD_HASHDIFF
FROM HOLDINGS_BDV.WT_INVESTMENT_INVESTIA_UNIVERIS WT
WHERE 
COMMISSIONPCT > 0  AND MV > 0;
create or replace schema DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_RDV;

create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_RDV.LINK_ACCRUED_INTEREST_NBIN (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash of the investment product type',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	PROCESS_DATE DATE COMMENT 'Process date',
	FIID VARCHAR(15) COMMENT 'IBM/OSS Security Id',
	PRODUCT_CODE VARCHAR(12) COMMENT 'Product code / Security group code',
	CUSIP VARCHAR(9) COMMENT 'CUSIP',
	ISIN VARCHAR(12) COMMENT 'ISIN NO',
	MARKET VARCHAR(12) COMMENT 'Market',
	SYMBOL VARCHAR(26) COMMENT 'Security Symbol',
	INTEREST_RATE NUMBER(29,2) COMMENT 'Income Profile Rate',
	ACCRUED_INTEREST_METHOD1 VARCHAR(1) COMMENT 'Accrued Int Method 1',
	ACCRUED_INTEREST_METHOD2 VARCHAR(1) COMMENT 'Accrued Int Method 2',
	DAILY_COUNT_BASIS VARCHAR(15) COMMENT 'US_NASD/ACTUAL_360/ACTUAL_365/ACTUAL',
	INTEREST_START_DATE DATE COMMENT 'Int. Start Date',
	YEAR_FRACTION NUMBER(29,9) COMMENT 'Year',
	BASE_ACCRUED_INTEREST NUMBER(29,11) COMMENT 'BASE ACCRUED INTEREST'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
	HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for HUB_REGISTERED_REPRESENTATIVE',
	MD_SEQ VARCHAR(50) COMMENT 'The value of METADATA$FILE_ROW_NUMBER',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	RR_CD VARCHAR(50) COMMENT 'Advisor RR code',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product Type ID',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	UNIVERIS_CLIENT_ID NUMBER(38,0) COMMENT 'Univeris Client ID'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_RDV.SAT_LINK_INVESTMENT_CASH_RR_IAS_NBIN (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	A_C_SUMM_BALANCE_BUS_DATE DATE COMMENT 'Update business date',
	A_C_SUMM_SD_NET_AMT NUMBER(38,2) COMMENT 'A/C Summ settelment date Net Amt',
	A_C_SUMM_TD_NET_AMT NUMBER(38,2) COMMENT 'A/C Summ trade date Net Amt',
	A_C_CURRENCY VARCHAR(10) COMMENT 'Holding value currency'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_RDV.SAT_LINK_INVESTMENT_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ACT_SYSID NUMBER(38,0) NOT NULL COMMENT 'Holding system ID',
	REP_SYSID NUMBER(38,0) COMMENT 'Advisor ID',
	FISCAL_SYSID NUMBER(38,0) COMMENT 'Fiscal ID',
	BAL_DATE TIMESTAMP_NTZ(9) NOT NULL COMMENT 'Balance date',
	MV NUMBER(34,4) COMMENT 'Market value',
	CURRENCY_CD VARCHAR(8000) COMMENT 'Currency code',
	EXCH_DT TIMESTAMP_NTZ(9) COMMENT 'Exchange date',
	EXCH_RATE NUMBER(19,8) COMMENT 'Exchange rate',
	AUA NUMBER(34,4) COMMENT 'AUA',
	PRICE NUMBER(34,4) COMMENT 'Price',
	UNITS FLOAT COMMENT 'Units',
	BV NUMBER(34,4) COMMENT 'Book value',
	ACB NUMBER(34,4) COMMENT 'Adjusted cost based',
	NI_T NUMBER(34,4) COMMENT 'Net invested by trade date (not used)',
	NI_P NUMBER(34,4) COMMENT 'Net invested by process date',
	FREQ_CD VARCHAR(8000) COMMENT 'Frequency code (not used)',
	UNITS_TRD_DT FLOAT COMMENT 'Units calculated by trade date',
	FISCAL_TD_UNITS FLOAT COMMENT 'Units displayed for the fiscal year',
	IVD_LOAD_FLAG VARCHAR(3) COMMENT 'Front-end or back-end load indicator',
	WF_IND NUMBER(38,0)
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_IAS_NBIN (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	TRAN_SUMM_CURR_MKT_VALUE NUMBER(38,2) COMMENT 'Market value of the holding in CAD or USD',
	TRAN_SUMM_BUSINESS_DATE DATE COMMENT 'Update business date',
	TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
	B_V_SECURITY_POSITION_VAL NUMBER(38,2) COMMENT 'Book value',
	B_V_SECURITY_POSITION_COS NUMBER(38,4) COMMENT 'Average cost base',
	TRAN_SUMM_AVG_UNIT_COST NUMBER(38,5) COMMENT 'Average cost base',
	TRAN_SUMM_NET_SETT_AMT NUMBER(38,2) COMMENT 'Cash position',
	TRAN_SUMM_CURRENCY VARCHAR(10) COMMENT 'Holding value currency',
	TRAN_SUMM_SETT_QTY NUMBER(38,4) COMMENT 'Units',
	TRAN_SUMM_TRADE_QTY NUMBER(38,4) COMMENT 'Units calculated by trade date',
	TI_FACE_VALUE NUMBER(29,5) COMMENT 'TI Face Value',
	TI_BASIS_POINT NUMBER(29,5) COMMENT 'TI Basis Point',
	MKT_PRICE_DATE TIMESTAMP_NTZ(9) COMMENT 'Mkt Price Date',
	MARKET_PRICE_BID NUMBER(29,8) COMMENT 'Market Price Bid',
	MARKET_PRICE_ASK NUMBER(29,8) COMMENT 'Market Price Ask',
	MARKET_PRICE_CLOSE NUMBER(29,8) COMMENT 'Market Price Close',
	PRICE_CURRENCY VARCHAR(3) COMMENT 'Price Currency',
	TRAN_SUMM_CURR_MKT_PRICE NUMBER(29,8) COMMENT 'Tran Summ Curr Mkt Price',
	TRAN_SUMM_SFK_QTY NUMBER(29,4) COMMENT 'Tran Summ Sfk Qty'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_IAS_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""\""A\""\"" row exists in the source, \""\""D\""\"" row does not exist in the source',
	ACT_SYSID NUMBER(38,0) NOT NULL COMMENT 'Holding system ID',
	REP_SYSID NUMBER(38,0) COMMENT 'Advisor ID',
	FISCAL_SYSID NUMBER(38,0) COMMENT 'Fiscal ID',
	BAL_DATE TIMESTAMP_NTZ(9) NOT NULL COMMENT 'Balance date',
	MV NUMBER(34,4) COMMENT 'Market value',
	CURRENCY_CD VARCHAR(8000) COMMENT 'Currency code',
	EXCH_DT TIMESTAMP_NTZ(9) COMMENT 'Exchange date',
	EXCH_RATE NUMBER(19,8) COMMENT 'Exchange rate',
	AUA NUMBER(34,4) COMMENT 'AUA',
	PRICE NUMBER(34,4) COMMENT 'Price',
	UNITS FLOAT COMMENT 'Units',
	BV NUMBER(34,4) COMMENT 'Book value',
	ACB NUMBER(34,4) COMMENT 'Adjusted cost based',
	NI_T NUMBER(34,4) COMMENT 'Net invested by trade date (not used)',
	NI_P NUMBER(34,4) COMMENT 'Net invested by process date',
	FREQ_CD VARCHAR(8000) COMMENT 'Frequency code (not used)',
	UNITS_TRD_DT FLOAT COMMENT 'Units calculated by trade date',
	FISCAL_TD_UNITS FLOAT COMMENT 'Units displayed for the fiscal year',
	IVD_LOAD_FLAG VARCHAR(3) COMMENT 'Front-end or back-end load indicator',
	WF_IND NUMBER(38,0) COMMENT 'Unknown'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ACT_SYSID NUMBER(38,0) NOT NULL COMMENT 'Holding system ID',
	REP_SYSID NUMBER(38,0) COMMENT 'Advisor ID',
	FISCAL_SYSID NUMBER(38,0) COMMENT 'Fiscal ID',
	BAL_DATE TIMESTAMP_NTZ(9) NOT NULL COMMENT 'Balance date',
	MV NUMBER(34,4) COMMENT 'Market value',
	CURRENCY_CD VARCHAR(8000) COMMENT 'Currency code',
	EXCH_DT TIMESTAMP_NTZ(9) COMMENT 'Exchange date',
	EXCH_RATE NUMBER(19,8) COMMENT 'Exchange rate',
	AUA NUMBER(34,4) COMMENT 'AUA',
	PRICE NUMBER(34,4) COMMENT 'Price',
	UNITS FLOAT COMMENT 'Units',
	BV NUMBER(34,4) COMMENT 'Book value',
	ACB NUMBER(34,4) COMMENT 'Adjusted cost based',
	NI_T NUMBER(34,4) COMMENT 'Net invested by trade date (not used)',
	NI_P NUMBER(34,4) COMMENT 'Net invested by process date',
	FREQ_CD VARCHAR(8000) COMMENT 'Frequency code (not used)',
	UNITS_TRD_DT FLOAT COMMENT 'Units calculated by trade date',
	FISCAL_TD_UNITS FLOAT COMMENT 'Units displayed for the fiscal year',
	IVD_LOAD_FLAG VARCHAR(3) COMMENT 'Front-end or back-end load indicator',
	WF_IND NUMBER(38,0)
);
create or replace schema DB_IAW_PROD_DWH.CLONE_INF_REVENUES_BDV;

create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_REVENUES_BDV.LINK_REVENUE (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for the REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CLIENT_ID VARCHAR(40) COMMENT 'unique client  ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Master Code (unique advisor ID)',
	PLN_MNEM VARCHAR(40) COMMENT 'unique plan ID',
	MARKETPRODUCT_ID VARCHAR(40) COMMENT 'unique product ID',
	CONTRACT_ID VARCHAR(40) COMMENT 'unique contract ID',
	ADVISOR_ID VARCHAR(50) COMMENT 'unique advisor ID',
	PAYMENT_DATE TIMESTAMP_NTZ(9) COMMENT 'Process Date',
	REVENUE NUMBER(38,12) COMMENT 'REVENUE AMOUNT',
	REVENUE_TYPE VARCHAR(512) COMMENT 'REVENUE TYPE',
	REVENUE_SUBTYPE VARCHAR(512) COMMENT 'REVENUE SUBTYPE',
	AUA NUMBER(38,12) COMMENT 'AUA value',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	ENTRY_TYPE VARCHAR(20) COMMENT 'Entry Type',
	STAMP DATE COMMENT 'Record Insertion Date',
	INSURANCE_REVENUE NUMBER(38,12) COMMENT 'Insurance Revenues',
	TRANSID NUMBER(38,0) COMMENT 'Transaction ID'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_REVENUES_BDV.LINK_REVENUE_CLONE (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for the REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CLIENT_ID VARCHAR(40) COMMENT 'unique client  ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Master Code (unique advisor ID)',
	PLN_MNEM VARCHAR(40) COMMENT 'unique plan ID',
	MARKETPRODUCT_ID VARCHAR(40) COMMENT 'unique product ID',
	CONTRACT_ID VARCHAR(40) COMMENT 'unique contract ID',
	ADVISOR_ID VARCHAR(50) COMMENT 'unique advisor ID',
	PAYMENT_DATE TIMESTAMP_NTZ(9) COMMENT 'Process Date',
	REVENUE NUMBER(38,12) COMMENT 'REVENUE AMOUNT',
	REVENUE_TYPE VARCHAR(512) COMMENT 'REVENUE TYPE',
	REVENUE_SUBTYPE VARCHAR(512) COMMENT 'REVENUE SUBTYPE',
	AUA NUMBER(38,12) COMMENT 'AUA value',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID'
);
create or replace TRANSIENT TABLE DB_IAW_PROD_DWH.CLONE_INF_REVENUES_BDV.WT_LINK_REVENUE (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for the REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CLIENT_ID VARCHAR(40) COMMENT 'unique client  ID',
	CONTRACT_ID VARCHAR(40) COMMENT 'unique contract ID',
	ADVISOR_ID VARCHAR(50) COMMENT 'unique advisor ID (PORTAL USERNAME)',
	MASTER_CODE VARCHAR(50) COMMENT 'Master Code (unique advisor ID)',
	PLN_MNEM VARCHAR(512) COMMENT 'unique plan ID',
	MARKETPRODUCT_ID VARCHAR(40) COMMENT 'unique product ID',
	PAYMENT_DATE TIMESTAMP_NTZ(9) COMMENT 'Process Date',
	REVENUE NUMBER(38,12) COMMENT 'REVENUE AMOUNT',
	REVENUE_TYPE VARCHAR(512) COMMENT 'REVENUE TYPE',
	REVENUE_SUBTYPE VARCHAR(512) COMMENT 'REVENUE SUBTYPE',
	AUA NUMBER(38,12),
	REVENUE_ID NUMBER(38,0) COMMENT 'REVENUE SYSID',
	PLN_SYSID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	ENTRY_TYPE VARCHAR(20) COMMENT 'Entry Type',
	STAMP DATE COMMENT 'Record Insertion Date',
	INSURANCE_REVENUE NUMBER(38,12) COMMENT 'Insurance Revenues',
	TRANSID NUMBER(38,0) COMMENT 'Transaction ID'
);
create or replace view DB_IAW_PROD_DWH.CLONE_INF_REVENUES_BDV.VW_INITIAL_LOADING_WT_LINK_REVENUE(
	PLN_MNEM,
	MARKETPRODUCT_ID,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_CONTRACT,
	MD_START_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	CLIENT_ID,
	CONTRACT_ID,
	ADVISOR_ID,
	MASTER_CODE,
	PAYMENT_DATE,
	REVENUE,
	REVENUE_TYPE,
	REVENUE_SUBTYPE,
	ENTRY_TYPE,
	STAMP,
	INSURANCE_REVENUE,
	TRANSID
) as
WITH EXCLUSION AS
(
SELECT
    R.REPID,
    S.IND_EXCLUDE,
    S.MD_ACTIVE
FROM STEWARDSHIP_RDV.REF_MANUAL_ADVISOR_RVP_IAS R                    
INNER JOIN STEWARDSHIP_RDV.SAT_REF_MANUAL_ADVISOR_RVP_IAS S
ON R.HK_HUB = S.HK_HUB
QUALIFY ROW_NUMBER() OVER (PARTITION BY R.REPID ORDER BY S.MD_START_DT DESC)=1  
),
LATEST_VERSION_CLIENT_CONTRACT AS (
	SELECT 
	LR.HK_LINK,
	VW_CC.HK_HUB_CONTRACT ,
	VW_CC.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	VW_CC.A_C_CLIENT, 
	COALESCE (VW_CC.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY LR.HK_LINK,VW_CC.HK_HUB_CONTRACT ORDER BY VW_CC.MD_START_DT DESC ),1) AS RANK_CLIENT_CONTRACT
	FROM REVENUES_RDV.LINK_REVENUE_RR_IAS_COMMISSION LR
	LEFT JOIN SHARED_BDV.VW_CLIENT_CONTRACT VW_CC 
	ON VW_CC.HK_HUB_CONTRACT = LR.HK_HUB_CONTRACT
	AND  VW_CC.MD_START_DT <= LR.MD_START_DT
)
SELECT 
	'-1' AS PLN_MNEM,
	'-1' AS MARKETPRODUCT_ID,
	VW_CC.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
	LR.HK_HUB_PARTY_ROLE_ADVISOR, 
	LR.HK_HUB_CONTRACT, 
	--DATEADD(DAY,1,LR.PROCESSDATE) AS MD_START_DT, 
	-- The Date has been generated as the TRUNC(STAMP) + 1 Day
	LR.MD_START_DT AS MD_START_DT, 
	LR.MD_SOURCE, 
	LR.MD_SRC_SYSTEM, 
	LR.MD_EXTRACT_DT, 
	VW_CC.A_C_CLIENT AS CLIENT_ID, 
	CAST(LR.ACCOUNTID AS VARCHAR(40)) AS CONTRACT_ID, 
	CAST(LR.ADVISOR_ID AS VARCHAR(50)) AS ADVISOR_ID, 
	LR.REPID AS MASTER_CODE, 
	LR.PROCESSDATE AS PAYMENT_DATE, 
	SUM(LR.COMMISSION) AS REVENUE, 
	CASE  WHEN LR.SOURCECODE = 'OFF' THEN 'Trade commissions'
		  WHEN LR.SOURCECODE = 'FXF' THEN 'Fee based/Managed' 
		  WHEN LR.SOURCECODE = 'MGD' THEN 'Fee based/Managed' 
		  WHEN LR.SOURCECODE = 'JRN' THEN 'Trailers' 
		  WHEN LR.SOURCECODE = 'MNL' THEN 'Trade commissions' 
		  WHEN LR.SOURCECODE = 'TRD' THEN 'Trade commissions' 
	ELSE 'Unkown' 
	END AS REVENUE_TYPE,
	CASE WHEN LR.SOURCECODE  = 'OFF' THEN 'OffBook commission' 
		 WHEN LR.SOURCECODE  = 'FXF' THEN 'Fixed fees' 
		 WHEN LR.SOURCECODE  = 'MGD' THEN 'Managed' 
		 WHEN LR.SOURCECODE  = 'JRN' THEN 'Trailer fees and GIC' 
		 WHEN LR.SOURCECODE  = 'MNL' THEN 'Others' 
		 WHEN LR.SOURCECODE  = 'TRD' THEN 'Trade commissions' 
	ELSE 'Unkown' 
	END AS REVENUE_SUBTYPE,
	LR.ENTRY_TYPE AS ENTRY_TYPE,
	LR.STAMP,
	0 AS INSURANCE_REVENUE,
	NULL AS TRANSID
FROM REVENUES_RDV.LINK_REVENUE_RR_IAS_COMMISSION LR
LEFT JOIN LATEST_VERSION_CLIENT_CONTRACT VW_CC 
	ON VW_CC.HK_HUB_CONTRACT = LR.HK_HUB_CONTRACT
	AND LR.HK_LINK = VW_CC.HK_LINK
	AND  VW_CC.MD_ACTIVE = 'A' AND VW_CC.RANK_CLIENT_CONTRACT = 1
LEFT JOIN EXCLUSION E 
    ON E.REPID = LR.REPID 
	AND E.IND_EXCLUDE = 1
	AND E.MD_ACTIVE = 'A'
WHERE (((LR.SOURCECODE <> 'EXP') AND (LR.SOURCECODE <> 'TXR'))
AND ( LR.ACCOUNTID NOT RLIKE '^[A-Z][A-Z].*' OR LR.ACCOUNTID IS NULL )
AND E.REPID IS NULL)
GROUP BY 
    HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
	HK_HUB_PARTY_ROLE_ADVISOR, 
	LR.HK_HUB_CONTRACT,
    LR.SOURCECODE,
	MD_START_DT, 
	MD_SOURCE, 
	MD_SRC_SYSTEM, 
	MD_EXTRACT_DT, 
	CLIENT_ID, 
	CONTRACT_ID, 
	ADVISOR_ID, 
	MASTER_CODE, 
	PAYMENT_DATE,
    LR.ENTRY_TYPE,
    LR.STAMP
    
UNION 

 SELECT 
	'-1' AS PLN_MNEM,
	'-1' AS MARKETPRODUCT_ID,
	'0' AS HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
	LR.HK_HUB_REGISTERED_REPRESENTATIVE AS HK_HUB_PARTY_ROLE_ADVISOR, 
	'0' AS HK_HUB_CONTRACT, 
	LR.MD_START_DT AS MD_START_DT, 
	LR.MD_SOURCE, 
	LR.MD_SRC_SYSTEM, 
	LR.MD_EXTRACT_DT, 
	'-1' AS CLIENT_ID, 
	'-1' AS CONTRACT_ID, 
	LR.USERID AS ADVISOR_ID, 
	LR.REPID AS MASTER_CODE, 
	LR.PROCESSDATE AS PAYMENT_DATE, 
	0 AS REVENUE, 
	'Insurance' AS REVENUE_TYPE,
    'Insurance' AS REVENUE_SUBTYPE,
	LR.ENTRY_TYPE AS ENTRY_TYPE,
	LR.STAMP,
	SUM(COMMISSIONCAD) AS INSURANCE_REVENUE,
	LR.TRANSID
FROM REVENUES_RDV.LINK_INSURANCE_REVENUE_RR_IAS_COMMISSION LR

WHERE LR.SOURCECODE NOT IN ('EXP','TXR','SEAA','SEZ9','QYYY')

GROUP BY 
    
	HK_HUB_PARTY_ROLE_ADVISOR, 
	MD_START_DT,
	MD_SOURCE, 
	MD_SRC_SYSTEM, 
	MD_EXTRACT_DT,
	MASTER_CODE,
	ADVISOR_ID,
	PAYMENT_DATE,
	LR.SOURCECODE, 
    LR.ENTRY_TYPE,
    LR.STAMP,
    LR.TRANSID;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_REVENUES_BDV.VW_REVENUE_IAS_COMMISSION(
	HK_LINK,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_CONTRACT,
	MD_START_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	CLIENT_ID,
	MASTER_CODE,
	CONTRACT_ID,
	ADVISOR_ID,
	PLN_MNEM,
	MARKETPRODUCT_ID,
	PAYMENT_DATE,
	REVENUE,
	REVENUE_TYPE,
	REVENUE_SUBTYPE,
	AUA,
	ENTRY_TYPE,
	STAMP,
	INSURANCE_REVENUE,
	TRANSID
) as 
WITH EXCLUSION AS
(
SELECT
    R.REPID,
    S.IND_EXCLUDE,
    S.MD_ACTIVE
FROM STEWARDSHIP_RDV.REF_MANUAL_ADVISOR_RVP_IAS R                    
INNER JOIN STEWARDSHIP_RDV.SAT_REF_MANUAL_ADVISOR_RVP_IAS S
ON R.HK_HUB = S.HK_HUB
QUALIFY ROW_NUMBER() OVER (PARTITION BY R.REPID ORDER BY S.MD_START_DT DESC)=1  
)
SELECT 
	R.HK_LINK, 
	R.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
	R.HK_HUB_PARTY_ROLE_ADVISOR, 
	R.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES, 
	R.HK_HUB_INVESTMENT_PRODUCT_TYPE, 
	R.HK_HUB_CONTRACT, 
	R.MD_START_DT, 
	R.MD_SOURCE, 
	R.MD_SRC_SYSTEM, 
	R.MD_EXTRACT_DT, 
	R.CLIENT_ID, 
	R.MASTER_CODE,
	R.CONTRACT_ID, 
	R.ADVISOR_ID, 
	R.PLN_MNEM, 
	R.MARKETPRODUCT_ID, 
	R.PAYMENT_DATE, 
	R.REVENUE, 
	R.REVENUE_TYPE, 
	R.REVENUE_SUBTYPE, 
	R.AUA,
	R.ENTRY_TYPE,
	R.STAMP,
	R.INSURANCE_REVENUE,
	R.TRANSID
FROM REVENUES_BDV.WT_LINK_REVENUE R
LEFT JOIN EXCLUSION E 
ON E.REPID = R.MASTER_CODE AND E.IND_EXCLUDE = 1 AND E.MD_ACTIVE = 'A'
WHERE R.MD_SRC_SYSTEM = 'IAS-COMMISSION'
AND ( R.CONTRACT_ID NOT RLIKE '^[A-Z][A-Z].*' OR R.CONTRACT_ID IS NULL )
AND E.REPID IS NULL;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_REVENUES_BDV.VW_REVENUE_IAS_UNIVERIS(
	HK_LINK,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_CONTRACT,
	MD_START_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	CLIENT_ID,
	MASTER_CODE,
	CONTRACT_ID,
	ADVISOR_ID,
	PLN_MNEM,
	MARKETPRODUCT_ID,
	PAYMENT_DATE,
	REVENUE,
	REVENUE_TYPE,
	REVENUE_SUBTYPE,
	AUA,
	PLN_SYSID
) as 
SELECT 
	R.HK_LINK, 
	R.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
	R.HK_HUB_PARTY_ROLE_ADVISOR, 
	R.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES, 
	R.HK_HUB_INVESTMENT_PRODUCT_TYPE, 
	R.HK_HUB_CONTRACT, 
	R.MD_START_DT, 
	R.MD_SOURCE, 
	R.MD_SRC_SYSTEM, 
	R.MD_EXTRACT_DT, 
	R.CLIENT_ID, 
	R.MASTER_CODE,
	R.CONTRACT_ID, 
	R.ADVISOR_ID, 
	R.PLN_MNEM, 
	R.MARKETPRODUCT_ID, 
	R.PAYMENT_DATE, 
	R.REVENUE, 
	R.REVENUE_TYPE, 
	R.REVENUE_SUBTYPE, 
	R.AUA,
	R.PLN_SYSID
FROM REVENUES_BDV.WT_LINK_REVENUE R
WHERE R.MD_SRC_SYSTEM = 'IAS-UNIVERIS';
create or replace view DB_IAW_PROD_DWH.CLONE_INF_REVENUES_BDV.VW_REVENUE_INVESTIA_UNIVERIS(
	HK_LINK,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_CONTRACT,
	MD_START_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	CLIENT_ID,
	MASTER_CODE,
	CONTRACT_ID,
	ADVISOR_ID,
	PLN_MNEM,
	MARKETPRODUCT_ID,
	PAYMENT_DATE,
	REVENUE,
	REVENUE_TYPE,
	REVENUE_SUBTYPE,
	AUA,
	PLN_SYSID
) as 
SELECT 
	R.HK_LINK, 
	R.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
	R.HK_HUB_PARTY_ROLE_ADVISOR, 
	R.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES, 
	R.HK_HUB_INVESTMENT_PRODUCT_TYPE, 
	R.HK_HUB_CONTRACT, 
	R.MD_START_DT, 
	R.MD_SOURCE, 
	R.MD_SRC_SYSTEM, 
	R.MD_EXTRACT_DT, 
	R.CLIENT_ID, 
	R.MASTER_CODE,
	R.CONTRACT_ID, 
	R.ADVISOR_ID, 
	R.PLN_MNEM, 
	R.MARKETPRODUCT_ID, 
	R.PAYMENT_DATE, 
	R.REVENUE, 
	R.REVENUE_TYPE, 
	R.REVENUE_SUBTYPE, 
	R.AUA,
	R.PLN_SYSID
FROM REVENUES_BDV.WT_LINK_REVENUE R
WHERE R.MD_SRC_SYSTEM = 'INVESTIA-UNIVERIS';
create or replace schema DB_IAW_PROD_DWH.CLONE_INF_REVENUES_RDV;

create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_REVENUES_RDV.LINK_INSURANCE_REVENUE_RR_IAS_COMMISSION (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	TRANSID NUMBER(38,0) COMMENT 'Transaction ID',
	EXTTRANSID VARCHAR(20) COMMENT 'Extended transaction ID',
	PROCESSDATE DATE COMMENT 'Process date',
	TRANSDATE TIMESTAMP_NTZ(9) COMMENT 'Transaction date',
	SOURCECODE VARCHAR(24) COMMENT 'Source code / Transaction type',
	CANCELIND NUMBER(38,0) COMMENT 'Cancel indicator',
	REPID VARCHAR(24) COMMENT 'Representative ID',
	CURRENCY VARCHAR(6) COMMENT 'transaction currency',
	EXCHANGERATE NUMBER(38,2) COMMENT 'the exchange rate used for the transaction',
	ENTRY_TYPE VARCHAR(24) COMMENT 'entry type = insurance revenue',
	COMMISSION NUMBER(38,2) COMMENT 'Representative gross commission',
	COMMISSIONCAD NUMBER(38,2) COMMENT 'Representative gross commission in CAD',
	OVERRIDEIND NUMBER(38,0) COMMENT 'Override indicator',
	ACCURATEIND NUMBER(38,0) COMMENT 'Accuracy indicator',
	DESCRIPTION VARCHAR(250) COMMENT 'Description',
	NUMBEROFORDERS NUMBER(38,0) COMMENT 'Number of orders',
	NETCOMMISSION NUMBER(38,2) COMMENT 'Representative net commission',
	TRANSFEE NUMBER(38,2) COMMENT 'Representative transaction fees',
	SHAREIND NUMBER(38,0) COMMENT 'Share indicator',
	AFFECTGROSSCOMMIND NUMBER(38,0) COMMENT 'Affect gross commission Indicator',
	REVENUEONLYIND NUMBER(38,0) COMMENT 'Revenu Only Indicator',
	NOTE VARCHAR(250) COMMENT 'Notes',
	REVNO VARCHAR(250) COMMENT 'Revision number',
	STAMP DATE COMMENT 'Record insertion date',
	USERID VARCHAR(250) COMMENT 'User ID'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_REVENUES_RDV.LINK_REVENUE_RR (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	PAY_SYSID NUMBER(38,0) COMMENT 'Payable ID - Main key',
	PAYMENT_DT TIMESTAMP_NTZ(9) COMMENT 'Payable Paid Date',
	PLN_SYSID NUMBER(38,0) COMMENT 'Plan (Account) ID (related to PLN)',
	IVR_SYSID NUMBER(38,0) COMMENT 'Investor (Client) ID (related to IVR)',
	IVD_SYSID NUMBER(38,0) COMMENT 'Product ID (related to IVD link with parent IVT)',
	PROCESS_DT TIMESTAMP_NTZ(9) COMMENT 'Revenue payable process date'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_REVENUES_RDV.LINK_REVENUE_RR_IAS_COMMISSION (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	REPID VARCHAR(50) COMMENT 'MASTER CODE code',
	ADVISOR_ID VARCHAR(512) COMMENT 'Advisor ID in commission portal',
	PROGRAM_TYPE VARCHAR(512) COMMENT 'Program type of the account',
	ACCOUNTID VARCHAR(100) COMMENT 'Account ID',
	PROCESSDATE DATE COMMENT 'Process Date',
	SOURCECODE VARCHAR(50) COMMENT 'Source Code / TRANSACTION_TYPE',
	QUANTITY NUMBER(38,0) COMMENT 'Transaction quantity',
	TRANSTYPE VARCHAR(10) COMMENT 'Transaction Type ([B]uy/[S]ell) / BUY_SELL_INDICATOR',
	REVENUE NUMBER(38,2) COMMENT 'Representative gross revenue',
	COMMISSION NUMBER(38,2) COMMENT 'Representative gross commission',
	NETCOMMISSION NUMBER(38,2) COMMENT 'Representative net commission',
	TRANSFEE NUMBER(38,2) COMMENT 'Representative transaction fees',
	ENTRY_TYPE VARCHAR(20) COMMENT 'Entry Type',
	STAMP DATE COMMENT 'Record Insertion Date'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_REVENUES_RDV.LINK_REVENUE_RR_IAS_COMMISSION_CLONE (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	REPID VARCHAR(50) COMMENT 'MASTER CODE code',
	ADVISOR_ID VARCHAR(512) COMMENT 'Advisor ID in commission portal',
	PROGRAM_TYPE VARCHAR(512) COMMENT 'Program type of the account',
	ACCOUNTID VARCHAR(100) COMMENT 'Account ID',
	PROCESSDATE DATE COMMENT 'Process Date',
	SOURCECODE VARCHAR(50) COMMENT 'Source Code / TRANSACTION_TYPE',
	QUANTITY NUMBER(38,0) COMMENT 'Transaction quantity',
	TRANSTYPE VARCHAR(10) COMMENT 'Transaction Type ([B]uy/[S]ell) / BUY_SELL_INDICATOR',
	REVENUE NUMBER(38,2) COMMENT 'Representative gross revenue',
	COMMISSION NUMBER(38,2) COMMENT 'Representative gross commission',
	NETCOMMISSION NUMBER(38,2) COMMENT 'Representative net commission',
	TRANSFEE NUMBER(38,2) COMMENT 'Representative transaction fees',
	ENTRY_TYPE VARCHAR(20)
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_REVENUES_RDV.REF_COM_PRODUCTION (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	COM_PRODUCTION_CD VARCHAR(2) COMMENT 'Product ID'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_REVENUES_RDV.SAT_LINK_REVENUE_PAYABLE_RR_IAS_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PYBL_STATUS VARCHAR(3) COMMENT 'Payable Status',
	EVENT_PROC_SYSID NUMBER(38,0) COMMENT 'Event Procedure ID',
	EVENT_RPT_SYSID NUMBER(38,0) COMMENT 'Event Report ID',
	BEN_SYSID NUMBER(38,0) COMMENT 'Beneficiary ID (related to REP table)',
	REP_SYSID NUMBER(38,0) COMMENT 'Advisor ID (related to REP table)',
	DEAL_SYSID NUMBER(38,0) COMMENT 'Deal ID (related to REP_DEAL link with parent REP table)',
	COM_SYSID NUMBER(38,0) COMMENT 'Comm ID (Related to REP_COM link with parents REP_DEAL, REP)',
	DIST_SYSID NUMBER(38,0) COMMENT 'Payroll Distribution ID (related to REP_PAY_DIST)',
	TRX_SYSID NUMBER(38,0) COMMENT 'Transaction ID (related to TRX)',
	ACT_SYSID NUMBER(38,0) COMMENT 'Account (Position) ID (related to ACT)',
	MGT_CD VARCHAR(5) COMMENT 'Managemet Cie ID (related to MGT)',
	TRX_CD NUMBER(38,0) COMMENT 'Transaction Code id (related to S_TRX_CD)',
	PROC_DT TIMESTAMP_NTZ(9) COMMENT 'Payable Process Date',
	PAY_PERIOD VARCHAR(5) COMMENT 'Pay Period',
	TAX_YEAR VARCHAR(4) COMMENT 'Pay Fiscal Year',
	TRADE_DT TIMESTAMP_NTZ(9) COMMENT 'Transaction Trade date (related to TRX)',
	GRSS_AMT FLOAT COMMENT 'Transaction Gross Amount (related to TRX)',
	COM_DLR FLOAT COMMENT 'Commission Dealer Amount',
	COM_PYBL FLOAT COMMENT 'Commission Amount',
	COM_BEN_PYBL FLOAT COMMENT 'Commission Pay to the Beneficiary',
	TICKET_CHG FLOAT COMMENT 'Ticket Charge',
	PAY_CD VARCHAR(3) COMMENT 'Pay Code',
	COM_PRODUCTION_CD VARCHAR(2) COMMENT 'Commission Type Code (related to S_COM_PROD)',
	AMOUNT FLOAT COMMENT 'Amount (related to Payroll Distribution)',
	USR_SYSID NUMBER(38,0) COMMENT 'User ID (related to SYS_USER_CD)',
	OTX_SYSID NUMBER(38,0) COMMENT 'Order ID (related to OTX)',
	DISPLAY_FLAG NUMBER(38,0) COMMENT 'Display Flag',
	DLR_MINIMUM VARCHAR(1) COMMENT 'Dealer Minimum',
	ORIG_PAY_PER VARCHAR(18) COMMENT 'Original Pay Period',
	IVT_TYPE VARCHAR(4) COMMENT 'Type of Product',
	COM_PAY_SYSID NUMBER(38,0) COMMENT 'Commission Pay ID',
	INTERNAL_COMM BOOLEAN COMMENT 'Internal Commission',
	WRHS_IND BOOLEAN COMMENT 'WRHS IND'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_REVENUES_RDV.SAT_LINK_REVENUE_PAYABLE_RR_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PYBL_STATUS VARCHAR(6) COMMENT 'Payable Status',
	EVENT_PROC_SYSID NUMBER(38,0) COMMENT 'Event Procedure ID',
	EVENT_RPT_SYSID NUMBER(38,0) COMMENT 'Event Report ID',
	BEN_SYSID NUMBER(38,0) COMMENT 'Beneficiary ID (related to REP table)',
	REP_SYSID NUMBER(38,0) COMMENT 'Advisor ID (related to REP table)',
	DEAL_SYSID NUMBER(38,0) COMMENT 'Deal ID (related to REP_DEAL link with parent REP table)',
	COM_SYSID NUMBER(38,0) COMMENT 'Comm ID (Related to REP_COM link with parents REP_DEAL, REP)',
	DIST_SYSID NUMBER(38,0) COMMENT 'Payroll Distribution ID (related to REP_PAY_DIST)',
	TRX_SYSID NUMBER(38,0) COMMENT 'Transaction ID (related to TRX)',
	ACT_SYSID NUMBER(38,0) COMMENT 'Account (Position) ID (related to ACT)',
	MGT_CD VARCHAR(10) COMMENT 'Managemet Cie ID (related to MGT)',
	TRX_CD NUMBER(38,0) COMMENT 'Transaction Code id (related to S_TRX_CD)',
	PAY_PERIOD VARCHAR(10) COMMENT 'Pay Period',
	TAX_YEAR VARCHAR(8) COMMENT 'Pay Fiscal Year',
	TRADE_DT TIMESTAMP_NTZ(9) COMMENT 'Transaction Trade date (related to TRX)',
	GRSS_AMT FLOAT COMMENT 'Transaction Gross Amount (related to TRX)',
	COM_DLR FLOAT COMMENT 'Commission Dealer Amount',
	COM_PYBL FLOAT COMMENT 'Commission Amount',
	COM_BEN_PYBL FLOAT COMMENT 'Commission Pay to the Beneficiary',
	TICKET_CHG FLOAT COMMENT 'Ticket Charge',
	PAY_CD VARCHAR(6) COMMENT 'Pay Code',
	COM_PRODUCTION_CD VARCHAR(4) COMMENT 'Commission Type Code (related to S_COM_PROD)',
	AMOUNT FLOAT COMMENT 'Amount (related to Payroll Distribution)',
	USR_SYSID NUMBER(38,0) COMMENT 'User ID (related to SYS_USER_CD)',
	OTX_SYSID NUMBER(38,0) COMMENT 'Order ID (related to OTX)',
	DISPLAY_FLAG NUMBER(38,0) COMMENT 'Display Flag',
	DLR_MINIMUM VARCHAR(2) COMMENT 'Dealer Minimum',
	ORIG_PAY_PER VARCHAR(36) COMMENT 'Original Pay Period',
	IVT_TYPE VARCHAR(8) COMMENT 'Type of Product',
	COM_PAY_SYSID NUMBER(38,0) COMMENT 'Commission Pay ID',
	INTERNAL_COMM BOOLEAN COMMENT 'Internal Commission',
	WRHS_IND BOOLEAN COMMENT 'WRHS IND'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_REVENUES_RDV.SAT_LINK_REVENUE_TRAILER_FEES_RR_IAS_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	FAS_FILE_NAME VARCHAR(40) COMMENT 'Fundserv File Name',
	FROM_DT TIMESTAMP_NTZ(9) COMMENT 'From date',
	MGT_CD VARCHAR(3) COMMENT 'Management Cie (related to MGT)',
	CURRENCY_CD VARCHAR(3) COMMENT 'Currency Code',
	INCOME_TYPE VARCHAR(4) COMMENT 'Type of Income',
	REP_CODE VARCHAR(5) COMMENT 'Rep Code (related to REP)',
	COM_PYBL FLOAT COMMENT 'Commission Amount',
	EXCH_DT TIMESTAMP_NTZ(9) COMMENT 'Exchange Rate Date',
	EXCH_RATE FLOAT COMMENT 'Exchange Rate',
	LAST_UPD_DT TIMESTAMP_NTZ(9) NOT NULL COMMENT 'Last Update Date',
	USR_SYSID NUMBER(38,0) COMMENT 'User ID (related to SYS_USER_CD)',
	FISCAL_SYSID NUMBER(38,0) COMMENT 'Fiscal ID',
	JUR_CD VARCHAR(3) COMMENT 'Jurisdiction Code',
	ACT_TAX_COLLCTD FLOAT COMMENT 'Unknown',
	DLR_SYSID NUMBER(38,0) COMMENT 'Deal ID (related to DLR)',
	RGN_SYSID NUMBER(38,0) COMMENT 'Region ID (related to RGN)',
	BRN_SYSID NUMBER(38,0) COMMENT 'Branch ID (related to BRN)',
	REP_SYSID NUMBER(38,0) COMMENT 'Rep ID (related to REP)'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_REVENUES_RDV.SAT_LINK_REVENUE_TRAILER_FEES_RR_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	FAS_FILE_NAME VARCHAR(80) COMMENT 'Fundserv File Name',
	FROM_DT TIMESTAMP_NTZ(9) COMMENT 'From date',
	MGT_CD VARCHAR(6) COMMENT 'Management Cie (related to MGT)',
	CURRENCY_CD VARCHAR(6) COMMENT 'Currency Code',
	INCOME_TYPE VARCHAR(8) COMMENT 'Type of Income',
	REP_CODE VARCHAR(10) COMMENT 'Rep Code (related to REP)',
	COM_PYBL FLOAT COMMENT 'Commission Amount',
	EXCH_DT TIMESTAMP_NTZ(9) COMMENT 'Exchange Rate Date',
	EXCH_RATE FLOAT COMMENT 'Exchange Rate',
	LAST_UPD_DT TIMESTAMP_NTZ(9) NOT NULL COMMENT 'Last Update Date',
	USR_SYSID NUMBER(38,0) COMMENT 'User ID (related to SYS_USER_CD)',
	FISCAL_SYSID NUMBER(38,0) COMMENT 'Fiscal ID',
	JUR_CD VARCHAR(6) COMMENT 'Jurisdiction Code',
	ACT_TAX_COLLCTD FLOAT,
	DLR_SYSID NUMBER(38,0) COMMENT 'Deal ID (related to DLR)',
	RGN_SYSID NUMBER(38,0) COMMENT 'Region ID (related to RGN)',
	BRN_SYSID NUMBER(38,0) COMMENT 'Branch ID (related to BRN)',
	REP_SYSID NUMBER(38,0) COMMENT 'Rep ID (related to REP)'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_REVENUES_RDV.SAT_LINK_REVENUE_WRAP_FEE_RR_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	BATCH_SYSID NUMBER(38,0) NOT NULL COMMENT 'Batch ID',
	STATUS_CD VARCHAR(2) COMMENT 'Status Code',
	CET_WF_SYSID NUMBER(38,0) COMMENT 'Code to reference with CET Table',
	WF_IND NUMBER(38,0),
	ACT_SYSID NUMBER(38,0) COMMENT 'Account (Position) ID (related to ACT)',
	OTX_SYSID NUMBER(38,0) COMMENT 'Order ID (related to OTX)',
	AVG_MV FLOAT COMMENT 'Average Market Value',
	CREATE_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date',
	FEE_AMT FLOAT COMMENT 'Fee amount',
	FEE_GST FLOAT COMMENT 'Fee GST ( taxe )',
	FEE_PST FLOAT COMMENT 'Fee PST ( taxe )',
	FEE_TOTAL_AMT FLOAT COMMENT 'Fee total amount ( taxe included )',
	DLR_SYSID NUMBER(38,0) COMMENT 'Deal ID (related to DLR)',
	RGN_SYSID NUMBER(38,0) COMMENT 'Region ID (related to RGN)',
	BRN_SYSID NUMBER(38,0) COMMENT 'Branch ID (related to BRN)',
	REP_SYSID NUMBER(38,0) COMMENT 'Rep ID (related to REP)',
	USR_SYSID NUMBER(38,0) COMMENT 'USer ID',
	DESCRIPTION VARCHAR(120),
	LAST_UPD_DT TIMESTAMP_NTZ(9) COMMENT 'Last upadate date',
	SRF_SYSID NUMBER(38,0) COMMENT 'SRF  ID',
	OTHER_COM_SYSID NUMBER(38,0),
	FISCAL_SYSID NUMBER(38,0)
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_REVENUES_RDV.SAT_REF_COM_PRODUCTION (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	COM_PRODUCTION_MNEM VARCHAR(5) COMMENT 'Product mnemonic code',
	COM_PRODUCTION_DESC VARCHAR(15) COMMENT 'Product description',
	COM_PRODUCTION_LONG_DESC VARCHAR(40) COMMENT 'Product long description',
	COM_PRODUCTION_MNEM_ENG VARCHAR(5) COMMENT 'Product mnemonic code english',
	COM_PRODUCTION_MNEM_FRE VARCHAR(5) COMMENT 'Product mnemonic code french',
	COM_PRODUCTION_DESC_ENG VARCHAR(15) COMMENT 'Product description english',
	COM_PRODUCTION_DESC_FRE VARCHAR(15) COMMENT 'prduct description french',
	COM_PRODUCTION_LONG_DESC_ENG VARCHAR(50) COMMENT 'Product long description english',
	COM_PRODUCTION_LONG_DESC_FRE VARCHAR(60) COMMENT 'Product long description french',
	CRC_TRND_RPT_CAT VARCHAR(1) COMMENT 'Unknown',
	COMMISSION_LEVEL NUMBER(38,0) COMMENT 'Unknown',
	CAC_TYPE_CD NUMBER(38,0) COMMENT 'Unknown',
	ACC_REPORT_IND NUMBER(38,0) COMMENT 'Unknown'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_REVENUES_RDV.SAT_REF_COM_PRODUCTION_INVESTIA_UNIVERIS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	COM_PRODUCTION_MNEM VARCHAR(10) COMMENT 'Product mnemonic code',
	COM_PRODUCTION_DESC VARCHAR(30) COMMENT 'Product description',
	COM_PRODUCTION_LONG_DESC VARCHAR(80) COMMENT 'Product long description',
	COM_PRODUCTION_MNEM_ENG VARCHAR(10) COMMENT 'Product mnemonic code english',
	COM_PRODUCTION_MNEM_FRE VARCHAR(10) COMMENT 'Product mnemonic code french',
	COM_PRODUCTION_DESC_ENG VARCHAR(30) COMMENT 'Product description english',
	COM_PRODUCTION_DESC_FRE VARCHAR(30) COMMENT 'prduct description french',
	COM_PRODUCTION_LONG_DESC_ENG VARCHAR(100) COMMENT 'Product long description english',
	COM_PRODUCTION_LONG_DESC_FRE VARCHAR(120) COMMENT 'Product long description french',
	CRC_TRND_RPT_CAT VARCHAR(2),
	COMMISSION_LEVEL NUMBER(38,0),
	CAC_TYPE_CD NUMBER(38,0),
	ACC_REPORT_IND NUMBER(38,0)
);
create or replace schema DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV;

create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.HUB_PARTY_ROLE_ADVISOR (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MASTER_CODE VARCHAR(50) COMMENT 'registered representative code'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.LINK_INVESTMENT_CONTRACT (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ADVISOR',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	CLIENT_ID VARCHAR(100) COMMENT 'Client ID',
	MASTER_CD VARCHAR(50) COMMENT 'MASTER CODE of the advisor',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	PLN_MNEM VARCHAR(512) COMMENT 'Plan code',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	ASC_1_RESP_PLAN_TYPES VARCHAR(10) COMMENT 'subtype of the RESP plans'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE (
	HK_LINK VARCHAR(64) COMMENT 'Hash of the business keys',
	HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(64) COMMENT 'Hash of the business keys REGISTERED REPRESENTATIVE',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(64) COMMENT 'Hash of the business keys PARTY ROLE ADVISOR',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	A_C_REPRESENTATIVE VARCHAR(40) COMMENT 'Unique code of representative',
	MASTER_CODE VARCHAR(40) COMMENT 'Unique code of advisor'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES_AGG (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.SAT_CONTRACT_AUA_SEG_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ACCOUNT_AUA_SEGMENT VARCHAR(1000) COMMENT 'Represents the segmentation of advisors based on their AUA',
	ACCOUNT_AUA_SEGMENT_ORDER NUMBER(38,0) COMMENT 'Order of the AUA segmentation, this field is done for Power BI display'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.SAT_CONTRACT_COMPUTE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PLAN_CODE VARCHAR(8000),
	PLAN_LABEL VARCHAR(8000),
	ACCOUNT_TYPE VARCHAR(16777216),
	GROUP_TYPE_CODE VARCHAR(8000),
	ACCUMULATION_TYPE VARCHAR(8000),
	ACCOUNT_IND NUMBER(1,0) COMMENT 'Account Flag, Total Number of Client Accounts',
	CASH_EQLT_PROFILE_PCT VARCHAR(3) COMMENT 'Cash or Equivalent Profile %',
	INCOME_PROFILE_PCT VARCHAR(3) COMMENT 'Income Profile %',
	GROWTH_PROFILE_PCT VARCHAR(3) COMMENT 'Growth Profile %',
	SPECULATION_PROFILE_PCT VARCHAR(3) COMMENT 'Speculation Profile %',
	UNKNOWN_PROFILE_PCT VARCHAR(3) COMMENT 'Unknown Profile %',
	LOW_RISK_PCT VARCHAR(3) COMMENT 'Low Risk %',
	MEDIUM_RISK_PCT VARCHAR(3) COMMENT 'Medium Risk %',
	HIGH_RISK_PCT VARCHAR(3) COMMENT 'High Risk %',
	UNKNOWN_RISK_PCT VARCHAR(3) COMMENT 'Unknown Risk %',
	NBIN_CLIENT_ID VARCHAR(50) COMMENT 'NBIN Clients Id.'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.SAT_IAS_NBIN_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Sat',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PLAN_CODE VARCHAR(8000) COMMENT 'Plan Code',
	PLAN_LABEL VARCHAR(8000) COMMENT 'Plan label',
	ACCOUNT_TYPE VARCHAR(16777216) COMMENT 'Account type',
	GROUP_TYPE_CODE VARCHAR(8000) COMMENT 'Group type code',
	ACCUMULATION_TYPE VARCHAR(8000) COMMENT 'Type of Accumulation'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Sat',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	SYMBOL VARCHAR(512) COMMENT 'Security Symbol',
	NAME VARCHAR(1000) COMMENT 'Product name',
	ASSET_CATEGORY VARCHAR(512) COMMENT 'Under what category the asset belongs to',
	CATEGORY VARCHAR(512) COMMENT 'Type of Category',
	PRODUCT_GROUP VARCHAR(512) COMMENT 'The group the product belong to',
	ISSUER_COMPANY_CODE VARCHAR(4) COMMENT 'Code of the issuer Company',
	ISSUER_COMPANY_NAME VARCHAR(1000) COMMENT 'Name of the issuer Company'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.SAT_LINK_INVESTMENT_CONTRACT (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE (
	HK_LINK VARCHAR(64) COMMENT 'Hash of the business keys',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	COM_TYPE VARCHAR(50) COMMENT 'Commission Type',
	COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
	IS_RESHARED NUMBER(7,3) COMMENT 'Indicator to identify IsReshared or not',
	PHYSICAL NUMBER(7,3) COMMENT 'PHYSICAL number',
	TOREPID VARCHAR(50) COMMENT 'Advisor id'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_AUA_SEG_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	CLIENT_AUA_SEGMENT VARCHAR(1000) COMMENT 'Represents the segmentation of clients based on their AUA',
	CLIENT_AUA_SEGMENT_ORDER NUMBER(38,0) COMMENT 'Order of the AUA segmentation, this field is done for Power BI display'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_CLEAN (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	CLIENT_ANNUAL_GROSS_INC_CLEAN NUMBER(38,0) COMMENT 'Amount of the client annual gross income as a number'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""\""A\""\"" row exists in the source, \""\""D\""\"" row does not exist in the source',
	INCOME_AMT NUMBER(38,2) COMMENT 'Client income',
	INCOME_LEVEL_1_SEGMENT VARCHAR(50) COMMENT 'Client level 1 income Segment : $30k - $50k',
	INCOME_LEVEL_1_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client level 1 income Segment ORDER',
	INCOME_LEVEL_2_SEGMENT VARCHAR(50) COMMENT 'Client level 2 income Segment : Lower Income',
	INCOME_LEVEL_2_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client level 2 income Segment ORDER',
	AGE_SEGMENT VARCHAR(50) COMMENT 'Client Age Segment : 25-34',
	AGE_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client Age Segment ORDER',
	NEW_CLIENT_IND VARCHAR(16777216) COMMENT 'New client indicator',
	CLIENT_START_DT TIMESTAMP_NTZ(9) COMMENT 'Client Start Date',
	CLIENT_INV_KNOWLEDGE_LVL VARCHAR(10) COMMENT 'Clients Account Investment Knowledge',
	CLIENT_NAME VARCHAR(2000) COMMENT 'Client name',
	CLIENT_AGE NUMBER(38,0) COMMENT 'Client Age'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.SAT_PARTY_ROLE_ADVISOR_AUA_SEG_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ADVISOR_AUA_SEGMENT VARCHAR(1000) COMMENT 'Represents the segmentation of advisors based on their AUA',
	ADVISOR_AUA_SEGMENT_ORDER NUMBER(38,0) COMMENT 'Order of the AUA segmentation, this field is done for Power BI display',
	SUSPENDED_IND NUMBER(1,0) COMMENT 'suspended Flag, if an advisor is deleted in certs but still have AUA, will be considered as suspended'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.SAT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	COMPANY_CODE VARCHAR(50) COMMENT 'Code of the company',
	COMPANY_NAME VARCHAR(512) COMMENT 'Name of the company',
	REGULATORY_ORGANIZATION_NAME VARCHAR(512) COMMENT 'Name of the regulatory organisation company',
	REGULATORY_ORGANIZATION_CODE VARCHAR(50) COMMENT 'Code of the regulatory organisation company',
	DEALER_CODE VARCHAR(50) COMMENT 'Code of the dealer',
	DEALER_NAME VARCHAR(512) COMMENT 'Name of the dealer',
	REGION_CODE VARCHAR(512) COMMENT 'Code of the region',
	REGION_NAME VARCHAR(512) COMMENT 'Nmae of the region',
	REGION_VP VARCHAR(16777216) COMMENT 'full name of the RVP',
	BRANCHCODE VARCHAR(50) COMMENT 'Code of the representative branch code',
	BRANCHNAME VARCHAR(512) COMMENT 'Name of the representative branch',
	TEAM_CODE NUMBER(38,0) COMMENT 'Representant Group ID',
	TEAM_NAME VARCHAR(512) COMMENT 'Advisor team description',
	ADVISOR_FULLNAME VARCHAR(512) COMMENT 'Representative name',
	FIRSTNAME VARCHAR(512) COMMENT 'Representative first name',
	LASTNAME VARCHAR(512) COMMENT 'Representative last name',
	ADVISOR_CORPORATION_NAME VARCHAR(512) COMMENT 'Representative corporation name',
	STATUS VARCHAR(512) COMMENT 'Active RR code indicator',
	GROUP_RSP_INDICATOR VARCHAR(512) COMMENT 'Group retirement saving Plans indicator',
	PROVINCE_CODE VARCHAR(16777216) COMMENT 'province code',
	PROVINCE VARCHAR(16777216) COMMENT 'province name',
	ADVISOR_START_DATE TIMESTAMP_NTZ(9) COMMENT 'Advisor Start date',
	NEW_ADVISOR NUMBER(38,0) COMMENT 'Flag to identify the advisor',
	DEPARTED_ADVISOR_IND NUMBER(1,0) COMMENT 'DEPARTED ADVISOR INDICATOR',
	END_DATE TIMESTAMP_NTZ(9) COMMENT 'Departure date of the advisor (TBD)',
	REASON VARCHAR(1000) COMMENT 'Reason of departure',
	NEW_FIRM VARCHAR(1000) COMMENT 'Departure destination',
	NEW_FIRM_TYPE VARCHAR(1000) COMMENT 'Departure destination Type',
	NEW_FIRM_BACK_OFFICE VARCHAR(1000) COMMENT 'Departure destination Back-Office',
	PRESTIGE_STATUS VARCHAR(100) COMMENT 'Prestige Status',
	PRIMARY_ROLE VARCHAR(500) COMMENT 'PRIMARY ROLE',
	TRANSITION_PERIOD_END_DATE TIMESTAMP_NTZ(9) COMMENT 'Advisor transition end date',
	DEAL_ASSESTS NUMBER(11,0) COMMENT 'Deal assets',
	EXPECTED_ASSESTS NUMBER(11,0) COMMENT 'Expected assets',
	PREVIOUS_FIRM VARCHAR(100) COMMENT 'Previous Firm of the Advisor',
	PREVIOUS_FIRM_TYPE VARCHAR(100) COMMENT 'Previous Firm type of the Advisor',
	AGE_SEGMENT VARCHAR(50) COMMENT 'Advisor Age Segment : 25-34',
	AGE_SEGMENT_ORD NUMBER(2,0) COMMENT 'Advisor Age Segment ORDER',
	MD_ACTIVE_CERTS VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the certs source',
	ADVISOR_AGE NUMBER(38,0) COMMENT 'Age of the dealer',
	REP_EMAIL VARCHAR(1000) COMMENT 'Advisor repemail',
	CBM VARCHAR(1000) COMMENT 'Advisor cbm',
	BRANCH_NRD VARCHAR(1000) COMMENT 'Advisor branch nrd',
	BRANCH_ADDRESS1 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS1',
	BRANCH_ADDRESS2 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS2',
	BRANCH_CITY VARCHAR(1000) COMMENT 'Advisor branch city',
	BRANCH_POSTAL_CODE VARCHAR(1000) COMMENT 'Advisor branch postal code'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.SAT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH_CLONE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	COMPANY_CODE VARCHAR(50) COMMENT 'Code of the company',
	COMPANY_NAME VARCHAR(512) COMMENT 'Name of the company',
	REGULATORY_ORGANIZATION_NAME VARCHAR(512) COMMENT 'Name of the regulatory organisation company',
	REGULATORY_ORGANIZATION_CODE VARCHAR(50) COMMENT 'Code of the regulatory organisation company',
	DEALER_CODE VARCHAR(50) COMMENT 'Code of the dealer',
	DEALER_NAME VARCHAR(512) COMMENT 'Name of the dealer',
	REGION_CODE VARCHAR(512) COMMENT 'Code of the region',
	REGION_NAME VARCHAR(512) COMMENT 'Nmae of the region',
	REGION_VP VARCHAR(16777216) COMMENT 'full name of the RVP',
	BRANCHCODE VARCHAR(50) COMMENT 'Code of the representative branch code',
	BRANCHNAME VARCHAR(512) COMMENT 'Name of the representative branch',
	TEAM_CODE NUMBER(38,0) COMMENT 'Representant Group ID',
	TEAM_NAME VARCHAR(512) COMMENT 'Advisor team description',
	ADVISOR_FULLNAME VARCHAR(512) COMMENT 'Representative name',
	FIRSTNAME VARCHAR(512) COMMENT 'Representative first name',
	LASTNAME VARCHAR(512) COMMENT 'Representative last name',
	ADVISOR_CORPORATION_NAME VARCHAR(512) COMMENT 'Representative corporation name',
	STATUS VARCHAR(512) COMMENT 'Active RR code indicator',
	GROUP_RSP_INDICATOR VARCHAR(512) COMMENT 'Group retirement saving Plans indicator',
	PROVINCE_CODE VARCHAR(16777216) COMMENT 'province code',
	PROVINCE VARCHAR(16777216) COMMENT 'province name',
	ADVISOR_START_DATE TIMESTAMP_NTZ(9) COMMENT 'Advisor Start date',
	NEW_ADVISOR NUMBER(38,0) COMMENT 'Flag to identify the advisor',
	DEPARTED_ADVISOR_IND NUMBER(1,0) COMMENT 'DEPARTED ADVISOR INDICATOR',
	END_DATE TIMESTAMP_NTZ(9) COMMENT 'Departure date of the advisor (TBD)',
	REASON VARCHAR(1000) COMMENT 'Reason of departure',
	NEW_FIRM VARCHAR(1000) COMMENT 'Departure destination',
	NEW_FIRM_TYPE VARCHAR(1000) COMMENT 'Departure destination Type',
	NEW_FIRM_BACK_OFFICE VARCHAR(1000) COMMENT 'Departure destination Back-Office',
	PRESTIGE_STATUS VARCHAR(100) COMMENT 'Prestige Status',
	PRIMARY_ROLE VARCHAR(500) COMMENT 'PRIMARY ROLE',
	TRANSITION_PERIOD_END_DATE TIMESTAMP_NTZ(9) COMMENT 'Advisor transition end date',
	DEAL_ASSESTS NUMBER(11,0) COMMENT 'Deal assets',
	EXPECTED_ASSESTS NUMBER(11,0) COMMENT 'Expected assets',
	PREVIOUS_FIRM VARCHAR(100) COMMENT 'Previous Firm of the Advisor',
	PREVIOUS_FIRM_TYPE VARCHAR(100) COMMENT 'Previous Firm type of the Advisor',
	AGE_SEGMENT VARCHAR(50) COMMENT 'Advisor Age Segment : 25-34',
	AGE_SEGMENT_ORD NUMBER(2,0) COMMENT 'Advisor Age Segment ORDER',
	MD_ACTIVE_CERTS VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the certs source',
	ADVISOR_AGE NUMBER(38,0) COMMENT 'Age of the dealer',
	REP_EMAIL VARCHAR(1000) COMMENT 'Advisor repemail',
	CBM VARCHAR(1000) COMMENT 'Advisor cbm',
	BRANCH_NRD VARCHAR(1000) COMMENT 'Advisor branch nrd',
	BRANCH_ADDRESS1 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS1',
	BRANCH_ADDRESS2 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS2',
	BRANCH_CITY VARCHAR(1000) COMMENT 'Advisor branch city',
	BRANCH_POSTAL_CODE VARCHAR(1000) COMMENT 'Advisor branch postal code'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Sat',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PLAN_CODE VARCHAR(8000) COMMENT 'The plan code',
	PLAN_LABEL VARCHAR(8000) COMMENT 'The plan label',
	ACCOUNT_TYPE VARCHAR(8000) COMMENT 'The account type',
	GROUP_TYPE_CODE VARCHAR(8000) COMMENT 'The group type code',
	ACCUMULATION_TYPE VARCHAR(8000) COMMENT 'The accumulation type'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_NBIN_AGG (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.TRANSLINK_EXCHANGE_RATE (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	EXCHANGE_DATE DATE COMMENT 'Exchange rate date',
	EXCHANGERATE NUMBER(38,8) COMMENT 'Conversion rate from USD to CAD',
	REVNO NUMBER(38,0) COMMENT 'Modification version number'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.WT_ADVISOR_IAS_CERTS (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	CID VARCHAR(500) COMMENT 'Source account id  exp: #100002 ',
	FIRST_NAME VARCHAR(500) COMMENT 'First name of the advisor',
	LAST_NAME VARCHAR(500) COMMENT 'last name of the advisor',
	FULL_NAME VARCHAR(1000) COMMENT 'Full name of the advisor',
	PRIMARY_ROLE VARCHAR(500) COMMENT 'Primary role of the advisor',
	RVP VARCHAR(500) COMMENT 'RVP of the advisor',
	BRANCH_NRD VARCHAR(500) COMMENT 'Code of the Branch',
	BRANCH_NAME VARCHAR(500) COMMENT 'Name of the Branch',
	PROVINCE VARCHAR(500) COMMENT 'Province of the advisor',
	IS_ACTIVE NUMBER(1,0) COMMENT 'Flag to identify the whether the advisor is active or not',
	TRADE_NAME VARCHAR(2000) COMMENT 'Trade of the advisor',
	PORTAL_IDS VARCHAR(2000) COMMENT 'Portal identifier exp: PortalIds_#118048',
	BEGIN_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor begin date',
	END_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor end date',
	RR_CD VARCHAR(2000) COMMENT 'Registered representative code',
	ADVISOR_BIRTH_DATE DATE COMMENT 'Advisor month and year of birth'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.WT_IAS_NBIN_SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID',
	PLAN_CODE VARCHAR(8000) COMMENT 'Plan Code',
	PLAN_LABEL VARCHAR(8000) COMMENT 'Plan label',
	ACCOUNT_TYPE VARCHAR(16777216) COMMENT 'Type of Account',
	GROUP_TYPE_CODE VARCHAR(8000) COMMENT 'Group code',
	ACCUMULATION_TYPE VARCHAR(8000) COMMENT 'Accumulation Type',
	ASC_1_RESP_PLAN_TYPES VARCHAR(100) COMMENT 'If Account rap code is the same, ASC_1_RESP_PLAN_TYPES is used to identify the plan'
);
create or replace TRANSIENT TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.WT_INVESTMENT_CONTRACT_IAS_NBIN (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ADVISOR',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	CLIENT_ID VARCHAR(100) COMMENT 'Client ID',
	MASTER_CD VARCHAR(50) COMMENT 'MASTER CODE of the advisor',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	PLN_MNEM VARCHAR(512) COMMENT 'Plan code',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	ASC_1_RESP_PLAN_TYPES VARCHAR(10) COMMENT 'subtype of the RESP plans'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.WT_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_NBIN_AGG (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.WT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE (
	HK_LINK VARCHAR(64) COMMENT 'Hash of the business keys',
	HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(64) COMMENT 'Hash of the business keys',
	HK_HUB_ADVISOR VARCHAR(64) COMMENT 'Hash of the business keys',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_SRC_SYSTEM VARCHAR(1000) COMMENT 'Represents the source system',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	A_C_REPRESENTATIVE VARCHAR(50) COMMENT 'RR code',
	COM_TYPE VARCHAR(50) COMMENT 'Commission type',
	COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
	IS_RESHARED NUMBER(7,3) COMMENT 'Indicator to identify  it is Reshared or not',
	MASTER_CODE VARCHAR(50) COMMENT 'Master code',
	PHYSICAL NUMBER(7,3) COMMENT 'PHYSICAL number ',
	TOREPID VARCHAR(50) COMMENT 'To Representative ID'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.WT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE_MC (
	HK_LINK VARCHAR(64) COMMENT 'Hash of the business keys',
	HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(64) COMMENT 'Hash of the business keys',
	HK_HUB_ADVISOR VARCHAR(64) COMMENT 'Hash of the business keys',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_SRC_SYSTEM VARCHAR(1000) COMMENT 'Represents the source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	FROMREPID VARCHAR(50) COMMENT 'RR code',
	TOREPID VARCHAR(50) COMMENT 'Master code',
	SHARETYPE VARCHAR(50) COMMENT 'Sharing Type (codeSet)',
	SOURCECODE VARCHAR(50) COMMENT 'Source Code / TRANSACTION_TYPE',
	PRODUCTCODE VARCHAR(50) COMMENT 'Product Code / SECURITY_GROUP_CODE',
	REVENUEPCT NUMBER(6,3) COMMENT 'Dispatch of revenues (percentage)',
	COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
	NETCOMMISSIONPCT NUMBER(6,3) COMMENT 'Net Commission Sharing Percentage',
	FEEPCT NUMBER(6,3) COMMENT 'Fee Sharing Percentage',
	REVNO NUMBER(38,0) COMMENT 'Revision number',
	STAMP TIMESTAMP_NTZ(9) COMMENT 'Source row timestamp'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.WT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Master code of the Advisor',
	COMPANY_CODE VARCHAR(50) COMMENT 'ADVISOR COMPANY CODE ',
	COMPANY_NAME VARCHAR(512) COMMENT 'ADVISOR COMPANY NAME ',
	REGULATORY_ORGANIZATION_NAME VARCHAR(512) COMMENT 'Regulatory Organisation NAME ',
	REGULATORY_ORGANIZATION_CODE VARCHAR(50) COMMENT 'Regulatory Organisation Code ',
	DEALER_CODE VARCHAR(50) COMMENT 'Dealer code',
	DEALER_NAME VARCHAR(512) COMMENT 'Dealer Name',
	REGION_CODE VARCHAR(512) COMMENT 'Region Code',
	REGION_NAME VARCHAR(512) COMMENT 'Region Name',
	REGION_VP VARCHAR(16777216) COMMENT 'Regional VP',
	BRANCHCODE VARCHAR(50) COMMENT 'Branch Code',
	BRANCHNAME VARCHAR(512) COMMENT 'Branch name',
	TEAM_CODE NUMBER(38,0) COMMENT 'Team Code',
	TEAM_NAME VARCHAR(512) COMMENT 'Team name',
	ADVISOR_FULLNAME VARCHAR(512) COMMENT 'Advisor Full name',
	FIRSTNAME VARCHAR(512) COMMENT 'Advisor First name',
	LASTNAME VARCHAR(512) COMMENT 'Advisor Last name',
	ADVISOR_CORPORATION_NAME VARCHAR(512) COMMENT 'Advisor corporation name',
	STATUS VARCHAR(512) COMMENT 'Advisor status',
	GROUP_RSP_INDICATOR VARCHAR(512) COMMENT 'Indiactor to show its Group RSp or not',
	PROVINCE_CODE VARCHAR(16777216) COMMENT 'Code of Province',
	PROVINCE VARCHAR(16777216) COMMENT 'Province',
	ADVISOR_START_DATE TIMESTAMP_NTZ(9) COMMENT 'Start date of the advisor',
	NEW_ADVISOR NUMBER(38,0) COMMENT 'Flag to identify new advisor',
	DEPARTED_ADVISOR_IND NUMBER(1,0) COMMENT 'DEPARTED ADVISOR INDICATOR',
	END_DATE TIMESTAMP_NTZ(9) COMMENT 'Departure date of the advisor (TBD)',
	REASON VARCHAR(1000) COMMENT 'Reason of departure',
	NEW_FIRM VARCHAR(1000) COMMENT 'Departure destination',
	NEW_FIRM_TYPE VARCHAR(1000) COMMENT 'Departure destination Type',
	NEW_FIRM_BACK_OFFICE VARCHAR(1000) COMMENT 'Departure destination Back-Office',
	PRESTIGE_STATUS VARCHAR(100) COMMENT 'Prestige Status',
	PRIMARY_ROLE VARCHAR(500) COMMENT 'Primary role',
	TRANSITION_PERIOD_END_DATE TIMESTAMP_NTZ(9) COMMENT 'Advisor transition end date',
	DEAL_ASSESTS NUMBER(11,0) COMMENT 'Deal assets',
	EXPECTED_ASSESTS NUMBER(11,0) COMMENT 'Expected assets',
	PREVIOUS_FIRM VARCHAR(100) COMMENT 'Previous Firm of the Advisor',
	PREVIOUS_FIRM_TYPE VARCHAR(100) COMMENT 'Previous Firm type of the Advisor',
	AGE_SEGMENT VARCHAR(50) COMMENT 'Advisor Age Segment : 25-34',
	AGE_SEGMENT_ORD NUMBER(2,0) COMMENT 'Advisor Age Segment ORDER',
	MD_ACTIVE_CERTS VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the certs source',
	ADVISOR_AGE NUMBER(38,0) COMMENT 'Age of the dealer',
	REP_EMAIL VARCHAR(1000) COMMENT 'Advisor repemail',
	CBM VARCHAR(1000) COMMENT 'Advisor cbm',
	BRANCH_NRD VARCHAR(1000) COMMENT 'Advisor branch nrd',
	BRANCH_ADDRESS1 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS1',
	BRANCH_ADDRESS2 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS2',
	BRANCH_CITY VARCHAR(1000) COMMENT 'Advisor branch city',
	BRANCH_POSTAL_CODE VARCHAR(1000) COMMENT 'Advisor branch postal code'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.WT_REGISTERED_REPRESENTATIVE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	HK_SAT VARCHAR(40) COMMENT 'Hash of the Satellite for the multi-active keys',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	RR_CD VARCHAR(50) COMMENT 'registered representative code',
	REPNAME VARCHAR(512) COMMENT 'Representative name',
	FIRSTNAME VARCHAR(512) COMMENT 'Representative first name',
	LASTNAME VARCHAR(512) COMMENT 'Representative last name',
	BRANCHCODE VARCHAR(50) COMMENT 'Code of the representative branch code',
	BRANCHNAME VARCHAR(512) COMMENT 'Name of the representative branch',
	GROUPID NUMBER(38,0) COMMENT 'Representant Group ID',
	GROUPDESCRIPTION VARCHAR(512) COMMENT 'Advisor group description',
	FIXEDFEEIND NUMBER(38,0) COMMENT 'Fixed fees indicator',
	MANAGEDIND NUMBER(38,0) COMMENT 'Managed indicator',
	REFIND NUMBER(38,0) COMMENT 'Holding value currency',
	ACTIVEIND NUMBER(38,0) COMMENT 'Active RR code indicator',
	SEGFUNDIND NUMBER(38,0) COMMENT 'Segregated funds indicator',
	REVNO NUMBER(38,0) COMMENT 'Revision number',
	STAMP TIMESTAMP_NTZ(9) COMMENT 'Source row timestamp',
	USERID VARCHAR(512) COMMENT 'User id',
	ACTIVE NUMBER(38,0) COMMENT 'Active user indicator',
	ADVISOR_ID VARCHAR(512) COMMENT 'Advisor id',
	COMMRATEPCT NUMBER(6,3) COMMENT 'Default Commission Rate Percentage',
	SHAREGROSSCOMMIND NUMBER(38,0) COMMENT 'Indicator of share of gross commission',
	STARTDATE DATE COMMENT 'the starting date of the advisor',
	MAINREPCODE VARCHAR(50) COMMENT 'Main RR code',
	RGN_MGR VARCHAR(512) COMMENT 'The name of the regional VP',
	BRN_CD VARCHAR(50) COMMENT 'Univeris Code for the advisors branch',
	BRN_NAME VARCHAR(512) COMMENT 'The advisor branch name',
	REP_LNAME VARCHAR(512) COMMENT 'Advisor last name',
	REP_FNAME VARCHAR(512) COMMENT 'Advisor first name'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.WT_REGISTERED_REPRESENTATIVE_IAS_CERTS (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	HK_SAT VARCHAR(40) COMMENT 'Hash of the Satellite for the multi-active keys',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	RR_CD VARCHAR(50) COMMENT 'registered representative code',
	CID VARCHAR(500) COMMENT 'Source account id exp: #100002',
	FIRST_NAME VARCHAR(500) COMMENT 'Advisor First name',
	LAST_NAME VARCHAR(500) COMMENT 'Advisor Last name',
	FULL_NAME VARCHAR(1000) COMMENT 'Advisor Full name',
	PRIMARY_ROLE VARCHAR(500) COMMENT 'Advisor Primary role',
	RVP VARCHAR(500) COMMENT 'Reginal VP of advisor',
	BRANCH_NRD VARCHAR(500) COMMENT 'Branch code of the Advisor',
	BRANCH_NAME VARCHAR(500) COMMENT 'Branch Name of the Advisor',
	PROVINCE VARCHAR(500) COMMENT 'PROVINCE of the advisor',
	IS_ACTIVE NUMBER(1,0) COMMENT 'Indicator to show the advisor is active or not',
	TRADE_NAME VARCHAR(2000) COMMENT 'Trade name',
	PORTAL_IDS VARCHAR(2000) COMMENT 'Portal id exp- PortalIds_#118048 ',
	BEGIN_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor begin date',
	END_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor end date',
	ADVISOR_BIRTH_DATE DATE COMMENT 'Advisor month and year of birth',
	RDV_RR_IAS_CERTS_MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version for RDV Sat_REGISTERED_REPRESENTATIVE_IAS_CERTS',
	REP_EMAIL VARCHAR(1000) COMMENT 'Advisor repemail',
	CBM VARCHAR(1000) COMMENT 'Advisor cbm',
	BRANCH_ADDRESS1 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS1',
	BRANCH_ADDRESS2 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS2',
	BRANCH_CITY VARCHAR(1000) COMMENT 'Advisor branch city',
	BRANCH_POSTAL_CODE VARCHAR(1000) COMMENT 'Advisor branch postal code'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.WT_SAT_CONTRACT_AUA_SEG_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	ACCOUNT_AUA_SEGMENT VARCHAR(1000) COMMENT 'Represents the segmentation of advisors based on their AUA',
	ACCOUNT_AUA_SEGMENT_ORDER NUMBER(38,0) COMMENT 'Order of the AUA segmentation, this field is done for Power BI display'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.WT_SAT_CONTRACT_COMPUTE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PLAN_CODE VARCHAR(8000),
	PLAN_LABEL VARCHAR(8000),
	ACCOUNT_TYPE VARCHAR(16777216),
	GROUP_TYPE_CODE VARCHAR(8000),
	ACCUMULATION_TYPE VARCHAR(8000),
	ACCOUNT_IND NUMBER(1,0) COMMENT 'Account Flag, Total Number of Client Accounts',
	CASH_EQLT_PROFILE_PCT VARCHAR(3) COMMENT 'Cash or Equivalent Profile %',
	INCOME_PROFILE_PCT VARCHAR(3) COMMENT 'Income Profile %',
	GROWTH_PROFILE_PCT VARCHAR(3) COMMENT 'Growth Profile %',
	SPECULATION_PROFILE_PCT VARCHAR(3) COMMENT 'Speculation Profile %',
	UNKNOWN_PROFILE_PCT VARCHAR(3) COMMENT 'Unknown Profile %',
	LOW_RISK_PCT VARCHAR(3) COMMENT 'Low Risk %',
	MEDIUM_RISK_PCT VARCHAR(3) COMMENT 'Medium Risk %',
	HIGH_RISK_PCT VARCHAR(3) COMMENT 'High Risk %',
	UNKNOWN_RISK_PCT VARCHAR(3) COMMENT 'Unknown Risk %',
	NBIN_CLIENT_ID VARCHAR(50) COMMENT 'NBIN Clients Id.'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.WT_SAT_INVESTMENT_PRODUCT_TYPE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	SYMBOL VARCHAR(512),
	NAME VARCHAR(1000),
	ASSET_CATEGORY VARCHAR(512),
	CATEGORY VARCHAR(512),
	PRODUCT_GROUP VARCHAR(512),
	ISSUER_COMPANY_CODE VARCHAR(512),
	ISSUER_COMPANY_NAME VARCHAR(1000)
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.WT_SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	SYMBOL VARCHAR(1000) COMMENT 'Product Symbol',
	NAME VARCHAR(1000) COMMENT 'Product name',
	ASSET_CATEGORY VARCHAR(1000) COMMENT 'Category of the Product exp: common stock, debentures etc',
	CATEGORY VARCHAR(1000) COMMENT 'Catogory of the product',
	PRODUCT_GROUP VARCHAR(1000) COMMENT 'Group of the product',
	ISSUER_COMPANY_CODE VARCHAR(1000) COMMENT 'Issuer Company code',
	ISSUER_COMPANY_NAME VARCHAR(1000) COMMENT 'Issuer Company Name'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.WT_SAT_INVESTMENT_PRODUCT_TYPE_MERGE (
	HK_HUB VARCHAR(7000) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(7000) DEFAULT '0' COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	SYMBOL VARCHAR(1000),
	NAME VARCHAR(1000),
	ISSUER_COMPANY_NAME VARCHAR(1000)
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_AUA_SEG_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CLIENT_AUA_SEGMENT VARCHAR(1000) COMMENT 'Represents the segmentation of clients based on their AUA',
	CLIENT_AUA_SEGMENT_ORDER NUMBER(38,0) COMMENT 'Order of the AUA segmentation, this field is done for Power BI display'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	INCOME_AMT NUMBER(38,2) COMMENT 'Client income',
	INCOME_LEVEL_1_SEGMENT VARCHAR(50) COMMENT 'Client level 1 income Segment : $30k - $50k',
	INCOME_LEVEL_1_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client level 1 income Segment ORDER',
	INCOME_LEVEL_2_SEGMENT VARCHAR(50) COMMENT 'Client level 2 income Segment : Lower Income',
	INCOME_LEVEL_2_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client level 2 income Segment ORDER',
	CLIENT_AUA_SEGMENT VARCHAR(50) COMMENT 'Client AUA Segment : 25k-100k',
	CLIENT_AUA_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client AUA Segment ORDER',
	AGE_SEGMENT VARCHAR(50) COMMENT 'Client Age Segment : 25-34',
	AGE_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client Age Segment ORDER',
	NEW_CLIENT_IND VARCHAR(16777216) COMMENT 'New client indicator',
	CLIENT_START_DT TIMESTAMP_NTZ(9) COMMENT 'Client Start Date',
	CLIENT_INV_KNOWLEDGE_LVL VARCHAR(10) COMMENT 'Clients Account Investment Knowledge',
	CLIENT_NAME VARCHAR(2000) COMMENT 'Client name',
	CLIENT_AGE NUMBER(38,0) COMMENT 'Client Age'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.WT_SAT_PARTY_ROLE_ADVISOR_AUA_SEG_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	ADVISOR_AUA_SEGMENT VARCHAR(1000) COMMENT 'Represents the segmentation of advisors based on their AUA',
	ADVISOR_AUA_SEGMENT_ORDER NUMBER(38,0) COMMENT 'Order of the AUA segmentation, this field is done for Power BI display',
	SUSPENDED_IND NUMBER(1,0) COMMENT 'suspended Flag, if an advisor is deleted in certs but still have AUA, will be considered as suspended'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.WT_SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID',
	PLAN_CODE VARCHAR(8000) COMMENT 'The plan code',
	PLAN_LABEL VARCHAR(8000) COMMENT 'The plan label',
	ACCOUNT_TYPE VARCHAR(16777216) COMMENT 'The account type',
	GROUP_TYPE_CODE VARCHAR(8000) COMMENT 'The group type code',
	ACCUMULATION_TYPE VARCHAR(8000) COMMENT 'The accumulation type',
	ASC_1_RESP_PLAN_TYPES VARCHAR(100) COMMENT 'subtype of the RESP plans'
);
create or replace view DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.VW_CLIENT_CONTRACT(
	HK_HUB_CONTRACT,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	A_C_CLIENT,
	MD_START_DT,
	MD_ACTIVE
) as 
SELECT  DISTINCT 
HC.HK_HUB AS HK_HUB_CONTRACT
,SHA1(UPPER(CONCAT(COALESCE(TRIM(HC.MD_SRC_SYSTEM), '#NULL#'), '|' , COALESCE(TRIM(SC.A_C_CLIENT), '#NULL#')))) AS HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
,A_C_CLIENT
,SC.MD_START_DT 
,SC.MD_ACTIVE 
FROM SHARED_RDV.HUB_CONTRACT HC 
INNER JOIN SHARED_RDV.SAT_CONTRACT_IAS_NBIN SC 
	ON HC.HK_HUB = SC.HK_HUB 
WHERE 
	A_C_CLIENT NOT  RLIKE '^[A-Z][A-Z].*' 
	AND A_C_CLIENT IS NOT NULL;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.VW_EXCHANGE_RATE(
	HK_LINK,
	MD_START_DT,
	MD_CREATION_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_CREATION_AUDIT_ID,
	MD_EXTRACT_DT,
	EXCHANGE_DATE,
	EXCHANGERATE,
	REVNO
) as
SELECT 
SHA1(UPPER(CONCAT(COALESCE(TRIM('IAS'), '#NULL#'), '|' , COALESCE(TRIM(TO_VARCHAR(EXCHANGE_DATE)), '#NULL#')))) AS HK_LINK,
NVL(MD_START_DT, LAG(MD_START_DT) IGNORE NULLS OVER (ORDER BY EXCHANGE_DATE)) AS MD_START_DT, 
NVL(MD_CREATION_DT, LAG(MD_CREATION_DT) IGNORE NULLS OVER (ORDER BY EXCHANGE_DATE)) AS MD_CREATION_DT,
NVL(MD_SOURCE, LAG(MD_SOURCE) IGNORE NULLS OVER (ORDER BY EXCHANGE_DATE)) AS MD_SOURCE,
NVL(MD_SRC_SYSTEM, LAG(MD_SRC_SYSTEM) IGNORE NULLS OVER (ORDER BY EXCHANGE_DATE)) AS MD_SRC_SYSTEM,
NVL(MD_CREATION_AUDIT_ID, LAG(MD_CREATION_AUDIT_ID) IGNORE NULLS OVER (ORDER BY EXCHANGE_DATE)) AS MD_CREATION_AUDIT_ID,
NVL(MD_EXTRACT_DT, LAG(MD_EXTRACT_DT) IGNORE NULLS OVER (ORDER BY EXCHANGE_DATE)) AS MD_EXTRACT_DT, 
EXCHANGE_DATE,
NVL(EXCHANGERATE, LAG(EXCHANGERATE) IGNORE NULLS OVER (ORDER BY EXCHANGE_DATE)) AS EXCHANGERATE, 
NVL(REVNO, LAG(REVNO) IGNORE NULLS OVER (ORDER BY EXCHANGE_DATE)) AS REVNO
FROM
(SELECT D.""DATE"" AS EXCHANGE_DATE,E.EXCHANGERATE,HK_LINK, MD_START_DT, MD_CREATION_DT, MD_SOURCE, MD_SRC_SYSTEM, MD_CREATION_AUDIT_ID, MD_EXTRACT_DT, REVNO
FROM STEWARDSHIP_RDV.REF_DATE D
LEFT OUTER JOIN SHARED_RDV.TRANSLINK_EXCHANGE_RATE E 
ON D.""DATE""=E.EXCHANGE_DATE 
WHERE D.""DATE"" BETWEEN (SELECT MIN(EXCHANGE_DATE) FROM SHARED_RDV.TRANSLINK_EXCHANGE_RATE) AND (SELECT MAX(EXCHANGE_DATE) FROM SHARED_RDV.TRANSLINK_EXCHANGE_RATE)
ORDER BY D.""DATE"") E;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.VW_IAS_RRCODE_MASTERCODE_TRANS(
	A_C_REPRESENTATIVE,
	COMMISSIONPCT,
	TOREPID,
	MASTER_CODE,
	PHYSICAL,
	COM_TYPE,
	IS_RESHARED,
	MD_START_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT
) as
/* Advisors from commission portal : All active users of the portal */
WITH ADV AS 
(
	SELECT DISTINCT TRIM(RM.MAINREPCODE) AS MAINREPCODE, RM.FIRSTNAME, RM.LASTNAME
	FROM SHARED_BDV.WT_REGISTERED_REPRESENTATIVE rm 
	WHERE rm.ACTIVE = 1 
	ORDER BY MAINREPCODE, RM.FIRSTNAME, RM.LASTNAME 
),
/* Only active shares of commissions */
LV_SHARE AS 
(
	SELECT * FROM SHARED_BDV.WT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE_MC R
	WHERE SHARETYPE <> 'noreference' AND SHARETYPE <> 'option' AND (FROMREPID <> 'SBEP' OR SHARETYPE <> 'override')
),
/* Case 1 : RR code share with a master code of an advisor */
FROM_RR_TO_MAIN AS
(
	SELECT DISTINCT TRIM(s.FROMREPID) AS FROMREPID, s.COMMISSIONPCT, TRIM(s.TOREPID) AS TOREPID, 
	TRIM(ADV_to.MAINREPCODE) AS MASTER_CODE, 1 AS PHYSICAL, 'FROM_RR_TO_MAIN' AS COM_TYPE, 0 AS IS_RESHARED, s.MD_START_DT ,s.MD_SOURCE ,s.MD_EXTRACT_DT
	FROM LV_SHARE s 
	LEFT JOIN ADV ADV_to
	ON TRIM(s.TOREPID) = TRIM(ADV_to.MAINREPCODE)
	WHERE ADV_to.MAINREPCODE IS NOT NULL AND s.COMMISSIONPCT > 0
	ORDER BY FROMREPID
),
/* Case 2 : RR code share with RR code that has a master code */
FROM_RR_TO_RR_TO_MAIN AS
(
	SELECT DISTINCT TRIM(s.FROMREPID) AS FROMREPID, s.COMMISSIONPCT, TRIM(s.TOREPID) AS TOREPID, 
  TRIM(rr.MAINREPCODE) AS MASTER_CODE, 1 AS PHYSICAL, 'FROM_RR_TO_RR_TO_MAIN' AS COM_TYPE, 0 AS IS_RESHARED, s.MD_START_DT,s.MD_SOURCE ,s.MD_EXTRACT_DT
	FROM LV_SHARE s 
	LEFT JOIN FROM_RR_TO_MAIN
	ON FROM_RR_TO_MAIN.FROMREPID = TRIM(s.FROMREPID) AND FROM_RR_TO_MAIN.TOREPID = TRIM(s.TOREPID) 	
	LEFT JOIN SHARED_BDV.WT_REGISTERED_REPRESENTATIVE rr 
	ON TRIM(rr.RR_CD) = TRIM(s.TOREPID) AND rr.ACTIVE=1 AND TRIM(rr.RR_CD) = TRIM(rr.MAINREPCODE)
	WHERE FROM_RR_TO_MAIN.FROMREPID IS NULL AND s.COMMISSIONPCT > 0 AND rr.MAINREPCODE IS NOT NULL
	ORDER BY FROMREPID
),
/* RR code share with an RR code that is not linked to a main rep code */
OTHER AS
(
	SELECT DISTINCT TRIM(s.FROMREPID) AS FROMREPID, s.COMMISSIONPCT, TRIM(s.TOREPID) AS TOREPID, 
  TRIM(s.TOREPID) AS MASTER_CODE, 0 AS PHYSICAL, 'OTHER' AS COM_TYPE, 0 AS IS_RESHARED, s.MD_START_DT,s.MD_SOURCE ,s.MD_EXTRACT_DT
	FROM LV_SHARE s 
	LEFT JOIN FROM_RR_TO_MAIN
	ON FROM_RR_TO_MAIN.FROMREPID = TRIM(s.FROMREPID) AND FROM_RR_TO_MAIN.TOREPID = TRIM(s.TOREPID) 
	LEFT JOIN FROM_RR_TO_RR_TO_MAIN
	ON FROM_RR_TO_RR_TO_MAIN.FROMREPID = TRIM(s.FROMREPID) AND FROM_RR_TO_RR_TO_MAIN.TOREPID = TRIM(s.TOREPID)
	WHERE s.COMMISSIONPCT > 0 AND FROM_RR_TO_MAIN.FROMREPID IS NULL AND  FROM_RR_TO_RR_TO_MAIN.FROMREPID IS NULL 
	ORDER BY FROMREPID
),
AV_ALL AS
(
	SELECT T.A_C_REPRESENTATIVE, T.COMMISSIONPCT, T.TOREPID, T.MASTER_CODE, T.PHYSICAL, T.COM_TYPE, T.IS_RESHARED, T.MD_START_DT, T.MD_SOURCE,'IAS' AS MD_SRC_SYSTEM ,T.MD_EXTRACT_DT
 	FROM 
	(
		SELECT FROMREPID AS A_C_REPRESENTATIVE, COMMISSIONPCT, TOREPID, MASTER_CODE, PHYSICAL, COM_TYPE, IS_RESHARED,MD_START_DT,MD_SOURCE,MD_EXTRACT_DT
		FROM FROM_RR_TO_MAIN
		WHERE MASTER_CODE IS NOT NULL
		
		UNION ALL
		
		SELECT FROMREPID AS A_C_REPRESENTATIVE, COMMISSIONPCT, TOREPID, MASTER_CODE, PHYSICAL, COM_TYPE, IS_RESHARED,MD_START_DT,MD_SOURCE,MD_EXTRACT_DT
		FROM FROM_RR_TO_RR_TO_MAIN
		WHERE MASTER_CODE IS NOT NULL
		
		UNION ALL
		
		SELECT FROMREPID AS A_C_REPRESENTATIVE, COMMISSIONPCT, TOREPID, MASTER_CODE, PHYSICAL, COM_TYPE, IS_RESHARED,MD_START_DT,MD_SOURCE,MD_EXTRACT_DT
		FROM OTHER
		WHERE MASTER_CODE IS NOT NULL
	) AS T
)
SELECT *
FROM AV_ALL
ORDER BY A_C_REPRESENTATIVE;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.VW_INITIAL_LOADING_SAT_LINK_COMMISSION_SHARE_MULTIIMAGE(
	HK_LINK,
	MD_START_DT,
	MD_HASHDIFF,
	MD_ACTIVE,
	PREVIOUS_HASHDIFF,
	PREVIOUS_ACTIVE,
	ROW_SRC
) as
WITH STG AS 
(
	SELECT DISTINCT r.HK_LINK, r.MD_START_DT, r.MD_HASHDIFF, r.MD_ACTIVE , 'STG' AS ROW_SRC
	FROM SHARED_BDV.VW_INITIAL_LOADING_WT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE r	
),
SAT AS
(
	SELECT 	DISTINCT r.HK_LINK, 
			LAST_VALUE(r.MD_START_DT) over (partition by r.HK_LINK order by r.MD_START_DT asc) AS MD_START_DT,
			LAST_VALUE(r.MD_HASHDIFF) over (partition by r.HK_LINK order by r.MD_START_DT asc) AS MD_HASHDIFF,
			LAST_VALUE(r.MD_ACTIVE) over (partition by r.HK_LINK order by r.MD_START_DT asc) AS MD_ACTIVE,
			'SAT' AS ROW_SRC
	FROM SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE r
	WHERE MD_SRC_SYSTEM = 'IAS'
),
SRC AS
(
	SELECT 	r.HK_LINK, 
			r.MD_START_DT, 
			r.MD_HASHDIFF, 
			r.MD_ACTIVE,
			lag(r.MD_HASHDIFF, 1, '0') over (partition by r.HK_LINK order by r.MD_START_DT,MD_ACTIVE asc) AS PREVIOUS_HASHDIFF,
			lag(r.MD_ACTIVE, 1, '0') over (partition by r.HK_LINK order by r.MD_START_DT,MD_ACTIVE asc) AS PREVIOUS_ACTIVE,
			r.ROW_SRC
	FROM 
	(
		SELECT * FROM SAT
		UNION  
		SELECT * FROM STG
	) AS r
),
RSLT AS
(
  SELECT * 
  FROM SRC r
  WHERE r.MD_HASHDIFF <> r.PREVIOUS_HASHDIFF OR r.MD_ACTIVE <> r.PREVIOUS_ACTIVE
)
SELECT RSLT.* 
FROM RSLT
LEFT JOIN SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE S ON RSLT.HK_LINK = S.HK_LINK AND RSLT.MD_START_DT = S.MD_START_DT
WHERE S.HK_LINK IS NULL;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.VW_INITIAL_LOADING_WT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE(
	HK_LINK,
	HK_HUB_REGISTERED_REPRESENTATIVE,
	HK_HUB_PARTY_ROLE_ADVISOR,
	MD_HASHDIFF,
	MD_START_DT,
	MD_ACTIVE,
	MD_SRC_SYSTEM,
	MD_SOURCE,
	MD_CREATION_DT,
	MD_EXTRACT_DT,
	A_C_REPRESENTATIVE,
	MASTER_CODE,
	COM_TYPE,
	COMMISSIONPCT,
	IS_RESHARED,
	PHYSICAL,
	TOREPID
) as
WITH ADV AS 
(
	SELECT DISTINCT TRIM(MAINREPCODE) AS MAINREPCODE, FIRSTNAME, LASTNAME
	FROM SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE h
	INNER JOIN SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_COMMISSION s 
	ON s.HK_HUB = h.HK_HUB 
	WHERE ACTIVE = 1 
	QUALIFY ROW_NUMBER() OVER (PARTITION BY S.HK_HUB, S.HK_SAT ORDER BY S.MD_START_DT ASC) = 1
	ORDER BY MAINREPCODE, FIRSTNAME, LASTNAME 	
),

/* Only active shares of commissions */
LV_SHARE AS 
(
	SELECT * FROM SHARED_RDV.LINK_COMMISSION_SHARE_RR l
	INNER JOIN SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR s 
	ON s.HK_LINK = l.HK_LINK 
	WHERE SHARETYPE <> 'noreference' AND SHARETYPE <> 'option' AND (FROMREPID <> 'SBEP' OR SHARETYPE <> 'override')
),

/* Case 1 : RR code share with a master code of an advisor */
FROM_RR_TO_MAIN AS
(
	SELECT DISTINCT TRIM(s.FROMREPID) AS FROMREPID, s.COMMISSIONPCT, TRIM(s.TOREPID) AS TOREPID, 
	TRIM(ADV_to.MAINREPCODE) AS MASTER_CODE, 1 AS PHYSICAL, 'FROM_RR_TO_MAIN' AS COM_TYPE, 0 AS IS_RESHARED, s.MD_START_DT, s.MD_ACTIVE
	FROM LV_SHARE s 
	LEFT JOIN ADV ADV_to
	ON TRIM(s.TOREPID) = TRIM(ADV_to.MAINREPCODE)
	WHERE ADV_to.MAINREPCODE IS NOT NULL AND s.COMMISSIONPCT > 0
	ORDER BY FROMREPID
),

/* Case 2 : RR code share with RR code that has a master code */
FROM_RR_TO_RR_TO_MAIN AS
(
	SELECT DISTINCT TRIM(s.FROMREPID) AS FROMREPID, s.COMMISSIONPCT, TRIM(s.TOREPID) AS TOREPID, 
  	TRIM(rr.MAINREPCODE) AS MASTER_CODE, 1 AS PHYSICAL, 'FROM_RR_TO_RR_TO_MAIN' AS COM_TYPE, 0 AS IS_RESHARED, s.MD_START_DT, s.MD_ACTIVE
	FROM LV_SHARE s 
	LEFT JOIN FROM_RR_TO_MAIN
	ON FROM_RR_TO_MAIN.FROMREPID = TRIM(s.FROMREPID) AND FROM_RR_TO_MAIN.TOREPID = TRIM(s.TOREPID) 	
	LEFT JOIN 
		(SELECT MAINREPCODE, h.RR_CD AS REPID, ACTIVE FROM SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_COMMISSION s
		INNER JOIN SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE h ON s.HK_HUB = h.HK_HUB
		QUALIFY ROW_NUMBER() OVER (PARTITION BY S.HK_HUB, S.HK_SAT ORDER BY S.MD_START_DT ASC) = 1
		) rr 
	ON TRIM(rr.REPID) = TRIM(s.TOREPID) AND rr.ACTIVE=1 AND TRIM(rr.REPID) = TRIM(rr.MAINREPCODE)
	WHERE FROM_RR_TO_MAIN.FROMREPID IS NULL AND s.COMMISSIONPCT > 0 AND rr.MAINREPCODE IS NOT NULL
	ORDER BY FROMREPID
),

/* RR code share with an RR code that is not linked to a main rep code */
OTHER AS
(
	SELECT DISTINCT TRIM(s.FROMREPID) AS FROMREPID, s.COMMISSIONPCT, TRIM(s.TOREPID) AS TOREPID, 
  	TRIM(s.TOREPID) AS MASTER_CODE, 0 AS PHYSICAL, 'OTHER' AS COM_TYPE, 0 AS IS_RESHARED, s.MD_START_DT, s.MD_ACTIVE
	FROM LV_SHARE s 
	LEFT JOIN FROM_RR_TO_MAIN
	ON FROM_RR_TO_MAIN.FROMREPID = TRIM(s.FROMREPID) AND FROM_RR_TO_MAIN.TOREPID = TRIM(s.TOREPID) 
	LEFT JOIN FROM_RR_TO_RR_TO_MAIN
	ON FROM_RR_TO_RR_TO_MAIN.FROMREPID = TRIM(s.FROMREPID) AND FROM_RR_TO_RR_TO_MAIN.TOREPID = TRIM(s.TOREPID)
	WHERE s.COMMISSIONPCT > 0 AND FROM_RR_TO_MAIN.FROMREPID IS NULL AND  FROM_RR_TO_RR_TO_MAIN.FROMREPID IS NULL 
	ORDER BY FROMREPID
),

AV_ALL AS
(
	SELECT T.A_C_REPRESENTATIVE, T.COMMISSIONPCT, T.TOREPID, T.MASTER_CODE, T.PHYSICAL, T.COM_TYPE, T.IS_RESHARED, T.MD_START_DT, T.MD_ACTIVE
	FROM 
	(
		SELECT FROMREPID AS A_C_REPRESENTATIVE, COMMISSIONPCT, TOREPID, MASTER_CODE, PHYSICAL, COM_TYPE, IS_RESHARED, MD_START_DT, MD_ACTIVE
		FROM FROM_RR_TO_MAIN
		WHERE MASTER_CODE IS NOT NULL
		
		UNION ALL
		
		SELECT FROMREPID AS A_C_REPRESENTATIVE, COMMISSIONPCT, TOREPID, MASTER_CODE, PHYSICAL, COM_TYPE, IS_RESHARED, MD_START_DT, MD_ACTIVE
		FROM FROM_RR_TO_RR_TO_MAIN
		WHERE MASTER_CODE IS NOT NULL
		
		UNION ALL
		
		SELECT FROMREPID AS A_C_REPRESENTATIVE, COMMISSIONPCT, TOREPID, MASTER_CODE, PHYSICAL, COM_TYPE, IS_RESHARED, MD_START_DT, MD_ACTIVE
		FROM OTHER
		WHERE MASTER_CODE IS NOT NULL
	) AS T
)

SELECT 
SHA1(CONCAT(COALESCE('IAS','#NULL#'),'|', COALESCE(A_C_REPRESENTATIVE, '#NULL#'), '|' , COALESCE(TOREPID,'#NULL#'))) AS HK_LINK,
SHA1(CONCAT(COALESCE('IAS','#NULL#'),'|', COALESCE(A_C_REPRESENTATIVE, '#NULL#'))) AS HK_HUB_REGISTERED_REPRESENTATIVE,
SHA1(CONCAT(COALESCE('IAS','#NULL#'),'|', COALESCE(MASTER_CODE, '#NULL#'))) AS HK_HUB_PARTY_ROLE_ADVISOR,
SHA1(CONCAT(COALESCE(COM_TYPE, '#NULL#'), '|' , COALESCE(TO_VARCHAR(COMMISSIONPCT),'#NULL#'), '|', COALESCE(TO_VARCHAR(IS_RESHARED),'#NULL#'),'|', COALESCE(TO_VARCHAR(PHYSICAL),'#NULL#'),'|',COALESCE(TOREPID, '#NULL#'))) AS MD_HASHDIFF,
MD_START_DT,
MD_ACTIVE,
'IAS' AS MD_SRC_SYSTEM,
'SHAREHIST' AS MD_SOURCE,
SYSTIMESTAMP() AS MD_CREATION_DT,
TO_DATE(SYSTIMESTAMP()) AS MD_EXTRACT_DT,
A_C_REPRESENTATIVE,
MASTER_CODE,
COM_TYPE,
COMMISSIONPCT,
IS_RESHARED,
PHYSICAL,
TOREPID
FROM AV_ALL
ORDER BY A_C_REPRESENTATIVE;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.VW_INVESTMENT_PRODUCT_TYPE_COMPUTE(
	HK_HUB,
	MD_HASHDIFF,
	MD_SOURCE,
	MD_START_DT,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_EXTRACT_DT,
	MD_SRC_SYSTEM,
	SYMBOL,
	PRODUCT_NAME,
	ASSET_CATEGORY,
	CATEGORY,
	PRODUCT_GROUP,
	ISSUER_COMPANY_CODE,
	ISSUER_COMPANY_NAME
) as 
SELECT DISTINCT 
HK_HUB,
MD_HASHDIFF ,
MD_SOURCE ,
MD_START_DT ,
MD_CREATION_DT ,
MD_CREATION_AUDIT_ID ,
MD_EXTRACT_DT ,
MD_SRC_SYSTEM,
SYMBOL,
CASE WHEN  NB_SYM   >1 THEN ""SOURCE Name"" ELSE MERGED_Name END AS Product_Name,
ASSET_CATEGORY,      
CATEGORY,
PRODUCT_GROUP,
ISSUER_COMPANY_CODE,
ISSUER_COMPANY_NAME
FROM (
SELECT 
DMP.HK_HUB,
DMP.MD_HASHDIFF ,
DMP.MD_SOURCE ,
DMP.MD_SRC_SYSTEM,
DMP.MD_START_DT ,
DMP.MD_CREATION_DT ,
DMP.MD_CREATION_AUDIT_ID ,
DMP.MD_EXTRACT_DT ,
DMP.SYMBOL,
upper(P_MERGE.""NAME"") AS MERGED_Name,
upper(DMP.NAME) AS ""SOURCE Name"",
COUNT(DMP.SYMBOL) OVER (PARTITION BY DMP.SYMBOL,DMP.MD_SRC_SYSTEM) AS NB_SYM,
DMP.ASSET_CATEGORY,      
DMP.CATEGORY,
DMP.PRODUCT_GROUP,
DMP.ISSUER_COMPANY_CODE,
P_MERGE.ISSUER_COMPANY_NAME 
FROM DB_IAW_PROD_DWH.SHARED_BDV.WT_SAT_INVESTMENT_PRODUCT_TYPE DMP 
LEFT JOIN DB_IAW_PROD_DWH.SHARED_BDV.WT_SAT_INVESTMENT_PRODUCT_TYPE_MERGE P_MERGE
ON DMP.SYMBOL = P_MERGE.SYMBOL
---WHERE DMP.SYMBOL  IN  ('MGS2359')
) FINAL_TAB
---WHERE SYMBOL IN  ('MGS2359') 
ORDER BY SYMBOL;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.VW_ORGANIC_GROWTH_EXCEPTION_SHR(
	A_C_REPRESENTATIVE,
	TOREPID,
	MASTER_CODE,
	PHYSICAL,
	COM_TYPE,
	IS_RESHARED,
	MD_START_DT,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	COMMISIONPCT,
	OGE_SHR_COMM_PCT,
	OGE_MD_SOURCE,
	START_DATE,
	END_DATE,
	SHR_MD_SOURCE,
	LAST_START_DATE,
	LAST_END_DATE,
	LAST_MD_SOURCE
) as
SELECT 
A_C_REPRESENTATIVE,TOREPID,MASTER_CODE,PHYSICAL,COM_TYPE,IS_RESHARED,MD_START_DT,MD_SRC_SYSTEM,MD_EXTRACT_DT,SHR_COMM_PCT AS COMMISIONPCT, OGE_SHR_COMM_PCT, OGE_MD_SOURCE,START_DATE, END_DATE, SHR_MD_SOURCE,
LAST_START_DATE, LAST_END_DATE, LAST_MD_SOURCE
FROM (
WITH OGException
AS
(
SELECT    h.SOURCE_MASTER_CODE, 
          h.DESTINATION_MASTER_CODE, 
		  h.START_DATE, 
          s.SHARE_PCT , 
          s.END_DATE, 
          s.MD_SOURCE 
FROM      DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_ORGANIC_GROWTH_EXCEPTIONS h 
INNER JOIN DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_ORGANIC_GROWTH_EXCEPTIONS_IAPW s 
ON h.HK_HUB = s.HK_HUB 
WHERE s.MD_ACTIVE = 'A'
),
OGRepCodeExists AS
(
SELECT    h.SOURCE_MASTER_CODE, MAX(h.START_DATE) AS LAST_START_DATE, MAX(s.END_DATE) AS LAST_END_DATE, MAX(s.MD_SOURCE) as LAST_MD_SOURCE
FROM      DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_ORGANIC_GROWTH_EXCEPTIONS h 
INNER JOIN DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_ORGANIC_GROWTH_EXCEPTIONS_IAPW s 
ON h.HK_HUB = s.HK_HUB 
WHERE s.MD_ACTIVE = 'A'
GROUP BY h.SOURCE_MASTER_CODE
)
SELECT DISTINCT
       rr.A_C_REPRESENTATIVE, 
       rr.TOREPID, 
       rr.MASTER_CODE, 
       rr.PHYSICAL,COM_TYPE, 
       rr.IS_RESHARED, 
       rr.MD_START_DT, 
       rr.MD_SRC_SYSTEM, 
       rr.MD_EXTRACT_DT,
       rr.COMMISSIONPCT AS SHR_COMM_PCT,
       OGException.SHARE_PCT AS OGE_SHR_COMM_PCT,
       OGException.MD_SOURCE AS OGE_MD_SOURCE,
       OGException.START_DATE,
       OGException.END_DATE,
       rr.MD_SOURCE AS SHR_MD_SOURCE,
       OGRepCodeExists.LAST_START_DATE,
       OGRepCodeExists.LAST_END_DATE,
	   OGRepCodeExists.LAST_MD_SOURCE
FROM   DB_IAW_PROD_DWH.SHARED_BDV.VW_IAS_RRCODE_MASTERCODE_TRANS rr
LEFT JOIN OGException
	ON   OGException.SOURCE_MASTER_CODE  = rr.A_C_REPRESENTATIVE
	AND  OGException.DESTINATION_MASTER_CODE  = rr.MASTER_CODE 
	--AND  '2022-07-11' BETWEEN OGException.START_DATE AND OGException.END_DATE
LEFT JOIN OGRepCodeExists
	ON   OGRepCodeExists.SOURCE_MASTER_CODE  = rr.A_C_REPRESENTATIVE 
	--AND  '2022-07-11' BETWEEN OGRepCodeExists.START_DATE AND OGRepCodeExists.END_DATE
WHERE rr.MD_SRC_SYSTEM = 'IAS'
--AND   rr.A_C_REPRESENTATIVE IN  ('SCJH','SBNY','ST3K') 
UNION ALL 
SELECT SOURCE_MASTER_CODE,DESTINATION_MASTER_CODE,  REPID,PHYSICAL,COM_TYPE,IS_RESHARED,MD_START_DT,MD_SRC_SYSTEM,MD_EXTRACT_DT,COMMISIONPCT,
       OGE_SHR_COMM_PCT,OG_MD_SOURCE,START_DATE,END_DATE,SHR_MD_SOURCE,LAST_START_DATE,LAST_END_DATE,LAST_MD_SOURCE
FROM (
WITH OGRepCodeExists AS
(
SELECT    h.SOURCE_MASTER_CODE, MAX(h.START_DATE) AS LAST_START_DATE, MAX(s.END_DATE) AS LAST_END_DATE, MAX(s.MD_SOURCE) as LAST_MD_SOURCE
FROM      DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_ORGANIC_GROWTH_EXCEPTIONS h 
INNER JOIN DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_ORGANIC_GROWTH_EXCEPTIONS_IAPW s 
ON h.HK_HUB = s.HK_HUB 
WHERE s.MD_ACTIVE = 'A'
GROUP BY h.SOURCE_MASTER_CODE
)
SELECT oex.SOURCE_MASTER_CODE,oex.DESTINATION_MASTER_CODE,oex.DESTINATION_MASTER_CODE AS REPID,NULL AS PHYSICAL, NULL AS COM_TYPE, NULL AS IS_RESHARED, NULL AS MD_START_DT, 'IAS'AS MD_SRC_SYSTEM,  NULL AS MD_EXTRACT_DT,
NULL AS COMMISIONPCT,  oex.SHARE_PCT AS  OGE_SHR_COMM_PCT, oex.OG_MD_SOURCE, oex.START_DATE,oex.END_DATE, NULL AS SHR_MD_SOURCE, OGRepCodeExists.LAST_START_DATE, OGRepCodeExists.LAST_END_DATE, OGRepCodeExists.LAST_MD_SOURCE
FROM DB_IAW_PROD_DWH.STEWARDSHIP_RDV.VW_ORGANIC_GROWTH_EXCLUSIONS_IAPW oex
LEFT JOIN OGRepCodeExists
	ON   OGRepCodeExists.SOURCE_MASTER_CODE  = oex.SOURCE_MASTER_CODE 
WHERE oex.MD_ACTIVE = 'A' )
ORDER BY 1 
);
create or replace view DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.VW_PARTY_ROLE_ACCOUNT_HOLDER_CLEAN(
	HK_HUB,
	MD_START_DT,
	MD_SOURCE,
	CLIENT_ANNUAL_GROSS_INC_CLEAN,
	MD_HASHDIFF,
	CLIENT_INV_KNOWLEDGE_LVL,
	CLIENT_NAME,
	CLIENT_AGE,
	MD_ACTIVE
) as 
SELECT c.HK_HUB,
	   c.MD_START_DT,
	   c.MD_SOURCE,
	CASE 
		WHEN c.CLIENT_TAX_RECIP_TYPE IN (3,4) 											    THEN NULL
		WHEN c.CLIENT_ANNUAL_GROSS_INC LIKE '%K%' 										    THEN TRY_TO_NUMBER(regexp_replace(c.CLIENT_ANNUAL_GROSS_INC,'[^0-9]',''))
		WHEN c.CLIENT_ANNUAL_GROSS_INC LIKE '%M%' 										    THEN TRY_TO_NUMBER(regexp_replace(c.CLIENT_ANNUAL_GROSS_INC,'[^0-9]','')) * 1000
		WHEN TRY_TO_NUMBER(regexp_replace(c.CLIENT_ANNUAL_GROSS_INC,'[^0-9]','')) = 0 		THEN NULL
		WHEN TRY_TO_NUMBER(regexp_replace(c.CLIENT_ANNUAL_GROSS_INC,'[^0-9]','')) < 1000 	THEN TRY_TO_NUMBER(regexp_replace(c.CLIENT_ANNUAL_GROSS_INC,'[^0-9]',''))
		WHEN TRY_TO_NUMBER(regexp_replace(c.CLIENT_ANNUAL_GROSS_INC,'[^0-9]','')) >= 1000 	THEN TRY_TO_NUMBER(regexp_replace(c.CLIENT_ANNUAL_GROSS_INC,'[^0-9]',''))*0.001
		ELSE NULL 
	END AS CLIENT_ANNUAL_GROSS_INC_CLEAN,
	SHA2(CONCAT(COALESCE(TO_VARCHAR(CLIENT_ANNUAL_GROSS_INC_CLEAN), 'NULL')) , 256) AS MD_HASHDIFF,
	CASE 
	WHEN c.CLIENT_INV_KNOWLEDGE_LVL = '1' THEN 'Excellent'
	WHEN c.CLIENT_INV_KNOWLEDGE_LVL = '2' THEN 'Good'
	WHEN c.CLIENT_INV_KNOWLEDGE_LVL = '3' THEN 'Fair'
	ELSE 'Blank' 
	END AS CLIENT_INV_KNOWLEDGE_LVL,
	CASE 
	WHEN c.CLIENT_TAX_RECIP_TYPE='1' THEN INITCAP(CASE WHEN trim(ifnull(c.A_C_FIRST_NAME,'') || (case when c.A_C_MIDDLE_NAME is NOT null then concat(' ',c.A_C_MIDDLE_NAME,' ') else ' ' end) || ifnull(c.A_C_LAST_NAME,'')) ='' THEN NULL ELSE 
	trim(ifnull(c.A_C_FIRST_NAME,'') || (case when c.A_C_MIDDLE_NAME is NOT null then concat(' ',c.A_C_MIDDLE_NAME,' ') else ' ' end) || ifnull(c.A_C_LAST_NAME,'')) end)
	WHEN c.CLIENT_TAX_RECIP_TYPE='2' THEN (case when (c.A_C_FIRST_NAME is null  and c.A_C_MIDDLE_NAME is null and c.A_C_LAST_NAME is NULL AND c.CLIENT_FIRST_NAME is null and c.CLIENT_LAST_NAME is NULL) THEN NULL
	WHEN (c.A_C_FIRST_NAME is null  and c.A_C_MIDDLE_NAME is null and c.A_C_LAST_NAME is NULL AND (c.CLIENT_FIRST_NAME IS NOT NULL OR c.CLIENT_LAST_NAME IS NOT null))
	then INITCAP(TRIM((ifnull(c.CLIENT_FIRST_NAME,'') || ' ' || ifnull(c.CLIENT_LAST_NAME,''))))
	when (c.CLIENT_FIRST_NAME is null and c.CLIENT_LAST_NAME is null and (c.A_C_FIRST_NAME is not null or c.A_C_MIDDLE_NAME is not null or c.A_C_LAST_NAME IS NOT null)) then 
	INITCAP(trim((ifnull(c.A_C_FIRST_NAME,'') || (case when c.A_C_MIDDLE_NAME is NOT null then concat(' ',c.A_C_MIDDLE_NAME,' ') else ' ' end) ||ifnull(c.A_C_LAST_NAME,''))))
	else
	INITCAP(trim((ifnull(c.A_C_FIRST_NAME,'') || (case when c.A_C_MIDDLE_NAME is NOT null then concat(' ',c.A_C_MIDDLE_NAME,' ') else ' ' end) ||ifnull(c.A_C_LAST_NAME,'')))) || ' and ' ||
	INITCAP(trim(ifnull(c.CLIENT_FIRST_NAME,'') || ' ' || ifnull(c.CLIENT_LAST_NAME,''))) END)
	WHEN c.CLIENT_TAX_RECIP_TYPE IN ('3','4','5','6','7','0') THEN INITCAP(c.A_C_NAME) ELSE null end as CLIENT_NAME,
	FLOOR(DATEDIFF('day',(CASE WHEN c.CLIENT_BIRTH_DATE IS NULL THEN c.MD_START_DT ELSE c.CLIENT_BIRTH_DATE END),c.MD_START_DT)/365.25) AS CLIENT_AGE,
	c.MD_ACTIVE
		FROM DB_IAW_PROD_DWH.SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_IAS_NBIN c;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.VW_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH(
	HK_HUB_PARTY_ROLE_ADVISOR,
	MASTER_CODE,
	BEGIN_DT,
	MD_START_DT,
	MD_ACTIVE,
	MD_ACTIVE_CERTS,
	CERTS_REGION_VP,
	ADVISOR_FULLNAME,
	BRN_CD,
	BRN_NAME,
	REP_LNAME,
	REP_FNAME,
	PRIMARY_ROLE,
	ADVISOR_BIRTH_DATE,
	REP_EMAIL,
	CBM,
	BRANCH_NRD,
	BRANCH_ADDRESS1,
	BRANCH_ADDRESS2,
	BRANCH_CITY,
	BRANCH_POSTAL_CODE,
	CERTS_PROVINCE_CODE,
	CERTS_PROVINCE_NAME
) as
SELECT DISTINCT SH.HK_HUB_PARTY_ROLE_ADVISOR,
    SH.MASTER_CODE,
    COALESCE(cert.BEGIN_DT, WTRRCOMM.STARTDATE, '9999-12-31') AS BEGIN_DT,
    COALESCE(
        RR.MD_START_DT,
        RC.MD_START_DT,
        URR.MD_START_DT,
        WTRRCOMM.MD_START_DT,
        sat.MD_START_DT
    ) AS MD_START_DT,
    --added by SV
    COALESCE(
        RR.MD_ACTIVE,
        RC.MD_ACTIVE,
        URR.MD_ACTIVE,
        WTRRCOMM.MD_ACTIVE,
        sat.MD_ACTIVE
    ) AS MD_ACTIVE,
    --added by SV
    COALESCE(cert.MD_ACTIVE, ICAR.MD_ACTIVE) AS MD_ACTIVE_CERTS,
/*    COALESCE(
        NULLIF(DECODE(TRIM(cert.RVP),'#N/A','non affiliated to RVPs',TRIM(cert.RVP)),''), 	-- CERTS 
        NULLIF(DECODE(TRIM(cert.RVP), NULL,'non affiliated to RVPs',TRIM(cert.RVP)),''),  	-- CERTS
        NULLIF(DECODE(URR.RGN_MGR, 'All', NULL, URR.RGN_MGR), ''), 							-- URR --> WT_REGISTERED_REPRESENTATIVE -- COMMISSION LEFT JOINED WITH IA_UNIVERIS (SAT_UNIVERIS_RGN_MGR)
        NULLIF(DECODE(TRIM(ICAR.FULL_NAME),'#N/A','non affiliated to RVPs',TRIM(ICAR.FULL_NAME)),''),'non affiliated to RVPs' -- WT_REGISTERED_REPRESENTATIVE_IAS_CERTS --> CERTS 
        THE ICAR IS A CERTS SOURCE JOINED DIFFRENTLY BASED ON First Name and Last Name of the Registered Representative     
        IT HAS BEEN REMOVED FROM THE LOGIC BECAUSE SOME NAMES WILL SHOW UP AND ARE NOT RVPS.
    ) AS ""Region VP""
    , */
    DECODE(TRIM(cert.RVP),'',null,'#N/A',null,TRIM(cert.RVP)) AS CERTS_REGION_VP,	-- RELATED TO B82765		-- CERTS 
    COALESCE(
        NULLIF(regexp_replace(RR.REPNAME, '\\(.*\\)', ''), ''),
        NULLIF(regexp_replace(RC.REPNAME, '\\(.*\\)', ''), ''),
        NULLIF(regexp_replace(URR.REP_LNAME, '\\(.*\\)', ''), '') || ', ' || NULLIF(regexp_replace(URR.REP_FNAME, '\\(.*\\)', ''), ''),
        ''
    ) || ' (' || sh.MASTER_CODE || ')' AS ADVISOR_FULLNAME,
    URR.BRN_CD,
    URR.BRN_NAME,
    URR.REP_LNAME,
    URR.REP_FNAME,
    CASE
        WHEN substring(UPPER(SH.MASTER_CODE), 1, 4) in ('PART', 'CORP') THEN 'Corporation'
        WHEN substring(UPPER(SH.MASTER_CODE), 1, 2) = 'IM' THEN 'Corporation'
        WHEN SH.MASTER_CODE in ('SNAG', 'RAAW', 'BFE2H', 'SGDM') THEN 'Corporation'
        ELSE cert.PRIMARY_ROLE
    END AS PRIMARY_ROLE,
    cert.ADVISOR_BIRTH_DATE as ADVISOR_BIRTH_DATE,
	cert.REP_EMAIL as REP_EMAIL,
	cert.CBM as CBM,
    cert.BRANCH_NRD as BRANCH_NRD,
	cert.BRANCH_ADDRESS1 as BRANCH_ADDRESS1,
	cert.BRANCH_ADDRESS2 as BRANCH_ADDRESS2,
	cert.BRANCH_CITY as BRANCH_CITY,
	cert.BRANCH_POSTAL_CODE as BRANCH_POSTAL_CODE,
    CASE
        WHEN cert.PROVINCE = 'Alberta' THEN 'AB'
        WHEN cert.PROVINCE = 'British Columbia' THEN 'BC'
        WHEN cert.PROVINCE = 'Manitoba' THEN 'MB'
        WHEN cert.PROVINCE = 'New Brunswick' THEN 'NB'
        WHEN cert.PROVINCE = 'Newfoundland' THEN 'NF'
        WHEN cert.PROVINCE = 'Nova Scotia' THEN 'NS'
        WHEN cert.PROVINCE = 'Northwest Territories' THEN 'NT'
        WHEN cert.PROVINCE = 'Nunavut' THEN 'NU'
        WHEN cert.PROVINCE = 'Ontario' THEN 'ON'
        WHEN cert.PROVINCE = 'Prince Edward Island' THEN 'PE'
        WHEN cert.PROVINCE = 'Quebec' THEN 'QC'
        WHEN cert.PROVINCE = 'Saskatchewan' THEN 'SK'
        WHEN cert.PROVINCE = 'Yukon Territory' THEN 'YT'
        ELSE 'N/A'
    END AS CERTS_PROVINCE_CODE,																							-- RELATED TO B77731
    decode(cert.PROVINCE,'Newfoundland','Newfoundland and Labrador',null,'N/A',cert.PROVINCE) as CERTS_PROVINCE_NAME	-- RELATED TO B77731
FROM
    SHARED_BDV.LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE sh
    INNER JOIN SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE sat ON sh.HK_LINK = sat.HK_LINK
    LEFT JOIN (SELECT * FROM SHARED_BDV.WT_REGISTERED_REPRESENTATIVE_IAS_CERTS QUALIFY ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY RDV_RR_IAS_CERTS_MD_START_DT DESC, MD_ACTIVE ASC)=1 ) cert 
	ON sh.MASTER_CODE = cert.RR_CD
	LEFT JOIN SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE c ON c.RR_CD = sh.MASTER_CODE
    AND c.MD_SRC_SYSTEM IN ('IAS-COMMISSION', 'IAS_CERTS', 'IAS-UNIVERIS')
    LEFT JOIN SHARED_BDV.WT_REGISTERED_REPRESENTATIVE RR ON c.HK_HUB = RR.HK_HUB
    AND RR.MAINREPCODE = c.RR_CD
    AND rr.ACTIVE = 1
    LEFT JOIN SHARED_BDV.WT_REGISTERED_REPRESENTATIVE RC ON c.HK_HUB = RC.HK_HUB
    AND RC.ACTIVE = 0
    -- GET UNIVERIS DATA
    LEFT JOIN SHARED_BDV.WT_REGISTERED_REPRESENTATIVE URR ON c.HK_HUB = URR.HK_HUB
    LEFT JOIN SHARED_BDV.WT_REGISTERED_REPRESENTATIVE_IAS_CERTS ICAR ON (
        CONTAINS(UPPER(ICAR.FIRST_NAME), UPPER(TRIM(RR.FIRSTNAME)))
        AND CONTAINS(UPPER(ICAR.LAST_NAME), UPPER(TRIM(RR.LASTNAME)))
    )
    OR CONTAINS(UPPER(ICAR.FULL_NAME), UPPER(TRIM(RR.REPNAME)))
    OR (
        CONTAINS(
            UPPER(ICAR.FULL_NAME),
            UPPER(TRIM(SPLIT_PART(RR.REPNAME, ',', 1)))
        )
        AND CONTAINS(
            UPPER(ICAR.FULL_NAME),
            UPPER(TRIM(SPLIT_PART(RR.REPNAME, ',', 2)))
        )
    )
    LEFT JOIN SHARED_BDV.WT_REGISTERED_REPRESENTATIVE WTRRCOMM ON WTRRCOMM.MAINREPCODE = c.RR_CD
    AND c.HK_HUB = WTRRCOMM.HK_HUB
    AND WTRRCOMM.ACTIVE = 0
WHERE
    sh.MD_SRC_SYSTEM IN ('IAS', 'IAS-COMMISSION')
GROUP BY
    SH.HK_HUB_PARTY_ROLE_ADVISOR,
    SH.MASTER_CODE,
    COALESCE(cert.BEGIN_DT, WTRRCOMM.STARTDATE, '9999-12-31'),
    COALESCE(
        RR.MD_START_DT,
        RC.MD_START_DT,
        URR.MD_START_DT,
        WTRRCOMM.MD_START_DT,
        sat.MD_START_DT
    ),
    COALESCE(
        RR.MD_ACTIVE,
        RC.MD_ACTIVE,
        URR.MD_ACTIVE,
        WTRRCOMM.MD_ACTIVE,
        sat.MD_ACTIVE
    ),
    COALESCE(cert.MD_ACTIVE, ICAR.MD_ACTIVE),
    CERTS_REGION_VP,			-- RELATED TO B82765: Changed from ""Region VP"" to CERTS_REGION_VP
    ADVISOR_FULLNAME,			-- RELATED TO B82765: Changed from ""Advisor fullname"" to ADVISOR_FULLNAME
    URR.BRN_CD,
    URR.BRN_NAME,
    URR.REP_LNAME,
    URR.REP_FNAME,
    cert.PRIMARY_ROLE,
    cert.ADVISOR_BIRTH_DATE,
    cert.REP_EMAIL,
	cert.CBM,
    cert.BRANCH_NRD,
	cert.BRANCH_ADDRESS1,
	cert.BRANCH_ADDRESS2,
	cert.BRANCH_CITY,
	cert.BRANCH_POSTAL_CODE,
    CERTS_PROVINCE_CODE,		-- RELATED TO B77731
    CERTS_PROVINCE_NAME			-- RELATED TO B77731
;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.VW_SAT_CONTRACT_COMPUTE(
	HK_HUB,
	MD_START_DT,
	MD_HASH_NAT_KEYS,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	CONTRACT_ID,
	PLAN_MNEMONIC_CD,
	PLAN_MNEMONIC_LBL,
	OPEN_DATE,
	CLOSE_DATE,
	GROUP_TYPE_CD,
	ADMINISTRATOR_TYPE,
	MD_ACTIVE,
	PLAN_CODE,
	PLAN_LABEL,
	ACCOUNT_TYPE,
	GROUP_TYPE_CODE,
	ACCUMULATION_TYPE,
	ACCOUNT_IND,
	CASH_EQLT_PROFILE_PCT,
	INCOME_PROFILE_PCT,
	GROWTH_PROFILE_PCT,
	SPECULATION_PROFILE_PCT,
	UNKNOWN_PROFILE_PCT,
	LOW_RISK_PCT,
	MEDIUM_RISK_PCT,
	HIGH_RISK_PCT,
	UNKNOWN_RISK_PCT,
	NBIN_CLIENT_ID
) as 

/*********************** NBIN ************************/

WITH latest_rapcode_plan AS 
(
SELECT PLAN_LABEL, ACCOUNT_TYPE, GROUP_TYPE_CODE,ACCUMULATION_TYPE, ACCOUNT_RAP_CODE, RETAIL_PLAN, ASC_1_RESP_PLAN_TYPES, md_active, s.MD_START_DT 
FROM STEWARDSHIP_RDV.REF_RAPCODE_PLAN  r 
INNER JOIN STEWARDSHIP_RDV.SAT_REF_RAPCODE_PLAN_IAS s ON r.HK_HUB = s.HK_HUB 
)                           
SELECT s.HK_HUB,
s.MD_START_DT,
s.HK_HUB as MD_HASH_NAT_KEYS,
s.MD_SOURCE,
s.MD_SRC_SYSTEM,
s.MD_EXTRACT_DT,
h.CONTRACT_ID,
lp.GROUP_TYPE_CODE as PLAN_MNEMONIC_CD,
lp.PLAN_LABEL as PLAN_MNEMONIC_LBL,
s.A_C_OPEN_DATE as OPEN_DATE,
s.A_C_CLOSING_DATE as  CLOSE_DATE,
lp.GROUP_TYPE_CODE as GROUP_TYPE_CD,
s.ADMINISTRATOR_TYPE,
s.MD_ACTIVE, 
CASE WHEN s.ACCOUNT_RAP_CODE='Z' AND lp.ASC_1_RESP_Plan_Types IS NULL THEN CONCAT(IFNULL(s.ACCOUNT_RAP_CODE,''),'_',IFNULL(s.RETAIL_PLAN,''), '_', '0') WHEN s.ACCOUNT_RAP_CODE='Z' AND lp.ASC_1_RESP_Plan_Types IS NOT NULL THEN  CONCAT(IFNULL(s.ACCOUNT_RAP_CODE,''),'_',IFNULL(s.RETAIL_PLAN,''), '_', IFNULL(lp.ASC_1_RESP_Plan_Types, ''))  else CONCAT(IFNULL(s.ACCOUNT_RAP_CODE,''),'_',IFNULL(s.RETAIL_PLAN,'')) END AS PLAN_CODE,
IFNULL(lp.PLAN_LABEL, 'N/A')                                                            AS PLAN_LABEL,
CASE WHEN IFNULL(lp.ACCOUNT_TYPE, 'N/A') = 'Non-Registered'
THEN 'Non registered' ELSE IFNULL(lp.ACCOUNT_TYPE, 'N/A') END                                                               AS ACCOUNT_TYPE,
IFNULL(lp.GROUP_TYPE_CODE, 'N/A')                                                       AS GROUP_TYPE_CODE,
lp.ACCUMULATION_TYPE                                                                    AS ACCUMULATION_TYPE,
CASE WHEN s.A_C_CLOSING_DATE = '0001-01-01' and substring(h.CONTRACT_ID,1,2) not rlike '[A-Z][A-Z]' 
          and substring(h.CONTRACT_ID,1,4) <> '379A' and substring(h.CONTRACT_ID,1,3) <> '7XZ'
          and substring(h.CONTRACT_ID,7,1) <> 'J' THEN 1
ELSE 0 END AS ACCOUNT_IND,
-- IVT Obj Cde
DECODE ( COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(IVT_OBJ_CDE), 'M[[:digit:]]+'),2,2)) ,0), 99, 100,
          COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(IVT_OBJ_CDE), 'M[[:digit:]]+'),2,2)) ,0) ) AS CASH_EQLT_PROFILE_PCT,
DECODE ( COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(IVT_OBJ_CDE), 'B[[:digit:]]+'),2,2)) ,0), 99, 100,
          COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(IVT_OBJ_CDE), 'B[[:digit:]]+'),2,2)) ,0) ) AS INCOME_PROFILE_PCT,
DECODE ( COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(IVT_OBJ_CDE), 'G[[:digit:]]+'),2,2)) ,0), 99, 100,
          COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(IVT_OBJ_CDE), 'G[[:digit:]]+'),2,2)) ,0) ) AS GROWTH_PROFILE_PCT,
DECODE ( COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(IVT_OBJ_CDE), 'S[[:digit:]]+'),2,2)) ,0), 99, 100,
          COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(IVT_OBJ_CDE), 'S[[:digit:]]+'),2,2)) ,0) ) AS SPECULATION_PROFILE_PCT,
DECODE (
       COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,1 ) ,0) + 
	   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,2 ) ,0)  + 
	   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,3 ) ,0)  +
   	   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,4 ) ,0)  +
   	   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,5 ) ,0) 
	   , 99, 100,
		   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,1 ) ,0) + 
		   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,2 ) ,0)  + 
		   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,3 ) ,0)  +
		   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,4 ) ,0)  +
		   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,5 ) ,0) 
	   ) as UNKNOWN_PROFILE_PCT,
-- Risk Tolerance --
DECODE ( COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(RISK_TOLERANCE), 'L[[:digit:]]+'),2,2)) ,0) , 99, 100,
			COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(RISK_TOLERANCE), 'L[[:digit:]]+'),2,2)) ,0) ) as LOW_RISK_PCT,
DECODE ( COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(RISK_TOLERANCE), 'M[[:digit:]]+'),2,2)) ,0) , 99, 100,
			COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(RISK_TOLERANCE), 'M[[:digit:]]+'),2,2)) ,0) ) as MEDIUM_RISK_PCT,
DECODE ( COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(RISK_TOLERANCE), 'H[[:digit:]]+'),2,2)) ,0) , 99, 100,
			COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(RISK_TOLERANCE), 'H[[:digit:]]+'),2,2)) ,0) ) as HIGH_RISK_PCT,
DECODE (			
	       COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,1 ) ,0) + 
		   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,2 ) ,0)  + 
		   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,3 ) ,0)  +
	   	   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,4 ) ,0)  +
	   	   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,5 ) ,0) 
		, 99, 100,
			   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,1 ) ,0) + 
			   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,2 ) ,0)  + 
			   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,3 ) ,0)  +
			   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,4 ) ,0)  +
			   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,5 ) ,0) 
		) as UNKNOWN_RISK_PCT,
s.A_C_CLIENT AS NBIN_CLIENT_ID
FROM SHARED_RDV.HUB_CONTRACT h 
INNER JOIN SHARED_RDV.SAT_CONTRACT_IAS_NBIN s 
ON s.HK_HUB = h.HK_HUB      
LEFT JOIN latest_rapcode_plan lp
ON (s.ACCOUNT_RAP_CODE=lp.ACCOUNT_RAP_CODE AND lp.ACCOUNT_RAP_CODE NOT IN ('Z','P') ) 
OR (s.ACCOUNT_RAP_CODE=lp.ACCOUNT_RAP_CODE AND lp.ACCOUNT_RAP_CODE='Z' AND s.ASC_1_RESP_Plan_Types=lp.ASC_1_RESP_Plan_Types) 
OR (lp.ACCOUNT_RAP_CODE='P' AND s.ACCOUNT_RAP_CODE='P' AND lp.RETAIL_PLAN=s.RETAIL_PLAN)

UNION ALL

/*********************** IAS UNIVERIS ************************/
SELECT s.HK_HUB,
s.MD_START_DT,
s.HK_HUB as MD_HASH_NAT_KEYS,
s.MD_SOURCE,
s.MD_SRC_SYSTEM,
s.MD_EXTRACT_DT,
h.CONTRACT_ID,
IP.PLN_MNEM_ENG as PLAN_MNEMONIC_CD,
IP.PLN_DESC_ENG  as PLAN_MNEMONIC_LBL,
s.SETUP_DT as OPEN_DATE,
s.CLOSE_DT as  CLOSE_DATE,
IP.STMT_GROUP_MNEM as GROUP_TYPE_CD,
s.ADMINISTRATOR_TYPE,
s.MD_ACTIVE,
IP.PLN_MNEM_ENG                                                         AS PLAN_CODE,
IP.PLN_DESC_ENG                                                         AS PLAN_LABEL,
CASE WHEN IP.PLN_REG=0 THEN 'Non registered' 
     ELSE 'Registered' END                                          AS ACCOUNT_TYPE,
IP.STMT_GROUP_MNEM                                            AS GROUP_TYPE_CODE,
'N/A'                                                               AS ACCUMULATION_TYPE,
NULL AS ACCOUNT_IND,
NULL as CASH_EQLT_PROFILE_PCT
,NULL as INCOME_PROFILE_PCT
,NULL as GROWTH_PROFILE_PCT
,NULL as SPECULATION_PROFILE_PCT
,NULL as UNKNOWN_PROFILE_PCT
,NULL as LOW_RISK_PCT
,NULL as MEDIUM_RISK_PCT
,NULL as HIGH_RISK_PCT
,NULL as UNKNOWN_RISK_PCT
,NULL AS NBIN_CLIENT_ID
FROM SHARED_RDV.HUB_CONTRACT h 
INNER JOIN SHARED_RDV.SAT_CONTRACT_IAS_UNIVERIS s
ON s.HK_HUB = h.HK_HUB LEFT OUTER JOIN (
SELECT sref.* FROM SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_UNIVERIS sref
INNER JOIN SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES R
ON sref.HK_HUB = R.HK_HUB) IP 
ON s.PLN_CD =IP.PLN_CD  

UNION ALL

/*********************** INVESTIA UNIVERIS ************************/

SELECT s.HK_HUB,
s.MD_START_DT,
s.HK_HUB as MD_HASH_NAT_KEYS,
s.MD_SOURCE,
s.MD_SRC_SYSTEM,
s.MD_EXTRACT_DT,
h.CONTRACT_ID,
IP.PLN_MNEM_ENG as PLAN_MNEMONIC_CD,
IP.PLN_DESC_ENG  as PLAN_MNEMONIC_LBL,
s.SETUP_DT as OPEN_DATE,
s.CLOSE_DT as  CLOSE_DATE,
IP.STMT_GROUP_MNEM as GROUP_TYPE_CD,
s.ADMINISTRATOR_TYPE,
s.MD_ACTIVE,
IP.PLN_MNEM_ENG                                                         AS PLAN_CODE,
IP.PLN_DESC_ENG                                                         AS PLAN_LABEL,
CASE WHEN IP.PLN_REG=0 THEN 'Non registered' 
     ELSE 'Registered' END                                          AS ACCOUNT_TYPE,
IP.STMT_GROUP_MNEM                                            AS GROUP_TYPE_CODE,
'N/A'                                                               AS ACCUMULATION_TYPE,
NULL AS ACCOUNT_IND,
NULL as CASH_EQLT_PROFILE_PCT
,NULL as INCOME_PROFILE_PCT
,NULL as GROWTH_PROFILE_PCT
,NULL as SPECULATION_PROFILE_PCT
,NULL as UNKNOWN_PROFILE_PCT
,NULL as LOW_RISK_PCT
,NULL as MEDIUM_RISK_PCT
,NULL as HIGH_RISK_PCT
,NULL as UNKNOWN_RISK_PCT
,NULL AS NBIN_CLIENT_ID
FROM SHARED_RDV.HUB_CONTRACT h 
INNER JOIN SHARED_RDV.SAT_CONTRACT_INVESTIA_UNIVERIS s
ON s.HK_HUB = h.HK_HUB  LEFT OUTER JOIN (
SELECT sref.* FROM SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_INVESTIA_UNIVERIS sref
INNER JOIN SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES R
ON sref.HK_HUB = R.HK_HUB) IP 
ON s.PLN_CD =IP.PLN_CD;
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(""P_ATTRIBUTE"" VARCHAR(15), ""SUBSTRING_START_POSITION"" NUMBER(38,0), ""POSITION_OCCUR"" NUMBER(38,0))
RETURNS NUMBER(38,0)
LANGUAGE SQL
AS 'SELECT COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(P_ATTRIBUTE), ''[A|C|D|E|F|H|I|J|K|L|N|O|P|Q|R|T|U|V|W|X|Y|Z][[:digit:]]+'',SUBSTRING_START_POSITION,POSITION_OCCUR ),2,2)) ,0)';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.CLONE_INF_SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(""P_ATTRIBUTE"" VARCHAR(15), ""SUBSTRING_START_POSITION"" NUMBER(38,0), ""POSITION_OCCUR"" NUMBER(38,0))
RETURNS NUMBER(38,0)
LANGUAGE SQL
AS 'SELECT COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(P_ATTRIBUTE), ''[A|B|C|D|E|F|G|I|J|K|N|O|P|Q|R|S|T|U|V|W|X|Y|Z][[:digit:]]+'',SUBSTRING_START_POSITION,POSITION_OCCUR ),2,2)) ,0)';
create or replace schema DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV;

create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.HUB_ADVISOR_IAS_CERTS (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CID VARCHAR(500) COMMENT 'Source Account ID exp: #100002',
	RR_CD VARCHAR(2000) COMMENT 'Registered represtntative code'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.HUB_CONTRACT (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	UNIVERIS_CLIENT_ID NUMBER(38,0) COMMENT 'Univeris Client ID'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.HUB_INVESTMENT_PRODUCT_TYPE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product ID'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.HUB_PARTY_ROLE_ACCOUNT_HOLDER (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CLIENT_ID VARCHAR(100) COMMENT 'Client ID',
	SOURCE_SYSTEM VARCHAR(100) COMMENT 'Source system'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	RR_CD VARCHAR(2000) COMMENT 'registered representative code'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.LINK_COMMISSION_SHARE_RR (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Hub',
	HK_HUB_FROM VARCHAR(40) COMMENT 'Hash key for the Hub',
	HK_HUB_TO VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	FROMREPID VARCHAR(50) COMMENT 'RR code',
	TOREPID VARCHAR(50) COMMENT 'Master code',
	SHARETYPE VARCHAR(50) COMMENT 'Sharing Type (codeSet)',
	SOURCECODE VARCHAR(50) COMMENT 'Source Code / TRANSACTION_TYPE',
	PRODUCTCODE VARCHAR(50) COMMENT 'Product Code / SECURITY_GROUP_CODE'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for HUB_REGISTERED_REPRESENTATIVE',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	CLIENT_ID VARCHAR(100) COMMENT 'Client ID',
	RR_CD VARCHAR(50) COMMENT 'REGITERED REPRESENTATIVE CODE',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'RR code'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.REF_FUND (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	FUNDSERVID VARCHAR(1000) COMMENT 'FUND SERV ID'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.REF_HOLIDAYS_IAS_IAVM (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Reference',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	HOLIDAY_DATE DATE COMMENT 'Date of the holiday'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	PLN_MNEM VARCHAR(8000) COMMENT 'Plan code',
	A_C_ACCOUNT_CLASS VARCHAR(50) COMMENT 'Account class : 038, 040, ...',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	RETAIL_PLAN_RESP VARCHAR(10) COMMENT 'To be defined',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.REF_MAPPING_PRODUCT_TYPE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
	TI_ALTERNATE_TI_CLASS VARCHAR(50) COMMENT 'Financial product  class'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.REF_PROVINCE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	PROV_CD VARCHAR(10) COMMENT 'Province code : QC'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_ADVISOR_IAS_CERTS (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	FIRST_NAME VARCHAR(500) COMMENT 'Fist Name of the advisor',
	LAST_NAME VARCHAR(500) COMMENT 'Last Name of the advisor',
	FULL_NAME VARCHAR(1000) COMMENT 'Full Name of the advisor',
	PRIMARY_ROLE VARCHAR(500) COMMENT 'Primary role of the advisor',
	RVP VARCHAR(500) COMMENT 'Regional VP of the advisor',
	BRANCH_NRD VARCHAR(500) COMMENT 'Branch code of the advisor',
	BRANCH_NAME VARCHAR(500) COMMENT 'Branch Name of the advisor',
	PROVINCE VARCHAR(500) COMMENT 'Province of the advisor',
	IS_ACTIVE NUMBER(1,0) COMMENT 'Indicator to check the advisor is active or not',
	TRADE_NAME VARCHAR(2000) COMMENT 'Trade name ',
	PORTAL_IDS VARCHAR(2000) COMMENT 'Portal identifier exp: PortalIds_#118048',
	BEGIN_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor begin date',
	END_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor end date',
	ADVISOR_BIRTH_DATE DATE COMMENT 'Advisor month and year of birth',
	REP_EMAIL VARCHAR(1000) COMMENT 'Advisor repemail',
	CBM VARCHAR(1000) COMMENT 'Advisor cbm',
	BRANCH_ADDRESS1 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS1',
	BRANCH_ADDRESS2 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS2',
	BRANCH_CITY VARCHAR(1000) COMMENT 'Advisor branch city',
	BRANCH_POSTAL_CODE VARCHAR(1000) COMMENT 'Advisor branch postal code'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_CONTRACT_IAS_NBIN (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	A_C_CLIENT VARCHAR(20) COMMENT 'Client ID',
	A_C_REPRESENTATIVE VARCHAR(4) COMMENT 'Advisor RR code',
	ADMINISTRATOR_TYPE VARCHAR(100) COMMENT 'Nominee, Client name, ...',
	A_C_OPEN_DATE DATE COMMENT 'Account opening date',
	A_C_CLOSING_DATE DATE COMMENT 'Account closing date',
	A_C_ACCOUNT_CLASS VARCHAR(3) COMMENT 'Account class : 038, 040, ...',
	RETAIL_PLAN VARCHAR(4) COMMENT 'Retail plan code : RS, LF, ...',
	RETAIL_PLAN_RESP VARCHAR(1) COMMENT 'To be defined',
	ACCOUNT_RAP_CODE VARCHAR(1) COMMENT 'To be defined : Last letter of an account ID',
	ASC_3_MANAGED_TYPE VARCHAR(1) COMMENT 'To be defined : J, L, ...',
	A_C_SPECIAL_TAG VARCHAR(20) COMMENT 'Used to indicate relationship if multiple client names : JTWROS, JTIC, Trust, ...',
	ASC_1_RESP_PLAN_TYPES VARCHAR(1) COMMENT 'subtype of the RESP plans',
	A_C_CURRENCY VARCHAR(10) COMMENT 'Account Currency',
	IVT_OBJ_CDE VARCHAR(15) COMMENT 'Accounts Risk Profile (Cash, Income, Growth, Speculations - PCT)',
	RISK_TOLERANCE VARCHAR(15) COMMENT 'Accounts Risk Tolerance'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_CONTRACT_IAS_UNIVERIS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""\""A\""\"" row exists in the source, \""\""D\""\"" row does not exist in the source',
	PLN_CD VARCHAR(8000) COMMENT 'Univeris plan code : 01, 02,...',
	PLN_STATUS VARCHAR(8000) COMMENT 'Plan status : Active, inactive, closed,...',
	PLN_ADM_CD VARCHAR(8000) COMMENT 'Plan administrator code',
	SETUP_DT TIMESTAMP_NTZ(9) COMMENT 'Plan set up date',
	CLOSE_DT TIMESTAMP_NTZ(9) COMMENT 'Plan close date',
	PEN_JUR_CD VARCHAR(8000),
	FEE_EXMP_IND NUMBER(38,0) COMMENT 'Trustee Fee Exemption Indicator. (Values 1 = ON, 0 = OFF)',
	ADMINISTRATOR_TYPE VARCHAR(8000) COMMENT 'Administrator type (Client Name, Nominee, Intermediary)',
	REP_SYSID NUMBER(38,0) COMMENT 'RR code',
	REP_CD VARCHAR(50) COMMENT 'RR code'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_CONTRACT_INVESTIA_UNIVERIS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PLN_CD VARCHAR(8000) COMMENT 'Univeris plan code : 01, 02,...',
	PLN_STATUS VARCHAR(8000) COMMENT 'Plan status : Active, inactive, closed,...',
	PLN_ADM_CD VARCHAR(8000) COMMENT 'Plan administrator code',
	SETUP_DT TIMESTAMP_NTZ(9) COMMENT 'Plan set up date',
	CLOSE_DT TIMESTAMP_NTZ(9) COMMENT 'Plan close date',
	PEN_JUR_CD VARCHAR(8000),
	FEE_EXMP_IND NUMBER(38,0) COMMENT 'Trustee Fee Exemption Indicator. (Values 1 = ON, 0 = OFF)',
	ADMINISTRATOR_TYPE VARCHAR(8000) COMMENT 'Administrator type (Client Name, Nominee, Intermediary)',
	REP_SYSID NUMBER(38,0) COMMENT 'RR code',
	REP_CD VARCHAR(50) COMMENT 'RR code'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_NBIN (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
	TI_TYPE VARCHAR(10) COMMENT 'Financial product type',
	TI_ALTERNATE_TI_CLASS VARCHAR(50) COMMENT 'Financial product class ID',
	TI_CLASS VARCHAR(50) COMMENT 'Financial product class',
	TI_ALTERNATE_SHORT_DESC VARCHAR(100) COMMENT 'Financial product short decsription',
	ENGLISH_DESCRIPTION VARCHAR(512) COMMENT 'Financial product description',
	TI_SYMBOL VARCHAR(512) COMMENT 'TI Symbol'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_UNIVERIS (
	HK_HUB VARCHAR(100) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(100) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	CURRENCY_CD VARCHAR(3) COMMENT 'Currency iso code',
	SYMBOL VARCHAR(100) COMMENT 'Standard code in the industry of mutual funds',
	IVD_ST_DESC_ENG VARCHAR(100) COMMENT 'Product detail status description English (Red/Transfer/Switch,Inactive,Active,Soft Cap,etc.)',
	IVD_ST_DESC_FRE VARCHAR(100) COMMENT 'Product detail status description French (Rachat/Transfert/Échange,Inactif,Actif,FRE:Soft Cap,etc.)',
	IVD_LOAD_DESC_ENG VARCHAR(100) COMMENT 'Product load description (Deferred Sales Charge,No Load,Initial Sales Charge,etc)',
	IVD_LOAD_DESC_FRE VARCHAR(100) COMMENT 'Product load description (Frais de ventes reportés,Sans frais d acquisition,Frais prélevés à l acquisition,etc)',
	IVT_NAME_ENG VARCHAR(100) COMMENT 'Product name in English',
	IVT_NAME_FRE VARCHAR(100) COMMENT 'Product name in French',
	IVT_CD_DESC_ENG VARCHAR(100) COMMENT 'Fund type English (regular, asset allocation)',
	IVT_CD_DESC_FRE VARCHAR(100) COMMENT 'Fund type French (régulier, affectation de l actif)',
	IVT_ST_DESC_ENG VARCHAR(100) COMMENT 'Product status description English (Red/Transfer/Switch,Inactive,Active,Soft Cap,etc.)',
	IVT_ST_DESC_FRE VARCHAR(100) COMMENT 'Product status description French (Rachat/Transfert/Échange,Inactif,Actif,FRE:Soft Cap,etc.)',
	ASSET_CLASS_DESC_ENG VARCHAR(100) COMMENT 'Asset class description English (Canadian Equity, U.S. Money Market, etc)',
	ASSET_CLASS_DESC_FRE VARCHAR(100) COMMENT 'Asset class description French(Actions canadiennes, Marché monétaire américain, etc)',
	ASSET_CTGY_DESC_ENG VARCHAR(100) COMMENT 'Asset category description English(Canadian Fixed Income, US Equity, etc)',
	ASSET_CTGY_DESC_FRE VARCHAR(100) COMMENT 'Asset category description French(Revenu fixe canadien, Actions américaines, etc)',
	IVT_TYPE_DESC_ENG VARCHAR(100) COMMENT 'Product type description English(Mutual Fund, Hedge Fund, etc)',
	IVT_TYPE_DESC_FRE VARCHAR(100) COMMENT 'Product type description French (Fonds communs de placement, Fonds spéculatif, etc)',
	CTGY_DESC_ENG VARCHAR(100) COMMENT 'Product category description English(Mutual Fund, Hedge Fund, etc)',
	CTGY_DESC_FRE VARCHAR(100) COMMENT 'Product category description French (Fonds communs de placement, Fonds spéculatif, etc)',
	GROUP_DESC_ENG VARCHAR(100) COMMENT 'Product group description English(Funds, Bond, etc)',
	GROUP_DESC_FRE VARCHAR(100) COMMENT 'Product group description French(Fonds, Obligations, etc)',
	MGT_CD VARCHAR(100) COMMENT 'Management company code',
	MGT_NAME_ENG VARCHAR(100) COMMENT 'Management company name English',
	MGT_NAME_FRE VARCHAR(100) COMMENT 'Management company name French'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_INVESTIA_UNIVERIS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	CURRENCY_CD VARCHAR(3) COMMENT 'Currency iso code',
	SYMBOL VARCHAR(20) COMMENT 'Standard code in the industry of mutual funds',
	IVD_ST_DESC_ENG VARCHAR(40) COMMENT 'Product detail status description English (Red/Transfer/Switch,Inactive,Active,Soft Cap,etc.)',
	IVD_ST_DESC_FRE VARCHAR(40) COMMENT 'Product detail status description French (Rachat/Transfert/Échange,Inactif,Actif,FRE:Soft Cap,etc.)',
	IVD_LOAD_DESC_ENG VARCHAR(50) COMMENT 'Product load description (Deferred Sales Charge,No Load,Initial Sales Charge,etc)',
	IVD_LOAD_DESC_FRE VARCHAR(50) COMMENT 'Product load description (Frais de ventes reportés,Sans frais d acquisition,Frais prélevés à l acquisition,etc)',
	IVT_NAME_ENG VARCHAR(60) COMMENT 'Product name in English',
	IVT_NAME_FRE VARCHAR(60) COMMENT 'Product name in French',
	IVT_CD_DESC_ENG VARCHAR(50) COMMENT 'Fund type English (regular, asset allocation)',
	IVT_CD_DESC_FRE VARCHAR(50) COMMENT 'Fund type French (régulier, affectation de l actif)',
	IVT_ST_DESC_ENG VARCHAR(40) COMMENT 'Product status description English (Red/Transfer/Switch,Inactive,Active,Soft Cap,etc.)',
	IVT_ST_DESC_FRE VARCHAR(40) COMMENT 'Product status description French (Rachat/Transfert/Échange,Inactif,Actif,FRE:Soft Cap,etc.)',
	ASSET_CLASS_DESC_ENG VARCHAR(80) COMMENT 'Asset class description English (Canadian Equity, U.S. Money Market, etc)',
	ASSET_CLASS_DESC_FRE VARCHAR(80) COMMENT 'Asset class description French(Actions canadiennes, Marché monétaire américain, etc)',
	ASSET_CTGY_DESC_ENG VARCHAR(80) COMMENT 'Asset category description English(Canadian Fixed Income, US Equity, etc)',
	ASSET_CTGY_DESC_FRE VARCHAR(80) COMMENT 'Asset category description French(Revenu fixe canadien, Actions américaines, etc)',
	IVT_TYPE_DESC_ENG VARCHAR(40) COMMENT 'Product type description English(Mutual Fund, Hedge Fund, etc)',
	IVT_TYPE_DESC_FRE VARCHAR(40) COMMENT 'Product type description French (Fonds communs de placement, Fonds spéculatif, etc)',
	CTGY_DESC_ENG VARCHAR(50) COMMENT 'Product category description English(Mutual Fund, Hedge Fund, etc)',
	CTGY_DESC_FRE VARCHAR(50) COMMENT 'Product category description French (Fonds communs de placement, Fonds spéculatif, etc)',
	GROUP_DESC_ENG VARCHAR(20) COMMENT 'Product group description English(Funds, Bond, etc)',
	GROUP_DESC_FRE VARCHAR(20) COMMENT 'Product group description French(Fonds, Obligations, etc)',
	MGT_CD VARCHAR(4) COMMENT 'Management company code',
	MGT_NAME_ENG VARCHAR(60) COMMENT 'Management company name English',
	MGT_NAME_FRE VARCHAR(60) COMMENT 'Management company name French'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR (
	HK_LINK VARCHAR(64) COMMENT 'Hash of the business keys',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	REVENUEPCT NUMBER(6,3) COMMENT 'Dispatch of revenues (percentage)',
	COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
	NETCOMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Percentage',
	FEEPCT NUMBER(6,3) COMMENT 'Fee Sharing Percentage',
	REVNO NUMBER(38,0) COMMENT 'Revision number',
	STAMP TIMESTAMP_NTZ(9) COMMENT 'Source row timestamp',
	START_DT TIMESTAMP_NTZ(9) COMMENT 'Start date of the share',
	END_DT TIMESTAMP_NTZ(9) COMMENT 'End date of the share'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(64) COMMENT 'Hash of the business keys',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	REP_SYSID NUMBER(38,0) COMMENT 'Registered Representative ID',
	BEN_SYSID NUMBER(38,0) COMMENT 'Dealer ID',
	COMM_RATE NUMBER(29,12) COMMENT 'Commission Rate',
	BRN_SYSID NUMBER(38,0) COMMENT 'Branch ID',
	BRN_CD VARCHAR(10) COMMENT 'Branch code'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_IAS_NBIN (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_IAS_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""\""A\""\"" row exists in the source, \""\""D\""\"" row does not exist in the source'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_IAS_NBIN (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	SIN_HASH VARCHAR(64) COMMENT 'SIN Hash',
	CLIENT_BIRTH_DATE DATE COMMENT 'Client birth date',
	CLIENT_TAX_RECIP_TYPE VARCHAR(10) COMMENT 'Tax recipient type : 1 - Individual, 2 - Joint, 3 - Corporation, ...',
	CLIENT_RESIDENCE VARCHAR(50) COMMENT 'Client residence country',
	CLIENT_RESIDENCE_REGION VARCHAR(50) COMMENT 'Client residence province',
	CLIENT_ANNUAL_GROSS_INC VARCHAR(10) COMMENT 'Annual gross income',
	CLIENT_INIT_CONTRACT_DATE DATE COMMENT 'Initial contrat date',
	CLIENT_INV_KNOWLEDGE_LVL VARCHAR(1) COMMENT 'Clients Investment Knowledge Level',
	A_C_NAME VARCHAR(1000) COMMENT 'A_C_NAME',
	A_C_FIRST_NAME VARCHAR(1000) COMMENT 'A_C_FIRST_NAME',
	A_C_MIDDLE_NAME VARCHAR(1000) COMMENT 'A_C_MIDDLE_NAME',
	A_C_LAST_NAME VARCHAR(1000) COMMENT 'A_C_LAST_NAME',
	CLIENT_FIRST_NAME VARCHAR(1000) COMMENT 'CLIENT_FIRST_NAME',
	CLIENT_LAST_NAME VARCHAR(1000) COMMENT 'CLIENT_LAST_NAME'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_IAS_UNIVERIS (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""\""A\""\"" row exists in the source, \""\""D\""\"" row does not exist in the source',
	REP_SYSID NUMBER(38,0) COMMENT 'Rep SYSID, to reference with the Advisor data',
	RECIPIENT_DESC_ENG VARCHAR(30) COMMENT 'Investor type description English(Individual, Joint WROS, etc)',
	RECIPIENT_DESC_FRE VARCHAR(50) COMMENT 'Investor type description French(Individuel, CADDS, etc)',
	CORP_CD VARCHAR(30) COMMENT 'Wether it is corporate',
	IVR_ST_NAME_ENG VARCHAR(40) COMMENT 'Investor status description English(Active, Closed, etc)',
	IVR_ST_NAME_FRE VARCHAR(40) COMMENT 'Investor status description French (Actif, Fermé, etc)',
	IVR_REG_2 VARCHAR(80) COMMENT 'Investor Other/Corporate name',
	LANG_CD VARCHAR(1) COMMENT 'Investor language code for English or French reference on S_LANG',
	IVR_RES_CD VARCHAR(18) COMMENT 'Investor residence code—if Canadian name of the province',
	IVR_SETUP_DT TIMESTAMP_NTZ(9) COMMENT 'Date on which this record was set up',
	IVR_STOP_DT TIMESTAMP_NTZ(9) COMMENT 'Date of closing the account',
	IVR_FRGN_CTNT BOOLEAN COMMENT 'Check for foreign content',
	IVR_HOLD_MAIL BOOLEAN COMMENT 'Check for holding mail',
	IVR_INC_ADR BOOLEAN COMMENT 'Check for incomplete address',
	IVR_STMT_FREQ VARCHAR(1) COMMENT 'Statement frequency reference on S_FRENQUENCY',
	IVR_STMT_TYPE VARCHAR(2) COMMENT 'Statement type',
	IVR_STMT_DT TIMESTAMP_NTZ(9) COMMENT 'Statement date',
	IVR_OLD_DLR VARCHAR(5) COMMENT 'Previous dealer',
	SALARY_DESC VARCHAR(40) COMMENT 'Client income segment',
	IVR_KYC_DT TIMESTAMP_NTZ(9) COMMENT 'Date KYC information keyed in',
	IVR_PRIM_BDT DATE COMMENT 'Date of birth is not corporate',
	CREATE_DT DATE COMMENT 'Create Date'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_INVESTIA_UNIVERIS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	REP_SYSID NUMBER(38,0) COMMENT 'Rep SYSID, to reference with the Advisor data',
	RECIPIENT_DESC_ENG VARCHAR(30) COMMENT 'Investor type description English(Individual, Joint WROS, etc)',
	RECIPIENT_DESC_FRE VARCHAR(50) COMMENT 'Investor type description French(Individuel, CADDS, etc)',
	CORP_CD VARCHAR(30) COMMENT 'Wether it is corporate',
	IVR_ST_NAME_ENG VARCHAR(40) COMMENT 'Investor status description English(Active, Closed, etc)',
	IVR_ST_NAME_FRE VARCHAR(40) COMMENT 'Investor status description French (Actif, Fermé, etc)',
	IVR_REG_2 VARCHAR(80) COMMENT 'Investor Other/Corporate name',
	LANG_CD VARCHAR(1) COMMENT 'Investor language code for English or French reference on S_LANG',
	IVR_RES_CD VARCHAR(18) COMMENT 'Investor residence code—if Canadian name of the province',
	IVR_SETUP_DT TIMESTAMP_NTZ(9) COMMENT 'Date on which this record was set up',
	IVR_STOP_DT TIMESTAMP_NTZ(9) COMMENT 'Date of closing the account',
	IVR_FRGN_CTNT BOOLEAN COMMENT 'Check for foreign content',
	IVR_HOLD_MAIL BOOLEAN COMMENT 'Check for holding mail',
	IVR_INC_ADR BOOLEAN COMMENT 'Check for incomplete address',
	IVR_STMT_FREQ VARCHAR(1) COMMENT 'Statement frequency reference on S_FRENQUENCY',
	IVR_STMT_TYPE VARCHAR(2) COMMENT 'Statement type',
	IVR_STMT_DT TIMESTAMP_NTZ(9) COMMENT 'Statement date',
	IVR_OLD_DLR VARCHAR(5) COMMENT 'Previous dealer',
	SALARY_DESC VARCHAR(40) COMMENT 'Client income segment',
	IVR_KYC_DT TIMESTAMP_NTZ(9) COMMENT 'Date KYC information keyed in',
	IVR_PRIM_BDT DATE COMMENT 'Date of birth is not corporate',
	CREATE_DT DATE COMMENT 'Create Date'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_REF_FUND_IAS_FUNDATA (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	FUNDID VARCHAR(1000) COMMENT 'FUND Id',
	FUNDDESCFR VARCHAR(1000) COMMENT 'Fund description in French',
	FUNDDESCEN VARCHAR(1000) COMMENT 'Fund description in English',
	FUNDTYPE VARCHAR(1000) COMMENT 'Fund Type',
	GROUPNAMEFR VARCHAR(1000) COMMENT 'Manager Name in French',
	GROUPNAMEEN VARCHAR(1000) COMMENT 'Manager Name in English',
	RRSPELIGIBLE VARCHAR(1000) COMMENT 'RRSP Eligible indicator',
	FUNDDESCLONGFR VARCHAR(1000) COMMENT 'Fund long description in French',
	FUNDDESCLONGEN VARCHAR(1000) COMMENT 'Fund long description in English',
	LEGALNAMEEN VARCHAR(1000) COMMENT 'Legal name in French',
	LEGALNAMEFR VARCHAR(1000) COMMENT 'Legal name in English',
	STAMP VARCHAR(1000) COMMENT 'Last modification TimeStamp'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_REF_HOLIDAYS_IAS_IAVM (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Reference',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	DESCRIPTION VARCHAR(512) COMMENT 'Description of the holiday'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_NBIN (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_UNIVERIS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PLN_REG NUMBER(38,0) COMMENT 'Plan registration',
	PLN_CD VARCHAR(8000) COMMENT 'Plan mnemonic code',
	PLN_DESC VARCHAR(8000) COMMENT 'Plan mnemonic description',
	PLN_MNEM_F VARCHAR(8000) COMMENT 'plan mnemonic code FR',
	PLN_DESC_F VARCHAR(8000) COMMENT 'Plan mnemonic description FR',
	PLN_MNEM_ENG VARCHAR(8000) COMMENT 'Plan mnemonic code 2 EN',
	PLN_DESC_ENG VARCHAR(8000) COMMENT 'Plan mnemonic description 2 EN',
	PLN_SHORT_DESC_ENG VARCHAR(8000) COMMENT 'Plan short description EN',
	PLN_MNEM_FRE VARCHAR(8000) COMMENT 'Plan mnemonic code 2 FR',
	PLN_DESC_FRE VARCHAR(8000) COMMENT 'Plan mnemonic description 2 FR',
	PLN_SHORT_DESC_FRE VARCHAR(8000) COMMENT 'plan short description 2 FR',
	STMT_GROUP_MNEM VARCHAR(8000) COMMENT 'mnemonic code grouping'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_INVESTIA_UNIVERIS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PLN_REG NUMBER(38,0) COMMENT 'Plan registration',
	PLN_CD VARCHAR(255) COMMENT 'Plan mnemonic code',
	PLN_DESC VARCHAR(255) COMMENT 'Plan mnemonic description',
	PLN_MNEM_F VARCHAR(255) COMMENT 'plan mnemonic code FR',
	PLN_DESC_F VARCHAR(255) COMMENT 'Plan mnemonic description FR',
	PLN_MNEM_ENG VARCHAR(255) COMMENT 'Plan mnemonic code 2 EN',
	PLN_DESC_ENG VARCHAR(255) COMMENT 'Plan mnemonic description 2 EN',
	PLN_SHORT_DESC_ENG VARCHAR(255) COMMENT 'Plan short description EN',
	PLN_MNEM_FRE VARCHAR(255) COMMENT 'Plan mnemonic code 2 FR',
	PLN_DESC_FRE VARCHAR(255) COMMENT 'Plan mnemonic description 2 FR',
	PLN_SHORT_DESC_FRE VARCHAR(255) COMMENT 'plan short description 2 FR',
	STMT_GROUP_MNEM VARCHAR(255) COMMENT 'mnemonic code grouping'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_REF_MAPPING_PRODUCT_TYPE_IAS_IAVM (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	DESCRIPTIONEN VARCHAR(512) COMMENT 'Description in English',
	DESCRIPTIONFR VARCHAR(512) COMMENT 'Description in French',
	PRODUCTTYPE VARCHAR(100) COMMENT 'Type of Product'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_REF_PROVINCE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PROV_DESC VARCHAR(50) COMMENT 'Province code : QC'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_COMMISSION (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	HK_SAT VARCHAR(40) COMMENT 'Hash of the Satellite for the multi-active keys',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	REPNAME VARCHAR(512) COMMENT 'Representative name',
	FIRSTNAME VARCHAR(512) COMMENT 'Representative first name',
	LASTNAME VARCHAR(512) COMMENT 'Representative last name',
	BRANCHCODE VARCHAR(50) COMMENT 'Code of the representative branch code',
	BRANCHNAME VARCHAR(512) COMMENT 'Name of the representative branch',
	GROUPID NUMBER(38,0) COMMENT 'Representant Group ID',
	GROUPDESCRIPTION VARCHAR(512) COMMENT 'Advisor group description',
	FIXEDFEEIND NUMBER(38,0) COMMENT 'Fixed fees indicator',
	MANAGEDIND NUMBER(38,0) COMMENT 'Managed indicator',
	REFIND NUMBER(38,0) COMMENT 'Holding value currency',
	ACTIVEIND NUMBER(38,0) COMMENT 'Active RR code indicator',
	SEGFUNDIND NUMBER(38,0) COMMENT 'Segregated funds indicator',
	REVNO NUMBER(38,0) COMMENT 'Revision number',
	STAMP TIMESTAMP_NTZ(9) COMMENT 'Source row timestamp',
	USERID VARCHAR(512) COMMENT 'User id',
	ACTIVE NUMBER(38,0) COMMENT 'Active user indicator',
	ADVISOR_ID VARCHAR(512) COMMENT 'Advisor id',
	COMMRATEPCT NUMBER(6,3) COMMENT 'Default Commission Rate Percentage',
	SHAREGROSSCOMMIND NUMBER(38,0) COMMENT 'Indicator of share of gross commission',
	STARTDATE DATE COMMENT 'the starting date of the advisor',
	MAINREPCODE VARCHAR(50) COMMENT 'Main RR code',
	ADVISOR_ROLE VARCHAR(500) COMMENT 'Advisor role (e.g. isAdvisor, isAssistant and isBranchManager)'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_CERTS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	HK_SAT VARCHAR(40) COMMENT 'Hash of the Satellite for the multi-active keys',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	CID VARCHAR(500) COMMENT 'Source Account ID exp: #100002',
	FIRST_NAME VARCHAR(500) COMMENT 'First Name of the advisor',
	LAST_NAME VARCHAR(500) COMMENT 'last Name of the advisor',
	FULL_NAME VARCHAR(1000) COMMENT 'Full Name of the advisor',
	PRIMARY_ROLE VARCHAR(500) COMMENT 'Primary role of the advisor',
	RVP VARCHAR(500) COMMENT 'Regional RVP',
	BRANCH_NRD VARCHAR(500) COMMENT 'Branch code',
	BRANCH_NAME VARCHAR(500) COMMENT 'Name of the Branch of the advisor',
	PROVINCE VARCHAR(500) COMMENT 'Province of the advisor',
	IS_ACTIVE NUMBER(1,0) COMMENT 'Flag to identify the active advisor or not',
	TRADE_NAME VARCHAR(2000) COMMENT 'Trade name',
	PORTAL_IDS VARCHAR(2000) COMMENT 'Portal identifier exp: PortalIds_#118048',
	BEGIN_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor begin date',
	END_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor end date',
	ADVISOR_BIRTH_DATE DATE COMMENT 'Advisor month and year of birth',
	REP_EMAIL VARCHAR(1000) COMMENT 'Advisor repemail',
	CBM VARCHAR(1000) COMMENT 'Advisor cbm',
	BRANCH_ADDRESS1 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS1',
	BRANCH_ADDRESS2 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS2',
	BRANCH_CITY VARCHAR(1000) COMMENT 'Advisor branch city',
	BRANCH_POSTAL_CODE VARCHAR(1000) COMMENT 'Advisor branch postal code'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_IAVM (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	MEMBER VARCHAR(250) COMMENT 'Member: JSMITH',
	TEAMTYPE VARCHAR(7) COMMENT 'The type of team - Default constant',
	ACTIVE VARCHAR(12) COMMENT 'Active',
	USERTYPE VARCHAR(12) COMMENT 'Type of User : IA',
	TEAMID NUMBER(38,0) COMMENT 'The advisor team code',
	TEAMNAME VARCHAR(256) COMMENT 'The advisor team name: IA HOUSE',
	RVPID NUMBER(38,0) COMMENT 'VP Rep ID',
	RVPNAME VARCHAR(256) COMMENT 'VP Name',
	REPNAME VARCHAR(250) COMMENT 'Representative Name: SMITH JOHN',
	PROVINCE VARCHAR(12) COMMENT 'Province Code : ON'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_UNIVERIS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	COMPANY_CD VARCHAR(50) COMMENT 'Company code : Wealth',
	COMPANY_NAME VARCHAR(512) COMMENT 'Company name : iA Wealth Management',
	REGULATORY_ORG_CD VARCHAR(50) COMMENT 'Regulatory organisation code : MFDA or IIROC',
	REGULATORY_ORG_NAME VARCHAR(512) COMMENT 'Regulatory organisation name : Mutual Fund Dealers Association',
	DLR_SYSID NUMBER(38,0) COMMENT 'Univeris ID of the dealer',
	DLR_CD VARCHAR(50) COMMENT 'Dealer code : Univeris code for the dealer',
	DLR_NAME_ENG VARCHAR(512) COMMENT 'Dealer name in english : Fundex Investments inc.',
	RGN_SYSID NUMBER(38,0) COMMENT 'Univeris ID for the advisor region',
	RGN_CD VARCHAR(50) COMMENT 'Univeris code for the advisor region',
	RGN_NAME VARCHAR(512) COMMENT 'The advisor region name',
	RGN_MGR VARCHAR(512) COMMENT 'The name of the regional VP',
	BRN_SYSID NUMBER(38,0) COMMENT 'Univeris ID of the advisors branch',
	BRN_CD VARCHAR(50) COMMENT 'Univeris Code for the advisors branch',
	BRN_NAME VARCHAR(512) COMMENT 'The advisor branch name',
	REP_TEAM_CD VARCHAR(50) COMMENT 'The advisor team code',
	REP_TEAM_NAME VARCHAR(512) COMMENT 'The advisor team name',
	REP_SYSID NUMBER(38,0) COMMENT 'Univeris ID of the advisor rep code',
	NK_REP_CORP_NAME VARCHAR(512) COMMENT 'Corporation name of the advisor',
	REP_LNAME VARCHAR(512) COMMENT 'Advisor last name',
	REP_FNAME VARCHAR(512) COMMENT 'Advisor first name',
	REP_ST_NAME VARCHAR(512) COMMENT 'Advisor status : Active, Terminated,...',
	REP_GRP_RSP VARCHAR(512) COMMENT 'Advisor GRP RSP : 0,...'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_INVESTIA_UNIVERIS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	COMPANY_CD VARCHAR(50) COMMENT 'Company code : Wealth',
	COMPANY_NAME VARCHAR(512) COMMENT 'Company name : iA Wealth Management',
	REGULATORY_ORG_CD VARCHAR(50) COMMENT 'Regulatory organisation code : MFDA or IIROC',
	REGULATORY_ORG_NAME VARCHAR(512) COMMENT 'Regulatory organisation name : Mutual Fund Dealers Association',
	DLR_SYSID NUMBER(38,0) COMMENT 'Univeris ID of the dealer',
	DLR_CD VARCHAR(50) COMMENT 'Dealer code : Univeris code for the dealer',
	DLR_NAME_ENG VARCHAR(512) COMMENT 'Dealer name in english : Fundex Investments inc.',
	RGN_SYSID NUMBER(38,0) COMMENT 'Univeris ID for the advisor region',
	RGN_CD VARCHAR(50) COMMENT 'Univeris code for the advisor region',
	RGN_NAME VARCHAR(512) COMMENT 'The advisor region name',
	RGN_MGR VARCHAR(512) COMMENT 'The name of the regional VP',
	BRN_SYSID NUMBER(38,0) COMMENT 'Univeris ID of the advisors branch',
	BRN_CD VARCHAR(50) COMMENT 'Univeris Code for the advisors branch',
	BRN_NAME VARCHAR(512) COMMENT 'The advisor branch name',
	REP_TEAM_CD VARCHAR(50) COMMENT 'The advisor team code',
	REP_TEAM_NAME VARCHAR(512) COMMENT 'The advisor team name',
	REP_SYSID NUMBER(38,0) COMMENT 'Univeris ID of the advisor rep code',
	REP_CORP_NAME VARCHAR(512) COMMENT 'Corporation name of the advisor',
	REP_LNAME VARCHAR(512) COMMENT 'Advisor last name',
	REP_FNAME VARCHAR(512) COMMENT 'Advisor first name',
	REP_ST_NAME VARCHAR(512) COMMENT 'Advisor status : Active, Terminated,...',
	REP_GRP_RSP VARCHAR(512) COMMENT 'Group RSP indicator',
	PROV_CD VARCHAR(10) COMMENT 'Province Code : In Univeris ',
	REP_TITLE_DESC VARCHAR(100) COMMENT 'Representative title : Title description In Univeris ',
	TERMINATE_DT TIMESTAMP_NTZ(9) COMMENT 'Representative terminated date : In Univeris ',
	CREATE_DT TIMESTAMP_NTZ(9) COMMENT 'Representative Start date : In Univeris '
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.TRANSLINK_EXCHANGE_RATE (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	EXCHANGE_DATE DATE COMMENT 'Exchange rate date',
	EXCHANGERATE NUMBER(38,8) COMMENT 'Conversion rate from USD to CAD',
	REVNO NUMBER(38,0) COMMENT 'Modification version number'
);
create or replace view DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.VW_ADVISOR_IAS_CERTS(
	HK_HUB,
	MD_START_DT,
	MD_HASHDIFF,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	CID,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
	PRIMARY_ROLE,
	RVP,
	BRANCH_NRD,
	BRANCH_NAME,
	PROVINCE,
	IS_ACTIVE,
	RR_CD,
	TRADE_NAME,
	PORTAL_IDS,
	BEGIN_DT,
	END_DT,
	ADVISOR_BIRTH_DATE,
	REP_EMAIL,
	CBM,
	BRANCH_ADDRESS1,
	BRANCH_ADDRESS2,
	BRANCH_CITY,
	BRANCH_POSTAL_CODE
) as
SELECT 
SHA1(UPPER(CONCAT( COALESCE(TRIM(CID), '#NULL#'), '|', COALESCE(TRIM(RR_CD), '#NULL#')))) AS HK_HUB,
MD_START_DT,
MD_HASHDIFF,  
MD_SOURCE, 
MD_SRC_SYSTEM, 
MD_EXTRACT_DT, 
CID, 
FIRST_NAME, 
LAST_NAME, 
FULL_NAME, 
PRIMARY_ROLE, 
RVP, 
BRANCH_NRD, 
BRANCH_NAME, 
PROVINCE, 
IS_ACTIVE,
RR_CD,
TRADE_NAME,
PORTAL_IDS,
BEGIN_DT,
END_DT,
ADVISOR_BIRTH_DATE,
REP_EMAIL,	 
CBM,	 
BRANCH_ADDRESS1,
BRANCH_ADDRESS2,
BRANCH_CITY,
BRANCH_POSTAL_CODE
FROM DB_IAW_PROD_STG.IAS_CERTS.REGISTERED_REPRESENTATIVE;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.VW_HUB_REGISTERED_REPRESENTAVIVE_IAS_CERTS(
	HK_HUB,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	RR_CD
) as 
SELECT DISTINCT HK_HUB,MD_SOURCE ,MD_SRC_SYSTEM ,MD_EXTRACT_DT ,RR_CD
FROM DB_IAW_PROD_STG.IAS_CERTS.REGISTERED_REPRESENTATIVE
WHERE RR_CD IS NOT NULL;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.VW_IAS_GET_CLIENT_START_DATE(
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	MD_START_DT,
	CLIENT_ID,
	CLIENT_START_DT,
	MD_ACTIVE
) as
WITH
ACCOUNT_START_DT_DATASET AS (
		-- Get the Client, Clients Hash and Earliest Clients Open Date --
		SELECT hub.HK_HUB, sat.A_C_CLIENT , sat.A_C_OPEN_DATE
			FROM  SHARED_RDV.SAT_CONTRACT_IAS_NBIN sat
			INNER JOIN SHARED_RDV.HUB_CONTRACT hub 
			ON sat.HK_HUB = hub.HK_HUB
		WHERE sat.MD_SRC_SYSTEM = 'IAS' 
		-- Earliest Date for a Client
		QUALIFY  ROW_NUMBER() OVER (PARTITION BY sat.A_C_CLIENT ORDER BY sat.MD_START_DT ) = 1
)
	  -- Get Client and associated Hashes for Links to ACCOUNT_START_DT query. --
SELECT hub.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, sat.MD_START_DT, hub.CLIENT_ID, ASDT.A_C_OPEN_DATE AS CLIENT_START_DT, sat.MD_ACTIVE
FROM   SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR hub
INNER JOIN SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_IAS_NBIN sat
ON hub.HK_LINK = sat.HK_LINK 
AND sat.MD_SRC_SYSTEM = 'IAS'
LEFT JOIN ACCOUNT_START_DT_DATASET ASDT
ON ASDT.A_C_CLIENT = hub.CLIENT_ID;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.VW_INVESTMENT_PRODUCT_SYMBOLS(
	SYMBOL,
	MD_START_DT
) as 
SELECT DISTINCT F.FUNDSERVID AS SYMBOL,S.MD_START_DT 
FROM SHARED_RDV.REF_FUND f
INNER JOIN SHARED_RDV.SAT_REF_FUND_IAS_FUNDATA S
ON F.HK_HUB =S.HK_HUB 
WHERE S.HK_HUB <>'0'   
UNION 
SELECT DISTINCT  IAS.TI_SYMBOL AS SYMBOL ,IAS.MD_START_DT 
FROM SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_NBIN IAS
WHERE IAS.HK_HUB <>'0'  
--AND IAS.MD_START_DT ='2000-01-01 00:00:00'
--AND TI_SYMBOL IS NULL
UNION 
SELECT DISTINCT UNI.SYMBOL ,UNI.MD_START_DT 
FROM SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_UNIVERIS UNI
WHERE UNI.HK_HUB <>'0';
create or replace view DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.VW_REGISTERED_REPRESENTATIVE_NOTNULL(
	HK_HUB,
	HK_SAT,
	MD_START_DT,
	MD_HASHDIFF,
	MD_CREATION_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	CID,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
	PRIMARY_ROLE,
	RVP,
	BRANCH_NRD,
	BRANCH_NAME,
	PROVINCE,
	IS_ACTIVE,
	RR_CD,
	TRADE_NAME,
	PORTAL_IDS,
	BEGIN_DT,
	END_DT,
	ADVISOR_BIRTH_DATE,
	REP_EMAIL,
	CBM,
	BRANCH_ADDRESS1,
	BRANCH_ADDRESS2,
	BRANCH_CITY,
	BRANCH_POSTAL_CODE
) as 
SELECT HK_HUB,
	HK_SAT,
	MD_START_DT,
	MD_HASHDIFF,
	MD_CREATION_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	CID,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
	PRIMARY_ROLE,
	RVP,
	BRANCH_NRD,
	BRANCH_NAME,
	PROVINCE,
	IS_ACTIVE,
	RR_CD,
	TRADE_NAME,
	PORTAL_IDS,
	BEGIN_DT,
	END_DT,
	ADVISOR_BIRTH_DATE,
    REP_EMAIL,	 
	CBM,	 
	BRANCH_ADDRESS1,
	BRANCH_ADDRESS2,
	BRANCH_CITY,
	BRANCH_POSTAL_CODE
FROM DB_IAW_PROD_STG.IAS_CERTS.REGISTERED_REPRESENTATIVE 
WHERE RR_CD IS NOT NULL;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_SHARED_RDV.VW_SAT_LINK_COMMISSION_SHARE_RR_MULTIIMAGE(
	HK_LINK,
	MD_START_DT,
	MD_HASHDIFF,
	PREVIOUS_HASHDIFF,
	ROW_SRC
) as
WITH STG AS 
(
	SELECT DISTINCT r.HK_LINK, r.MD_START_DT, r.MD_HASHDIFF, 'STG' AS ROW_SRC
	FROM DB_IAW_PROD_STG.IAS_COMMISSION.VW_SHARE_AUD r	
),
SAT AS
(
	SELECT 	DISTINCT r.HK_LINK, 
			LAST_VALUE(r.MD_START_DT) over (partition by r.HK_LINK order by r.MD_START_DT asc) AS MD_START_DT,
			LAST_VALUE(r.MD_HASHDIFF) over (partition by r.HK_LINK order by r.MD_START_DT asc) AS MD_HASHDIFF,
			'SAT' AS ROW_SRC
	FROM SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR r
	WHERE MD_SRC_SYSTEM = 'IAS'
),
SRC AS
(
	SELECT 	r.HK_LINK, 
			r.MD_START_DT, 
			r.MD_HASHDIFF, 
			lag(r.MD_HASHDIFF, 1, '0') over (partition by r.HK_LINK order by r.MD_START_DT asc) AS PREVIOUS_HASHDIFF,
			r.ROW_SRC
	FROM 
	(
		SELECT * FROM SAT
		UNION  
		SELECT * FROM STG
	) AS r
),
RSLT AS
(
  SELECT * 
  FROM SRC r
  WHERE r.MD_HASHDIFF <> r.PREVIOUS_HASHDIFF 
)
SELECT RSLT.* 
FROM RSLT
LEFT JOIN SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR S ON RSLT.HK_LINK = S.HK_LINK AND RSLT.MD_START_DT = S.MD_START_DT
WHERE S.HK_LINK IS NULL;
create or replace schema DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_BDV;

create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_BDV.LINK_SERVICING_CODES (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash of the business keys of party role advisor',
	HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash of the business keys of servicing advisor',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MASTER_CODE VARCHAR(50) COMMENT 'Advisor code',
	REP_CODE VARCHAR(50) COMMENT 'SERVICING CODE'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_BDV.SAT_LINK_SERVICING_CODES (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ADVISOR_NAME VARCHAR(100) COMMENT 'Advisor name',
	END_DATE TIMESTAMP_NTZ(9) COMMENT 'Departure date of the advisor (TBD)',
	REASON VARCHAR(1000) COMMENT 'Reason of departure',
	NEW_FIRM VARCHAR(1000) COMMENT 'Departure destination',
	NEW_FIRM_TYPE VARCHAR(1000) COMMENT 'Departure destination Type',
	NEW_FIRM_BACK_OFFICE VARCHAR(1000) COMMENT 'Departure destination Back-Office',
	PRESTIGE_STATUS VARCHAR(100) COMMENT 'Prestige Status',
	REP_ROW_NUM NUMBER(38,0) COMMENT 'The rownumber of METADATA$FILE_ROW_NUMBER when loading using INFORMATICA'
);
create or replace TRANSIENT TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_BDV.WT_SERVICING_CODES (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash of the business keys of party role advisor',
	HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash of the business keys of servicing advisor',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MASTER_CODE VARCHAR(50) COMMENT 'Advisor code',
	REP_CODE VARCHAR(50) COMMENT 'SERVICING CODE',
	ADVISOR_NAME VARCHAR(100) COMMENT 'Advisor name',
	END_DATE TIMESTAMP_NTZ(9) COMMENT 'Departure date of the advisor (TBD)',
	REASON VARCHAR(1000) COMMENT 'Reason of departure',
	NEW_FIRM VARCHAR(1000) COMMENT 'Departure destination',
	NEW_FIRM_TYPE VARCHAR(1000) COMMENT 'Departure destination Type',
	NEW_FIRM_BACK_OFFICE VARCHAR(1000) COMMENT 'Departure destination Back-Office',
	PRESTIGE_STATUS VARCHAR(100) COMMENT 'Prestige Status',
	REP_ROW_NUM NUMBER(38,0) COMMENT 'The rownumber of METADATA$FILE_ROW_NUMBER when loading using INFORMATICA'
);
create or replace view DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_BDV.VW_IAS_MAPPING_OPER_TYPE(
	HK_HUB,
	MD_SRC_SYSTEM,
	IBMSOURCE,
	LEVEL,
	MD_START_DT,
	MD_HASHDIFF,
	DESCRIPTION_EN,
	DESCRIPTION_SHORT_EN,
	DESCRIPTION_FR,
	DESCRIPTION_SHORT_FR,
	OPERATION_TYPE,
	DISPLAY,
	CASHFLOW_SUMMARY,
	ISCASHFLOW
) as
SELECT 

R.HK_HUB, 
R.MD_SRC_SYSTEM, 
R.IBMSOURCE, 
R.""LEVEL"",
S.MD_START_DT,
S.MD_HASHDIFF, 
S.DESCRIPTION_EN, 
S.DESCRIPTION_SHORT_EN, 
S.DESCRIPTION_FR, 
S.DESCRIPTION_SHORT_FR, 
S.OPERATION_TYPE, 
S.DISPLAY, 
S.CASHFLOW_SUMMARY, 
S.ISCASHFLOW
FROM STEWARDSHIP_RDV.REF_MAPPING_OPER_TYPE R
INNER JOIN STEWARDSHIP_RDV.SAT_REF_MAPPING_OPER_TYPE_IAS S
ON R.HK_HUB=S.HK_HUB
INNER JOIN (SELECT HK_HUB,MAX(MD_START_DT) AS MAX_MD_START_DT FROM STEWARDSHIP_RDV.SAT_REF_MAPPING_OPER_TYPE_IAS GROUP BY HK_HUB)LVS
ON S.HK_HUB=LVS.HK_HUB AND S.MD_START_DT=LVS.MAX_MD_START_DT
WHERE S.MD_ACTIVE='A';
create or replace view DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_BDV.VW_SERVICING_CODES_SPLIT(
	HK_HUB,
	MD_SEQ,
	MD_START_DT,
	MD_EXTRACT_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MASTER_CODE,
	REP_CODE,
	ADVISOR_NAME,
	END_DATE,
	REASON,
	NEW_FIRM,
	NEW_FIRM_TYPE,
	NEW_FIRM_BACK_OFFICE,
	PRESTIGE_STATUS,
	MD_ACTIVE,
	REP_ROW_NUM
) as
SELECT a.*, case when a.rep_code is null then 1 else (row_number() OVER (PARTITION BY a.REP_CODE ORDER BY a.MD_SEQ)) END AS REP_ROW_NUM FROM (
SELECT 
s.HK_HUB,
s.MD_SEQ,
S.MD_START_DT,
S.MD_EXTRACT_DT,
S.MD_SOURCE,
S.MD_SRC_SYSTEM,
R.MASTER_CODE,
TRIM(c.value::STRING) AS REP_CODE,
S.ADVISOR_NAME,
S.END_DATE,
S.REASON,
S.NEW_FIRM,
S.NEW_FIRM_TYPE,
S.NEW_FIRM_BACK_OFFICE,
S.PRESTIGE_STATUS,
S.MD_ACTIVE
FROM DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_SERVICING_CODES_IAPW S
INNER JOIN DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_SERVICING_CODES R ON S.HK_HUB = R.HK_HUB,
lateral flatten(input=>split(TRIM(UPPER(SERVICING_CODE)), ','),OUTER => TRUE) c) a;
create or replace schema DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV;

create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.REF_DATE (
	DATE DATE NOT NULL COMMENT 'Date ex: 2021-04-08',
	FULL_DATE_DESC VARCHAR(64) NOT NULL COMMENT 'Full date description ex: Thursday, Apr 08, 2021',
	DAY_NUM_IN_WEEK NUMBER(1,0) NOT NULL COMMENT 'Day number in a week (Monday=1, Sunday=7)',
	DAY_NUM_IN_MONTH NUMBER(2,0) NOT NULL COMMENT 'Day number in a month (1 to 31)',
	DAY_NUM_IN_YEAR NUMBER(3,0) NOT NULL COMMENT 'Day number in a year (1 to 366)',
	DAY_NAME VARCHAR(10) NOT NULL COMMENT 'Day name ex: Thursday',
	DAY_ABBREV VARCHAR(3) NOT NULL COMMENT 'Day abreviation ex: Thu',
	WEEKDAY_IND VARCHAR(64) NOT NULL COMMENT 'Weekday indicator (Weekday, Not a weekday)',
	US_HOLIDAY_IND VARCHAR(64) COMMENT 'United State holiday Indicator',
	_HOLIDAY_IND VARCHAR(64) COMMENT 'holiday indicator',
	MONTH_END_IND VARCHAR(64) NOT NULL COMMENT 'Month end indicator (Not-Month-end, Month-end)',
	WEEK_BEGIN_DATE_NKEY NUMBER(9,0) NOT NULL COMMENT 'Week begin date nkey ex: 20210405',
	WEEK_BEGIN_DATE DATE NOT NULL COMMENT 'Week begin date ex: 2021-04-05',
	WEEK_END_DATE_NKEY NUMBER(9,0) NOT NULL COMMENT 'Week end date nkey ex: 20210411',
	WEEK_END_DATE DATE NOT NULL COMMENT 'Week end date ex: 2021-04-11',
	WEEK_NUM_IN_YEAR NUMBER(9,0) NOT NULL COMMENT 'Week number in a year (1 to 53)',
	MONTH_NAME VARCHAR(10) NOT NULL COMMENT 'Month name ex: April',
	MONTH_ABBREV VARCHAR(3) NOT NULL COMMENT 'Month abreviation ex: Apr',
	MONTH_NUM_IN_YEAR NUMBER(2,0) NOT NULL COMMENT 'Month number in a year (1 to 12)',
	YEARMONTH VARCHAR(10) NOT NULL COMMENT 'Year and month ex: 2021-04',
	QUARTER NUMBER(1,0) NOT NULL COMMENT 'Quarter number (1 to 4)',
	YEARQUARTER VARCHAR(10) NOT NULL COMMENT 'Year and Quarter ex: 2021-02',
	YEAR NUMBER(5,0) NOT NULL COMMENT 'Year ex: 2021',
	FISCAL_WEEK_NUM NUMBER(2,0) NOT NULL COMMENT 'Fiscal week number (1 to 53)',
	FISCAL_MONTH_NUM NUMBER(2,0) NOT NULL COMMENT 'Fiscal month number (1 to 12)',
	FISCAL_YEARMONTH VARCHAR(10) NOT NULL COMMENT 'Fiscal year and month ex: 2021-04',
	FISCAL_QUARTER NUMBER(1,0) NOT NULL COMMENT 'Fiscal quarter number (1 to 4)',
	FISCAL_YEARQUARTER VARCHAR(10) NOT NULL COMMENT 'Fiscal year and quarter ex: 2021-02',
	FISCAL_HALFYEAR NUMBER(1,0) NOT NULL COMMENT 'Fiscal half year  (1 or 2)',
	FISCAL_YEAR NUMBER(5,0) NOT NULL COMMENT 'Fiscal year ex: 2021',
	SQL_TIMESTAMP TIMESTAMP_NTZ(9) COMMENT 'Day timestamp ex: 2021-04-08 00:00:00',
	CURRENT_ROW_IND VARCHAR(1) DEFAULT 'Y' COMMENT 'BI indicator, is it a current row or not (Y,N)',
	EFFECTIVE_DATE DATE DEFAULT CAST(CURRENT_TIMESTAMP() AS DATE) COMMENT 'BI date, day of creation ex: 2021-04-06',
	EXPIRATION_DATE DATE DEFAULT CAST('9999-12-31' AS DATE) COMMENT 'BI date, day of expiration, by default the vaue is: 9999-12-31',
	MONTH_NAME_YEAR VARCHAR(100) COMMENT 'Month name and year ex: April 2021',
	MONTH_NAME_YEAR_ORD NUMBER(38,0) COMMENT 'Month name and year order ex:202104'
)COMMENT='Type 0 Dimension Table Housing Calendar and Fiscal Year Date Attributes'
;
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.REF_KPI_TARGET_FIRM (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	KPI_DATE DATE COMMENT 'The end of every months date for the set target',
	METRIC_NAME VARCHAR(512) COMMENT 'KPI metric name'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.REF_KPI_TARGET_RVP (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation date time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution id',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT DATE COMMENT 'Source extraction date',
	KPI_DATE DATE COMMENT 'The end of every month''s date for the set target',
	METRIC_NAME VARCHAR(512) COMMENT 'The metric name description',
	RVP_ID NUMBER(2,0) COMMENT 'The regional vice president''s id'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.REF_MANUAL_ADVISOR_RVP_IAS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	REPID VARCHAR(512) COMMENT 'Representative ID'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.REF_MAPPING_OPER_TYPE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	IBMSOURCE VARCHAR(12) COMMENT 'IBM Source',
	LEVEL NUMBER(11,0) COMMENT 'Level number'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.REF_MONTHLY_MILESTONES (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	REPID VARCHAR(512) COMMENT 'Representative ID'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.REF_NEW_ADVISOR (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MASTER_CODE VARCHAR(50) COMMENT 'Advisor code'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.REF_ORGANIC_GROWTH_EXCEPTIONS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	SOURCE_MASTER_CODE VARCHAR(50) COMMENT 'Advisor code',
	DESTINATION_MASTER_CODE VARCHAR(50) COMMENT 'Advisor code',
	START_DATE TIMESTAMP_NTZ(9) COMMENT 'Start Date range when exclusion stays in'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.REF_PRODUCT_ASSET_CATEGORY (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.REF_RAPCODE_PLAN (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'Account RAP Code',
	RETAIL_PLAN VARCHAR(100) COMMENT 'Retail Plan exp: LR, LF, PR, etc...',
	ASC_1_RESP_PLAN_TYPES VARCHAR(100) COMMENT 'If Account rap code is the same, ASC_1_RESP_PLAN_TYPES is used to identify the plan'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.REF_SERVICING_CODES (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MASTER_CODE VARCHAR(50) COMMENT 'Advisor code'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.SAT_REF_KPI_TARGET_FIRM (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Reference',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, A row exists in the source, D row does not exist in the source',
	TARGET NUMBER(38,2) COMMENT 'The target metric value'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.SAT_REF_KPI_TARGET_RVP (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the satellite',
	MD_START_DT DATE COMMENT 'Start date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation date time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution id',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT DATE COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	RVP_NAME VARCHAR(100) COMMENT 'The regional vice president''s name',
	TARGET NUMBER(36,2) COMMENT 'The target metric value'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.SAT_REF_MANUAL_ADVISOR_RVP_IAS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Reference',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ADVISOR VARCHAR(512) COMMENT 'Advisor code',
	TEAM VARCHAR(512) COMMENT 'Team name',
	RVP VARCHAR(512) COMMENT 'RVP ID',
	PROVINCE VARCHAR(512) COMMENT 'Province code (QC, ON, ...)',
	IND_EXCLUDE BOOLEAN COMMENT 'Exclusion flag, 1 is excluded, 0 is not excluded'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.SAT_REF_MAPPING_OPER_TYPE_IAS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	DESCRIPTION_EN VARCHAR(60) COMMENT 'Description in English',
	DESCRIPTION_SHORT_EN VARCHAR(30) COMMENT 'Sort description in english',
	DESCRIPTION_FR VARCHAR(60) COMMENT 'Description in French',
	DESCRIPTION_SHORT_FR VARCHAR(30) COMMENT 'Sort Description in french',
	OPERATION_TYPE VARCHAR(3) COMMENT 'Type of Operation',
	DISPLAY NUMBER(11,0) COMMENT 'Display Number',
	CASHFLOW_SUMMARY VARCHAR(4) COMMENT 'Cashflow Summary',
	ISCASHFLOW NUMBER(11,0) COMMENT 'Flag to determine it is a cahsflow or not e.g 0/1'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.SAT_REF_MONTHLY_MILESTONES_IAS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ADVISOR VARCHAR(512) COMMENT 'Advisor code',
	TEAM VARCHAR(512) COMMENT 'Team code',
	RVP VARCHAR(512) COMMENT 'RVP code',
	PROVINCE VARCHAR(512) COMMENT 'Province name',
	AUA_DEC NUMBER(34,4) COMMENT 'AUA for dec',
	AUA_JAN NUMBER(34,4) COMMENT 'AUA for Jan',
	AUA_FEB NUMBER(34,4) COMMENT 'AUA for Feb'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.SAT_REF_NEW_ADVISOR_IAPW (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Reference',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ADVISOR_NAME VARCHAR(100) COMMENT 'Name of the Advisor',
	TRANSITION_PERIOD_END_DATE TIMESTAMP_NTZ(9) COMMENT 'Advisor transition end date',
	DEAL_ASSESTS NUMBER(11,0) COMMENT 'Deal assets',
	EXPECTED_ASSESTS NUMBER(11,0) COMMENT 'Expected assets',
	PREVIOUS_FIRM VARCHAR(100) COMMENT 'Previous Firm of the Advisor',
	PREVIOUS_FIRM_TYPE VARCHAR(100) COMMENT 'Previous Firm type of the Advisor'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.SAT_REF_ORGANIC_GROWTH_EXCEPTIONS_IAPW (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Reference',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	SHARE_PCT NUMBER(3,0) COMMENT '% for distrubution of Amounts',
	END_DATE TIMESTAMP_NTZ(9) COMMENT 'End Date when exclusion expires'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.SAT_REF_PRODUCT_ASSET_CATEGORY_IAS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ASSET_CATEGORY VARCHAR(512) COMMENT 'Asset category exp: Treasury Bills, Debentures, Common Stock, etc...'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.SAT_REF_RAPCODE_PLAN_IAS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PLAN_LABEL VARCHAR(512) COMMENT 'Plan label',
	ACCOUNT_TYPE VARCHAR(512) COMMENT 'Type of account',
	GROUP_TYPE_CODE VARCHAR(100) COMMENT 'Type of Group code',
	ACCUMULATION_TYPE VARCHAR(100) COMMENT 'Accumulation Type'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.SAT_REF_SERVICING_CODES_IAPW (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Reference',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ADVISOR_NAME VARCHAR(100) COMMENT 'Advisor name',
	END_DATE TIMESTAMP_NTZ(9) COMMENT 'Departure date of the advisor (TBD)',
	REASON VARCHAR(1000) COMMENT 'Reason of departure',
	NEW_FIRM VARCHAR(1000) COMMENT 'Departure destination',
	NEW_FIRM_TYPE VARCHAR(1000) COMMENT 'Departure destination Type',
	NEW_FIRM_BACK_OFFICE VARCHAR(1000) COMMENT 'Departure destination Back-Office',
	SERVICING_CODE VARCHAR(1000) COMMENT 'Servicing Code',
	PRESTIGE_STATUS VARCHAR(100) COMMENT 'Prestige Status',
	MD_SEQ NUMBER(38,0) COMMENT 'The value of METADATA$FILE_ROW_NUMBER when loading using INFORMATICA'
);
create or replace view DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.VW_NEW_ADVISOR(
	HK_HUB,
	MD_START_DT,
	MD_HASHDIFF,
	MD_CREATION_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	ADVISOR_NAME,
	MASTER_CODE,
	TRANSITION_PERIOD_END_DATE,
	DEAL_ASSESTS,
	EXPECTED_ASSESTS,
	PREVIOUS_FIRM,
	PREVIOUS_FIRM_TYPE
) as
SELECT 
HK_HUB
,MD_START_DT
,MD_HASHDIFF
,MD_CREATION_DT
,MD_SOURCE
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,ADVISOR_NAME
,MASTER_CODE
,TRANSITION_PERIOD_END_DATE
,DEAL_ASSESTS
,EXPECTED_ASSESTS
,PREVIOUS_FIRM
,PREVIOUS_FIRM_TYPE
FROM DB_IAW_PROD_STG.STEWARDSHIP.REF_NEW_ADVISOR
QUALIFY ROW_NUMBER() OVER (PARTITION BY HK_HUB ORDER BY HK_HUB ) = 1;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.VW_ORGANIC_GROWTH_EXCEPTIONS_IAPW(
	HK_HUB,
	MD_START_DT,
	MD_SOURCE,
	SOURCE_MASTER_CODE,
	DESTINATION_MASTER_CODE,
	START_DATE,
	END_DATE,
	SHARE_PCT,
	MD_ACTIVE
) as
SELECT
	*
FROM
	(
	SELECT
		h.HK_HUB,
		s.MD_START_DT,
		s.MD_SOURCE,
		h.SOURCE_MASTER_CODE,
		h.DESTINATION_MASTER_CODE,
		h.START_DATE,
		s.END_DATE,
		s.SHARE_PCT,
		s.MD_ACTIVE
	FROM
		DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_ORGANIC_GROWTH_EXCEPTIONS h
	INNER JOIN DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_ORGANIC_GROWTH_EXCEPTIONS_IAPW s 
ON
		s.HK_HUB = h.HK_HUB
	WHERE
		s.MD_SRC_SYSTEM = 'STEWARDSHIP'
QUALIFY ROW_NUMBER() OVER (PARTITION BY s.HK_HUB
	ORDER BY
		s.MD_START_DT DESC ) = 1
)
WHERE
	MD_ACTIVE = 'A'
ORDER BY SOURCE_MASTER_CODE;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.VW_ORGANIC_GROWTH_EXCLUSIONS_IAPW(
	HK_HUB,
	OG_MD_START_DT,
	OG_MD_SOURCE,
	SOURCE_MASTER_CODE,
	DESTINATION_MASTER_CODE,
	START_DATE,
	END_DATE,
	SHARE_PCT,
	MD_ACTIVE
) as
SELECT a.HK_HUB,a.MD_START_DT as og_MD_START_DT,a.MD_SOURCE as og_MD_SOURCE,a.SOURCE_MASTER_CODE,a.DESTINATION_MASTER_CODE,a.START_DATE,a.END_DATE,a.SHARE_PCT,a.MD_ACTIVE
FROM DB_IAW_PROD_DWH.STEWARDSHIP_RDV.VW_ORGANIC_GROWTH_EXCEPTIONS_IAPW A FULL OUTER JOIN 
DB_IAW_PROD_DWH.SHARED_BDV.VW_IAS_RRCODE_MASTERCODE_TRANS b 
ON A.SOURCE_MASTER_CODE =b.A_C_REPRESENTATIVE AND A.DESTINATION_MASTER_CODE =b.TOREPID 
WHERE b.A_C_REPRESENTATIVE IS NULL AND b.TOREPID IS NULL;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_STEWARDSHIP_RDV.VW_SERVICING_CODES(
	HK_HUB,
	MD_SEQ,
	MD_START_DT,
	MD_HASHDIFF,
	MD_CREATION_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	ADVISOR_NAME,
	MASTER_CODE,
	END_DATE,
	REASON,
	NEW_FIRM,
	NEW_FIRM_TYPE,
	NEW_FIRM_BACK_OFFICE,
	SERVICING_CODE,
	PRESTIGE_STATUS
) as
SELECT 
HK_HUB,
MD_SEQ, 
MD_START_DT, 
MD_HASHDIFF, 
MD_CREATION_DT, 
MD_SOURCE, 
MD_SRC_SYSTEM, 
MD_EXTRACT_DT, 
ADVISOR_NAME, 
MASTER_CODE,
END_DATE,
REASON,
NEW_FIRM,
NEW_FIRM_TYPE,
NEW_FIRM_BACK_OFFICE,
SERVICING_CODE,
PRESTIGE_STATUS
FROM DB_IAW_PROD_STG.STEWARDSHIP.REF_SERVICING_CODES
QUALIFY ROW_NUMBER() OVER (PARTITION BY HK_HUB ORDER BY HK_HUB ) = 1;
create or replace schema DB_IAW_PROD_DWH.CLONE_INF_TOOLS;

create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_TOOLS.AUDIT_JOBS_DEPENDENCIES (
	DEPENDENT_JOB_NAME VARCHAR(1000) COMMENT 'Dpenedant Taskflow name',
	DEPENDENT_DATA_START_DT DATE COMMENT 'Functional start Load date',
	DEPENDENT_DATA_NEXT_START_DT DATE COMMENT 'Functional next start Load date',
	PRINCIPAL_JOB_NAME_PATTERN VARCHAR(1000) COMMENT 'Principal Taskflow name LIKE pattern is supported',
	PRINCIPAL_DATA_START_DT DATE COMMENT 'Functional start Load date',
	PRINCIPAL_DATA_NEXT_START_DT DATE COMMENT 'Functional end Load date',
	DEPENDENCY_TYPE VARCHAR(100) COMMENT 'PREREQUISITE, CONCURRENT, ...'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_TOOLS.AUDIT_JOBS_EXECUTIONS (
	JOB_NAME VARCHAR(1000) COMMENT 'Taskflow name',
	DATA_START_DT DATE COMMENT 'Functional start Load date',
	DATA_NEXT_START_DT DATE COMMENT 'Functional next start Load date',
	UPDATE_JOB_AUDIT_ID VARCHAR(1000) COMMENT 'Taskflow job ID that updated this record',
	JOB_STATUS VARCHAR(100) COMMENT 'IN PROGRESS, SUCCESS, ERROR',
	JOB_STATUS_DESC VARCHAR(16777216) COMMENT 'Description for the current status',
	JOB_ACTION_RESULT VARCHAR(100) COMMENT 'Last start or end job result',
	JOB_DATA_START_DT_RESULT DATE COMMENT 'start Load date returned from an action on the audit. Example : Start next date',
	JOB_ROW_COUNT NUMBER(38,0)
);
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.CLONE_INF_TOOLS.USP_AUDIT_CHECK_DEPENDENT_JOBS(""JOB_NAME"" VARCHAR(16777216), ""PRINCIPAL_DATA_START_DT"" VARCHAR(10))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

//remove cotes
JOB_NAME= JOB_NAME.replace(""''"", """");
PRINCIPAL_DATA_START_DT= PRINCIPAL_DATA_START_DT.replace(""''"", """");


// Check last execution of each dependent job if there are any
var cmd = ""SELECT * FROM (SELECT D.DEPENDENT_JOB_NAME, E.JOB_NAME, COALESCE(E.JOB_STATUS,''NOT RUNNING'') AS JOB_STATUS FROM TOOLS.AUDIT_JOBS_DEPENDENCIES D INNER JOIN TOOLS.AUDIT_JOBS_EXECUTIONS E  ON E.JOB_NAME LIKE  D.PRINCIPAL_JOB_NAME_PATTERN AND DEPENDENCY_TYPE=''PREREQUISITE'' AND E.DATA_START_DT = ''"" +PRINCIPAL_DATA_START_DT+ ""'' WHERE D.DEPENDENT_JOB_NAME= ''"" + JOB_NAME + ""'' QUALIFY ROW_NUMBER() OVER (PARTITION BY E.JOB_NAME ORDER BY E.DATA_START_DT DESC)=1) WHERE JOB_STATUS<>''SUCCESS''"";

var st = snowflake.createStatement( { sqlText: cmd } );
var res = st.execute();

// A non successful execution is found
var msg = """";

while (res.next()) {

	var subJobName= res.getColumnValue(2);
	var status=res.getColumnValue(3);
	
	if(status==""NOT RUNNING"")
	{
		msg += "" ""+ subJobName + "" must run before."";
	}
	else
	{
		msg += "" ""+ subJobName + "" status is ""+res.getColumnValue(3)+""."";
	}
}

if(msg !=""""){

	return ""The job ""+JOB_NAME+"" failed because: "" + msg;
}

else{
	return ""1"";
}
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.CLONE_INF_TOOLS.USP_AUDIT_DEPENDENCIES_INSERT_EXEC(""DEPENDENT_JOB_NAME"" VARCHAR(2000), ""DEPENDENT_DATA_START_DT"" VARCHAR(100), ""PRINCIPAL_JOB_NAME_PATTERN"" VARCHAR(1000), ""DEPENDENCY_TYPE"" VARCHAR(100), ""NB"" FLOAT, ""INTERVAL_UNIT"" VARCHAR(100), ""INTERVAL_NB"" FLOAT)
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
// Insert command
var cmdInsert = ""INSERT INTO TOOLS.AUDIT_JOBS_DEPENDENCIES (DEPENDENT_JOB_NAME,DEPENDENT_DATA_START_DT,DEPENDENT_DATA_NEXT_START_DT,PRINCIPAL_JOB_NAME_PATTERN,PRINCIPAL_DATA_START_DT,PRINCIPAL_DATA_NEXT_START_DT,DEPENDENCY_TYPE) VALUES "";
var cmd = """";
var nb_i = 1;
while(nb_i <= NB) {
	cmd += ""(''""+DEPENDENT_JOB_NAME+""'',DATEADD(''""+INTERVAL_UNIT+""'',""+INTERVAL_NB*(nb_i-1)+"",''""+DEPENDENT_DATA_START_DT+""''::DATETIME),DATEADD(''""+INTERVAL_UNIT+""'',""+INTERVAL_NB*(nb_i)+"",''""+DEPENDENT_DATA_START_DT+""''::DATETIME),''"" + PRINCIPAL_JOB_NAME_PATTERN + ""'', DATEADD(''""+INTERVAL_UNIT+""'',""+INTERVAL_NB*(nb_i-1)+"",''""+DEPENDENT_DATA_START_DT+""''::DATETIME), DATEADD(''""+INTERVAL_UNIT+""'',""+INTERVAL_NB*(nb_i)+"",''"" + DEPENDENT_DATA_START_DT+""''::DATETIME) ,''"" + DEPENDENCY_TYPE + ""'' ),"";                          
  	nb_i += 1;   
}
// Execute Insert command  
cmd = cmdInsert + cmd.slice(0,-1);
try {
		var st = snowflake.createStatement( { sqlText: cmd } );
		var res = st.execute();
	}
catch(err) {
		var result =  ""Failed: Code: "" + err.code + ""\\n  State: "" + err.state;
		result += ""\\n  Message: "" + err.message;
		result += ""\\nStack Trace:\\n"" + err.stackTraceTxt;
		result += ""\\nCommand:\\n"" + cmd;
		return result;
	}

return ""OK"";
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.CLONE_INF_TOOLS.USP_AUDIT_END_JOB(""JOB_NAME"" VARCHAR(16777216), ""DATA_START_DT"" VARCHAR(16777216), ""JOB_AUDIT_ID"" VARCHAR(16777216), ""JOB_END_STATUS"" VARCHAR(16777216), ""JOB_END_DESC"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
// Update status command
var cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET UPDATE_JOB_AUDIT_ID=''""+JOB_AUDIT_ID+""'', JOB_STATUS="";
var cmdUpdStatusWhereClause = "" WHERE JOB_NAME =''"" + JOB_NAME + ""'' AND DATA_START_DT = ''""+DATA_START_DT+""''"";
// Check last execution
var cmd = ""SELECT TOP 1 aje.DATA_START_DT::VARCHAR, aje.JOB_STATUS FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''"" + JOB_NAME + ""'' AND aje.DATA_START_DT = ''""+DATA_START_DT+""'' ORDER BY aje.DATA_START_DT DESC"";
var st = snowflake.createStatement( { sqlText: cmd } );
var res = st.execute();

var stUpdStatus;
var resUpdStatus;

try 
{	
	// A previous execution is found
	if (res.next())
	{
		var dtLastJobStart = res.getColumnValue(1);
		var strLastJobStatus = res.getColumnValue(2);

		//var cmdDG = ""INSERT INTO TOOLS.DEBUG_LOG VALUES (''""+ dtLastJobStart +""'')"";
		//var stDG = snowflake.createStatement( { sqlText: cmdDG } );
		//var resDG = stDG.execute();

		// Job is in progress 
		// => end it  
		if (strLastJobStatus == ""IN PROGRESS"")
		{
			cmdUpdStatus += ""''""+JOB_END_STATUS+""'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''"" + JOB_AUDIT_ID + ""<'' || CURRENT_TIMESTAMP() || ''> END_JOB : ""+JOB_END_DESC+"" ''"" + cmdUpdStatusWhereClause;	
			stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
			resUpdStatus = stUpdStatus.execute();
			return JOB_END_STATUS;
		}
		// Ending a job that is not in progress
		else
		{
			cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> END_JOB ERROR_01 : trying to end a job that is not in progress. ''"" + cmdUpdStatusWhereClause;
			stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
			resUpdStatus = stUpdStatus.execute();
			return ""ERROR_01"";		
		}	
	}
	// Job to be ended not found
	else
	{
		return ""ERROR_02"";
	}
}
// Technical error
catch(er)
{
	return ""ERROR_FATAL : "" + er;	
}

return ""ERROR_03"";	

';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.CLONE_INF_TOOLS.USP_AUDIT_INSERT_EXEC(""JOB_NAME"" VARCHAR(2000), ""JOB_DATA_START_DT"" VARCHAR(100), ""NB"" FLOAT, ""INTERVAL_UNIT"" VARCHAR(100), ""INTERVAL_NB"" FLOAT)
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
// Insert command
var cmdInsert = ""INSERT INTO TOOLS.AUDIT_JOBS_EXECUTIONS (JOB_NAME, DATA_START_DT, DATA_NEXT_START_DT) VALUES "";
var cmd = """";
var nb_i = 1;
while(nb_i <= NB) {
	cmd += ""(''""+JOB_NAME+""'',DATEADD(''""+INTERVAL_UNIT+""'',""+INTERVAL_NB*(nb_i-1)+"",''""+JOB_DATA_START_DT+""''::DATETIME),DATEADD(''""+INTERVAL_UNIT+""'',""+INTERVAL_NB*(nb_i)+"",''""+JOB_DATA_START_DT+""''::DATETIME)),"";                                   
	nb_i += 1; 
}
// Execute Insert command  
cmd = cmdInsert + cmd.slice(0,-1);
try {
		var st = snowflake.createStatement( { sqlText: cmd } );
		var res = st.execute();
	}
catch(err) {
		var result =  ""Failed: Code: "" + err.code + ""\\n  State: "" + err.state;
		result += ""\\n  Message: "" + err.message;
		result += ""\\nStack Trace:\\n"" + err.stackTraceTxt;
		result += ""\\nCommand:\\n"" + cmd;
		return result;
	}

return ""OK"";
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.CLONE_INF_TOOLS.USP_AUDIT_START_JOB(""JOB_NAME"" VARCHAR(16777216), ""DATA_START_DT"" VARCHAR(10), ""JOB_AUDIT_ID"" VARCHAR(16777216))
RETURNS VARCHAR(100)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
// Update status command
var cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET UPDATE_JOB_AUDIT_ID=''""+JOB_AUDIT_ID+""'', JOB_STATUS="";
var cmdUpdStatusWhereClause = "" WHERE JOB_NAME =''"" + JOB_NAME + ""'' AND DATA_START_DT = ''""+DATA_START_DT+""''"";
// Check last execution
var cmd = ""SELECT TOP 1 aje.DATA_START_DT::VARCHAR, aje.JOB_STATUS, aje.DATA_NEXT_START_DT::VARCHAR FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''"" + JOB_NAME + ""'' AND aje.JOB_STATUS IS NOT NULL AND aje.JOB_STATUS<>'''' AND aje.DATA_START_DT <= ''""+DATA_START_DT+""'' ORDER BY aje.DATA_START_DT DESC"";
var st = snowflake.createStatement( { sqlText: cmd } );
var res = st.execute();
var stUpdStatus;
var resUpdStatus;
var InsCmd = ""SELECT DISTINCT JOB_NAME FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''"" + JOB_NAME + ""'' AND aje.DATA_START_DT = ''"" + DATA_START_DT +""''"";
var InsSt = snowflake.createStatement( { sqlText: InsCmd } );
var InsRes = InsSt.execute();

try
{   
if (InsRes.next())
{
    // A previous execution is found
    if (res.next())
    {
        var dtLastJobStart = res.getColumnValue(1);
        var strLastJobStatus = res.getColumnValue(2);
        var dtLastJobNextStart = res.getColumnValue(3);
        // Job is executed before for the same date but without success 
        // => It is correct to re-execute it  
        if (dtLastJobStart == DATA_START_DT && strLastJobStatus != ""SUCCESS"" && strLastJobStatus != ""IN PROGRESS"")
        {
            cmdUpdStatus += ""''IN PROGRESS'', JOB_ACTION_RESULT=''SUCCESS'',  JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''"" + JOB_AUDIT_ID + ""('' || CURRENT_TIMESTAMP() || '') : Job restart. ''"" + cmdUpdStatusWhereClause; 
            stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
            resUpdStatus = stUpdStatus.execute();
            return ""IN PROGRESS"";
        }
        else
        {
            // Job is not executed before with the same date
            if (dtLastJobStart < DATA_START_DT) 
            {
                //Check if the execution next start date is not skipped
                if (dtLastJobNextStart != DATA_START_DT)
                {
                    cmdUpdStatus += ""'''', JOB_ACTION_RESULT=''ERROR_06'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> ERROR_06 : The execution of ""+dtLastJobNextStart +"" image was skipped. ''"" + cmdUpdStatusWhereClause;
                    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
                    resUpdStatus = stUpdStatus.execute();
                    return ""ERROR_06"";
                }
                // The last execution was successful
                // => Execute for current date
                else if (strLastJobStatus == ""SUCCESS"")
                {
                    cmdUpdStatus += ""''IN PROGRESS'', JOB_ACTION_RESULT=''SUCCESS'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> : Job start. ''"" + cmdUpdStatusWhereClause;
                    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
                    resUpdStatus = stUpdStatus.execute();
                    return ""IN PROGRESS"";
                }
                // The last execution is not successful or not done
                // => Error
                else
                {
                    cmdUpdStatus += ""'''', JOB_ACTION_RESULT=''ERROR_01'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> ERROR_01 : The previous execution is not done or not successful. ''"" + cmdUpdStatusWhereClause;
                    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
                    resUpdStatus = stUpdStatus.execute();
                    return ""ERROR_01"";
                }
            }
            // Already successfully executed or executing for this date
            // => Error
            else
            {
                // Already successfully executed
                if (strLastJobStatus == ""SUCCESS"")
                {
                    cmdUpdStatus += ""''SUCCESS'', JOB_ACTION_RESULT=''ERROR_02'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> ERROR_02 : Trying to re-execute a successfully executed job. ''"" + cmdUpdStatusWhereClause;
                    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
                    resUpdStatus = stUpdStatus.execute();
                    return ""ERROR_02"";
                }
                // Already executing for this date (IN PROGRESS)
                else
                {
                    cmdUpdStatus += ""''""+strLastJobStatus+""'', JOB_ACTION_RESULT=''ERROR_03'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> ERROR_03 : Trying to execute a running Job. ''""+ cmdUpdStatusWhereClause;
                    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
                    resUpdStatus = stUpdStatus.execute();
                    return ""ERROR_03"";
                }   
            }   
        }   
    }
    // First execution of the job : no previous job
    else
    {
        cmdUpdStatus += ""''IN PROGRESS'', JOB_ACTION_RESULT=''SUCCESS'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> : Job first start. ''"" + cmdUpdStatusWhereClause;
        stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
        resUpdStatus = stUpdStatus.execute();
        return ""IN PROGRESS"";
    }
}
else
{
	return ""ERROR_07"";
}
}
// Technical error
catch(er)
{
    cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET UPDATE_JOB_AUDIT_ID=''""+JOB_AUDIT_ID+""'', JOB_STATUS="";
    cmdUpdStatus += ""''ERROR'', JOB_ACTION_RESULT=''ERROR_04'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> ERROR_04 : technical error :""+er+"". ''""+ cmdUpdStatusWhereClause;
    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
    resUpdStatus = stUpdStatus.execute();
    return ""ERROR_04"";  
return er;
}
cmdUpdStatus += ""''ERROR'', JOB_ACTION_RESULT=''ERROR_05'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''>ERROR_05 : Unknown error. ''""+ cmdUpdStatusWhereClause;
stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
resUpdStatus = stUpdStatus.execute();
return ""ERROR_05"";  
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.CLONE_INF_TOOLS.USP_AUDIT_START_JOB_NEXT_DATE(""JOB_NAME"" VARCHAR(16777216), ""JOB_AUDIT_ID"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
//remove cotes
JOB_NAME= JOB_NAME.replace(""''"", """");
JOB_AUDIT_ID= JOB_AUDIT_ID.replace(""''"", """");

// Update status command
var cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET UPDATE_JOB_AUDIT_ID=''""+JOB_AUDIT_ID+""'', JOB_STATUS="";
var cmdUpdStatusWhereClause = "" WHERE JOB_NAME =''"" + JOB_NAME + ""''"";

// Check last execution
var cmd = ""SELECT TOP 1 aje.DATA_START_DT::VARCHAR, aje.JOB_STATUS FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''"" + JOB_NAME + ""'' AND aje.JOB_STATUS IS NOT NULL AND aje.JOB_STATUS<>'''' ORDER BY aje.DATA_START_DT DESC"";
var st = snowflake.createStatement( { sqlText: cmd } );
var res = st.execute();


var stUpdStatus;
var resUpdStatus;


// A previous execution is found
if (res.next())
{
	var dtLastJobStart = res.getColumnValue(1);
	var strLastJobStatus = res.getColumnValue(2);

	//var cmdDG = ""INSERT INTO TOOLS.DEBUG_LOG VALUES (''""+ dtLastJobStart +""'')"";
	//var stDG = snowflake.createStatement( { sqlText: cmdDG } );
	//var resDG = stDG.execute();

	// Job is executed before for the same date but without success 
	// => It is correct to re-execute it  
	if (strLastJobStatus != ""SUCCESS"" && strLastJobStatus != ""IN PROGRESS"")
	{
		// Check last execution
		var cmdNext = ""SELECT TOP 1 aje.DATA_START_DT::VARCHAR, aje.JOB_STATUS FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''"" + JOB_NAME + ""'' AND DATA_START_DT=''""+res.getColumnValue(1)+""'' ORDER BY aje.DATA_START_DT ASC"";
		var stNext = snowflake.createStatement( { sqlText: cmdNext } );
		var resNext = stNext.execute();
		if (resNext.next())
		{
			//Check dependent jobs execution, if there are any
			var statementDep = snowflake.createStatement( { sqlText: ""CALL TOOLS.USP_AUDIT_CHECK_DEPENDENT_JOBS(''"" + JOB_NAME + ""'',''"" + resNext.getColumnValue(1) + ""'')"" } );
			var dependencyRslt = statementDep.execute();
			dependencyRslt.next();
			var dependencyMsg = dependencyRslt.getColumnValue(1);
			if(dependencyMsg != ""1"")
			{
			//throw dependencyMsg;
	        cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET JOB_STATUS=''ERROR'' , JOB_ACTION_RESULT=''ERROR_04'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> START_JOB ERROR_04 : ""+ dependencyMsg +"" ''""+ cmdUpdStatusWhereClause + "" AND DATA_START_DT=''""+resNext.getColumnValue(1)+""''"";	
			stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
			resUpdStatus = stUpdStatus.execute();
			return ""0000-00-00"";
			}

			cmdUpdStatus += ""''IN PROGRESS'',  JOB_ACTION_RESULT=''SUCCESS'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''"" + JOB_AUDIT_ID + ""('' || CURRENT_TIMESTAMP() || '') START_JOB : Job restart. ''"" + cmdUpdStatusWhereClause + "" AND DATA_START_DT=''""+res.getColumnValue(1)+""''"";	
			stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
			resUpdStatus = stUpdStatus.execute();
			return res.getColumnValue(1);
		}
	}
	else
	{
		// The last execution was successful
		// => Execute for next date
		if (strLastJobStatus == ""SUCCESS"")
		{
			// Check last execution
			var cmdNext = ""SELECT TOP 1 aje.DATA_START_DT::VARCHAR, aje.JOB_STATUS FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''"" + JOB_NAME + ""'' AND DATA_START_DT>''""+res.getColumnValue(1)+""'' ORDER BY aje.DATA_START_DT ASC"";
			var stNext = snowflake.createStatement( { sqlText: cmdNext } );
			var resNext = stNext.execute();
			if (resNext.next())
			{


				//Check dependent jobs execution, if there are any
				var statementDep = snowflake.createStatement( { sqlText: ""CALL TOOLS.USP_AUDIT_CHECK_DEPENDENT_JOBS(''"" + JOB_NAME + ""'',''"" + resNext.getColumnValue(1) + ""'')"" } );
				var dependencyRslt = statementDep.execute();
				dependencyRslt.next();
				var dependencyMsg = dependencyRslt.getColumnValue(1);
				if(dependencyMsg != ""1"")
				{
				//throw dependencyMsg;
                
                cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET JOB_STATUS=''ERROR'' , JOB_ACTION_RESULT=''ERROR_04'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> START_JOB ERROR_04 : ""+ dependencyMsg +"" ''""+ cmdUpdStatusWhereClause + "" AND DATA_START_DT=''""+resNext.getColumnValue(1)+""''"";	
				stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
				resUpdStatus = stUpdStatus.execute();
				return ""0000-00-00"";
				}


				cmdUpdStatus += ""''IN PROGRESS'',  JOB_ACTION_RESULT=''SUCCESS'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> START_JOB : Job start. ''"" + cmdUpdStatusWhereClause + "" AND DATA_START_DT=''""+resNext.getColumnValue(1)+""''"";	;
				stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
				resUpdStatus = stUpdStatus.execute();
				return resNext.getColumnValue(1);
			}
		}
		// Already executing for this date (IN PROGRESS)
		// Error
		else
		{
			cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET JOB_ACTION_RESULT=''ERROR_03'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> START_JOB ERROR_03 : Trying to execute a running Job. ''""+ cmdUpdStatusWhereClause + "" AND DATA_START_DT=''""+res.getColumnValue(1)+""''"";	
			stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
			resUpdStatus = stUpdStatus.execute();
			return ""0000-00-00"";
		}	
	}	
}
// First execution of the job : no previous job
else
{
	// Check last execution
	var cmdFirst = ""SELECT TOP 1 aje.DATA_START_DT::VARCHAR, aje.JOB_STATUS FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''"" + JOB_NAME + ""'' ORDER BY aje.DATA_START_DT ASC"";
	var stFirst = snowflake.createStatement( { sqlText: cmdFirst } );
	var resFirst = stFirst.execute();
	
	if (resFirst.next())
	{

                //Check dependent jobs execution, if there are any
				var statementDep = snowflake.createStatement( { sqlText: ""CALL TOOLS.USP_AUDIT_CHECK_DEPENDENT_JOBS(''"" + JOB_NAME + ""'',''"" + resFirst.getColumnValue(1) + ""'')"" } );
				var dependencyRslt = statementDep.execute();
				dependencyRslt.next();
				var dependencyMsg = dependencyRslt.getColumnValue(1);
				if(dependencyMsg != ""1"")
				{

				//throw dependencyMsg;

                cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET JOB_STATUS=''ERROR'' ,JOB_ACTION_RESULT=''ERROR_04'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> START_JOB ERROR_04 : ""+ dependencyMsg +"" ''""+ cmdUpdStatusWhereClause + "" AND DATA_START_DT=''""+resFirst.getColumnValue(1)+""''"";	
				stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
				resUpdStatus = stUpdStatus.execute();
				return ""0000-00-00"";
				}

		cmdUpdStatus += ""''IN PROGRESS'',  JOB_ACTION_RESULT=''SUCCESS'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> START_JOB : Job first start. ''"" + cmdUpdStatusWhereClause + "" AND DATA_START_DT=''""+resFirst.getColumnValue(1)+""''"";
		stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
		resUpdStatus = stUpdStatus.execute();
		return resFirst.getColumnValue(1);
	}
	else 
	{
		return ""0000-00-00""
	}
}


return ""0000-00-00"";

';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.CLONE_INF_TOOLS.USP_AUDIT_START_ONDEMAND_JOB(""JOB_NAME"" VARCHAR(16777216), ""DATA_START_DT"" VARCHAR(10), ""JOB_AUDIT_ID"" VARCHAR(16777216))
RETURNS VARCHAR(100)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
// Update status command
var cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET UPDATE_JOB_AUDIT_ID=''""+JOB_AUDIT_ID+""'', JOB_STATUS="";
var cmdUpdStatusWhereClause = "" WHERE JOB_NAME =''"" + JOB_NAME + ""'' AND DATA_START_DT = ''""+DATA_START_DT+""''"";
// Check last execution
var cmd = ""SELECT TOP 1 aje.DATA_START_DT::VARCHAR, aje.JOB_STATUS, aje.DATA_NEXT_START_DT::VARCHAR FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''"" + JOB_NAME + ""'' AND aje.JOB_STATUS IS NOT NULL AND aje.JOB_STATUS<>'''' AND aje.DATA_START_DT = ''""+DATA_START_DT+""'' ORDER BY aje.DATA_START_DT DESC"";
var st = snowflake.createStatement( { sqlText: cmd } );
var res = st.execute();
var stUpdStatus;
var resUpdStatus;
var InsCmd = ""SELECT DISTINCT JOB_NAME FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''"" + JOB_NAME + ""'' AND aje.DATA_START_DT = ''"" + DATA_START_DT +""''"";
var InsSt = snowflake.createStatement( { sqlText: InsCmd } );
var InsRes = InsSt.execute();
//Insert new record if the record does not exist
var InsNewCmd = ""INSERT INTO TOOLS.AUDIT_JOBS_EXECUTIONS (JOB_NAME,DATA_START_DT,JOB_STATUS,JOB_ACTION_RESULT) VALUES(''"" + JOB_NAME + ""'',''"" + DATA_START_DT + ""'',''IN PROGRESS'',''SUCCESS'')"";
var InsNewSt; 
var InsNewRes;

try
{   
if (InsRes.next())
{
    // A previous execution is found
    if (res.next())
    {
        // Job is executed before for the same date but without success 
        // => It is correct to re-execute it  
            cmdUpdStatus += ""''IN PROGRESS'', JOB_ACTION_RESULT=''SUCCESS'',  JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''"" + JOB_AUDIT_ID + ""('' || CURRENT_TIMESTAMP() || '') : Job restart. ''"" + cmdUpdStatusWhereClause; 
            stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
            resUpdStatus = stUpdStatus.execute();
            return ""IN PROGRESS"";
           
    }
    // First execution of the job : no previous job
    else
    {
	InsNewSt = snowflake.createStatement( { sqlText: InsNewCmd } );
	InsNewRes = InsNewSt.execute();
	return ""IN PROGRESS"";
    }
}
else
{
	//return ""ERROR_07"";
	InsNewSt = snowflake.createStatement( { sqlText: InsNewCmd } );
	InsNewRes = InsNewSt.execute();
	return ""IN PROGRESS"";
}
}
// Technical error
catch(er)
{
   cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET UPDATE_JOB_AUDIT_ID=''""+JOB_AUDIT_ID+""'', JOB_STATUS="";
    cmdUpdStatus += ""''ERROR'', JOB_ACTION_RESULT=''ERROR_04'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> ERROR_04 : technical error :""+er+"". ''""+ cmdUpdStatusWhereClause;
    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
    resUpdStatus = stUpdStatus.execute();
    return ""ERROR_04"";  
return er;
}
cmdUpdStatus += ""''ERROR'', JOB_ACTION_RESULT=''ERROR_05'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''>ERROR_05 : Unknown error. ''""+ cmdUpdStatusWhereClause;
stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
resUpdStatus = stUpdStatus.execute();
return ""ERROR_05"";  
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.CLONE_INF_TOOLS.USP_IAW_CHECK_INTEGRITY(""DATABASE_NAME"" VARCHAR(50))
RETURNS VARCHAR(1)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '  
		// throw an error if checking integrity is not applicable (wrong database name)
		if (!(DATABASE_NAME.endsWith(""_DM"")) && !(DATABASE_NAME.endsWith(""_DWH"")))
		{
			var error = ''Checking Referential Integerity for '' + DATABASE_NAME  + '' is not applicable.'';
			throw error;
		}
		var i;
		var ERROR_MSG = '''';
		// Put your queries here and respect the same template ( FROM TABLE ... in the second line).
		var queries_dm = [

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.HOLDINGS.FACT_HOLDINGS F
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_ACCOUNTS D1
			ON F.SK_DIM_ACCOUNTS = D1.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_FINANCIAL_INSTRUMENTS D2
			ON F.SK_DIM_MARKETPRODUCTS = D2.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_ADVISOR D3
			ON F.SK_DIM_ADVISORS = D3.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_CLIENTS D4
			ON F.SK_DIM_CLIENTS = D4.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_PLANS D5
			ON F.SK_DIM_PLANS = D5.ID
		WHERE D1.ID IS NULL OR D2.ID IS NULL OR D3.ID IS NULL OR D4.ID IS NULL OR D5.ID IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.REVENUES.FACT_REVENUE F
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_ACCOUNTS D1
			ON F.SK_DIM_ACCOUNTS = D1.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_FINANCIAL_INSTRUMENTS D2
			ON F.SK_DIM_MARKETPRODUCTS = D2.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_ADVISOR D3
			ON F.SK_DIM_ADVISORS = D3.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_CLIENTS D4
			ON F.SK_DIM_CLIENTS = D4.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_PLANS D5
			ON F.SK_DIM_PLANS = D5.ID
		WHERE D1.ID IS NULL OR D2.ID IS NULL OR D3.ID IS NULL OR D4.ID IS NULL OR D5.ID IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.TRANSACTIONS.FACT_TRANSACTIONS F
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_FINANCIAL_INSTRUMENTS D1
			ON F.SK_DIM_MARKETPRODUCTS = D1.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_ADVISOR D2
			ON F.SK_DIM_ADVISORS = D2.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_CLIENTS D3
			ON F.SK_DIM_CLIENTS = D3.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_PLANS D4
			ON F.SK_DIM_PLANS = D4.ID
		WHERE D1.ID IS NULL OR D2.ID IS NULL OR D3.ID IS NULL OR D4.ID IS NULL`
	
		];

    	var queries_dv = [

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE H 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_COMMISSION S1
			ON S1.HK_HUB = H.HK_HUB
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_CERTS S2
			ON S2.HK_HUB = H.HK_HUB 
		WHERE S1.HK_HUB IS NULL AND S2.HK_HUB IS NULL`,
		
		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES H 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_NBIN S1
			ON S1.HK_HUB = H.HK_HUB
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_UNIVERIS S2
			ON S2.HK_HUB = H.HK_HUB 
		WHERE S1.HK_HUB IS NULL AND S2.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.HUB_CONTRACT H 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.SAT_CONTRACT_IAS_NBIN S1
			ON S1.HK_HUB = H.HK_HUB
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.SAT_CONTRACT_IAS_UNIVERIS S2
			ON S2.HK_HUB = H.HK_HUB 
		WHERE S1.HK_HUB IS NULL AND S2.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_CERTS S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_COMMISSION S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_REF_MAPPING_PRODUCT_TYPE_IAS_IAVM S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.REF_MAPPING_PRODUCT_TYPE H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_NBIN S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_UNIVERIS S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_REF_HOLIDAYS_IAS_IAVM S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.REF_HOLIDAYS_IAS_IAVM H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_REF_FUND_IAS_FUNDATA S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.REF_FUND H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_IAS_NBIN S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_PARTY_ROLE_ACCOUNT_HOLDER H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_IAS_NBIN S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR L
			ON S.HK_LINK = L.HK_LINK 
		WHERE L.HK_LINK  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.LINK_COMMISSION_SHARE_RR L
			ON S.HK_LINK = L.HK_LINK
		WHERE L.HK_LINK IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_NBIN S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_INVESTMENT_PRODUCT_TYPE H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_CONTRACT_IAS_UNIVERIS S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_CONTRACT H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_CONTRACT_IAS_NBIN S
			LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_CONTRACT H
		ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_ADVISOR_IAS_CERTS S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_ADVISOR_IAS_CERTS H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_BDV.SAT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_BDV.HUB_PARTY_ROLE_ADVISOR H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_BDV.LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE L
			ON S.HK_LINK = L.HK_LINK 
		WHERE L.HK_LINK IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_BDV.SAT_LINK_INVESTMENT_CONTRACT S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_BDV.LINK_INVESTMENT_CONTRACT L
			ON S.HK_LINK = L.HK_LINK 
		WHERE L.HK_LINK IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_NBIN_CMSDT S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR L
			ON S.HK_LINK = L.HK_LINK 
		WHERE L.HK_LINK IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_NBIN_IAVMBK S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR L
			ON S.HK_LINK = L.HK_LINK 
		WHERE L.HK_LINK IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_UNIVERIS S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR L
			ON S.HK_LINK = L.HK_LINK 
		WHERE L.HK_LINK IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.STEWARDSHIP_RDV.SAT_REF_MANUAL_ADVISOR_RVP_IAS S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.STEWARDSHIP_RDV.REF_MANUAL_ADVISOR_RVP_IAS H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.STEWARDSHIP_RDV.SAT_REF_MAPPING_OPER_TYPE_IAS S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.STEWARDSHIP_RDV.REF_MAPPING_OPER_TYPE H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.STEWARDSHIP_RDV.SAT_REF_PRODUCT_ASSET_CATEGORY_IAS S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.STEWARDSHIP_RDV.REF_PRODUCT_ASSET_CATEGORY H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.HOLDINGS_RDV.SAT_LINK_INVESTMENT_CASH_RR_IAS_NBIN S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN L
			ON S.HK_LINK = L.HK_LINK 
		WHERE L.HK_LINK IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_IAS_NBIN S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN L
			ON S.HK_LINK = L.HK_LINK 
		WHERE L.HK_LINK IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.HOLDINGS_BDV.SAT_LINK_INVESTMENT S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.HOLDINGS_BDV.LINK_INVESTMENT L
			ON S.HK_LINK = L.HK_LINK 
		WHERE L.HK_LINK IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR L
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_CONTRACT H1 ON H1.HK_HUB = L.HK_HUB_CONTRACT 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_PARTY_ROLE_ACCOUNT_HOLDER H2 ON H2.HK_HUB = L.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE H3 ON H3.HK_HUB = L.HK_HUB_REGISTERED_REPRESENTATIVE 
		WHERE 
			H1.HK_HUB  IS NULL
			OR H2.HK_HUB  IS NULL
			OR H3.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.LINK_COMMISSION_SHARE_RR L
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE H1 ON H1.HK_HUB = L.HK_HUB_FROM 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE H2 ON H2.HK_HUB = L.HK_HUB_TO 
		WHERE 
			H1.HK_HUB  IS NULL
			OR H2.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_BDV.LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE L
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE H1 ON H1.HK_HUB = L.HK_HUB_REGISTERED_REPRESENTATIVE 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_BDV.HUB_PARTY_ROLE_ADVISOR H2 ON H2.HK_HUB = L.HK_HUB_PARTY_ROLE_ADVISOR 
		WHERE 
			H1.HK_HUB  IS NULL
			OR H2.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_BDV.LINK_INVESTMENT_CONTRACT L
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_CONTRACT H1 ON H1.HK_HUB = L.HK_HUB_CONTRACT 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_PARTY_ROLE_ACCOUNT_HOLDER H2 ON H2.HK_HUB = L.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_BDV.HUB_PARTY_ROLE_ADVISOR H3 ON H3.HK_HUB = L.HK_HUB_PARTY_ROLE_ADVISOR 
		WHERE 
			H1.HK_HUB  IS NULL
			OR H2.HK_HUB  IS NULL
			OR H3.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR L
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_CONTRACT H1 ON H1.HK_HUB = L.HK_HUB_CONTRACT 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE H2 ON H2.HK_HUB = L.HK_HUB_REGISTERED_REPRESENTATIVE 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_INVESTMENT_PRODUCT_TYPE H3 ON H3.HK_HUB = L.HK_HUB_INVESTMENT_PRODUCT_TYPE
		WHERE 
			H1.HK_HUB  IS NULL
			OR H2.HK_HUB  IS NULL
			OR H3.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN L
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_CONTRACT H1 ON H1.HK_HUB = L.HK_HUB_CONTRACT 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE H2 ON H2.HK_HUB = L.HK_HUB_REGISTERED_REPRESENTATIVE 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_INVESTMENT_PRODUCT_TYPE H3 ON H3.HK_HUB = L.HK_HUB_INVESTMENT_PRODUCT_TYPE
		WHERE 
			H1.HK_HUB  IS NULL
			OR H2.HK_HUB  IS NULL
			OR H3.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.HOLDINGS_BDV.LINK_INVESTMENT L
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_CONTRACT H1 ON H1.HK_HUB = L.HK_HUB_CONTRACT 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_INVESTMENT_PRODUCT_TYPE H2 ON H2.HK_HUB = L.HK_HUB_INVESTMENT_PRODUCT_TYPE
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_BDV.HUB_PARTY_ROLE_ADVISOR H3 ON H3.HK_HUB = L.HK_HUB_PARTY_ROLE_ADVISOR 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_PARTY_ROLE_ACCOUNT_HOLDER H4 ON H4.HK_HUB = L.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES H5 ON H5.HK_HUB = L.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 
		WHERE 
			H1.HK_HUB  IS NULL
			OR H2.HK_HUB  IS NULL
			OR H3.HK_HUB  IS NULL
			OR H4.HK_HUB  IS NULL
			OR H5.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN L
		LEFT OUTER JOIN ` + DATABASE_NAME + `.HOLDINGS_RDV.SAT_LINK_INVESTMENT_CASH_RR_IAS_NBIN S1 ON L.HK_LINK = S1.HK_LINK 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_IAS_NBIN S2 ON L.HK_LINK = S2.HK_LINK 
		WHERE S1.HK_LINK IS NULL
		AND S2.HK_LINK IS NULL` 
		];
		
		if (DATABASE_NAME.endsWith(""_DWH"")) {
			for (i = 0; i < queries_dv.length; i++) {
	  			var RESULT_RI_ISSUES = snowflake.createStatement( {sqlText: queries_dv[i] } );
				var FINAL_RESULT = RESULT_RI_ISSUES.execute();
				FINAL_RESULT.next();
				var RI_ISSUES = FINAL_RESULT.getColumnValue(1);
				if (RI_ISSUES != 0){
					ERROR_MSG += ''\\n'' + RI_ISSUES + '' NOT MATCHED ROW(s) IN '' + (queries_dv[i].split(''\\n'')[1]).replace(''FROM '','''') + '' \\n'';
				}
			}
		}
		else if (DATABASE_NAME.endsWith(""_DM"")) {
			for (i = 0; i < queries_dm.length; i++) {
	  			var RESULT_RI_ISSUES = snowflake.createStatement( {sqlText: queries_dm[i] } );
				var FINAL_RESULT = RESULT_RI_ISSUES.execute();
				FINAL_RESULT.next();
				var RI_ISSUES = FINAL_RESULT.getColumnValue(1);
				if (RI_ISSUES != 0){
					ERROR_MSG += ''\\n'' + RI_ISSUES + '' NOT MATCHED ROW(s) IN '' + (queries_dm[i].split(''\\n'')[1]).replace(''FROM '','''') + '' \\n'';
				}
			}
		}
		
		if (ERROR_MSG != '''') {
			throw ERROR_MSG;
		}
 
	return 1;
  ';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.CLONE_INF_TOOLS.USP_IAW_INSERT_GHOST_MEMBERS(""DATABASE_NAME"" VARCHAR(50))
RETURNS VARCHAR(1)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '  
		// throw an error if checking integrity is not applicable (wrong database name)
		if (!(DATABASE_NAME.endsWith(""_DM"")) && !(DATABASE_NAME.endsWith(""_DWH"")))
		{
			var error = ''Inserting ghost members for '' + DATABASE_NAME  + '' is not applicable.'';
			throw error;
		}
    	var get_tables = ""SELECT table_schema, table_name FROM "" + DATABASE_NAME + "".information_schema.tables WHERE (table_name <> ''REF_DATE'' AND table_type = ''BASE TABLE'' AND table_schema NOT IN (''INFORMATION_SCHEMA'',''PUBLIC'',''TOOLS'') AND (table_name LIKE ''SAT_%'' AND table_name NOT LIKE ''SAT_LINK%'' OR table_name LIKE ''HUB_%'' OR table_name LIKE ''REF_%'' )) OR ( table_name NOT IN (''DIM_DATE'',''DIM_USER'') AND table_type = ''BASE TABLE'' AND table_schema NOT IN (''INFORMATION_SCHEMA'',''PUBLIC'',''TOOLS'') AND table_name LIKE ''DIM_%'' AND table_schema NOT LIKE ''%_BKP%'')"";
		var result_tables = snowflake.createStatement( {sqlText: get_tables} );
    	var tables = result_tables.execute();
    	// Loop through all tables, processing one table at a time... 
    	while (tables.next())  {
			try {
				var schema_name = tables.getColumnValue(1);
       			var table_name = tables.getColumnValue(2);
				var sql_command_insert_hubs_and_refs =  "" INSERT INTO "" + DATABASE_NAME + ""."" + schema_name + ""."" + table_name + "" (HK_HUB, MD_EXTRACT_DT, MD_CREATION_AUDIT_ID, MD_CREATION_DT, MD_SOURCE, MD_SRC_SYSTEM) SELECT ''0'', ''2000-01-01'',''0'',SYSTIMESTAMP(),''NA'',''NA'' WHERE NOT EXISTS (SELECT 1 FROM "" + DATABASE_NAME + ""."" + schema_name + ""."" + table_name + "" WHERE HK_HUB = ''0'')"";	 
 				var sql_command_insert_sats =  "" INSERT INTO ""+ DATABASE_NAME + ""."" + schema_name + ""."" + table_name + "" (HK_HUB, MD_START_DT, MD_EXTRACT_DT, MD_CREATION_AUDIT_ID, MD_CREATION_DT, MD_SOURCE, MD_SRC_SYSTEM, MD_ACTIVE,MD_HASHDIFF) SELECT ''0'', ''2000-01-01'', ''2000-01-01'',''0'',SYSTIMESTAMP(),''NA'',''NA'', ''A'',''0'' WHERE NOT EXISTS (SELECT 1 FROM "" + DATABASE_NAME + ""."" + schema_name + ""."" + table_name + "" WHERE HK_HUB = ''0'')"";	 
 				var sql_command_insert_dims =  "" INSERT INTO ""+ DATABASE_NAME + ""."" + schema_name + ""."" + table_name + "" (ID, HK_HUB , MD_START_DT , MD_CREATION_DT , MD_CREATION_AUDIT_ID, MD_MODIFY_DT,MD_MODIFY_AUDIT_ID, MD_SOURCE,MD_SRC_SYSTEM,MD_EXTRACT_DT,MD_HASH_NAT_KEYS,MD_HASHDIFF_TYPE1,MD_HASHDIFF_TYPE2)  SELECT -1 ,''0'', ''2000-01-01'',SYSTIMESTAMP(),''0'',SYSTIMESTAMP(),''0'',''NA'',''NA'',''2000-01-01'', ''0'', ''0'', ''0'' WHERE NOT EXISTS (SELECT 1 FROM "" + DATABASE_NAME + ""."" + schema_name + ""."" + table_name + "" WHERE HK_HUB = ''0'')"";	 
				var result_hubs_and_refs = snowflake.createStatement({ sqlText: sql_command_insert_hubs_and_refs });
				var result_sats = snowflake.createStatement({ sqlText: sql_command_insert_sats });
				var result_dims = snowflake.createStatement({ sqlText: sql_command_insert_dims });
				if (table_name.startsWith(""HUB_"") || (table_name.startsWith(""REF_""))) {
        			result_hubs_and_refs.execute();
        		}
				else if (table_name.startsWith(""SAT_"")) {
        			result_sats.execute();
        		}
				else if (table_name.startsWith(""DIM_"")) {
        			result_dims.execute();
        		}
    		}
			catch (err)  {
        		var error = ''Failed when loading '' + schema_name + ""."" + table_name + '' -> '' +  err
        		throw error;
    		}
		}
	return 1;
  ';
create or replace schema DB_IAW_PROD_DWH.CLONE_INF_TRANSACTIONS_BDV;

create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for the REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for the HUB_CONTRACT',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	TRANSACTION_ID VARCHAR(100) COMMENT 'The ID of the transaction',
	CLIENT_ID VARCHAR(100) COMMENT 'The ID of the client',
	MASTER_CODE VARCHAR(50) COMMENT 'Advisor ID',
	CONTRACT_ID VARCHAR(100) COMMENT 'Contract ID',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product ID',
	PLN_MNEM VARCHAR(512) COMMENT 'Plan code',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	ASC_1_RESP_PLAN_TYPES VARCHAR(10) COMMENT 'subtype of the RESP plans',
	TRADE_DATE TIMESTAMP_NTZ(9) COMMENT 'The trading date of the transaction',
	GROSS_AMOUNT NUMBER(38,12) COMMENT 'Transaction gross amount',
	TRANSACTION_TYPE VARCHAR(21) COMMENT 'Transaction type',
	ORD_TRANSACTION_TYPE NUMBER(1,0) COMMENT 'Transaction type order',
	CASH_FLOW VARCHAR(8000) COMMENT 'Transaction CASH FLOW',
	CASH_FLOW_TYPE VARCHAR(8) COMMENT 'Transaction CASH FLOW TYPE',
	ADMINISTRATORY_TYPE VARCHAR(8000) COMMENT 'Transaction ADMINISTRATORY TYPE',
	DEPARTED_ADVISOR_IND NUMBER(1,0) COMMENT 'DEPARTED ADVISOR INDICATOR',
	DAYS_LAST_PRICED NUMBER(4,0),
	DEPARTED_ADVISOR_MASTER_CODE VARCHAR(50),
	A_C_REPRESENTATIVE VARCHAR(50),
	DEPARTED_ADVISOR_12M_IND NUMBER(1,0) COMMENT 'Departed advisor''s indicator for the last 12 months'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for the REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for the HUB_CONTRACT',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	TRANSACTION_ID VARCHAR(100) COMMENT 'The ID of the transaction',
	UNIVERIS_CLIENT_ID VARCHAR(100) COMMENT 'Univeris Client ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Advisor ID',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product ID',
	PLN_MNEM VARCHAR(100) COMMENT 'Plan ID',
	TRADE_DATE TIMESTAMP_NTZ(9) COMMENT 'Transaction Trading Date',
	GROSS_AMOUNT NUMBER(38,12) COMMENT 'Transaction Gross amount',
	TRANSACTION_TYPE VARCHAR(21) COMMENT 'Transaction type',
	ORD_TRANSACTION_TYPE NUMBER(1,0) COMMENT 'Transaction type order',
	CASH_FLOW VARCHAR(16777216) COMMENT 'Transaction CASH FLOW',
	CASH_FLOW_TYPE VARCHAR(8) COMMENT 'Transaction CASH FLOW TYPE',
	ADMINISTRATORY_TYPE VARCHAR(8000) COMMENT 'Transaction ADMINISTRATORY TYPE',
	A_C_REPRESENTATIVE VARCHAR(50)
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for the REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for the HUB_CONTRACT',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	TRANSACTION_ID VARCHAR(100) COMMENT 'The ID of the transaction',
	UNIVERIS_CLIENT_ID VARCHAR(100) COMMENT 'Univeris Client ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Advisor ID',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product ID',
	PLN_MNEM VARCHAR(100) COMMENT 'Plan ID',
	TRADE_DATE TIMESTAMP_NTZ(9) COMMENT 'Transaction Trading Date',
	GROSS_AMOUNT NUMBER(38,12) COMMENT 'Transaction Gross amount',
	TRANSACTION_TYPE VARCHAR(21) COMMENT 'Transaction type',
	ORD_TRANSACTION_TYPE NUMBER(1,0) COMMENT 'Transaction type order',
	CASH_FLOW VARCHAR(8000) COMMENT 'Transaction CASH FLOW',
	CASH_FLOW_TYPE VARCHAR(8) COMMENT 'Transaction CASH FLOW TYPE',
	ADMINISTRATORY_TYPE VARCHAR(8000) COMMENT 'Transaction ADMINISTRATORY TYPE',
	DEPARTED_ADVISOR_IND NUMBER(1,0) COMMENT 'DEPARTED ADVISOR INDICATOR',
	DEPARTED_ADVISOR_MASTER_CODE VARCHAR(50),
	A_C_REPRESENTATIVE VARCHAR(50)
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_TRANSACTIONS_BDV.WT_REF_MAPPING_OPER_TYPE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	IBMSOURCE VARCHAR(12) COMMENT 'IBM Source',
	LEVEL NUMBER(11,0) COMMENT 'Level Code',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	DESCRIPTION_EN VARCHAR(60) COMMENT 'Description in English',
	DESCRIPTION_SHORT_EN VARCHAR(30) COMMENT 'Short Description in English',
	DESCRIPTION_FR VARCHAR(60) COMMENT 'Description in French',
	DESCRIPTION_SHORT_FR VARCHAR(30) COMMENT 'Sort Description in french',
	OPERATION_TYPE VARCHAR(3) COMMENT 'Operation type',
	DISPLAY NUMBER(11,0) COMMENT 'Display Number',
	CASHFLOW_SUMMARY VARCHAR(4) COMMENT 'CASHFLOW SUMMARY',
	ISCASHFLOW NUMBER(11,0) COMMENT 'Indicator to determine the cashflow'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for the REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the INVESTMENT_PRODUCT_TYPE',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for the HUB_CONTRACT',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	TRANSACTION_ID VARCHAR(100) COMMENT 'The ID of the transaction',
	CLIENT_ID VARCHAR(100) COMMENT 'Client ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Code of the advisor',
	CONTRACT_ID VARCHAR(100) COMMENT 'Contract ID',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'product ID',
	ACCOUNT_RAP_CODE VARCHAR(1) COMMENT 'ACCOUNT RAP CODE',
	RETAIL_PLAN VARCHAR(4) COMMENT 'Retail Plan',
	TRAN_TRADING_NET_AMT NUMBER(38,2) COMMENT 'Transaction net amount in CAD or USD',
	TRAN_TRADING_TRADE_DATE DATE COMMENT 'Trade date',
	TRAN_ENTRY_DESCRIPTION VARCHAR(50) COMMENT 'Description of the trading',
	TRAN_USER_DESCRIPTION VARCHAR(50) COMMENT 'Description of the trading',
	TRAN_PROCESS_DATE DATE COMMENT 'Process date',
	TRAN_TXN_REFERENCE_ID VARCHAR(50) COMMENT 'Tax reference ID',
	TRAN_TRADING_CURRENCY VARCHAR(10) COMMENT 'Transaction amounts currency',
	TRAN_TRADING_GROSS_AMT NUMBER(38,2) COMMENT 'Transaction gross amount in CAD or USD',
	TRAN_QTY NUMBER(38,4) COMMENT 'Quantity',
	EXCHANGERATE NUMBER(38,8) COMMENT 'Conversion rate from USD to CAD',
	TI_ISSUE_PRICE NUMBER(38,5) COMMENT 'TI Issue Price',
	STRIKE_PRICE NUMBER(38,8) COMMENT 'STRIKE PRICE',
	TI_UNDERLYING_CDN_PRICE NUMBER(38,8) COMMENT 'TI Underlying CDN Price, this field and above fields were added for OG calculation',
	TI_UNDERLYING_USD_PRICE NUMBER(38,8) COMMENT 'TI Underlying USD Price',
	TI_BASIS_POINT NUMBER(38,5) COMMENT 'TI Basis Point',
	TI_FACE_VALUE NUMBER(38,5) COMMENT 'TI Face Value',
	TI_SYMBOL VARCHAR(50) COMMENT 'Product symbol',
	COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
	TRAN_TRADING_TYPE VARCHAR(10) COMMENT 'Type of the trading : Sell, Buy,...',
	ADMINISTRATORY_TYPE VARCHAR(8000) COMMENT 'Type of administration',
	A_C_ACCOUNT_CLASS VARCHAR(3) COMMENT 'Account class : 038, 040, ...',
	RETAIL_PLAN_RESP VARCHAR(1) COMMENT 'To be defined',
	TI_PRIMARY_MARKET VARCHAR(50) COMMENT 'Primary Market',
	A_C_REPRESENTATIVE VARCHAR(50) COMMENT 'Representative ID',
	ASC_1_RESP_PLAN_TYPES VARCHAR(100) COMMENT 'subtype of the RESP plans',
	DEPARTED_ADVISOR_IND NUMBER(1,0) COMMENT 'DEPARTED ADVISOR INDICATOR',
	DEPARTED_ADVISOR_MASTER_CODE VARCHAR(50)
);
create or replace view DB_IAW_PROD_DWH.CLONE_INF_TRANSACTIONS_BDV.VW_INITIAL_LOADING_WT_TRANSLINK_FINANCIAL_TRANSACTION(
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_CONTRACT,
	MD_START_DT,
	MD_CREATION_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_CREATION_AUDIT_ID,
	MD_EXTRACT_DT,
	TRANSACTION_ID,
	CLIENT_ID,
	MASTER_CODE,
	CONTRACT_ID,
	INVESTMENT_PRODUCT_ID,
	ACCOUNT_RAP_CODE,
	RETAIL_PLAN,
	TRAN_TRADING_NET_AMT,
	TRAN_TRADING_TRADE_DATE,
	TRAN_ENTRY_DESCRIPTION,
	TRAN_USER_DESCRIPTION,
	TRAN_PROCESS_DATE,
	TRAN_TXN_REFERENCE_ID,
	TRAN_TRADING_CURRENCY,
	TRAN_TRADING_GROSS_AMT,
	TRAN_QTY,
	EXCHANGERATE,
	TI_ISSUE_PRICE,
	STRIKE_PRICE,
	TI_UNDERLYING_CDN_PRICE,
	TI_UNDERLYING_USD_PRICE,
	TI_BASIS_POINT,
	TI_FACE_VALUE,
	TI_SYMBOL,
	COMMISSIONPCT,
	TRAN_TRADING_TYPE,
	ADMINISTRATORY_TYPE,
	A_C_ACCOUNT_CLASS,
	RETAIL_PLAN_RESP,
	TI_PRIMARY_MARKET,
	A_C_REPRESENTATIVE,
	ASC_1_RESP_PLAN_TYPES,
	DEPARTED_ADVISOR_IND,
	DEPARTED_ADVISOR_MASTER_CODE
) as
WITH LATEST_VERSION_SHARE AS (
	SELECT 
	SLT.HK_LINK,
	COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE,
	COMM_SHARE.MD_START_DT,
	COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR,
	COMM_SHARE.MASTER_CODE,
	COMM_SHARE.COMMISSIONPCT,
	COALESCE (COMM_SHARE.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLT.HK_LINK,COMM_SHARE.HK_LINK ORDER BY COMM_SHARE.MD_START_DT DESC ),1) AS RANK_SHARE
	FROM TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_NBIN_IAVMBK SLT
	INNER JOIN TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR LT
    	ON  SLT.HK_LINK=LT.HK_LINK
	LEFT JOIN 	( SELECT LCS.HK_LINK,LCS.HK_HUB_REGISTERED_REPRESENTATIVE,CS.MD_START_DT,LCS.HK_HUB_PARTY_ROLE_ADVISOR,LCS.MASTER_CODE,CS.COMMISSIONPCT,CS.MD_ACTIVE
	        	FROM SHARED_BDV.LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE LCS 
	        	INNER JOIN SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE CS 
	        		ON CS.HK_LINK=LCS.HK_LINK AND CS.MD_SRC_SYSTEM = 'IAS'
	    		) COMM_SHARE
	    ON LT.HK_HUB_REGISTERED_REPRESENTATIVE=COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE
	    AND  COMM_SHARE.MD_START_DT <= DATEADD(SECOND, 86399, SLT.MD_START_DT) 
),
/*LATEST_VERSION_INVESTMENT_CONTRACT AS (
	SELECT INVESTMENT_CONTRACT.HK_HUB_PARTY_ROLE_ADVISOR, COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR,
	SLT.HK_LINK,
	INVESTMENT_CONTRACT.HK_HUB_CONTRACT,
	INVESTMENT_CONTRACT.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	INVESTMENT_CONTRACT.HK_HUB_PARTY_ROLE_ADVISOR,
	COALESCE (INVESTMENT_CONTRACT.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLT.HK_LINK,INVESTMENT_CONTRACT.HK_LINK ORDER BY INVESTMENT_CONTRACT.MD_START_DT DESC ),1) AS RANK_INVESTMENT_CONTRACT
	FROM TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_NBIN_IAVMBK SLT
	INNER JOIN TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR LT
    	ON  SLT.HK_LINK=LT.HK_LINK
    LEFT JOIN LATEST_VERSION_SHARE COMM_SHARE
	    ON LT.HK_HUB_REGISTERED_REPRESENTATIVE=COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE
	    AND  COMM_SHARE.HK_LINK = SLT.HK_LINK 
	    AND  COMM_SHARE.MD_ACTIVE = 'A' 
	    AND COMM_SHARE.RANK_SHARE = 1
	LEFT JOIN 
	(	SELECT DISTINCT SLIC.HK_LINK, HK_HUB_CONTRACT, HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, HK_HUB_PARTY_ROLE_ADVISOR, LIC.CLIENT_ID, SLIC.MD_ACTIVE, MD_START_DT
		FROM SHARED_BDV.LINK_INVESTMENT_CONTRACT LIC 
		INNER JOIN SHARED_BDV.SAT_LINK_INVESTMENT_CONTRACT SLIC 
			ON SLIC.HK_LINK = LIC.HK_LINK 
	) INVESTMENT_CONTRACT
	ON INVESTMENT_CONTRACT.HK_HUB_CONTRACT = LT.HK_HUB_CONTRACT 
	AND INVESTMENT_CONTRACT.HK_HUB_PARTY_ROLE_ADVISOR = COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR
	AND INVESTMENT_CONTRACT.MD_START_DT <= SLT.MD_START_DT
), */
LATEST_VERSION_CONTRACT AS (
	SELECT SLT.HK_LINK,
	CONTRACT.HK_HUB,
	CONTRACT.A_C_CLIENT, 
	CONTRACT.ACCOUNT_RAP_CODE,
	CONTRACT.ASC_1_RESP_PLAN_TYPES,
	CONTRACT.RETAIL_PLAN,
	CONTRACT.A_C_CURRENCY,
	CONTRACT.ASC_3_MANAGED_TYPE,
	CONTRACT.ADMINISTRATOR_TYPE,
	CONTRACT.A_C_ACCOUNT_CLASS,
	CONTRACT.RETAIL_PLAN_RESP,
	COALESCE (CONTRACT.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLT.HK_LINK,CONTRACT.HK_HUB ORDER BY CONTRACT.MD_START_DT DESC ),1) AS RANK_CONTRACT
	FROM TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_NBIN_IAVMBK SLT
	INNER JOIN TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR LT
    	ON  SLT.HK_LINK=LT.HK_LINK
	LEFT JOIN  SHARED_RDV.SAT_CONTRACT_IAS_NBIN CONTRACT
	    ON LT.HK_HUB_CONTRACT = CONTRACT.HK_HUB
	    AND CONTRACT.MD_START_DT <= SLT.MD_START_DT
),
LATEST_VERSION_SERVICING_CODES AS (
	SELECT SLT.HK_LINK,
	SC.MASTER_CODE,
	SC.HK_HUB_REGISTERED_REPRESENTATIVE,
	COALESCE (SC.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLT.HK_LINK,SC.HK_LINK  ORDER BY SC.MD_START_DT DESC ),1) AS RANK_SERVICING_CODES
	FROM TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_NBIN_IAVMBK SLT
	INNER JOIN TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR LT
    	ON  SLT.HK_LINK=LT.HK_LINK
	LEFT JOIN  (SELECT LSC.HK_LINK, LSC.MASTER_CODE, SLSC.MD_ACTIVE, SLSC.MD_START_DT, LSC.HK_HUB_REGISTERED_REPRESENTATIVE, SLSC.END_DATE 
				FROM STEWARDSHIP_BDV.LINK_SERVICING_CODES LSC 
				INNER JOIN  STEWARDSHIP_BDV.SAT_LINK_SERVICING_CODES SLSC 
	    		ON SLSC.HK_LINK  = LSC.HK_LINK AND SLSC.REP_ROW_NUM = 1) SC
	    ON LT.HK_HUB_REGISTERED_REPRESENTATIVE  = SC.HK_HUB_REGISTERED_REPRESENTATIVE 
	    AND SC.END_DATE <= SLT.TRAN_TRADING_TRADE_DATE
)
SELECT 		
		DECODE(TRUE, CONTRACT.A_C_CLIENT IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM(LT.MD_SRC_SYSTEM), '#NULL#'), '|' , COALESCE(TRIM(CONTRACT.A_C_CLIENT), '#NULL#')))))  AS HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
		COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR AS HK_HUB_PARTY_ROLE_ADVISOR, 
		LT.HK_HUB_INVESTMENT_PRODUCT_TYPE AS HK_HUB_INVESTMENT_PRODUCT_TYPE, 
		LT.HK_HUB_CONTRACT AS HK_HUB_CONTRACT, 
		DATEADD(DAY,1,SLT.TRAN_PROCESS_DATE) AS MD_START_DT, 
		CURRENT_TIMESTAMP() AS MD_CREATION_DT, 
		LT.MD_SOURCE AS MD_SOURCE, 
		LT.MD_SRC_SYSTEM AS MD_SRC_SYSTEM, 
		'-1' AS MD_CREATION_AUDIT_ID, 
		SLT.MD_EXTRACT_DT AS MD_EXTRACT_DT, 
		LT.TRANSACTION_ID AS TRANSACTION_ID, 
		CONTRACT.A_C_CLIENT AS CLIENT_ID, 
		COMM_SHARE.MASTER_CODE AS MASTER_CODE, 
		LT.CONTRACT_ID AS CONTRACT_ID, 
		LT.INVESTMENT_PRODUCT_ID AS INVESTMENT_PRODUCT_ID, 
		CONTRACT.ACCOUNT_RAP_CODE AS ACCOUNT_RAP_CODE, 
		CONTRACT.RETAIL_PLAN AS RETAIL_PLAN, 
		SLT.TRAN_TRADING_NET_AMT AS TRAN_TRADING_NET_AMT, 
		SLT.TRAN_TRADING_TRADE_DATE AS TRAN_TRADING_TRADE_DATE, 
		SLT.TRAN_ENTRY_DESCRIPTION AS TRAN_ENTRY_DESCRIPTION, 
		SLT.TRAN_USER_DESCRIPTION AS TRAN_USER_DESCRIPTION, 
		SLT.TRAN_PROCESS_DATE AS TRAN_PROCESS_DATE, 
		SLT.TRAN_TXN_REFERENCE_ID AS TRAN_TXN_REFERENCE_ID, 
		SLT.TRAN_TRADING_CURRENCY AS TRAN_TRADING_CURRENCY, 
		SLT.TRAN_TRADING_GROSS_AMT AS TRAN_TRADING_GROSS_AMT, 
		SLT.TRAN_QTY AS TRAN_QTY, 
		LER.EXCHANGERATE AS EXCHANGERATE, 
		SLT.TI_ISSUE_PRICE AS TI_ISSUE_PRICE, 
		SLT.STRIKE_PRICE AS STRIKE_PRICE, 
		SLT.TI_UNDERLYING_CDN_PRICE AS TI_UNDERLYING_CDN_PRICE, 
		SLT.TI_UNDERLYING_USD_PRICE AS TI_UNDERLYING_USD_PRICE, 
		SLT.TI_BASIS_POINT AS TI_BASIS_POINT, 
		SLT.TI_FACE_VALUE AS TI_FACE_VALUE, 
		SLT.TI_SYMBOL AS TI_SYMBOL, 
		COMM_SHARE.COMMISSIONPCT AS COMMISSIONPCT, 
		SLT.TRAN_TRADING_TYPE AS TRAN_TRADING_TYPE, 
		CONTRACT.ADMINISTRATOR_TYPE AS ADMINISTRATORY_TYPE, 
		CONTRACT.A_C_ACCOUNT_CLASS AS A_C_ACCOUNT_CLASS, 
		CONTRACT.RETAIL_PLAN_RESP AS RETAIL_PLAN_RESP, 
		SLT.TI_PRIMARY_MARKET AS TI_PRIMARY_MARKET, 
		LT.REGISTERED_REPRESENTATIVE_ID AS A_C_REPRESENTATIVE, 
		CONTRACT.ASC_1_RESP_PLAN_TYPES AS ASC_1_RESP_PLAN_TYPES	,
		CASE WHEN SERVICING_CODES.HK_HUB_REGISTERED_REPRESENTATIVE IS NULL THEN 0 ELSE 1 END AS DEPARTED_ADVISOR_IND,
		SERVICING_CODES.MASTER_CODE AS DEPARTED_ADVISOR_MASTER_CODE
FROM TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_NBIN_IAVMBK SLT
INNER JOIN TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR LT
    ON  SLT.HK_LINK=LT.HK_LINK
LEFT JOIN LATEST_VERSION_SHARE COMM_SHARE
    ON LT.HK_HUB_REGISTERED_REPRESENTATIVE=COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE
    AND  COMM_SHARE.HK_LINK = SLT.HK_LINK 
    AND  COMM_SHARE.MD_ACTIVE = 'A' 
    AND COMM_SHARE.RANK_SHARE = 1
LEFT JOIN LATEST_VERSION_CONTRACT CONTRACT
    ON LT.HK_HUB_CONTRACT = CONTRACT.HK_HUB
    AND CONTRACT.HK_LINK = SLT.HK_LINK 
    AND  CONTRACT.MD_ACTIVE = 'A' AND CONTRACT.RANK_CONTRACT = 1
/*
LEFT JOIN LATEST_VERSION_INVESTMENT_CONTRACT INVESTMENT_CONTRACT
	ON INVESTMENT_CONTRACT.HK_LINK = SLT.HK_LINK 
	AND INVESTMENT_CONTRACT.HK_HUB_PARTY_ROLE_ADVISOR = COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR
	AND INVESTMENT_CONTRACT.HK_HUB_CONTRACT = LT.HK_HUB_CONTRACT
    AND INVESTMENT_CONTRACT.MD_ACTIVE = 'A' AND INVESTMENT_CONTRACT.RANK_INVESTMENT_CONTRACT = 1
*/
LEFT JOIN LATEST_VERSION_SERVICING_CODES SERVICING_CODES
    ON  SERVICING_CODES.HK_LINK = SLT.HK_LINK 
    AND  SERVICING_CODES.MD_ACTIVE = 'A' AND SERVICING_CODES.RANK_SERVICING_CODES = 1    
LEFT JOIN SHARED_BDV.TRANSLINK_EXCHANGE_RATE LER
	ON LER.EXCHANGE_DATE = SLT.TRAN_TRADING_TRADE_DATE
	/*
LEFT JOIN ( SELECT DISTINCT REP_CODE FROM STEWARDSHIP_BDV.LINK_SERVICING_CODES WHERE REP_CODE IS NOT NULL) DEP 
	ON DEP.REP_CODE = LT.REGISTERED_REPRESENTATIVE_ID;*/;
create or replace view DB_IAW_PROD_DWH.CLONE_INF_TRANSACTIONS_BDV.VW_TRANSLINK_FINANCIAL_TRANSACTION(
	HK_LINK,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_CONTRACT,
	MD_START_DT,
	MD_EXTRACT_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	TRANSACTION_ID,
	CLIENT_ID,
	MASTER_CODE,
	CONTRACT_ID,
	INVESTMENT_PRODUCT_ID,
	PLN_MNEM,
	ACCOUNT_RAP_CODE,
	RETAIL_PLAN,
	ASC_1_RESP_PLAN_TYPES,
	""Trade date"",
	""Gross amount"",
	""Transaction type"",
	ORD_TRANSACTION_TYPE,
	CASH_FLOW,
	CASHFLOW_TYPE,
	""Administratory type"",
	""number of transactions"",
	DEPARTED_ADVISOR_IND,
	DAYS_LAST_PRICED,
	DEPARTED_ADVISOR_MASTER_CODE,
	A_C_REPRESENTATIVE,
	DEPARTED_ADVISOR_12M_IND
) as
WITH EXCLUSION AS
(
SELECT
    R.REPID,
    S.IND_EXCLUDE,
    S.MD_ACTIVE
FROM DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_MANUAL_ADVISOR_RVP_IAS R                    
INNER JOIN DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_MANUAL_ADVISOR_RVP_IAS S
ON R.HK_HUB = S.HK_HUB
QUALIFY ROW_NUMBER() OVER (PARTITION BY R.REPID ORDER BY S.MD_START_DT DESC)=1
),
REVERSALS_BK AS
(SELECT
    DISTINCT Y.TRANSACTION_ID ,
    TRUE AS REVERSAL_IND
FROM
    DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION Y
INNER JOIN
(
SELECT DISTINCT
L.REGISTERED_REPRESENTATIVE_ID,L.CONTRACT_ID,SL.TRAN_ENTRY_DESCRIPTION,SL.TRAN_TRADING_NET_AMT,SL.TRAN_TRADING_TRADE_DATE
FROM DB_IAW_PROD_DWH.TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR L
INNER JOIN
DB_IAW_PROD_DWH.TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_NBIN_IAVMBK SL 
ON
L.HK_LINK=SL.HK_LINK
) N 
     ON
     SUBSTRING(Y.TRAN_ENTRY_DESCRIPTION,4) = N.TRAN_ENTRY_DESCRIPTION
     AND Y.A_C_REPRESENTATIVE = N.REGISTERED_REPRESENTATIVE_ID
     AND Y.CONTRACT_ID = N.CONTRACT_ID 
     AND Y.TRAN_TRADING_NET_AMT = -1*N.TRAN_TRADING_NET_AMT 
     AND Y.TRAN_TRADING_TRADE_DATE = N.TRAN_TRADING_TRADE_DATE 
WHERE
     Y.TRAN_ENTRY_DESCRIPTION LIKE 'CXL%'
),
Val AS
(
SELECT -- We added Distinct because we have duplicates in the WT and this is normal because we are splitting transactions by the share
DISTINCT
CASE WHEN Tran_User_Description like '%INT%' THEN TO_NUMBER(SPLIT_PART(REGEXP_REPLACE(TRAN_USER_DESCRIPTION,'( ){2,}', ' '),' ',1), 38,10) + TO_NUMBER (SPLIT_PART(REGEXP_REPLACE(TRAN_USER_DESCRIPTION,'( ){2,}', ' '),' ',2), 38,10) ELSE TO_NUMBER(Tran_User_Description, 22,6) END  AS Tran_User_Description,
TRAN_PROCESS_DATE,
CONTRACT_ID,
Tran_Txn_Reference_ID
FROM DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION
WHERE Tran_Entry_Description in ('VALUE', 'VALEUR')  
), -- Removed the accountid and picked the latest price based on SYMBOL, MARKET, and PROCESSDATE to include the missing transactions
Pos AS (
    SELECT
        DISTINCT
        UNITOFMEASURE, SYMBOL, MARKET, PROCESSDATE, CLOSEPRICE, PRICECURRENCY,BIDPRICE,ASKPRICE
    FROM  DB_IAW_PROD_DWH.TRANSACTIONS_RDV.TRANSLINK_POSITION_PRICE_IAS_IAVM P
    WHERE
        COALESCE(TO_VARCHAR(TRY_TO_NUMBER(P.ACCOUNTID)),'') <> P.ACCOUNTID
),
POS_CLOSEST_PRICE_TRADE_DATE AS (               --  should be max trade date #RF
    SELECT T.HK_LINK, MAX(P.PROCESSDATE) AS PROCESS_DATE
    FROM Pos P
    INNER JOIN DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION T
    ON P.MARKET = T.TI_Primary_Market 
    AND P.SYMBOL = T.TI_Symbol 
    WHERE P.PROCESSDATE <= T.TRAN_TRADING_TRADE_DATE
    group by T.HK_LINK
),
POS_CLOSEST_PRICE_PROCESS_DATE AS (
    SELECT T.HK_LINK, MAX(P.PROCESSDATE) AS PROCESS_DATE
    FROM Pos P
    INNER JOIN DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION T
    ON P.MARKET = T.TI_Primary_Market 
    AND P.SYMBOL = T.TI_Symbol 
    WHERE P.PROCESSDATE <= T.TRAN_PROCESS_DATE  
    group by T.HK_LINK
),
POS_ALL AS
(
    SELECT T.HK_LINK, 
    COALESCE (P1.PROCESSDATE, P2.PROCESSDATE, P3.PROCESSDATE, P4.PROCESSDATE, P5.PROCESSDATE) AS PROCESSDATE,
    COALESCE (P1.CLOSEPRICE, P2.CLOSEPRICE, P3.CLOSEPRICE, P4.CLOSEPRICE, P5.CLOSEPRICE) AS CLOSEPRICE,
    COALESCE (P1.BIDPRICE, P2.BIDPRICE, P3.BIDPRICE, P4.BIDPRICE, P5.BIDPRICE) AS BIDPRICE,
    COALESCE (P1.ASKPRICE, P2.ASKPRICE, P3.ASKPRICE, P4.ASKPRICE, P5.ASKPRICE) AS ASKPRICE,
    COALESCE (P1.UNITOFMEASURE, P2.UNITOFMEASURE, P3.UNITOFMEASURE, P4.UNITOFMEASURE, P5.UNITOFMEASURE) AS UNITOFMEASURE,
    COALESCE (P1.SYMBOL, P2.SYMBOL, P3.SYMBOL, P4.SYMBOL, P5.SYMBOL) AS SYMBOL,
    COALESCE (P1.MARKET, P2.MARKET, P3.MARKET, P4.MARKET, P5.MARKET) AS MARKET,
    COALESCE (P1.PRICECURRENCY, P2.PRICECURRENCY, P3.PRICECURRENCY, P4.PRICECURRENCY, P5.PRICECURRENCY) AS PRICECURRENCY
    FROM DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION T
    -- 1. We look at the transaction TRADE DATE
    LEFT JOIN Pos P1 
        ON P1.MARKET = T.TI_Primary_Market 
        AND P1.SYMBOL = T.TI_Symbol 
        AND P1.PROCESSDATE = T.TRAN_TRADING_TRADE_DATE  
    -- 2. We look one day prior to the trade date for the price
    LEFT JOIN Pos P2
        ON P2.MARKET = T.TI_Primary_Market 
        AND P2.SYMBOL = T.TI_Symbol 
        AND DATEADD(DAY,-1,P2.PROCESSDATE) = T.TRAN_TRADING_TRADE_DATE
    -- 3. We look at the process date
    LEFT JOIN Pos P3
        ON P3.MARKET = T.TI_Primary_Market 
        AND P3.SYMBOL = T.TI_Symbol 
        AND P3.PROCESSDATE = T.TRAN_PROCESS_DATE
    -- 4. We look at the history of the trade date. (we take the most recent price)
    LEFT JOIN POS_CLOSEST_PRICE_TRADE_DATE P4_HIS
        ON T.HK_LINK = P4_HIS.HK_LINK
    LEFT JOIN POS P4
        ON P4.MARKET = T.TI_Primary_Market 
        AND P4.SYMBOL = T.TI_Symbol 
        AND P4.PROCESSDATE =  P4_HIS.PROCESS_DATE
    -- 5.we look at the history of the process date. (we take the most recent price)   
    LEFT JOIN POS_CLOSEST_PRICE_PROCESS_DATE P5_HIS
        ON T.HK_LINK = P5_HIS.HK_LINK
    LEFT JOIN POS P5
        ON P5.MARKET = T.TI_Primary_Market 
        AND P5.SYMBOL = T.TI_Symbol 
        AND P5.PROCESSDATE =  P5_HIS.PROCESS_DATE
)
, ADVISOR_INFO as -- #RF: STORY 81850 - New Departed Advisor Indicator
( 
select S.HK_HUB, H.MASTER_CODE, S.END_DATE 
    from DB_IAW_PROD_DWH.SHARED_BDV.HUB_PARTY_ROLE_ADVISOR H 
    inner join DB_IAW_PROD_DWH.SHARED_BDV.SAT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH S 
        on H.HK_HUB = S.HK_HUB
qualify row_number() over (partition by S.HK_HUB order by  S.MD_START_DT desc) = 1 AND  S.END_DATE IS NOT NULL
)
SELECT
    HK_LINK,
    HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
    HK_HUB_PARTY_ROLE_ADVISOR,
    HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
    HK_HUB_INVESTMENT_PRODUCT_TYPE,
    HK_HUB_CONTRACT,
    MD_START_DT,
    MD_EXTRACT_DT,
    MD_SOURCE,
    MD_SRC_SYSTEM,
    TRANSACTION_ID,
    CLIENT_ID,
    MASTER_CODE,
    CONTRACT_ID,
    INVESTMENT_PRODUCT_ID,
    PLN_MNEM,ACCOUNT_RAP_CODE, RETAIL_PLAN, ASC_1_RESP_PLAN_TYPES,
    ""Trade date"",
    ""Gross amount"", ""Transaction type"", ORD_TRANSACTION_TYPE, CASH_FLOW, CASHFLOW_TYPE, ""Administratory type"",  
    ""number of transactions"",
    DEPARTED_ADVISOR_IND,
    DAYS_LAST_PRICED,
    DEPARTED_ADVISOR_MASTER_CODE,
    A_C_REPRESENTATIVE,
    DEPARTED_ADVISOR_12M_IND -- #RF: STORY 81850 - New Departed Advisor Indicator
FROM
(
SELECT
    T.HK_LINK,
    T.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
    T.HK_HUB_PARTY_ROLE_ADVISOR,
    T.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
    T.HK_HUB_INVESTMENT_PRODUCT_TYPE,
    T.HK_HUB_CONTRACT,
    T.MD_START_DT,
    T.MD_EXTRACT_DT,
    T.MD_SOURCE,
    T.MD_SRC_SYSTEM,
    T.TRANSACTION_ID,
    T.CLIENT_ID,
    T.MASTER_CODE,
    T.CONTRACT_ID,
    T.INVESTMENT_PRODUCT_ID,
    NULL AS PLN_MNEM,
    T.ACCOUNT_RAP_CODE,
    T.RETAIL_PLAN,
    T.ASC_1_RESP_PLAN_TYPES,
    T.TRAN_TRADING_TRADE_DATE AS ""Trade date"",
    DECODE( T.TRAN_TRADING_CURRENCY, 'USD',
     CASE WHEN  T.TRAN_TRADING_GROSS_AMT != 0
                 AND COALESCE(Y.IBMSOURCE, '') NOT IN ('ADJTFR','CNV','CONV','CONV$','CT','CTOC','DISP','FX','MBD','MBD-IN','PLEDGE','QIATFR','QICONT','QIHIST','QISUBS','QIUACO','QLCONT','QLCTFR','QLHIST','QLSUBS','QLTXCR','QOATFR','QOCONT','QOHIST','QOSUBS','QOTXCR','QOUACO','QRCONT','QRCTFR','QRHIST','QRSUBS','QRUACO','RDM','T1','T2','T3','T4','T5','T6','T7','T8','T9','TA','TB','TC','TD','TF','TFCONT','TFE','TFIN','TFOUT','TFRADJ','TFRLIV','TFROUT','TFRREC','TFSCEE','TICONT','TIGCES','TIHIST','TIHIST2','TISCEE','TIUACO','TLCONA','TOCONT','TOGCES','TOTFR','TOTSF','TOUACO','TRCOAS','TRF','TRF-IN','TRF-OUT','TRHIST','TRSF','TSF','TSFLIV','TSFREC','WO','TFR-IN','TFRIN','TFR','TFR-OUT','TFRT','TMSWO','TRFIN','TRFOUT','TRSFIN','TRSFOUT','TRXDIFF','TSFOUT','PAR')  
          THEN  T.TRAN_TRADING_GROSS_AMT*-1* T.EXCHANGERATE
          WHEN  COALESCE(POS.unitOfMeasure,-1) !=-1
                AND COALESCE(POS.PRICECURRENCY,'') !=''
                AND COALESCE(NULLIF(POS.CLOSEPRICE,0), NULLIF(POS.BIDPRICE,0), NULLIF(POS.ASKPRICE,0), -1) !=-1
          THEN IFF(T.Tran_Entry_Description not in ('', 'VALUE', 'VALEUR'),round(DIV0(T.Tran_Qty,POS.unitOfMeasure)* COALESCE(NULLIF(POS.CLOSEPRICE,0), NULLIF(POS.BIDPRICE,0), NULLIF(POS.ASKPRICE,0) ) ,2) * IFF(POS.PRICECURRENCY = 'USD',T.EXCHANGERATE,1) ,T.TRAN_TRADING_GROSS_AMT*-1* T.EXCHANGERATE)  
        /*  WHEN    COALESCE(POS_pdt.unitOfMeasure,-1) !=-1 
                AND COALESCE(POS_pdt.PRICECURRENCY,'') !='' 
                AND COALESCE(NULLIF(POS_pdt.CLOSEPRICE,0), NULLIF(POS_pdt.BIDPRICE,0), NULLIF(POS_pdt.ASKPRICE,0), -1) !=-1 
          THEN IFF(T.Tran_Entry_Description not in ('', 'VALUE', 'VALEUR'),round(DIV0(T.Tran_Qty,POS_pdt.unitOfMeasure)* COALESCE(NULLIF(POS_pdt.CLOSEPRICE,0), NULLIF(POS_pdt.BIDPRICE,0), NULLIF(POS_pdt.ASKPRICE,0) ) ,2) * IFF(POS_pdt.PRICECURRENCY = 'USD',T.EXCHANGERATE,1) ,T.TRAN_TRADING_GROSS_AMT*-1* T.EXCHANGERATE)  
          */
          WHEN  T.Tran_Entry_Description not in ('', 'VALUE', 'VALEUR') 
                AND abs(val.Tran_User_Description) > 0
          THEN val.Tran_User_Description 
          WHEN  T.Tran_Entry_Description not in ('', 'VALUE', 'VALEUR') 
                AND abs(T.Tran_Qty * greatest(T.TI_Issue_Price, T.STRIKE_PRICE, T.TI_Underlying_CDN_Price, T.TI_Underlying_USD_Price) * DIV0(T.TI_Basis_Point,T.TI_Face_Value)) > 0
          THEN  round(T.Tran_Qty * greatest(T.TI_Issue_Price, T.STRIKE_PRICE, T.TI_Underlying_CDN_Price, T.TI_Underlying_USD_Price) * DIV0(T.TI_Basis_Point,T.TI_Face_Value), 2) * T.EXCHANGERATE 
          WHEN  T.TRAN_TRADING_GROSS_AMT != 0
                 AND T.TI_SYMBOL IS NULL
          THEN  T.TRAN_TRADING_GROSS_AMT*-1* T.EXCHANGERATE
    ELSE 0 END 
    ,   
     CASE WHEN  T.TRAN_TRADING_GROSS_AMT != 0
                 AND COALESCE(Y.IBMSOURCE, '') NOT IN ('ADJTFR','CNV','CONV','CONV$','CT','CTOC','DISP','FX','MBD','MBD-IN','PLEDGE','QIATFR','QICONT','QIHIST','QISUBS','QIUACO','QLCONT','QLCTFR','QLHIST','QLSUBS','QLTXCR','QOATFR','QOCONT','QOHIST','QOSUBS','QOTXCR','QOUACO','QRCONT','QRCTFR','QRHIST','QRSUBS','QRUACO','RDM','T1','T2','T3','T4','T5','T6','T7','T8','T9','TA','TB','TC','TD','TF','TFCONT','TFE','TFIN','TFOUT','TFRADJ','TFRLIV','TFROUT','TFRREC','TFSCEE','TICONT','TIGCES','TIHIST','TIHIST2','TISCEE','TIUACO','TLCONA','TOCONT','TOGCES','TOTFR','TOTSF','TOUACO','TRCOAS','TRF','TRF-IN','TRF-OUT','TRHIST','TRSF','TSF','TSFLIV','TSFREC','WO','TFR-IN','TFRIN','TFR','TFR-OUT','TFRT','TMSWO','TRFIN','TRFOUT','TRSFIN','TRSFOUT','TRXDIFF','TSFOUT','PAR')  
          THEN T.TRAN_TRADING_GROSS_AMT * -1
          WHEN  COALESCE(POS.unitOfMeasure,-1) !=-1
                AND COALESCE(POS.PRICECURRENCY,'') !=''
                AND COALESCE(NULLIF(POS.CLOSEPRICE,0), NULLIF(POS.BIDPRICE,0), NULLIF(POS.ASKPRICE,0), -1) !=-1
          THEN IFF(T.Tran_Entry_Description not in ('', 'VALUE', 'VALEUR'),round(DIV0(T.Tran_Qty,POS.unitOfMeasure)* COALESCE(NULLIF(POS.CLOSEPRICE,0), NULLIF(POS.BIDPRICE,0), NULLIF(POS.ASKPRICE,0) ) ,2) * IFF(POS.PRICECURRENCY = 'USD',T.EXCHANGERATE,1) ,T.TRAN_TRADING_GROSS_AMT*-1)  
        /*  WHEN    COALESCE(POS_pdt.unitOfMeasure,-1) !=-1
                AND COALESCE(POS_pdt.PRICECURRENCY,'') !='' 
                AND COALESCE(NULLIF(POS_pdt.CLOSEPRICE,0), NULLIF(POS_pdt.BIDPRICE,0), NULLIF(POS_pdt.ASKPRICE,0), -1) !=-1
          THEN IFF(T.Tran_Entry_Description not in ('', 'VALUE', 'VALEUR'),round(DIV0(T.Tran_Qty,POS_pdt.unitOfMeasure)* COALESCE(NULLIF(POS_pdt.CLOSEPRICE,0), NULLIF(POS_pdt.BIDPRICE,0), NULLIF(POS_pdt.ASKPRICE,0) ) ,2) * IFF(POS_pdt.PRICECURRENCY = 'USD',T.EXCHANGERATE,1) ,T.TRAN_TRADING_GROSS_AMT*-1)  */
      WHEN  T.Tran_Entry_Description not in ('', 'VALUE', 'VALEUR') 
                AND abs(val.Tran_User_Description) > 0
          THEN val.Tran_User_Description
          WHEN  T.Tran_Entry_Description not in ('', 'VALUE', 'VALEUR') 
                AND abs(T.Tran_Qty * greatest(T.TI_Issue_Price, T.STRIKE_PRICE, T.TI_Underlying_CDN_Price, T.TI_Underlying_USD_Price) * DIV0(T.TI_Basis_Point,T.TI_Face_Value)) > 0
          THEN round(T.Tran_Qty * greatest(T.TI_Issue_Price, T.STRIKE_PRICE, T.TI_Underlying_CDN_Price, T.TI_Underlying_USD_Price) * DIV0(T.TI_Basis_Point,T.TI_Face_Value), 2)
          WHEN  T.TRAN_TRADING_GROSS_AMT != 0
                 AND T.TI_SYMBOL IS NULL
          THEN  T.TRAN_TRADING_GROSS_AMT*-1
     ELSE 0 END    
     ) * COALESCE(T.COMMISSIONPCT,100) * 0.01 AS ""Gross amount"", 
    CASE
    T.TRAN_TRADING_TYPE WHEN 'B' THEN 'Purchases'
    WHEN 'S' THEN 'Redemptions'
    ELSE 'Others'
    END AS ""Transaction type"",
    CASE
    T.TRAN_TRADING_TYPE WHEN 'B' THEN 1
    WHEN 'S' THEN 2
    ELSE 9
    END AS ORD_TRANSACTION_TYPE,
    CASE
    WHEN COALESCE(X.ISCASHFLOW,Y.ISCASHFLOW,Z.ISCASHFLOW) IS NULL THEN 'Unknown'
    WHEN COALESCE(X.ISCASHFLOW,Y.ISCASHFLOW,Z.ISCASHFLOW) = 0 THEN 'No'
    WHEN COALESCE(X.ISCASHFLOW,Y.ISCASHFLOW,Z.ISCASHFLOW) = 1 THEN 'Yes'
    END AS CASH_FLOW,
    CASE WHEN
         (SUBSTR(T.CONTRACT_ID,7,1) IN ('C', 'D'))
         THEN 'OTHER'
         WHEN (DECODE(TRUE, T.TRAN_ENTRY_DESCRIPTION LIKE 'CXL%', 1, 0) = 0 /*CANCEL_IND*/
         AND CASH_FLOW='Yes' AND ""Gross amount"" >= 0)
         OR
         (DECODE(TRUE, T.TRAN_ENTRY_DESCRIPTION LIKE 'CXL%', 1, 0) = 1 /*CANCEL_IND*/
         AND CASH_FLOW='Yes' AND ""Gross amount"" <= 0)
         THEN 'IN FLOW'
         WHEN (DECODE(TRUE, T.TRAN_ENTRY_DESCRIPTION LIKE 'CXL%', 1, 0) = 0 /*CANCEL_IND*/
         AND CASH_FLOW='Yes' AND ""Gross amount"" <= 0)
         OR
         (DECODE(TRUE, T.TRAN_ENTRY_DESCRIPTION LIKE 'CXL%', 1, 0) = 1 /*CANCEL_IND*/
         AND CASH_FLOW='Yes' AND ""Gross amount"" >= 0)
         THEN 'OUT FLOW' ELSE 'OTHER' END AS CASHFLOW_TYPE,     
    T.ADMINISTRATORY_TYPE AS ""Administratory type"",
    DECODE(R.REVERSAL_IND,TRUE,-1,1) AS ""number of transactions"",
    T.DEPARTED_ADVISOR_IND,
    CASE WHEN   T.TRAN_TRADING_GROSS_AMT != 0
                 AND COALESCE(Y.IBMSOURCE, '') NOT IN ('ADJTFR','CNV','CONV','CONV$','CT','CTOC','DISP','FX','MBD','MBD-IN','PLEDGE','QIATFR','QICONT','QIHIST','QISUBS','QIUACO','QLCONT','QLCTFR','QLHIST','QLSUBS','QLTXCR','QOATFR','QOCONT','QOHIST','QOSUBS','QOTXCR','QOUACO','QRCONT','QRCTFR','QRHIST','QRSUBS','QRUACO','RDM','T1','T2','T3','T4','T5','T6','T7','T8','T9','TA','TB','TC','TD','TF','TFCONT','TFE','TFIN','TFOUT','TFRADJ','TFRLIV','TFROUT','TFRREC','TFSCEE','TICONT','TIGCES','TIHIST','TIHIST2','TISCEE','TIUACO','TLCONA','TOCONT','TOGCES','TOTFR','TOTSF','TOUACO','TRCOAS','TRF','TRF-IN','TRF-OUT','TRHIST','TRSF','TSF','TSFLIV','TSFREC','WO','TFR-IN','TFRIN','TFR','TFR-OUT','TFRT','TMSWO','TRFIN','TRFOUT','TRSFIN','TRSFOUT','TRXDIFF','TSFOUT','PAR')  
          THEN 0
          WHEN  COALESCE(POS.unitOfMeasure,-1) !=-1
                AND COALESCE(POS.PRICECURRENCY,'') !=''
                AND COALESCE(NULLIF(POS.CLOSEPRICE,0), NULLIF(POS.BIDPRICE,0), NULLIF(POS.ASKPRICE,0), -1) !=-1
          THEN 
                 DATEDIFF( days, Pos.PROCESSDATE,  T.TRAN_TRADING_TRADE_DATE)  
     ELSE NULL END AS ""DAYS_LAST_PRICED_TRADE_DATE""     
    ,
     CASE WHEN  T.TRAN_TRADING_GROSS_AMT != 0
                 AND COALESCE(Y.IBMSOURCE, '') NOT IN ('ADJTFR','CNV','CONV','CONV$','CT','CTOC','DISP','FX','MBD','MBD-IN','PLEDGE','QIATFR','QICONT','QIHIST','QISUBS','QIUACO','QLCONT','QLCTFR','QLHIST','QLSUBS','QLTXCR','QOATFR','QOCONT','QOHIST','QOSUBS','QOTXCR','QOUACO','QRCONT','QRCTFR','QRHIST','QRSUBS','QRUACO','RDM','T1','T2','T3','T4','T5','T6','T7','T8','T9','TA','TB','TC','TD','TF','TFCONT','TFE','TFIN','TFOUT','TFRADJ','TFRLIV','TFROUT','TFRREC','TFSCEE','TICONT','TIGCES','TIHIST','TIHIST2','TISCEE','TIUACO','TLCONA','TOCONT','TOGCES','TOTFR','TOTSF','TOUACO','TRCOAS','TRF','TRF-IN','TRF-OUT','TRHIST','TRSF','TSF','TSFLIV','TSFREC','WO','TFR-IN','TFRIN','TFR','TFR-OUT','TFRT','TMSWO','TRFIN','TRFOUT','TRSFIN','TRSFOUT','TRXDIFF','TSFOUT','PAR')  
          THEN 0
          WHEN  COALESCE(Pos.unitOfMeasure,-1) !=-1
                AND COALESCE(Pos.PRICECURRENCY,'') !=''
                AND COALESCE(NULLIF(Pos.CLOSEPRICE,0), NULLIF(Pos.BIDPRICE,0), NULLIF(Pos.ASKPRICE,0), -1) !=-1
          THEN 
                 DATEDIFF( days, Pos.PROCESSDATE,  T.TRAN_PROCESS_DATE)  
     ELSE NULL END AS ""DAYS_LAST_PRICED_PROCESS_DATE""        
    , 
     CASE WHEN DAYS_LAST_PRICED_TRADE_DATE >= DAYS_LAST_PRICED_PROCESS_DATE THEN DAYS_LAST_PRICED_PROCESS_DATE ELSE DAYS_LAST_PRICED_TRADE_DATE END AS DAYS_LAST_PRICED,
     T.DEPARTED_ADVISOR_MASTER_CODE,
     T.A_C_REPRESENTATIVE
    ,CASE -- #RF: STORY 81850 - New Departed Advisor Indicator
            WHEN T.DEPARTED_ADVISOR_IND = 1 AND (T.TRAN_TRADING_TRADE_DATE >= ADVISOR_INFO.END_DATE AND T.TRAN_TRADING_TRADE_DATE < DATEADD(YEAR,1,ADVISOR_INFO.END_DATE)) THEN 1 ELSE 0
    END AS DEPARTED_ADVISOR_12M_IND
FROM DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION T
LEFT JOIN DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_REF_MAPPING_OPER_TYPE Y ON
(DECODE(TRUE,TRAN_ENTRY_DESCRIPTION LIKE 'CXL%',SUBSTRING(TRAN_ENTRY_DESCRIPTION,4),TRAN_ENTRY_DESCRIPTION)= Y.IBMSOURCE AND Y.""LEVEL"" =1)
LEFT JOIN DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_REF_MAPPING_OPER_TYPE X ON
(TRAN_ENTRY_DESCRIPTION= X.IBMSOURCE AND X.""LEVEL"" =1)
LEFT JOIN /*REMOVE DUPLICATION IN LEVEL 2 FOR MAPPING_OPER_TYPE*/
(SELECT TR.TRANSACTION_ID, OT.ISCASHFLOW, ROW_NUMBER() OVER(PARTITION BY TR.TRANSACTION_ID ORDER BY OT.ISCASHFLOW DESC) AS RN /*IF WE HAVE DIFFERENT VALUES FOR ISCASHFLOW FOR SAME TRAN WE PRIORITIZE TRUE VALUE*/
FROM DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION TR
LEFT JOIN DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_REF_MAPPING_OPER_TYPE OT ON
(DECODE(TRUE,TR.TRAN_ENTRY_DESCRIPTION LIKE 'CXL%',SUBSTRING(TR.TRAN_ENTRY_DESCRIPTION,4),TR.TRAN_ENTRY_DESCRIPTION) RLIKE REPLACE(REPLACE(REPLACE(REPLACE(OT.IBMSOURCE,'*','.*'),'?','.'),'#','\\d'),'@','[a-zA-Z]') AND OT.""LEVEL"" =2)) Z
ON T.TRANSACTION_ID = Z.TRANSACTION_ID AND Z.RN= 1
LEFT JOIN REVERSALS_BK R ON
R.TRANSACTION_ID=T.TRANSACTION_ID 
LEFT JOIN val val on
 val.TRAN_PROCESS_DATE = T.TRAN_PROCESS_DATE and
 val.CONTRACT_ID = T.CONTRACT_ID and
 val.Tran_Txn_Reference_ID = T.Tran_Txn_Reference_ID 
LEFT JOIN POS_ALL POS
    ON T.HK_LINK = POS.HK_LINK
LEFT JOIN ADVISOR_INFO  -- #RF: STORY 81850 - New Departed Advisor Indicator
    ON ADVISOR_INFO.MASTER_CODE = T.DEPARTED_ADVISOR_MASTER_CODE
-- ADD EXCLUSION
LEFT JOIN EXCLUSION E
ON E.REPID = T.MASTER_CODE
AND E.IND_EXCLUDE = 1
AND E.MD_ACTIVE = 'A'
WHERE T.CONTRACT_ID NOT RLIKE '^[A-Z][A-Z].*'
--AND T.CONTRACT_ID IS NOT NULL
AND T.A_C_REPRESENTATIVE NOT IN ('SEAA', 'SEZ9', 'QYYY', 'SNJB')
-- EXCLUDE RVP ADVISOR
AND E.REPID IS NULL
);
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.CLONE_INF_TRANSACTIONS_BDV.UF_IAW_GET_CLOSEST_PRICE_DATE(""MARKET_P"" VARCHAR(16777216), ""SYMBOL_P"" VARCHAR(16777216), ""TRADE_DATE"" DATE)
RETURNS DATE
LANGUAGE SQL
AS 'SELECT MAX(P.PROCESSDATE) 
FROM TRANSACTIONS_RDV.TRANSLINK_POSITION_PRICE_IAS_IAVM P 
WHERE P.PROCESSDATE <= TRADE_DATE 
AND P.MARKET = MARKET_P 
AND P.SYMBOL = SYMBOL_P';
create or replace schema DB_IAW_PROD_DWH.CLONE_INF_TRANSACTIONS_RDV;

create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	TRANSACTION_ID VARCHAR(100) COMMENT 'The ID of the transaction',
	CONTRACT_ID VARCHAR(100) COMMENT 'Account ID',
	REGISTERED_REPRESENTATIVE_ID VARCHAR(50) COMMENT 'Advisor RR code',
	INVESTMENT_PRODUCT_ID VARCHAR(50) COMMENT 'Financial product ID',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	UNIVERIS_CLIENT_ID NUMBER(38,0) COMMENT 'Univeris Client ID'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_NBIN_IAVMBK (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
	TRAN_ENTRY_DESCRIPTION VARCHAR(50) COMMENT 'Description of the trading',
	TRAN_USER_DESCRIPTION VARCHAR(50) COMMENT 'Description of the trading',
	TRAN_TRADING_TYPE VARCHAR(10) COMMENT 'Type of the trading : Sell, Buy,...',
	TRAN_TRADING_GROSS_AMT NUMBER(38,2) COMMENT 'Transaction gross amount in CAD or USD',
	TRAN_TRADING_CURRENCY VARCHAR(10) COMMENT 'Transaction amounts currency',
	TRAN_TRADING_NET_AMT NUMBER(38,2) COMMENT 'Transaction net amount in CAD or USD',
	TRAN_TRADING_TRADE_DATE DATE COMMENT 'Trade date',
	TRAN_TRADING_SETT_DATE DATE COMMENT 'Settlement date',
	TRAN_PROCESS_DATE DATE COMMENT 'Process date',
	TI_SYMBOL VARCHAR(50) COMMENT 'Product symbol',
	TRAN_QTY NUMBER(38,4) COMMENT 'Quantity',
	TI_PRIMARY_MARKET VARCHAR(50) COMMENT 'Primary market',
	TRAN_TXN_REFERENCE_ID VARCHAR(50) COMMENT 'Tax reference ID',
	TRAN_AMOUNT_2 NUMBER(38,2) COMMENT 'Transaction amount 2',
	TI_UNDERLYING_CDN_PRICE NUMBER(38,8) COMMENT 'TI Underlying CDN Price, this field and above fields were added for OG calculation',
	TI_BASIS_POINT NUMBER(38,5) COMMENT 'TI Basis Point',
	TI_FACE_VALUE NUMBER(38,5) COMMENT 'TI Face Value',
	TI_ISSUE_PRICE NUMBER(38,5) COMMENT 'TI Issue Price',
	STRIKE_PRICE NUMBER(38,8) COMMENT 'STRIKE PRICE',
	TI_UNDERLYING_USD_PRICE NUMBER(38,8) COMMENT 'TI Underlying USD Price'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	REP_SYSID NUMBER(38,0) COMMENT 'Representative ID',
	ACT_SYSID NUMBER(38,0) COMMENT 'Holding system ID',
	TRX_STATUS VARCHAR(2) COMMENT 'Transaction status code',
	TRX_ST_DESC_ENG VARCHAR(40) COMMENT 'Transaction status description',
	TRADE_DT TIMESTAMP_NTZ(9) COMMENT 'Trade date',
	MGT_CD VARCHAR(5) COMMENT 'Management company code',
	MGT_NAME_ENG VARCHAR(60) COMMENT 'Management company name',
	DLR_SYSID NUMBER(38,0) COMMENT 'Dealer ID',
	RGN_SYSID NUMBER(38,0) COMMENT 'Region ID',
	BRN_SYSID NUMBER(38,0) COMMENT 'Branch ID',
	TRX_UNIT NUMBER(38,0) COMMENT 'Transaction quantity',
	TRX_PRICE NUMBER(38,0) COMMENT 'Transaction unit price',
	TRX_GROSS NUMBER(29,12) COMMENT 'Transaction gross amount',
	TRX_NET NUMBER(29,12) COMMENT 'Transaction net amount',
	TRX_GROSS_CAD NUMBER(29,12) COMMENT 'Transaction gross amount CAD',
	SPR_FACTOR NUMBER(3,0) COMMENT 'Transaction sign (IN or OUT)',
	CURRENCY_CD VARCHAR(3) COMMENT 'Currency code',
	DLR_CD VARCHAR(5) COMMENT 'Dealer code',
	RGN_CD VARCHAR(5) COMMENT 'Region code',
	BRN_CD VARCHAR(5) COMMENT 'Branch code',
	REP_CD VARCHAR(5) COMMENT 'Representative code',
	PLN_TYPE VARCHAR(2) COMMENT 'Plan Type',
	SPR_CTGY VARCHAR(3) COMMENT 'Transaction category',
	TRX_MNEM_ENG VARCHAR(10) COMMENT 'Transaction mnemonic name',
	REVERSAL_IND NUMBER(1,0) COMMENT 'Transaction reversed indicator'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	REP_SYSID NUMBER(38,0) COMMENT 'Representative ID',
	ACT_SYSID NUMBER(38,0) COMMENT 'Holding system ID',
	TRX_STATUS VARCHAR(4) COMMENT 'Transaction status code',
	TRX_ST_DESC_ENG VARCHAR(40) COMMENT 'Transaction status description',
	TRADE_DT TIMESTAMP_NTZ(9) COMMENT 'Trade date',
	MGT_CD VARCHAR(10) COMMENT 'Management company code',
	MGT_NAME_ENG VARCHAR(60) COMMENT 'Management company name',
	DLR_SYSID NUMBER(38,0) COMMENT 'Dealer ID',
	RGN_SYSID NUMBER(38,0) COMMENT 'Region ID',
	BRN_SYSID NUMBER(38,0) COMMENT 'Branch ID',
	TRX_UNIT NUMBER(38,0) COMMENT 'Transaction quantity',
	TRX_PRICE NUMBER(38,0) COMMENT 'Transaction unit price',
	TRX_GROSS NUMBER(29,12) COMMENT 'Transaction gross amount',
	TRX_NET NUMBER(29,12) COMMENT 'Transaction net amount',
	TRX_GROSS_CAD NUMBER(29,12) COMMENT 'Transaction gross amount CAD',
	SPR_FACTOR NUMBER(3,0) COMMENT 'Transaction sign (IN or OUT)',
	CURRENCY_CD VARCHAR(6) COMMENT 'Currency code',
	DLR_CD VARCHAR(10) COMMENT 'Dealer code',
	RGN_CD VARCHAR(10) COMMENT 'Region code',
	BRN_CD VARCHAR(10) COMMENT 'Branch code',
	REP_CD VARCHAR(10) COMMENT 'Representative code',
	PLN_TYPE VARCHAR(4) COMMENT 'Plan Type',
	SPR_CTGY VARCHAR(6) COMMENT 'Transaction category',
	TRX_MNEM_ENG VARCHAR(20) COMMENT 'Transaction mnemonic name',
	REVERSAL_IND NUMBER(1,0) COMMENT 'Transaction reversed indicator'
);
create or replace TABLE DB_IAW_PROD_DWH.CLONE_INF_TRANSACTIONS_RDV.TRANSLINK_POSITION_PRICE_IAS_IAVM (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	PROCESSDATE DATE NOT NULL COMMENT 'Process Date',
	UNITOFMEASURE NUMBER(11,0) COMMENT 'Unit Of Measure',
	PRICE NUMBER(38,8) COMMENT 'Price',
	SYMBOL VARCHAR(26) COMMENT 'SECURITY_SYMBOL',
	MARKET VARCHAR(12) COMMENT 'Market',
	ACCOUNTID VARCHAR(18) COMMENT 'Account ID',
	CLOSEPRICE NUMBER(38,8) COMMENT 'Close Price',
	PRICECURRENCY VARCHAR(3) COMMENT 'Price Currency',
	BIDPRICE NUMBER(38,8) COMMENT 'Bid Price',
	ASKPRICE NUMBER(38,8) COMMENT 'Ask Price'
);
create or replace schema DB_IAW_PROD_DWH.HOLDINGS_BDV;

create or replace TABLE DB_IAW_PROD_DWH.HOLDINGS_BDV.LINK_INVESTMENT (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ADVISOR',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	MD_SEQ VARCHAR(50) COMMENT 'The value of METADATA$FILE_ROW_NUMBER',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Master code of the advisor',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product Type ID',
	CLIENT_ID VARCHAR(100) COMMENT 'Client ID',
	PLN_MNEM VARCHAR(512) COMMENT 'Plan code',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	ASC_1_RESP_PLAN_TYPES VARCHAR(10) COMMENT 'subtype of the RESP plans',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID'
);
create or replace TABLE DB_IAW_PROD_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	RR_CD VARCHAR(50) COMMENT 'Advisor RR code',
	PLN_SYSID VARCHAR(1000) COMMENT 'Its the plan system id',
	BALANCE_DATE TIMESTAMP_NTZ(9) COMMENT 'Holding balance date',
	HOLDING_VALUE NUMBER(38,9) COMMENT 'Holding amount',
	AUA NUMBER(38,12) COMMENT 'AUA ammount',
	AUM NUMBER(38,12) COMMENT 'Number of AUM',
	AUM_CLARINGTON NUMBER(38,12) COMMENT 'Clarington AUM',
	AUM_IA NUMBER(38,12) COMMENT 'IA AUM',
	CASH_POSITION NUMBER(38,12) COMMENT ' CASH value at that point of time',
	PROGRAM_TYPE VARCHAR(50) COMMENT 'Programe type',
	ACCOUNT_PROGRAM_TYPE VARCHAR(50) COMMENT 'Account of the Program',
	ADMINISTRATORY_TYPE VARCHAR(1000) COMMENT 'Type of Admistratory',
	AUA_ACCRUED_INTEREST NUMBER(38,2)
);
create or replace TABLE DB_IAW_PROD_DWH.HOLDINGS_BDV.WT_INVESTMENT_CASH_IAS_NBIN (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ADVISOR',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	MD_SEQ VARCHAR(50) COMMENT 'The value of METADATA$FILE_ROW_NUMBER',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	A_C_SUMM_SD_NET_AMT NUMBER(38,2) COMMENT 'A/C Summ settelment date Net Amt',
	A_C_SUMM_TD_NET_AMT NUMBER(38,2) COMMENT 'A/C Summ trade date Net Amt',
	A_C_SUMM_BALANCE_BUS_DATE DATE COMMENT 'Update business date',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	RR_CD VARCHAR(50) COMMENT 'Advisor RR code',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product Type ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Master code of the advisor',
	A_C_CLIENT VARCHAR(100) COMMENT 'Client ID',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID',
	ASC_1_RESP_PLAN_TYPES VARCHAR(100) COMMENT 'subtype of the RESP plans',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	A_C_CURRENCY VARCHAR(10) COMMENT 'Currency of the account',
	COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
	ISSUER_COMPANY_NAME VARCHAR(100) COMMENT 'The issuer company name',
	ASC_3_MANAGED_TYPE VARCHAR(10) COMMENT 'To be defined : J, L, ...',
	ADMINISTRATOR_TYPE VARCHAR(100) COMMENT 'Nominee, Client name, ...',
	EXCHANGERATE NUMBER(38,8) COMMENT 'Conversion rate from USD to CAD',
	A_C_ACCOUNT_CLASS VARCHAR(3) COMMENT 'Account class : 038, 040, ...',
	RETAIL_PLAN_RESP VARCHAR(1) COMMENT 'To be defined....',
	COMMISSIONPCT_ADVISOR NUMBER(6,3) COMMENT 'Advisor Commission PCT',
	COMMISSIONPCT_FINANCIAL NUMBER(6,3) COMMENT 'Financial Commission PCT'
);
create or replace TABLE DB_IAW_PROD_DWH.HOLDINGS_BDV.WT_INVESTMENT_IAS_NBIN (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ADVISOR',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	MD_SEQ VARCHAR(50) COMMENT 'The value of METADATA$FILE_ROW_NUMBER',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	TRAN_SUMM_CURR_MKT_VALUE NUMBER(38,2) COMMENT 'Market value of the holding in CAD or USD',
	TRAN_SUMM_BUSINESS_DATE DATE COMMENT 'Update business date',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	RR_CD VARCHAR(50) COMMENT 'Advisor RR code',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product Type ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Master code of the advisor',
	A_C_CLIENT VARCHAR(100) COMMENT 'Client ID',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID',
	ASC_1_RESP_PLAN_TYPES VARCHAR(100) COMMENT 'subtype of the RESP plans',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	A_C_CURRENCY VARCHAR(10) COMMENT 'Currency of the account',
	COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
	ISSUER_COMPANY_NAME VARCHAR(100) COMMENT 'The issuer company name',
	ASC_3_MANAGED_TYPE VARCHAR(10) COMMENT 'To be defined : J, L, ...',
	ADMINISTRATOR_TYPE VARCHAR(100) COMMENT 'Nominee, Client name, ...',
	EXCHANGERATE NUMBER(38,8) COMMENT 'Conversion rate from USD to CAD',
	A_C_ACCOUNT_CLASS VARCHAR(3) COMMENT 'Account class : 038, 040, ...',
	RETAIL_PLAN_RESP VARCHAR(1) COMMENT 'To be defined',
	MKT_PRICE_DATE TIMESTAMP_NTZ(9) COMMENT 'Mkt Price Date',
	MARKET_PRICE_BID NUMBER(29,8) COMMENT 'Market Price Bid',
	MARKET_PRICE_ASK NUMBER(29,8) COMMENT 'Market Price Ask',
	MARKET_PRICE_CLOSE NUMBER(29,8) COMMENT 'Market Price Close',
	PRICE_CURRENCY VARCHAR(3) COMMENT 'Price Currency',
	TRAN_SUMM_CURR_MKT_PRICE NUMBER(29,8) COMMENT 'Tran Summ Curr Mkt Price',
	TRAN_SUMM_SFK_QTY NUMBER(29,4) COMMENT 'Tran Summ Sfk Qty',
	TRAN_SUMM_TRADE_QTY NUMBER(38,4) COMMENT 'Units calculated by trade date',
	TI_FACE_VALUE NUMBER(29,5) COMMENT 'TI Face Value',
	TI_BASIS_POINT NUMBER(29,5) COMMENT 'TI Basis Point',
	COMMISSIONPCT_ADVISOR NUMBER(6,3) COMMENT 'Advisor Commission PCT',
	COMMISSIONPCT_FINANCIAL NUMBER(6,3) COMMENT 'Financial Commission PCT'
);
create or replace TABLE DB_IAW_PROD_DWH.HOLDINGS_BDV.WT_INVESTMENT_IAS_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ADVISOR',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	MD_SEQ VARCHAR(50) COMMENT 'The value of METADATA$FILE_ROW_NUMBER',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product Type ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Master code of the advisor',
	RR_CD VARCHAR(50) COMMENT 'Advisor RR code',
	CLIENT_ID VARCHAR(100) COMMENT 'Client ID',
	PLN_MNEM VARCHAR(512) COMMENT 'Plan code',
	COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
	ISSUER_COMPANY_NAME VARCHAR(100) COMMENT 'The issuer company name',
	ADMINISTRATORY_TYPE VARCHAR(100) COMMENT 'Nominee, Client name, ...',
	BAL_DATE TIMESTAMP_NTZ(9) NOT NULL COMMENT 'Balance date',
	MV NUMBER(34,4) COMMENT 'Market value',
	AUA NUMBER(34,4) COMMENT 'AUA',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	IVD_LOAD_FLAG VARCHAR(3) COMMENT 'Front-end or back-end load indicator',
	WF_IND NUMBER(38,0),
	COMMISSIONPCT_ADVISOR NUMBER(6,3) COMMENT 'Advisor Commission PCT',
	COMMISSIONPCT_FINANCIAL NUMBER(6,3) COMMENT 'Financial Commission PCT'
);
create or replace TABLE DB_IAW_PROD_DWH.HOLDINGS_BDV.WT_INVESTMENT_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ADVISOR',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	MD_SEQ VARCHAR(50) COMMENT 'The value of METADATA$FILE_ROW_NUMBER',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product Type ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Master code of the advisor',
	RR_CD VARCHAR(50) COMMENT 'Advisor RR code',
	CLIENT_ID VARCHAR(100) COMMENT 'Client ID',
	PLN_MNEM VARCHAR(512) COMMENT 'Plan code',
	COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
	ISSUER_COMPANY_NAME VARCHAR(100) COMMENT 'The issuer company name',
	ADMINISTRATORY_TYPE VARCHAR(100) COMMENT 'Nominee, Client name, ...',
	BAL_DATE TIMESTAMP_NTZ(9) NOT NULL COMMENT 'Balance date',
	MV NUMBER(34,4) COMMENT 'Market value',
	AUA NUMBER(34,4) COMMENT 'AUA',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	IVD_LOAD_FLAG VARCHAR(3) COMMENT 'Front-end or back-end load indicator',
	WF_IND NUMBER(38,0),
	COMMISSIONPCT_ADVISOR NUMBER(6,3) COMMENT 'Advisor Commission PCT',
	COMMISSIONPCT_FINANCIAL NUMBER(6,3) COMMENT 'Financial Commission PCT'
);
create or replace view DB_IAW_PROD_DWH.HOLDINGS_BDV.VW_INITIAL_LOADING_INVESTMENT_CASH_IAS_NBIN(
	MD_SEQ,
	HK_LINK,
	HK_HUB_CONTRACT,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	MD_START_DT,
	MD_CREATION_DT,
	MD_EXTRACT_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	A_C_SUMM_SD_NET_AMT,
	A_C_SUMM_TD_NET_AMT,
	A_C_SUMM_BALANCE_BUS_DATE,
	CONTRACT_ID,
	RR_CD,
	INVESTMENT_PRODUCT_ID,
	MASTER_CODE,
	A_C_CLIENT,
	ACCOUNT_RAP_CODE,
	ASC_1_RESP_PLAN_TYPES,
	RETAIL_PLAN,
	A_C_CURRENCY,
	COMMISSIONPCT,
	ISSUE_COMPANY_NAME,
	ASC_3_MANAGED_TYPE,
	ADMINISTRATOR_TYPE,
	A_C_ACCOUNT_CLASS,
	RETAIL_PLAN_RESP,
	EXCHANGERATE,
	COMMISSIONPCT_ADVISOR,
	COMMISSIONPCT_FINANCIAL
) as
WITH LATEST_VERSION_SHARE AS (
	SELECT 
	SLH.HK_LINK,
	COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE,
	COMM_SHARE.MD_START_DT,
	COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR,
	COMM_SHARE.MASTER_CODE,
	COMM_SHARE.COMMISSIONPCT,
	COALESCE (COMM_SHARE.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLH.HK_LINK,COMM_SHARE.HK_LINK ORDER BY COMM_SHARE.MD_START_DT DESC ),1) AS RANK_SHARE,
	COMM_SHARE.COMMISSIONPCT_ADVISOR,
	COMM_SHARE.COMMISSIONPCT_FINANCIAL
	FROM HOLDINGS_RDV.SAT_LINK_INVESTMENT_CASH_RR_IAS_NBIN SLH
	INNER JOIN HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
	    ON  SLH.HK_LINK=LH.HK_LINK
	LEFT JOIN 	( SELECT LCS.HK_LINK,LCS.HK_HUB_REGISTERED_REPRESENTATIVE,CS.MD_START_DT,LCS.HK_HUB_PARTY_ROLE_ADVISOR,LCS.MASTER_CODE,CS.COMMISSIONPCT,CS.MD_ACTIVE,CS.COMMISSIONPCT_ADVISOR,CS.COMMISSIONPCT_FINANCIAL
	        	FROM SHARED_BDV.LINK_PARTY_RELATIONSHIP_SHARE LCS 
	        	INNER JOIN SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE CS 
	        		ON CS.HK_LINK=LCS.HK_LINK AND CS.MD_SRC_SYSTEM = 'IAS'
	    		) COMM_SHARE
	    ON LH.HK_HUB_REGISTERED_REPRESENTATIVE=COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE
	    AND  COMM_SHARE.MD_START_DT <= DATEADD(SECOND, 86399, SLH.MD_START_DT) 
),
LATEST_VERSION_CONTRACT AS (
	SELECT SLH.HK_LINK,
	CONTRACT.HK_HUB,
	CONTRACT.A_C_CLIENT, 
	CONTRACT.ACCOUNT_RAP_CODE,
	CONTRACT.ASC_1_RESP_PLAN_TYPES,
	CONTRACT.RETAIL_PLAN,
	CONTRACT.A_C_CURRENCY,
	CONTRACT.ASC_3_MANAGED_TYPE,
	CONTRACT.ADMINISTRATOR_TYPE,
	CONTRACT.A_C_ACCOUNT_CLASS,
	CONTRACT.RETAIL_PLAN_RESP,
	COALESCE (CONTRACT.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLH.HK_LINK,CONTRACT.HK_HUB ORDER BY CONTRACT.MD_START_DT DESC ),1) AS RANK_CONTRACT
	FROM HOLDINGS_RDV.SAT_LINK_INVESTMENT_CASH_RR_IAS_NBIN SLH
	INNER JOIN HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
    ON  SLH.HK_LINK=LH.HK_LINK
	LEFT JOIN  SHARED_RDV.SAT_CONTRACT_IAS_NBIN CONTRACT
	    ON LH.HK_HUB_CONTRACT = CONTRACT.HK_HUB
	    AND CONTRACT.MD_START_DT <= SLH.MD_START_DT
)
SELECT 	LH.MD_SEQ,	
		SHA1(UPPER(CONCAT(
		      COALESCE(TRIM(LH.MD_SEQ), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.MD_SOURCE), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.MD_SRC_SYSTEM), '#NULL#'), '|' 
		    , COALESCE(TRIM(SLH.MD_EXTRACT_DT), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.CONTRACT_ID), '#NULL#'), '|' 
		    , COALESCE(TRIM(COMM_SHARE.MASTER_CODE), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.INVESTMENT_PRODUCT_ID), '#NULL#'), '|' 
		    , COALESCE(TRIM(CONTRACT.A_C_CLIENT), '#NULL#'), '|' 
		    ,'#NULL#', '|' -- PLN_MNEM
		    ,COALESCE(TRIM(CONTRACT.ACCOUNT_RAP_CODE), '#NULL#'), '|' 
		    ,COALESCE(TRIM(CONTRACT.RETAIL_PLAN),'#NULL#'), '|'
		    ,COALESCE(TRIM(CONTRACT.ASC_1_RESP_PLAN_TYPES),'#NULL#'), '|' 
		    , '#NULL#' -- PLN_SYSID
	    ))) AS HK_LINK,
		COALESCE(LH.HK_HUB_CONTRACT,'0') AS HK_HUB_CONTRACT, 
		SHA1(CONCAT('IAS', '|' , 'IASCASH')) AS HK_HUB_INVESTMENT_PRODUCT_TYPE, 
		COALESCE(COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR,'0') AS HK_HUB_PARTY_ROLE_ADVISOR, 
		DECODE(TRUE, CONTRACT.A_C_CLIENT IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM(LH.MD_SRC_SYSTEM), '#NULL#'), '|' , COALESCE(TRIM(CONTRACT.A_C_CLIENT), '#NULL#')))))  AS HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
		DECODE(TRUE, CONTRACT.ASC_1_RESP_PLAN_TYPES IS NULL AND CONTRACT.RETAIL_PLAN IS NULL AND CONTRACT.ACCOUNT_RAP_CODE IS NULL ,'0', 
		SHA1(UPPER(CONCAT(COALESCE(TRIM(LH.MD_SRC_SYSTEM),'#NULL#') ,'|', '#NULL#','|',COALESCE(TRIM(CONTRACT.ACCOUNT_RAP_CODE),'#NULL#'), '|',  COALESCE(TRIM(CONTRACT.RETAIL_PLAN),'#NULL#'),'|', 
		COALESCE(TRIM(CASE WHEN CONTRACT.ACCOUNT_RAP_CODE <> 'Z' THEN NULL ELSE CONTRACT.ASC_1_RESP_PLAN_TYPES END),'#NULL#'))))) AS HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
		--DATEADD(DAY,1,SLH.A_C_SUMM_BALANCE_BUS_DATE) AS MD_START_DT, 
		SLH.MD_EXTRACT_DT AS MD_START_DT,
		CURRENT_TIMESTAMP() AS MD_CREATION_DT, 
		SLH.MD_EXTRACT_DT AS MD_EXTRACT_DT, 
		LH.MD_SOURCE AS MD_SOURCE, 
		LH.MD_SRC_SYSTEM AS MD_SRC_SYSTEM, 
		SLH.A_C_SUMM_SD_NET_AMT,
		SLH.A_C_SUMM_TD_NET_AMT,
		--SLH.A_C_SUMM_BALANCE_BUS_DATE ,
		CASE WHEN DATEDIFF( DAY, SLH.MD_EXTRACT_DT, SLH.A_C_SUMM_BALANCE_BUS_DATE ) <> -1 THEN DATEADD(DAY,-1,SLH.MD_EXTRACT_DT) ELSE SLH.A_C_SUMM_BALANCE_BUS_DATE END AS A_C_SUMM_BALANCE_BUS_DATE,
		LH.CONTRACT_ID AS CONTRACT_ID, 
		LH.RR_CD AS RR_CD, 
		LH.INVESTMENT_PRODUCT_ID AS INVESTMENT_PRODUCT_ID, 
		COMM_SHARE.MASTER_CODE AS MASTER_CODE, 
		CONTRACT.A_C_CLIENT AS A_C_CLIENT, 
		CONTRACT.ACCOUNT_RAP_CODE,
		CONTRACT.ASC_1_RESP_PLAN_TYPES AS ASC_1_RESP_PLAN_TYPES	,
		CONTRACT.RETAIL_PLAN,
		CONTRACT.A_C_CURRENCY,
		COMM_SHARE.COMMISSIONPCT,
		'' AS ISSUE_COMPANY_NAME,
		CONTRACT.ASC_3_MANAGED_TYPE,
		CONTRACT.ADMINISTRATOR_TYPE,
		CONTRACT.A_C_ACCOUNT_CLASS,
		CONTRACT.RETAIL_PLAN_RESP,
		LER.EXCHANGERATE,
		COMM_SHARE.COMMISSIONPCT_ADVISOR,
		COMM_SHARE.COMMISSIONPCT_FINANCIAL
FROM HOLDINGS_RDV.SAT_LINK_INVESTMENT_CASH_RR_IAS_NBIN SLH
INNER JOIN HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
    ON  SLH.HK_LINK=LH.HK_LINK
LEFT JOIN LATEST_VERSION_SHARE COMM_SHARE
    ON LH.HK_HUB_REGISTERED_REPRESENTATIVE=COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE
    AND  COMM_SHARE.HK_LINK = SLH.HK_LINK 
    AND  COMM_SHARE.MD_ACTIVE = 'A' AND COMM_SHARE.RANK_SHARE = 1
LEFT JOIN LATEST_VERSION_CONTRACT CONTRACT
    ON LH.HK_HUB_CONTRACT = CONTRACT.HK_HUB
    AND CONTRACT.HK_LINK = SLH.HK_LINK 
    AND  CONTRACT.MD_ACTIVE = 'A' AND CONTRACT.RANK_CONTRACT = 1
LEFT JOIN SHARED_BDV.TRANSLINK_EXCHANGE_RATE LER
	ON LER.EXCHANGE_DATE = SLH.A_C_SUMM_BALANCE_BUS_DATE
	;
create or replace view DB_IAW_PROD_DWH.HOLDINGS_BDV.VW_INITIAL_LOADING_INVESTMENT_IAS_NBIN(
	MD_SEQ,
	HK_LINK,
	HK_HUB_CONTRACT,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	MD_START_DT,
	MD_CREATION_DT,
	MD_EXTRACT_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	A_C_SUMM_SD_NET_AMT,
	A_C_SUMM_TD_NET_AMT,
	A_C_SUMM_BALANCE_BUS_DATE,
	CONTRACT_ID,
	RR_CD,
	INVESTMENT_PRODUCT_ID,
	MASTER_CODE,
	A_C_CLIENT,
	ACCOUNT_RAP_CODE,
	ASC_1_RESP_PLAN_TYPES,
	RETAIL_PLAN,
	A_C_CURRENCY,
	COMMISSIONPCT,
	ISSUE_COMPANY_NAME,
	ASC_3_MANAGED_TYPE,
	ADMINISTRATOR_TYPE,
	A_C_ACCOUNT_CLASS,
	RETAIL_PLAN_RESP,
	EXCHANGERATE,
	COMMISSIONPCT_ADVISOR,
	COMMISSIONPCT_FINANCIAL
) as
WITH LATEST_VERSION_SHARE AS (
	SELECT 
	SLH.HK_LINK,
	COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE,
	COMM_SHARE.MD_START_DT,
	COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR,
	COMM_SHARE.MASTER_CODE,
	COMM_SHARE.COMMISSIONPCT,
	COALESCE (COMM_SHARE.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLH.HK_LINK,COMM_SHARE.HK_LINK ORDER BY COMM_SHARE.MD_START_DT DESC ),1) AS RANK_SHARE,
	COMM_SHARE.COMMISSIONPCT_ADVISOR,
	COMM_SHARE.COMMISSIONPCT_FINANCIAL
	FROM HOLDINGS_RDV.SAT_LINK_INVESTMENT_CASH_RR_IAS_NBIN SLH
	INNER JOIN HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
	    ON  SLH.HK_LINK=LH.HK_LINK
	LEFT JOIN 	( SELECT LCS.HK_LINK,LCS.HK_HUB_REGISTERED_REPRESENTATIVE,CS.MD_START_DT,LCS.HK_HUB_PARTY_ROLE_ADVISOR,LCS.MASTER_CODE,CS.COMMISSIONPCT,CS.MD_ACTIVE,CS.COMMISSIONPCT_ADVISOR,CS.COMMISSIONPCT_FINANCIAL
	        	FROM SHARED_BDV.LINK_PARTY_RELATIONSHIP_SHARE LCS 
	        	INNER JOIN SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE CS 
	        		ON CS.HK_LINK=LCS.HK_LINK AND CS.MD_SRC_SYSTEM = 'IAS'
	    		) COMM_SHARE
	    ON LH.HK_HUB_REGISTERED_REPRESENTATIVE=COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE
	    AND  COMM_SHARE.MD_START_DT <= DATEADD(SECOND, 86399, SLH.MD_START_DT) 
),
LATEST_VERSION_CONTRACT AS (
	SELECT SLH.HK_LINK,
	CONTRACT.HK_HUB,
	CONTRACT.A_C_CLIENT, 
	CONTRACT.ACCOUNT_RAP_CODE,
	CONTRACT.ASC_1_RESP_PLAN_TYPES,
	CONTRACT.RETAIL_PLAN,
	CONTRACT.A_C_CURRENCY,
	CONTRACT.ASC_3_MANAGED_TYPE,
	CONTRACT.ADMINISTRATOR_TYPE,
	CONTRACT.A_C_ACCOUNT_CLASS,
	CONTRACT.RETAIL_PLAN_RESP,
	COALESCE (CONTRACT.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLH.HK_LINK,CONTRACT.HK_HUB ORDER BY CONTRACT.MD_START_DT DESC ),1) AS RANK_CONTRACT
	FROM HOLDINGS_RDV.SAT_LINK_INVESTMENT_CASH_RR_IAS_NBIN SLH
	INNER JOIN HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
    ON  SLH.HK_LINK=LH.HK_LINK
	LEFT JOIN  SHARED_RDV.SAT_CONTRACT_IAS_NBIN CONTRACT
	    ON LH.HK_HUB_CONTRACT = CONTRACT.HK_HUB
	    AND CONTRACT.MD_START_DT <= SLH.MD_START_DT
)
SELECT 	LH.MD_SEQ,	
		SHA1(UPPER(CONCAT(
		      COALESCE(TRIM(LH.MD_SEQ), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.MD_SOURCE), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.MD_SRC_SYSTEM), '#NULL#'), '|' 
		    , COALESCE(TRIM(SLH.MD_EXTRACT_DT), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.CONTRACT_ID), '#NULL#'), '|' 
		    , COALESCE(TRIM(COMM_SHARE.MASTER_CODE), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.INVESTMENT_PRODUCT_ID), '#NULL#'), '|' 
		    , COALESCE(TRIM(CONTRACT.A_C_CLIENT), '#NULL#'), '|' 
		    ,'#NULL#', '|' -- PLN_MNEM
		    ,COALESCE(TRIM(CONTRACT.ACCOUNT_RAP_CODE), '#NULL#'), '|' 
		    ,COALESCE(TRIM(CONTRACT.RETAIL_PLAN),'#NULL#'), '|'
		    ,COALESCE(TRIM(CONTRACT.ASC_1_RESP_PLAN_TYPES),'#NULL#'), '|' 
		    , '#NULL#' -- PLN_SYSID
	    ))) AS HK_LINK,
		COALESCE(LH.HK_HUB_CONTRACT,'0') AS HK_HUB_CONTRACT, 
		SHA1(CONCAT('IAS', '|' , 'IASCASH')) AS HK_HUB_INVESTMENT_PRODUCT_TYPE, 
		COALESCE(COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR,'0') AS HK_HUB_PARTY_ROLE_ADVISOR, 
		DECODE(TRUE, CONTRACT.A_C_CLIENT IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM(LH.MD_SRC_SYSTEM), '#NULL#'), '|' , COALESCE(TRIM(CONTRACT.A_C_CLIENT), '#NULL#')))))  AS HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
		DECODE(TRUE, CONTRACT.ASC_1_RESP_PLAN_TYPES IS NULL AND CONTRACT.RETAIL_PLAN IS NULL AND CONTRACT.ACCOUNT_RAP_CODE IS NULL ,'0', 
		SHA1(UPPER(CONCAT(COALESCE(TRIM(LH.MD_SRC_SYSTEM),'#NULL#') ,'|', '#NULL#','|',COALESCE(TRIM(CONTRACT.ACCOUNT_RAP_CODE),'#NULL#'), '|',  COALESCE(TRIM(CONTRACT.RETAIL_PLAN),'#NULL#'),'|', 
		COALESCE(TRIM(CASE WHEN CONTRACT.ACCOUNT_RAP_CODE <> 'Z' THEN NULL ELSE CONTRACT.ASC_1_RESP_PLAN_TYPES END),'#NULL#'))))) AS HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
		--DATEADD(DAY,1,SLH.A_C_SUMM_BALANCE_BUS_DATE) AS MD_START_DT, 
		SLH.MD_EXTRACT_DT AS MD_START_DT,
		CURRENT_TIMESTAMP() AS MD_CREATION_DT, 
		SLH.MD_EXTRACT_DT AS MD_EXTRACT_DT, 
		LH.MD_SOURCE AS MD_SOURCE, 
		LH.MD_SRC_SYSTEM AS MD_SRC_SYSTEM, 
		SLH.A_C_SUMM_SD_NET_AMT,
		SLH.A_C_SUMM_TD_NET_AMT,
		--SLH.A_C_SUMM_BALANCE_BUS_DATE ,
		CASE WHEN DATEDIFF( DAY, SLH.MD_EXTRACT_DT, SLH.A_C_SUMM_BALANCE_BUS_DATE ) <> -1 THEN DATEADD(DAY,-1,SLH.MD_EXTRACT_DT) ELSE SLH.A_C_SUMM_BALANCE_BUS_DATE END AS A_C_SUMM_BALANCE_BUS_DATE,
		LH.CONTRACT_ID AS CONTRACT_ID, 
		LH.RR_CD AS RR_CD, 
		LH.INVESTMENT_PRODUCT_ID AS INVESTMENT_PRODUCT_ID, 
		COMM_SHARE.MASTER_CODE AS MASTER_CODE, 
		CONTRACT.A_C_CLIENT AS A_C_CLIENT, 
		CONTRACT.ACCOUNT_RAP_CODE,
		CONTRACT.ASC_1_RESP_PLAN_TYPES AS ASC_1_RESP_PLAN_TYPES	,
		CONTRACT.RETAIL_PLAN,
		CONTRACT.A_C_CURRENCY,
		COMM_SHARE.COMMISSIONPCT,
		'' AS ISSUE_COMPANY_NAME,
		CONTRACT.ASC_3_MANAGED_TYPE,
		CONTRACT.ADMINISTRATOR_TYPE,
		CONTRACT.A_C_ACCOUNT_CLASS,
		CONTRACT.RETAIL_PLAN_RESP,
		LER.EXCHANGERATE,
		COMM_SHARE.COMMISSIONPCT_ADVISOR,
		COMM_SHARE.COMMISSIONPCT_FINANCIAL
FROM HOLDINGS_RDV.SAT_LINK_INVESTMENT_CASH_RR_IAS_NBIN SLH
INNER JOIN HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
    ON  SLH.HK_LINK=LH.HK_LINK
LEFT JOIN LATEST_VERSION_SHARE COMM_SHARE
    ON LH.HK_HUB_REGISTERED_REPRESENTATIVE=COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE
    AND  COMM_SHARE.HK_LINK = SLH.HK_LINK 
    AND  COMM_SHARE.MD_ACTIVE = 'A' AND COMM_SHARE.RANK_SHARE = 1
LEFT JOIN LATEST_VERSION_CONTRACT CONTRACT
    ON LH.HK_HUB_CONTRACT = CONTRACT.HK_HUB
    AND CONTRACT.HK_LINK = SLH.HK_LINK 
    AND  CONTRACT.MD_ACTIVE = 'A' AND CONTRACT.RANK_CONTRACT = 1
LEFT JOIN SHARED_BDV.TRANSLINK_EXCHANGE_RATE LER
	ON LER.EXCHANGE_DATE = SLH.A_C_SUMM_BALANCE_BUS_DATE
;
create or replace view DB_IAW_PROD_DWH.HOLDINGS_BDV.VW_INITIAL_LOADING_INVESTMENT_INVESTIA_UNIVERIS(
	HK_HUB_CONTRACT,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	MD_SEQ,
	MD_START_DT,
	MD_EXTRACT_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	CONTRACT_ID,
	INVESTMENT_PRODUCT_ID,
	MASTER_CODE,
	RR_CD,
	UNIVERIS_CLIENT_ID,
	PLN_MNEM,
	COMMISSIONPCT,
	ISSUER_COMPANY_NAME,
	ADMINISTRATOR_TYPE,
	BAL_DATE,
	MV,
	AUA,
	UNIVERIS_PLAN_ID,
	IVD_LOAD_FLAG,
	WF_IND,
	COMMISSIONPCT_ADVISOR,
	COMMISSIONPCT_FINANCIAL
) as
WITH 
LATEST_VERSION_INVESTMENT_CONTRACT AS (
	SELECT SLH.HK_LINK,
	CONTRACT.HK_HUB_REGISTERED_REPRESENTATIVE,
    CONTRACT.HK_HUB_CONTRACT,
    CONTRACT.RR_CD,
	COALESCE (CONTRACT.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLH.HK_LINK, CONTRACT.HK_HUB_CONTRACT ORDER BY CONTRACT.MD_START_DT DESC ),1) AS RANK_CONTRACT
	FROM HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_INVESTIA_UNIVERIS SLH
	INNER JOIN HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
    ON  SLH.HK_LINK=LH.HK_LINK
	LEFT JOIN  
    (   SELECT L.HK_HUB_REGISTERED_REPRESENTATIVE, L.HK_HUB_CONTRACT,L.RR_CD, S.MD_ACTIVE, S.MD_START_DT 
        FROM SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR L 
        INNER JOIN SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS S ON L.HK_LINK = S.HK_LINK
    )   CONTRACT
	    ON LH.HK_HUB_CONTRACT = CONTRACT.HK_HUB_CONTRACT
	    AND CONTRACT.MD_START_DT <= SLH.MD_START_DT
),
LATEST_VERSION_CONTRACT AS (
	SELECT SLH.HK_LINK,
	CONTRACT.HK_HUB,
	CONTRACT.ADMINISTRATOR_TYPE,
	COALESCE (CONTRACT.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLH.HK_LINK, CONTRACT.HK_HUB ORDER BY CONTRACT.MD_START_DT DESC ),1) AS RANK_CONTRACT
	FROM HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_INVESTIA_UNIVERIS SLH
	INNER JOIN HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
    ON  SLH.HK_LINK=LH.HK_LINK
	LEFT JOIN  SHARED_RDV.SAT_CONTRACT_IAS_NBIN CONTRACT
	    ON LH.HK_HUB_CONTRACT = CONTRACT.HK_HUB
	    AND CONTRACT.MD_START_DT <= SLH.MD_START_DT
)
,LATEST_VERSION_SHARE AS (
	SELECT 
      SLH.HK_LINK,
      COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE,
      LIC.HK_HUB_CONTRACT,
      LIC.RR_CD,
      COMM_SHARE.MD_START_DT,
      COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR,
      COMM_SHARE.MASTER_CODE,
      COMM_SHARE.COMMISSIONPCT,
      COALESCE (COMM_SHARE.MD_ACTIVE,'A') AS MD_ACTIVE,
      COALESCE (ROW_NUMBER() OVER (PARTITION BY SLH.HK_LINK,COMM_SHARE.HK_LINK ORDER BY COMM_SHARE.MD_START_DT DESC ),1) AS RANK_SHARE,
	  COMM_SHARE.COMMISSIONPCT_ADVISOR,
	  COMM_SHARE.COMMISSIONPCT_FINANCIAL
    FROM HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_INVESTIA_UNIVERIS SLH
	INNER JOIN HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
	    ON  SLH.HK_LINK=LH.HK_LINK	
    LEFT JOIN LATEST_VERSION_INVESTMENT_CONTRACT LIC
        ON SLH.HK_LINK = LIC.HK_LINK
        AND LH.HK_HUB_CONTRACT= LIC.HK_HUB_CONTRACT
	    AND LIC.MD_ACTIVE = 'A' AND LIC.RANK_CONTRACT = 1
	LEFT JOIN 	( SELECT LCS.HK_LINK,LCS.HK_HUB_REGISTERED_REPRESENTATIVE,CS.MD_START_DT,LCS.HK_HUB_PARTY_ROLE_ADVISOR,LCS.MASTER_CODE,CS.COMMISSIONPCT,CS.MD_ACTIVE,CS.COMMISSIONPCT_ADVISOR,CS.COMMISSIONPCT_FINANCIAL
	        	FROM SHARED_BDV.LINK_PARTY_RELATIONSHIP_SHARE LCS 
	        	INNER JOIN SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE CS 
	        		ON CS.HK_LINK=LCS.HK_LINK AND CS.MD_SRC_SYSTEM = 'INVESTIA-UNIVERIS'
	    		) COMM_SHARE
	ON LIC.HK_HUB_REGISTERED_REPRESENTATIVE=COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE
	AND  COMM_SHARE.MD_START_DT <= DATEADD(SECOND, 86399, SLH.MD_START_DT) 
),
LATEST_VERSION_PRODUCT AS (
	SELECT SLH.HK_LINK,
	PRODUCT.HK_HUB ,
	PRODUCT.ISSUER_COMPANY_NAME,
	COALESCE (PRODUCT.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLH.HK_LINK,PRODUCT.HK_HUB ORDER BY PRODUCT.MD_START_DT DESC ),1) AS RANK_PRODUCT
	FROM HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_INVESTIA_UNIVERIS SLH
	INNER JOIN HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
    ON  SLH.HK_LINK=LH.HK_LINK
	LEFT JOIN  
	(SELECT H.HK_HUB , P.ISSUER_COMPANY_NAME, P.MD_ACTIVE, P.MD_START_DT FROM SHARED_BDV.SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE P 
	INNER JOIN SHARED_RDV.HUB_INVESTMENT_PRODUCT_TYPE H ON H.HK_HUB = P.HK_HUB WHERE P.MD_SRC_SYSTEM = 'INVESTIA-UNIVERIS') PRODUCT
	    ON LH.HK_HUB_INVESTMENT_PRODUCT_TYPE = PRODUCT.HK_HUB
	    AND PRODUCT.MD_START_DT <= SLH.MD_START_DT
),
LATEST_VERSION_BDV_INVESTMENT_CONTRACT AS (
SELECT SLR.HK_LINK,
SLR.MD_START_DT,
LC.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES ,
LC.PLN_MNEM ,
LC.HK_HUB_CONTRACT,
LC.MD_SRC_SYSTEM ,
LC.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR,
COALESCE (SLC.MD_ACTIVE,'A') AS MD_ACTIVE,
COALESCE (ROW_NUMBER() OVER (PARTITION BY SLR.HK_LINK,LR.HK_HUB_CONTRACT ORDER BY SLC.MD_START_DT DESC ),1) AS RANK_CONTRACT
FROM HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_INVESTIA_UNIVERIS SLR
INNER JOIN HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LR
ON SLR.HK_LINK = LR.HK_LINK
LEFT JOIN LATEST_VERSION_SHARE COMM_SHARE
ON COMM_SHARE.HK_LINK = SLR.HK_LINK
AND COMM_SHARE.MD_ACTIVE = 'A' AND COMM_SHARE.RANK_SHARE = 1
LEFT JOIN SHARED_BDV.LINK_INVESTMENT_CONTRACT LC
ON LC.HK_HUB_CONTRACT = LR.HK_HUB_CONTRACT
AND lc.HK_HUB_PARTY_ROLE_ADVISOR = COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR
LEFT JOIN SHARED_BDV.SAT_LINK_INVESTMENT_CONTRACT SLC
ON SLC.HK_LINK = LC.HK_LINK
AND SLC.MD_START_DT <= SLR.MD_START_DT
)
SELECT DISTINCT
  LH.HK_HUB_CONTRACT,
  LH.HK_HUB_INVESTMENT_PRODUCT_TYPE,
  COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR,
  LIC.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
  LIC.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
  LH.MD_SEQ,
  SLH.MD_START_DT,
  LH.MD_EXTRACT_DT,
  LH.MD_SOURCE,
  LH.MD_SRC_SYSTEM,
  LH.CONTRACT_ID,
  LH.INVESTMENT_PRODUCT_ID,
  COMM_SHARE.MASTER_CODE,
  COMM_SHARE.RR_CD, 
  LH.UNIVERIS_CLIENT_ID,
  LIC.PLN_MNEM,
  COMM_SHARE.COMMISSIONPCT,
  PRODUCT.ISSUER_COMPANY_NAME,
  CONTRACT.ADMINISTRATOR_TYPE,
  SLH.BAL_DATE,
  SLH.MV,
  SLH.AUA,
  LH.UNIVERIS_PLAN_ID,
  SLH.IVD_LOAD_FLAG,
  SLH.WF_IND,
  COMM_SHARE.COMMISSIONPCT_ADVISOR,
  COMM_SHARE.COMMISSIONPCT_FINANCIAL
FROM HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_INVESTIA_UNIVERIS SLH
INNER JOIN HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
    ON  SLH.HK_LINK=LH.HK_LINK
LEFT JOIN LATEST_VERSION_SHARE COMM_SHARE
    ON LH.HK_HUB_CONTRACT =COMM_SHARE.HK_HUB_CONTRACT
    AND  COMM_SHARE.HK_LINK = SLH.HK_LINK 
    AND  COMM_SHARE.MD_ACTIVE = 'A' AND COMM_SHARE.RANK_SHARE = 1
LEFT JOIN LATEST_VERSION_PRODUCT PRODUCT 
	ON PRODUCT.HK_HUB = LH.HK_HUB_INVESTMENT_PRODUCT_TYPE 
	AND LH.HK_LINK = PRODUCT.HK_LINK
	AND PRODUCT.MD_ACTIVE = 'A' AND PRODUCT.RANK_PRODUCT = 1
LEFT JOIN LATEST_VERSION_BDV_INVESTMENT_CONTRACT LIC
    ON LIC.HK_LINK = SLH.HK_LINK
	AND LIC.HK_HUB_PARTY_ROLE_ADVISOR =COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR
	AND LIC.MD_ACTIVE = 'A' AND LIC.RANK_CONTRACT = 1
LEFT JOIN LATEST_VERSION_CONTRACT CONTRACT 
	ON CONTRACT.HK_HUB = LH.HK_HUB_CONTRACT 
	AND LH.HK_LINK = CONTRACT.HK_LINK
	AND CONTRACT.MD_ACTIVE = 'A' AND CONTRACT.RANK_CONTRACT = 1;
create or replace view DB_IAW_PROD_DWH.HOLDINGS_BDV.VW_INVESTMENT(
	HK_LINK,
	HK_HUB_CONTRACT,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	MD_SEQ,
	MD_START_DT,
	MD_HASHDIFF,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	PLN_MNEM,
	ACCOUNT_RAP_CODE,
	RETAIL_PLAN,
	ASC_1_RESP_PLAN_TYPES,
	CONTRACT_ID,
	INVESTMENT_PRODUCT_ID,
	RR_CD,
	MASTER_CODE,
	CLIENT_ID,
	PLN_SYSID,
	BALANCE_DATE,
	HOLDING_VALUE,
	AUA,
	AUM,
	AUM_CLARINGTON,
	AUM_IA,
	CASH_POSITION,
	PROGRAM_TYPE,
	ACCOUNT_PROGRAM_TYPE,
	ADMINISTRATORY_TYPE,
	UNIVERIS_PLAN_ID,
	AUA_ACCRUED_INTEREST
) as
SELECT 
  	  HK_LINK
	, HK_HUB_CONTRACT
	, HK_HUB_INVESTMENT_PRODUCT_TYPE
	, HK_HUB_PARTY_ROLE_ADVISOR	  
	, HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
	, HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES
	, MD_SEQ
	, MD_START_DT 
	, MD_HASHDIFF 
	, MD_SOURCE
	, MD_SRC_SYSTEM
	, MD_EXTRACT_DT
	, NULL AS PLN_MNEM
	, ACCOUNT_RAP_CODE
	, RETAIL_PLAN
	, ASC_1_RESP_PLAN_TYPES
	, CONTRACT_ID 
	, INVESTMENT_PRODUCT_ID 
	, RR_CD
	, MASTER_CODE 
	, CLIENT_ID 
	, PLN_SYSID
	, BALANCE_DATE
	, HOLDING_VALUE
	, AUA
	, AUM
	, AUM_CLARINGTON
	, AUM_IA
	, CASH_POSITION
	, PROGRAM_TYPE
	, ACCOUNT_PROGRAM_TYPE
	, ADMINISTRATORY_TYPE
	, NULL AS UNIVERIS_PLAN_ID
	, AUA_ACCRUED_INTEREST
FROM HOLDINGS_BDV.VW_INVESTMENT_IAS_NBIN
UNION ALL
SELECT 
	  HK_LINK
	, HK_HUB_CONTRACT
	, HK_HUB_INVESTMENT_PRODUCT_TYPE
	, HK_HUB_PARTY_ROLE_ADVISOR	  
	, HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
	, HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES
	, MD_SEQ
	, MD_START_DT 
	, MD_HASHDIFF 
	, MD_SOURCE
	, MD_SRC_SYSTEM
	, MD_EXTRACT_DT
	, NULL
	, ACCOUNT_RAP_CODE
	, RETAIL_PLAN
	, ASC_1_RESP_PLAN_TYPES
	, CONTRACT_ID 
	, INVESTMENT_PRODUCT_ID 
	, RR_CD
	, MASTER_CODE 
	, CLIENT_ID 
	, PLN_SYSID
	, BALANCE_DATE
	, HOLDING_VALUE
	, AUA
	, AUM
	, AUM_CLARINGTON
	, AUM_IA
	, CASH_POSITION
	, PROGRAM_TYPE
	, ACCOUNT_PROGRAM_TYPE
	, ADMINISTRATORY_TYPE
	, NULL AS UNIVERIS_PLAN_ID
	, AUA AS AUA_ACCRUED_INTEREST
FROM HOLDINGS_BDV.VW_INVESTMENT_CASH_IAS_NBIN
UNION ALL
SELECT 
	  HK_LINK
	, HK_HUB_CONTRACT
	, HK_HUB_INVESTMENT_PRODUCT_TYPE
	, HK_HUB_PARTY_ROLE_ADVISOR
	, HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
	, HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES
	, MD_SEQ
	, MD_START_DT
	, MD_HASHDIFF 
	, MD_SOURCE
	, MD_SRC_SYSTEM
	, MD_EXTRACT_DT	
	, PLN_MNEM
	, NULL
	, NULL
	, NULL 
	, CONTRACT_ID
	, INVESTMENT_PRODUCT_ID
	, RR_CD 
	, MASTER_CODE
	, CLIENT_ID
	, CAST(UNIVERIS_PLAN_ID AS VARCHAR(18)) AS PLN_SYSID 
	, BAL_DATE
	, HOLDING_VALUE
	, AUA
	, AUM
	, AUM_CLARINGTON
	, AUM_IA
	, CASH_POSITION
	, PROGRAM_TYPE
	, ACCOUNT_PROGRAM_TYPE
	, ADMINISTRATORY_TYPE
	, UNIVERIS_PLAN_ID
	, NULL AS AUA_ACCRUED_INTEREST
FROM HOLDINGS_BDV.VW_INVESTMENT_IAS_UNIVERIS
UNION ALL
SELECT 
	  HK_LINK
	, HK_HUB_CONTRACT
	, HK_HUB_INVESTMENT_PRODUCT_TYPE
	, HK_HUB_PARTY_ROLE_ADVISOR
	, HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
	, HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES
	, MD_SEQ
	, MD_START_DT
	, MD_HASHDIFF 
	, MD_SOURCE
	, MD_SRC_SYSTEM
	, MD_EXTRACT_DT	
	, PLN_MNEM
	, NULL
	, NULL
	, NULL 
	, CONTRACT_ID
	, INVESTMENT_PRODUCT_ID
	, RR_CD 
	, MASTER_CODE
	, CLIENT_ID
	, CAST(UNIVERIS_PLAN_ID AS VARCHAR(18)) AS PLN_SYSID 
	, BAL_DATE
	, HOLDING_VALUE
	, AUA
	, AUM
	, AUM_CLARINGTON
	, AUM_IA
	, CASH_POSITION
	, PROGRAM_TYPE
	, ACCOUNT_PROGRAM_TYPE
	, ADMINISTRATORY_TYPE
	, UNIVERIS_PLAN_ID
	, NULL AS AUA_ACCRUED_INTEREST
FROM HOLDINGS_BDV.VW_INVESTMENT_INVESTIA_UNIVERIS;
create or replace view DB_IAW_PROD_DWH.HOLDINGS_BDV.VW_INVESTMENT_CASH_IAS_NBIN(
	HK_LINK,
	HK_HUB_CONTRACT,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	MD_SEQ,
	MD_START_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	ACCOUNT_RAP_CODE,
	RETAIL_PLAN,
	ASC_1_RESP_PLAN_TYPES,
	CONTRACT_ID,
	INVESTMENT_PRODUCT_ID,
	RR_CD,
	MASTER_CODE,
	CLIENT_ID,
	PLN_SYSID,
	BALANCE_DATE,
	HOLDING_VALUE,
	AUA,
	AUM,
	AUM_CLARINGTON,
	AUM_IA,
	CASH_POSITION,
	PROGRAM_TYPE,
	ACCOUNT_PROGRAM_TYPE,
	ADMINISTRATORY_TYPE,
	MD_HASHDIFF
) as
WITH EXCLUSION AS
(
SELECT
    R.REPID,
    S.IND_EXCLUDE,
    S.MD_ACTIVE
FROM STEWARDSHIP_RDV.REF_MANUAL_ADVISOR_RVP_IAS R                    
INNER JOIN STEWARDSHIP_RDV.SAT_REF_MANUAL_ADVISOR_RVP_IAS S
ON R.HK_HUB = S.HK_HUB
QUALIFY ROW_NUMBER() OVER (PARTITION BY R.REPID ORDER BY S.MD_START_DT DESC)=1  
),
HOLIDAYS AS
(
SELECT HOLIDAY_DATE 
FROM SHARED_RDV.REF_HOLIDAYS_IAS_IAVM R
INNER JOIN SHARED_RDV.SAT_REF_HOLIDAYS_IAS_IAVM S
	ON R.HK_HUB =S.HK_HUB 
	AND S.MD_ACTIVE = 'A'		
),
IAS_CASH_POS AS 
(
	SELECT 
		  HK_LINK
		, HK_HUB_CONTRACT
		, HK_HUB_INVESTMENT_PRODUCT_TYPE
		, HK_HUB_PARTY_ROLE_ADVISOR
		, HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
		, HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES
		, MD_SEQ
		, MD_START_DT 
		, MD_SOURCE
		, MD_SRC_SYSTEM
		, MD_EXTRACT_DT
		, CONTRACT_ID
		, RR_CD
		, A_C_SUMM_BALANCE_BUS_DATE
		, A_C_CURRENCY
		, ACCOUNT_RAP_CODE
		, RETAIL_PLAN
		, ASC_1_RESP_PLAN_TYPES
		, MASTER_CODE
		, A_C_CLIENT
		, ASC_3_MANAGED_TYPE
		, ADMINISTRATOR_TYPE
		, COMMISSIONPCT
		, EXCHANGERATE
		-- This business rule is documented as BR_ALL_HOLDINGS_CASH_VALUE_007
		,  CASE 
			/* Today is the end of month */
			WHEN A_C_SUMM_BALANCE_BUS_DATE = LAST_DAY(A_C_SUMM_BALANCE_BUS_DATE) 										THEN (A_C_SUMM_SD_NET_AMT * -1)
		
			/* Today Friday and Tomorrow or after tomorrow is the end of month */
			WHEN DAYNAME(A_C_SUMM_BALANCE_BUS_DATE) = 'Fri' 
				AND ( 	
						DATEADD(DAY, 1, A_C_SUMM_BALANCE_BUS_DATE) = LAST_DAY(A_C_SUMM_BALANCE_BUS_DATE) 	
						OR DATEADD(DAY, 2, A_C_SUMM_BALANCE_BUS_DATE) = LAST_DAY(A_C_SUMM_BALANCE_BUS_DATE) 
					)																									THEN (A_C_SUMM_SD_NET_AMT * -1)
					
			/* Today Friday and Monday is a holiday and end of month */
			WHEN DAYNAME(A_C_SUMM_BALANCE_BUS_DATE) = 'Fri' 
				AND EXISTS(SELECT 1 FROM HOLIDAYS WHERE HOLIDAY_DATE = DATEADD(DAY, 3, A_C_SUMM_BALANCE_BUS_DATE)) 
				AND DATEADD(DAY, 3, A_C_SUMM_BALANCE_BUS_DATE) = LAST_DAY(A_C_SUMM_BALANCE_BUS_DATE)					THEN (A_C_SUMM_SD_NET_AMT * -1)

			/* Tomorrow is a Holiday and end of month */
			WHEN EXISTS(SELECT 1 FROM HOLIDAYS WHERE HOLIDAY_DATE = DATEADD(DAY, 1, A_C_SUMM_BALANCE_BUS_DATE))
				AND DATEADD(DAY, 1, A_C_SUMM_BALANCE_BUS_DATE) = LAST_DAY(A_C_SUMM_BALANCE_BUS_DATE)					THEN (A_C_SUMM_SD_NET_AMT * -1)
		
			/* Tomorrow Friday is a Holdiday and next Saturday or Sunday is end of month*/
			WHEN EXISTS(SELECT 1 FROM HOLIDAYS WHERE HOLIDAY_DATE = DATEADD(DAY, 1, A_C_SUMM_BALANCE_BUS_DATE))
				AND DAYNAME(DATEADD(DAY, 1, A_C_SUMM_BALANCE_BUS_DATE)) = 'Fri'
				AND ( 
						DATEADD(DAY, 2, A_C_SUMM_BALANCE_BUS_DATE) = LAST_DAY(A_C_SUMM_BALANCE_BUS_DATE) 	
						OR DATEADD(DAY, 3, A_C_SUMM_BALANCE_BUS_DATE) = LAST_DAY(A_C_SUMM_BALANCE_BUS_DATE) 
					)																									THEN (A_C_SUMM_SD_NET_AMT * -1)
		
			ELSE A_C_SUMM_TD_NET_AMT * -1
		END AS CASH_VALUE
    FROM HOLDINGS_BDV.WT_INVESTMENT_CASH_IAS_NBIN
)
SELECT 
	WT.HK_LINK,
	WT.HK_HUB_CONTRACT,
	WT.HK_HUB_INVESTMENT_PRODUCT_TYPE,
	WT.HK_HUB_PARTY_ROLE_ADVISOR,
	WT.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	WT.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	WT.MD_SEQ,
	WT.MD_START_DT, 
	WT.MD_SOURCE,
	WT.MD_SRC_SYSTEM,
	WT.MD_EXTRACT_DT,
	WT.ACCOUNT_RAP_CODE,
	WT.RETAIL_PLAN,
	WT.ASC_1_RESP_PLAN_TYPES,
	WT.CONTRACT_ID,
	'IASCASH' 																																AS INVESTMENT_PRODUCT_ID ,
	WT.RR_CD,
	WT.MASTER_CODE,
	WT.A_C_CLIENT																															AS CLIENT_ID,
	WT.CONTRACT_ID																															AS PLN_SYSID,
	--CASE WHEN DAYOFWEEK(WT.MD_START_DT) IN (0, 1) THEN DATEADD(DAY,-1,WT.MD_START_DT) ELSE WT.A_C_SUMM_BALANCE_BUS_DATE END                 AS BALANCE_DATE,
	CASE WHEN DATEDIFF( DAY, WT.MD_START_DT, WT.A_C_SUMM_BALANCE_BUS_DATE ) <> -1 THEN DATEADD(DAY,-1,WT.MD_START_DT) ELSE WT.A_C_SUMM_BALANCE_BUS_DATE END  AS BALANCE_DATE,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_HOLDING_VALUE_001
	WT.CASH_VALUE * COALESCE(WT.COMMISSIONPCT,100) * 0.01																					AS HOLDING_VALUE,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_AUA_002
	 round(DECODE(WT.A_C_CURRENCY,'CAD',wt.CASH_VALUE ,wt.CASH_VALUE * WT.EXCHANGERATE) * COALESCE(WT.COMMISSIONPCT,100) * 0.01 ,2) 	 	AS AUA,
	0 																																		AS AUM,
	0 																																		AS AUM_CLARINGTON,	
	0 																																		AS AUM_IA,
    --DECODE(WT.A_C_CURRENCY,'USD',WT.CASH_VALUE*WT.EXCHANGERATE,WT.CASH_VALUE) * COALESCE(WT.COMMISSIONPCT,100) * 0.01 						AS CASH_POSITION, -- To be confirmed
	 round(DECODE(WT.A_C_CURRENCY,'CAD',wt.CASH_VALUE ,wt.CASH_VALUE * WT.EXCHANGERATE) * COALESCE(WT.COMMISSIONPCT,100) * 0.01 ,2) 		AS CASH_POSITION,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_PROGRAM_TYPE_006
	CASE WT.ASC_3_MANAGED_TYPE WHEN '1' 
 							THEN 'SMAs'
							WHEN 'C' 
							THEN 'Managed Account Program'
							WHEN 'D' 
							THEN 'Managed Account Program'
							WHEN 'F' 
							THEN 'Fee-based'
							WHEN 'G' 
							THEN 'Managed Account Program'
							WHEN 'J' 
							THEN 'SMAs'
							WHEN 'L' 
							THEN 'SMAs'
							WHEN 'M' 
							THEN 'Managed Account Program'
							WHEN 'N' 
							THEN 'SMAs'
							WHEN 'Q' 
							THEN 'Managed Account Program'
							WHEN 'R' 
							THEN 'Fee-based'
							WHEN 'S' 
							THEN 'Fee-based'
							WHEN 'V' 
							THEN 'SMAs'
							WHEN 'X' 
							THEN 'SMAs'
							ELSE 'Commission-based'
	END 																																	AS PROGRAM_TYPE,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_PROGRAM_TYPE_006
	CASE WT.ASC_3_MANAGED_TYPE WHEN '1' 
							THEN 'SMAs'
							WHEN 'C' 
							THEN 'Managed Account Program'
							WHEN 'D' 
							THEN 'Managed Account Program'
							WHEN 'F' 
							THEN 'Fee-based'
							WHEN 'G' 
							THEN 'Managed Account Program'
							WHEN 'J' 
							THEN 'SMAs'
							WHEN 'L' 
							THEN 'SMAs'
							WHEN 'M' 
							THEN 'Managed Account Program'
							WHEN 'N' 
							THEN 'SMAs'
							WHEN 'Q' 
							THEN 'Managed Account Program'
							WHEN 'R' 
							THEN 'Fee-based'
							WHEN 'S' 
							THEN 'Fee-based'
							WHEN 'V' 
							THEN 'SMAs'
							WHEN 'X' 
							THEN 'SMAs'
							ELSE 'Commission-based'
	END 																																	AS ACCOUNT_PROGRAM_TYPE,
	WT.ADMINISTRATOR_TYPE 																													AS ADMINISTRATORY_TYPE,
	
	SHA1(CONCAT(
	  COALESCE(RR_CD,'#NULL#'), '|' 
	, COALESCE(PLN_SYSID,'#NULL#'), '|'
	, COALESCE(TO_VARCHAR(BALANCE_DATE),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(HOLDING_VALUE),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(AUA),'#NULL#'),'|'
	, COALESCE(TO_VARCHAR(AUM),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(AUM_IA),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(CASH_POSITION),'#NULL#'),'|' 
	, COALESCE(PROGRAM_TYPE,'#NULL#'),'|' 
	, COALESCE(ACCOUNT_PROGRAM_TYPE,'#NULL#'),'|' 
	, COALESCE(ADMINISTRATORY_TYPE,'#NULL#')
	))																																		AS MD_HASHDIFF	
FROM IAS_CASH_POS WT
LEFT JOIN EXCLUSION E 
	ON E.REPID = WT.MASTER_CODE AND E.IND_EXCLUDE = 1 AND E.MD_ACTIVE = 'A'
WHERE  WT.CONTRACT_ID NOT RLIKE '^[A-Z][A-Z].*'
	AND WT.CONTRACT_ID IS NOT NULL
	-- EXCLUDE RVP ADVISOR
	AND E.REPID IS NULL
	AND (WT.RR_CD NOT IN ('SEAA', 'SEZ9', 'QYYY'));
create or replace view DB_IAW_PROD_DWH.HOLDINGS_BDV.VW_INVESTMENT_IAS_NBIN(
	HK_LINK,
	HK_HUB_CONTRACT,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	MD_SEQ,
	MD_START_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	ACCOUNT_RAP_CODE,
	RETAIL_PLAN,
	ASC_1_RESP_PLAN_TYPES,
	CONTRACT_ID,
	INVESTMENT_PRODUCT_ID,
	RR_CD,
	MASTER_CODE,
	CLIENT_ID,
	PLN_SYSID,
	BALANCE_DATE,
	HOLDING_VALUE,
	AUA,
	AUM,
	AUM_CLARINGTON,
	AUM_IA,
	CASH_POSITION,
	PROGRAM_TYPE,
	ACCOUNT_PROGRAM_TYPE,
	ADMINISTRATORY_TYPE,
	MD_HASHDIFF,
	AUA_ACCRUED_INTEREST
) as
WITH EXCLUSION AS
(
SELECT
    R.REPID,
    S.IND_EXCLUDE,
    S.MD_ACTIVE
FROM STEWARDSHIP_RDV.REF_MANUAL_ADVISOR_RVP_IAS R                    
INNER JOIN STEWARDSHIP_RDV.SAT_REF_MANUAL_ADVISOR_RVP_IAS S
ON R.HK_HUB = S.HK_HUB
QUALIFY ROW_NUMBER() OVER (PARTITION BY R.REPID ORDER BY S.MD_START_DT DESC)=1  
)
SELECT  
	WT.HK_LINK,
	WT.HK_HUB_CONTRACT,
	WT.HK_HUB_INVESTMENT_PRODUCT_TYPE,
	WT.HK_HUB_PARTY_ROLE_ADVISOR,
	WT.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	WT.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	WT.MD_SEQ,
	WT.MD_START_DT,
	WT.MD_SOURCE,
	WT.MD_SRC_SYSTEM,
	WT.MD_EXTRACT_DT,
	WT.ACCOUNT_RAP_CODE,
	WT.RETAIL_PLAN,
	WT.ASC_1_RESP_PLAN_TYPES,	
	WT.CONTRACT_ID,
	WT.INVESTMENT_PRODUCT_ID,
	WT.RR_CD,
	WT.MASTER_CODE,
	WT.A_C_CLIENT																																	AS CLIENT_ID,
	WT.CONTRACT_ID																																	AS PLN_SYSID,
	CASE WHEN DATEDIFF( DAY, WT.MD_START_DT, WT.TRAN_SUMM_BUSINESS_DATE ) <> -1 THEN DATEADD(DAY,-1,WT.MD_START_DT) ELSE WT.TRAN_SUMM_BUSINESS_DATE END  AS BALANCE_DATE,
	--CASE WHEN DAYOFWEEK(WT.MD_START_DT) IN (0, 1) THEN DATEADD(DAY,-1,WT.MD_START_DT) ELSE WT.TRAN_SUMM_BUSINESS_DATE END  AS BALANCE_DATE,
	-- This check was done to resolve weekend and holidays AUA duplication issue
	-- The Business rule below is documented as BR_ALL_HOLDINGS_HOLDING_VALUE_001
	WT.TRAN_SUMM_CURR_MKT_VALUE * COALESCE(WT.COMMISSIONPCT,100) * 0.01																				AS HOLDING_VALUE,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_AUA_002
	DECODE(WT.A_C_CURRENCY,'USD',WT.TRAN_SUMM_CURR_MKT_VALUE*WT.EXCHANGERATE,WT.TRAN_SUMM_CURR_MKT_VALUE) * COALESCE(WT.COMMISSIONPCT,100) * 0.01 	AS AUA,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_AUM_003
	CASE	WHEN (WT.ISSUER_COMPANY_NAME LIKE '%IA Clarington%' OR WT.ISSUER_COMPANY_NAME LIKE '%Industrial Alliance%')
			THEN DECODE(WT.A_C_CURRENCY,'USD',WT.TRAN_SUMM_CURR_MKT_VALUE*WT.EXCHANGERATE,WT.TRAN_SUMM_CURR_MKT_VALUE) 
			* COALESCE(WT.COMMISSIONPCT,100) * 0.01  END																							AS AUM,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_AUM_CLARINGTON_004
	CASE	WHEN (WT.ISSUER_COMPANY_NAME LIKE '%IA Clarington%')
			THEN DECODE(WT.A_C_CURRENCY,'USD',WT.TRAN_SUMM_CURR_MKT_VALUE*WT.EXCHANGERATE,WT.TRAN_SUMM_CURR_MKT_VALUE) 
			* COALESCE(WT.COMMISSIONPCT,100) * 0.01 END  																							AS AUM_CLARINGTON,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_AUM_IA_005
	CASE	WHEN (WT.ISSUER_COMPANY_NAME LIKE '%Industrial Alliance%')
			THEN DECODE(WT.A_C_CURRENCY,'USD',WT.TRAN_SUMM_CURR_MKT_VALUE*WT.EXCHANGERATE,WT.TRAN_SUMM_CURR_MKT_VALUE) 
			* COALESCE(WT.COMMISSIONPCT,100) * 0.01 END  																							AS AUM_IA,
	0 																																				AS CASH_POSITION,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_PROGRAM_TYPE_006
 	CASE WT.ASC_3_MANAGED_TYPE WHEN '1' 
 							THEN 'SMAs'
							WHEN 'C' 
							THEN 'Managed Account Program'
							WHEN 'D' 
							THEN 'Managed Account Program'
							WHEN 'F' 
							THEN 'Fee-based'
							WHEN 'G' 
							THEN 'Managed Account Program'
							WHEN 'J' 
							THEN 'SMAs'
							WHEN 'L' 
							THEN 'SMAs'
							WHEN 'M' 
							THEN 'Managed Account Program'
							WHEN 'N' 
							THEN 'SMAs'
							WHEN 'Q' 
							THEN 'Managed Account Program'
							WHEN 'R' 
							THEN 'Fee-based'
							WHEN 'S' 
							THEN 'Fee-based'
							WHEN 'V' 
							THEN 'SMAs'
							WHEN 'X' 
							THEN 'SMAs'
							ELSE 'Commission-based'
	END 																																			AS PROGRAM_TYPE,
	-- The Business rule below is documented as BR_ALL_HOLDINGS_PROGRAM_TYPE_006
	CASE WT.ASC_3_MANAGED_TYPE WHEN '1' 
							THEN 'SMAs'
							WHEN 'C' 
							THEN 'Managed Account Program'
							WHEN 'D' 
							THEN 'Managed Account Program'
							WHEN 'F' 
							THEN 'Fee-based'
							WHEN 'G' 
							THEN 'Managed Account Program'
							WHEN 'J' 
							THEN 'SMAs'
							WHEN 'L' 
							THEN 'SMAs'
							WHEN 'M' 
							THEN 'Managed Account Program'
							WHEN 'N' 
							THEN 'SMAs'
							WHEN 'Q' 
							THEN 'Managed Account Program'
							WHEN 'R' 
							THEN 'Fee-based'
							WHEN 'S' 
							THEN 'Fee-based'
							WHEN 'V' 
							THEN 'SMAs'
							WHEN 'X' 
							THEN 'SMAs'
							ELSE 'Commission-based'
	END 																																			AS ACCOUNT_PROGRAM_TYPE,
	WT.ADMINISTRATOR_TYPE 																															AS ADMINISTRATORY_TYPE,
		
	SHA1(CONCAT(
	  COALESCE(WT.RR_CD,'#NULL#'), '|' 
	, COALESCE(PLN_SYSID,'#NULL#'), '|'
	, COALESCE(TO_VARCHAR(BALANCE_DATE),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(HOLDING_VALUE),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(AUA),'#NULL#'),'|'
	, COALESCE(TO_VARCHAR(AUM),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(AUM_IA),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(CASH_POSITION),'#NULL#'),'|' 
	, COALESCE(PROGRAM_TYPE,'#NULL#'),'|' 
	, COALESCE(ACCOUNT_PROGRAM_TYPE,'#NULL#'),'|' 
	, COALESCE(ADMINISTRATORY_TYPE,'#NULL#')
	))																																				AS MD_HASHDIFF
	,
   round(
   (case    when (WT.Tran_Summ_Curr_Mkt_Value = 0 and WT.Tran_Summ_Curr_Mkt_Price = 0 and WT.Mkt_Price_Date != WT.Tran_Summ_Business_Date) then 0
            when WT.Market_Price_Close != 0 then WT.Market_Price_Close  
            when (WT.Market_Price_Bid != 0 and (WT.Tran_Summ_Trade_Qty+WT.Tran_Summ_Sfk_Qty) > 0) then WT.Market_Price_Bid 
            when WT.Market_Price_Ask != 0 then WT.Market_Price_Ask 
            else WT.Market_Price_Bid  end) *
   (case    when (WT.price_currency = 'USD') then WT.exchangeRate else 1  end)  *
    (WT.Tran_Summ_Trade_Qty+WT.Tran_Summ_Sfk_Qty) * (WT.TI_Basis_Point/WT.TI_Face_Value) ,2)
    *     COALESCE(WT.COMMISSIONPCT,100) * 0.01
   + 
    round((case when WT.TI_Face_Value = 1000 then round(WT.Tran_Summ_Trade_Qty+WT.Tran_Summ_Sfk_Qty / 1000, 3) 
           else  round(WT.Tran_Summ_Trade_Qty+WT.Tran_Summ_Sfk_Qty,0) end
    ) * 
  ifnull(ai.BASE_ACCRUED_INTEREST/100, 0) * 
  (case when (WT.price_currency = 'USD') then WT.exchangeRate else 1 end) , 2) * 
     COALESCE(WT.COMMISSIONPCT,100) * 0.01   AS AUA_ACCRUED_INTEREST
FROM HOLDINGS_BDV.WT_INVESTMENT_IAS_NBIN WT
LEFT JOIN EXCLUSION E 
	ON E.REPID = WT.MASTER_CODE AND E.IND_EXCLUDE = 1 AND E.MD_ACTIVE = 'A'
	left join HOLDINGS_RDV.LINK_ACCRUED_INTEREST_NBIN ai
	on ai.PROCESS_DATE = WT.TRAN_SUMM_BUSINESS_DATE
	AND ai.HK_HUB_INVESTMENT_PRODUCT_TYPE=WT.HK_HUB_INVESTMENT_PRODUCT_TYPE 
	WHERE 
	WT.CONTRACT_ID NOT RLIKE '^[A-Z][A-Z].*'
	AND WT.CONTRACT_ID IS NOT NULL
	-- EXCLUDE RVP ADVISOR
	AND E.REPID IS NULL
	AND (WT.RR_CD NOT IN ('SEAA', 'SEZ9', 'QYYY'));
create or replace view DB_IAW_PROD_DWH.HOLDINGS_BDV.VW_INVESTMENT_IAS_UNIVERIS(
	HK_LINK,
	HK_HUB_CONTRACT,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	MD_SEQ,
	MD_START_DT,
	MD_CREATION_DT,
	MD_EXTRACT_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	CONTRACT_ID,
	INVESTMENT_PRODUCT_ID,
	MASTER_CODE,
	CLIENT_ID,
	PLN_MNEM,
	UNIVERIS_PLAN_ID,
	RR_CD,
	ADMINISTRATORY_TYPE,
	BAL_DATE,
	HOLDING_VALUE,
	AUA,
	AUM,
	AUM_CLARINGTON,
	AUM_IA,
	CASH_POSITION,
	PROGRAM_TYPE,
	ACCOUNT_PROGRAM_TYPE,
	MD_HASHDIFF
) as 
WITH EXCLUSION AS
(
SELECT 
    R.REPID, 
    S.IND_EXCLUDE, 
	S.MD_ACTIVE
FROM STEWARDSHIP_RDV.REF_MANUAL_ADVISOR_RVP_IAS R 					
INNER JOIN STEWARDSHIP_RDV.SAT_REF_MANUAL_ADVISOR_RVP_IAS S 
ON R.HK_HUB = S.HK_HUB
QUALIFY ROW_NUMBER() OVER (PARTITION BY R.REPID ORDER BY S.MD_START_DT DESC)=1	
)
SELECT 
HK_LINK, 
HK_HUB_CONTRACT, 
HK_HUB_INVESTMENT_PRODUCT_TYPE, 
HK_HUB_PARTY_ROLE_ADVISOR, 
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES, 
MD_SEQ, 
MD_START_DT, 
MD_CREATION_DT, 
MD_EXTRACT_DT, 
MD_SOURCE, 
MD_SRC_SYSTEM, 
CONTRACT_ID, 
INVESTMENT_PRODUCT_ID, 
MASTER_CODE, 
CLIENT_ID, 
PLN_MNEM,
UNIVERIS_PLAN_ID,
RR_CD,
ADMINISTRATORY_TYPE, 
BAL_DATE, 
MV * COALESCE(COMMISSIONPCT,100) * 0.01 AS HOLDING_VALUE,
AUA * COALESCE(COMMISSIONPCT,100) * 0.01 AS AUA,
CASE WHEN ISSUER_COMPANY_NAME IN ('IA Clarington Investments Inc. (CCM)','IA Clarington GIF (IAC)','Industrial Alliance Insurance & Financial Services Inc. INA') 
		 THEN AUA * COALESCE(COMMISSIONPCT,100) * 0.01
		 ELSE 0
	END AS AUM,
CASE WHEN ISSUER_COMPANY_NAME IN ('IA Clarington Investments Inc. (CCM)','IA Clarington GIF (IAC)') 
		 THEN AUA * COALESCE(COMMISSIONPCT,100) * 0.01
		 ELSE 0
	END AS AUM_CLARINGTON,
CASE WHEN ISSUER_COMPANY_NAME IN ('Industrial Alliance Insurance & Financial Services Inc. INA') 
		 THEN AUA * COALESCE(COMMISSIONPCT,100) * 0.01
		 ELSE 0
	END AS AUM_IA,
0 AS CASH_POSITION,	
CASE WHEN IVD_LOAD_FLAG = 'FCL' OR WF_IND = 1 
		 THEN 'Fee-based'
		 ELSE 'Commission-based'
	END AS PROGRAM_TYPE,	
CASE WHEN COUNT(DISTINCT (CASE WHEN IVD_LOAD_FLAG = 'FCL' OR WF_IND = 1 
								   THEN 'Fee-based' 
								   ELSE 'Commission-based' 
							   END) ) OVER (PARTITION BY CLIENT_ID) = 2 
		 THEN 'Commission-based & Fee-based'
		 ELSE (CASE WHEN IVD_LOAD_FLAG = 'FCL' OR WF_IND = 1 
		 			THEN 'Fee-based'
		 			ELSE 'Commission-based'
		 		END)
	END AS ACCOUNT_PROGRAM_TYPE,
SHA1(CONCAT(
	  COALESCE(RR_CD,'#NULL#'), '|' 
	, COALESCE(TO_VARCHAR(BAL_DATE),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(HOLDING_VALUE),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(AUA),'#NULL#'),'|'
	, COALESCE(TO_VARCHAR(AUM),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(AUM_CLARINGTON),'#NULL#'),'|'
	, COALESCE(TO_VARCHAR(AUM_IA),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(CASH_POSITION),'#NULL#'),'|' 
	, COALESCE(PROGRAM_TYPE,'#NULL#'),'|' 
	, COALESCE(ACCOUNT_PROGRAM_TYPE,'#NULL#'),'|' 
	, COALESCE(ADMINISTRATORY_TYPE,'#NULL#')
	))	AS MD_HASHDIFF
FROM HOLDINGS_BDV.WT_INVESTMENT_IAS_UNIVERIS WT
LEFT JOIN EXCLUSION E 
ON E.REPID = WT.MASTER_CODE 
AND E.IND_EXCLUDE = 1 
AND E.MD_ACTIVE = 'A'
WHERE 
COMMISSIONPCT > 0 
AND MV > 0 
AND E.REPID IS NULL;
create or replace view DB_IAW_PROD_DWH.HOLDINGS_BDV.VW_INVESTMENT_INVESTIA_UNIVERIS(
	HK_LINK,
	HK_HUB_CONTRACT,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	MD_SEQ,
	MD_START_DT,
	MD_CREATION_DT,
	MD_EXTRACT_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	CONTRACT_ID,
	INVESTMENT_PRODUCT_ID,
	MASTER_CODE,
	CLIENT_ID,
	PLN_MNEM,
	UNIVERIS_PLAN_ID,
	RR_CD,
	ADMINISTRATORY_TYPE,
	BAL_DATE,
	HOLDING_VALUE,
	AUA,
	AUM,
	AUM_CLARINGTON,
	AUM_IA,
	CASH_POSITION,
	PROGRAM_TYPE,
	ACCOUNT_PROGRAM_TYPE,
	MD_HASHDIFF
) as 
SELECT
HK_LINK, 
HK_HUB_CONTRACT, 
HK_HUB_INVESTMENT_PRODUCT_TYPE, 
HK_HUB_PARTY_ROLE_ADVISOR, 
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES, 
MD_SEQ, 
MD_START_DT, 
MD_CREATION_DT, 
MD_EXTRACT_DT, 
MD_SOURCE, 
MD_SRC_SYSTEM, 
CONTRACT_ID, 
INVESTMENT_PRODUCT_ID, 
MASTER_CODE, 
CLIENT_ID, 
PLN_MNEM,
UNIVERIS_PLAN_ID,
RR_CD,
ADMINISTRATORY_TYPE, 
BAL_DATE, 
MV * COALESCE(COMMISSIONPCT,100) * 0.01 AS HOLDING_VALUE,
AUA * COALESCE(COMMISSIONPCT,100) * 0.01 AS AUA,

CASE WHEN ISSUER_COMPANY_NAME IN ('IA Clarington Investments Inc. (CCM)','IA Clarington GIF (IAC)','Industrial Alliance Insurance & Financial Services Inc. INA') 
		 THEN AUA * COALESCE(COMMISSIONPCT,100) * 0.01
		 ELSE 0
	END AS AUM,

CASE WHEN ISSUER_COMPANY_NAME IN ('IA Clarington Investments Inc. (CCM)','IA Clarington GIF (IAC)') 
		 THEN AUA * COALESCE(COMMISSIONPCT,100) * 0.01
		 ELSE 0
	END AS AUM_CLARINGTON,

CASE WHEN ISSUER_COMPANY_NAME IN ('Industrial Alliance Insurance & Financial Services Inc. INA') 
		 THEN AUA * COALESCE(COMMISSIONPCT,100) * 0.01
		 ELSE 0
	END AS AUM_IA,

0 AS CASH_POSITION,	

CASE WHEN IVD_LOAD_FLAG = 'FCL' OR WF_IND = 1 
		 THEN 'Fee-based'
		 ELSE 'Commission-based'
	END AS PROGRAM_TYPE,
	
CASE WHEN COUNT(DISTINCT (CASE WHEN IVD_LOAD_FLAG = 'FCL' OR WF_IND = 1 
								   THEN 'Fee-based' 
								   ELSE 'Commission-based' 
							   END) ) OVER (PARTITION BY CLIENT_ID) = 2 
		 THEN 'Commission-based & Fee-based'
		 ELSE (CASE WHEN IVD_LOAD_FLAG = 'FCL' OR WF_IND = 1 
		 			THEN 'Fee-based'
		 			ELSE 'Commission-based'
		 		END)
	END AS ACCOUNT_PROGRAM_TYPE,

SHA1(CONCAT(
	  COALESCE(RR_CD,'#NULL#'), '|' 
	, COALESCE(TO_VARCHAR(BAL_DATE),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(HOLDING_VALUE),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(AUA),'#NULL#'),'|'
	, COALESCE(TO_VARCHAR(AUM),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(AUM_CLARINGTON),'#NULL#'),'|'
	, COALESCE(TO_VARCHAR(AUM_IA),'#NULL#'),'|' 
	, COALESCE(TO_VARCHAR(CASH_POSITION),'#NULL#'),'|' 
	, COALESCE(PROGRAM_TYPE,'#NULL#'),'|' 
	, COALESCE(ACCOUNT_PROGRAM_TYPE,'#NULL#'),'|' 
	, COALESCE(ADMINISTRATORY_TYPE,'#NULL#')
	)) AS MD_HASHDIFF
FROM HOLDINGS_BDV.WT_INVESTMENT_INVESTIA_UNIVERIS WT
WHERE 
COMMISSIONPCT > 0  AND MV > 0;
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.HOLDINGS_BDV.LOADBDV_RDV_HOLDINGS_TO_BDV_WT_LINK_INVESTMENT_IAS_UNIVERIS(""ENV"" VARCHAR(16777216), ""IO_START_DATE"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
 
INS_QUERY = ""insert into DB_IAW_ENV_DWH.HOLDINGS_BDV.WT_INVESTMENT_IAS_UNIVERIS(HK_HUB_CONTRACT	,  "" +
"" MD_SEQ	,"" +
""HK_HUB_INVESTMENT_PRODUCT_TYPE	,	"" +
""MD_EXTRACT_DT	, "" +
""MD_SOURCE	, "" +
""MD_SRC_SYSTEM	,"" +
""CONTRACT_ID,"" +
""INVESTMENT_PRODUCT_ID	,"" +
""BAL_DATE	,"" +
""MV	,"" +
""AUA	,"" +
""IVD_LOAD_FLAG	,"" +
""WF_IND	,	"" +
""MD_START_DT	,"" +
""MD_CREATION_DT	,"" +
""RR_CD	,"" +
""HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	,"" +
""CLIENT_ID	,"" +
""UNIVERIS_PLAN_ID	,"" +
""HK_HUB_PARTY_ROLE_ADVISOR	,	"" +
""HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES	,	"" +	
""MASTER_CODE	,	"" +
""PLN_MNEM	, "" +
""COMMISSIONPCT	,	"" +
""ISSUER_COMPANY_NAME	,"" +
""ADMINISTRATORY_TYPE	)  "" +                                       
""(with T1 as (select  "" +
""HK_HUB_CONTRACT as link_Investment_RR_HK_HUB_CONTRACT "" +
"" ,MD_SEQ as link_Investment_RR_MD_SEQ  "" +
""  ,HK_HUB_INVESTMENT_PRODUCT_TYPE as link_Investment_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE "" +
"" ,dtls.MD_SRC_SYSTEM as link_Investment_RR_MD_SRC_SYSTEM "" +
"",dtls.MD_EXTRACT_DT as	link_Investment_RR_MD_EXTRACT_DT "" +
"",dtls.MD_SOURCE as	link_Investment_RR_MD_SOURCE "" +
 "",CONTRACT_ID as link_Investment_RR_CONTRACT_ID "" +
"" ,INVESTMENT_PRODUCT_ID as link_Investment_RR_INVESTMENT_PRODUCT_ID "" +
""  ,BAL_DATE	as sat_link_Investment_RR_BAL_DATE	"" +
"",MV as	sat_link_Investment_RR_MV "" +
"",AUA as	sat_link_Investment_RR_AUA "" +
"",IVD_LOAD_FLAG	as sat_link_Investment_RR_IVD_LOAD_FLAG	"" +
"",WF_IND as	sat_link_Investment_RR_WF_IND "" +
"",MD_START_DT as	sat_link_Investment_RR_MD_START_DT "" +
"" ,HK_HUB_REGISTERED_REPRESENTATIVE as  link_Investment_RR_HK_HUB_REGISTERED_REPRESENTATIVE "" +
""from DB_IAW_ENV_DWH.HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_IAS_UNIVERIS as mstr join DB_IAW_ENV_DWH.HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN as dtls "" +
""on mstr.HK_LINK = dtls.HK_LINK where MD_START_DT = TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') AND MD_ACTIVE = ''A'') "" +
"",t2 as (select * from t1 as mstr join (select HK_HUB_CONTRACT,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER as Link_Investment_Contract_RR_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,RR_CD "" +
"" as	Link_Investment_Contract_RR_RR_CD from DB_IAW_ENV_DWH.shared_RDV.LINK_INVESTMENT_CONTRACT_RR) as dtls "" +
""on link_Investment_RR_HK_HUB_CONTRACT = HK_HUB_CONTRACT)"" +
"",T3 as (select mstr.HK_LINK as HK_LINK "" +
"",COMMISSIONPCT as sat_link_Commission_COMMISSIONPCT "" +
"" from DB_IAW_ENV_DWH.shared_BDV.SAT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE as mstr join "" +
""(select HK_LINK,max(md_start_dt) as max_md_start_dt from  DB_IAW_ENV_DWH.shared_BDV.SAT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE "" +
"" where MD_START_DT <= TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') group by HK_LINK) "" +
"" as dtls on mstr.HK_LINK = dtls.hk_link and mstr.md_start_dt = dtls.max_md_start_dt where mstr.md_active=''A'' and mstr.md_src_system = ''IAS'')"" +
"", t4 as(select dtls.HK_HUB_PARTY_ROLE_ADVISOR as link_Commission_HK_HUB_PARTY_ROLE_ADVISOR,"" +
""  sat_link_Commission_COMMISSIONPCT"" +
"",HK_HUB_REGISTERED_REPRESENTATIVE as link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE"" +
"", MASTER_CODE as link_Commission_MASTER_CODE"" +
"" from t3 as mstr join DB_IAW_ENV_DWH.shared_BDV.LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE as dtls on mstr.hk_link = dtls.hk_link )"" +
"" , t5 as (select * from t2 left outer join t4 on link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE = link_Investment_RR_HK_HUB_REGISTERED_REPRESENTATIVE)"" +
"", t6 as ( select mstr.hk_hub as SAT_INVESTMENT_PRODUCT_hk_hub,"" +
""ISSUER_COMPANY_NAME as  Sat_Product_Type_ISSUER_COMPANY_NAME "" +
""from DB_IAW_ENV_DWH.shared_BDV.SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE as mstr "" +
""join (select HK_HUB,max(md_start_dt) as max_md_start_dt from  DB_IAW_ENV_DWH.shared_BDV.SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE where MD_START_DT <= TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') "" +
""group by HK_HUB) as dtls "" +
""on mstr.HK_HUB = dtls.hk_HUB and mstr.md_start_dt = dtls.max_md_start_dt where mstr.md_active=''A'')"" +
"", t7 as (select * from t6 join DB_IAW_ENV_DWH.shared_RDV.HUB_INVESTMENT_PRODUCT_TYPE dtls on SAT_INVESTMENT_PRODUCT_hk_hub = hk_hub)"" +
"", t8 as (select * from t5 left outer join t7 on SAT_INVESTMENT_PRODUCT_hk_hub = hk_hub )"" +
"",t9 as ( select mstr.HK_HUB as uneiveris_HK_HUB, mstr.ADMINISTRATOR_TYPE as ADMINISTRATOR_TYPE"" +
"" from DB_IAW_ENV_DWH.shared_RDV.SAT_CONTRACT_IAS_UNIVERIS as mstr"" +
"" join (select HK_HUB,max(md_start_dt) as max_md_start_dt from   DB_IAW_ENV_DWH.shared_RDV.SAT_CONTRACT_IAS_UNIVERIS where MD_START_DT <= TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') "" +
""group by HK_HUB) as dtls "" +
""on mstr.HK_HUB = dtls.hk_HUB and mstr.md_start_dt = dtls.max_md_start_dt where mstr.md_active=''A'')"" +
"", t10 as (select * from t8 left outer join t9 on SAT_INVESTMENT_PRODUCT_hk_hub = uneiveris_HK_HUB)"" +
""select  "" +
""link_Investment_RR_HK_HUB_CONTRACT, "" +
""link_Investment_RR_MD_SEQ, "" +
""link_Investment_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE, "" +
""link_Investment_RR_MD_EXTRACT_DT, "" +
""link_Investment_RR_MD_SOURCE,"" +
""link_Investment_RR_MD_SRC_SYSTEM,"" +
""link_Investment_RR_CONTRACT_ID,"" +
""link_Investment_RR_INVESTMENT_PRODUCT_ID,"" +
""sat_link_Investment_RR_BAL_DATE	,"" +
""sat_link_Investment_RR_MV,	"" +
""sat_link_Investment_RR_AUA,"" +
""sat_link_Investment_RR_IVD_LOAD_FLAG,	"" +
""sat_link_Investment_RR_WF_IND	,"" +
""sat_link_Investment_RR_MD_START_DT	,"" +
""systimestamp(),"" +
""Link_Investment_Contract_RR_RR_CD,"" +
""Link_Investment_Contract_RR_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,"" +
""CLIENT_ID,"" +
""UNIVERIS_PLAN_ID	,"" +
""link_Commission_HK_HUB_PARTY_ROLE_ADVISOR,	"" +	
""HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,"" +			
""link_Commission_MASTER_CODE,	"" +	
""PLN_MNEM,		"" +
""sat_link_Commission_COMMISSIONPCT,"" +	
""sat_Product_Type_ISSUER_COMPANY_NAME,	"" +
""ADMINISTRATOR_TYPE	"" +
""	 from t10 left outer join DB_IAW_ENV_DWH.shared_BDV.LINK_INVESTMENT_CONTRACT as dtls on link_Investment_RR_HK_HUB_CONTRACT  =  dtls.HK_HUB_CONTRACT "" +
""and link_Commission_HK_HUB_PARTY_ROLE_ADVISOR=HK_HUB_PARTY_ROLE_ADVISOR) "" ;
 var INS_QUERY_ENV = INS_QUERY.replaceAll(""_ENV_"" , ""_"" + ENV + ""_"")
 var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY_ENV
          });
 var result_scan = sql_statement.execute();     

 
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.HOLDINGS_BDV.SP_CONV_LOADBDV_RDV_CASH_HOLDINGS_TO_BDV_WT_LINK_INVESTMENT_CASH_IAS_NBIN(""ENV"" VARCHAR(16777216), ""IO_START_DATE"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
PRE_SQL_QUERY=""DELETE FROM DB_IAW_ENV_DWH.HOLDINGS_BDV.WT_INVESTMENT_CASH_IAS_NBIN"";
UPD_QUERY = """"; 
INS_QUERY = ""insert into DB_IAW_ENV_DWH.HOLDINGS_BDV.WT_INVESTMENT_CASH_IAS_NBIN(HK_HUB_CONTRACT	,"" +	
""HK_HUB_INVESTMENT_PRODUCT_TYPE,"" +		
""HK_HUB_PARTY_ROLE_ADVISOR,	"" +	
""HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,"" +		
""HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,	"" +
""MD_SEQ,		"" +
""MD_START_DT,	"" +
""MD_CREATION_DT,	"" +	
""MD_EXTRACT_DT,		"" +
""MD_SOURCE,		"" +
""MD_SRC_SYSTEM,	"" +
""A_C_SUMM_BALANCE_BUS_DATE,	"" +
""A_C_SUMM_SD_NET_AMT	,	"" +
""A_C_SUMM_TD_NET_AMT,"" +
""CONTRACT_ID	,"" +
""RR_CD	,	"" +
""INVESTMENT_PRODUCT_ID	,	"" +
""MASTER_CODE	,	"" +
""A_C_CLIENT	,	"" +
""ACCOUNT_RAP_CODE,"" +		
""ASC_1_RESP_PLAN_TYPES,"" +		
""RETAIL_PLAN	,	"" +
""A_C_CURRENCY,		"" +
""COMMISSIONPCT,	"" +
""ISSUER_COMPANY_NAME,"" +	
""ASC_3_MANAGED_TYPE	,	"" +
""ADMINISTRATOR_TYPE	,	"" +
""A_C_ACCOUNT_CLASS	,	"" +
""RETAIL_PLAN_RESP,	"" +
""EXCHANGERATE,	"" +
""COMMISSIONPCT_ADVISOR,	"" +
""COMMISSIONPCT_FINANCIAL) (with T1 as (select MD_START_DT as sat_Cash_link_Investment_RR_MD_START_DT "" +
"",mstr.MD_EXTRACT_DT as sat_link_Cash_Investment_RR_MD_EXTRACT_DT "" +
"",mstr.MD_SOURCE as sat_link_Cash_Investment_RR_MD_SOURCE"" +
"", A_C_SUMM_BALANCE_BUS_DATE as sat_link_Cash_Investment_RR_A_C_SUMM_BALANCE_BUS_DATE"" +
"", A_C_SUMM_SD_NET_AMT as sat_link_Cash_Investment_RR_A_C_SUMM_SD_NET_AMT"" +
"", A_C_SUMM_TD_NET_AMT as sat_link_Cash_Investment_RR_A_C_SUMM_TD_NET_AMT"" +
"",A_C_CURRENCY as sat_link_Cash_Investment_RR_A_C_CURRENCY"" +
"",HK_HUB_CONTRACT as link_Investment_RR_HK_HUB_CONTRACT"" +
"",HK_HUB_INVESTMENT_PRODUCT_TYPE as link_Investment_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE"" +
"" ,INVESTMENT_PRODUCT_ID as link_Investment_RR_INVESTMENT_PRODUCT_ID"" +
"" ,MD_SEQ as link_Investment_RR_MD_SEQ"" +
"" ,dtls.MD_SRC_SYSTEM as link_Investment_RR_MD_SRC_SYSTEM"" +
"" ,CONTRACT_ID as link_Investment_RR_CONTRACT_ID"" +
"" ,RR_CD as link_Investment_RR_RR_CD , "" +
"" HK_HUB_REGISTERED_REPRESENTATIVE as  link_Investment_RR_HK_HUB_REGISTERED_REPRESENTATIVE "" +
"" from DB_IAW_ENV_DWH.HOLDINGS_RDV.SAT_LINK_INVESTMENT_CASH_RR_IAS_NBIN as mstr join DB_IAW_ENV_DWH.HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN as dtls "" +
""on mstr.HK_LINK = dtls.HK_LINK where MD_START_DT = TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') AND MD_ACTIVE = ''A'')"" +
"",T2 as "" +
""(select mstr.HK_LINK as HK_LINK "" +
"",COMMISSIONPCT as sat_link_Commission_COMMISSIONPCT "" +
"",COMMISSIONPCT_ADVISOR as sat_link_Commission_COMMISSIONPCT_ADVISOR "" +
"",COMMISSIONPCT_FINANCIAL as sat_link_Commission_COMMISSIONPCT_FINANCIAL "" +
"" from DB_IAW_ENV_DWH.shared_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE as mstr join "" +
""(select HK_LINK,max(md_start_dt) as max_md_start_dt from  DB_IAW_ENV_DWH.shared_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE "" +
"" where MD_START_DT <= TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') group by HK_LINK)"" +
"" as dtls on mstr.HK_LINK = dtls.hk_link and mstr.md_start_dt = dtls.max_md_start_dt where mstr.md_active=''A'' and mstr.md_src_system = ''IAS'')"" +
"" , t3 as(select dtls.HK_HUB_PARTY_ROLE_ADVISOR as link_Commission_HK_HUB_PARTY_ROLE_ADVISOR,"" +
"" sat_link_Commission_COMMISSIONPCT"" +
"" ,sat_link_Commission_COMMISSIONPCT_ADVISOR"" +
"" ,sat_link_Commission_COMMISSIONPCT_FINANCIAL"" +
"" ,HK_HUB_REGISTERED_REPRESENTATIVE as link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE"" +
"", MASTER_CODE as link_Commission_MASTER_CODE"" +
"" from t2 as mstr join DB_IAW_ENV_DWH.shared_BDV.LINK_PARTY_RELATIONSHIP_SHARE as dtls on mstr.hk_link = dtls.hk_link )"" +
"", t4 as (select * from t1 left outer join t3 on  link_Investment_RR_HK_HUB_REGISTERED_REPRESENTATIVE  = link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE)"" +
"", t5 as ( select mstr.HK_HUB as HK_HUB"" +
"",A_C_CLIENT	 as sat_Contract_A_C_CLIENT "" +
"",ACCOUNT_RAP_CODE as 	sat_Contract_ACCOUNT_RAP_CODE"" +
"",ASC_1_RESP_PLAN_TYPES as 	sat_Contract_ASC_1_RESP_PLAN_TYPES	"" +
"",RETAIL_PLAN	 as sat_Contract_RETAIL_PLAN "" +
"",ASC_3_MANAGED_TYPE	 as sat_Contract_ASC_3_MANAGED_TYPE	"" +
"",ADMINISTRATOR_TYPE as 	sat_Contract_ADMINISTRATOR_TYPE	"" +
"",A_C_ACCOUNT_CLASS	as sat_Contract_A_C_ACCOUNT_CLASS	"" +
"",RETAIL_PLAN_RESP	 as sat_Contract_RETAIL_PLAN_RESP "" +
"", A_C_CURRENCY     as SAT_CONTRACT_A_C_CURRENCY  "" +
"" from DB_IAW_ENV_DWH.shared_RDV.SAT_CONTRACT_IAS_NBIN as mstr join "" +
""  (select HK_HUB,max(md_start_dt) as max_md_start_dt from  DB_IAW_ENV_DWH.shared_RDV.SAT_CONTRACT_IAS_NBIN "" +
""   where MD_START_DT <=  TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') group by HK_HUB) as dtls "" +
""         on mstr.HK_HUB = dtls.hk_HUB and mstr.md_start_dt = dtls.max_md_start_dt where mstr.md_active=''A'' )"" +
"", t6 as(select * from t4 left outer join t5 on HK_HUB = link_Investment_RR_HK_HUB_CONTRACT)"" +
"",t7 as(select * from t6 left outer join (select EXCHANGE_DATE, EXCHANGERATE as TRANSLINK_EX_EXCHANGERATE from DB_IAW_ENV_DWH.shared_BDV.TRANSLINK_EXCHANGE_RATE)"" +  
""on EXCHANGE_DATE = sat_link_Cash_Investment_RR_A_C_SUMM_BALANCE_BUS_DATE)"" +
"",t8 as(select mstr.hk_hub as SAT_INVESTMENT_PRODUCT_hk_hub,"" +
""ISSUER_COMPANY_NAME as  Sat_Product_Type_Sat_Product_Type_ISSUER_COMPANY_NAME "" +
""from DB_IAW_ENV_DWH.shared_BDV.SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE as mstr "" +
""join (select HK_HUB,max(md_start_dt) as max_md_start_dt from  DB_IAW_ENV_DWH.shared_BDV.SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE where MD_START_DT <= TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') "" +
""group by HK_HUB) as dtls "" +
""on mstr.HK_HUB = dtls.hk_HUB and mstr.md_start_dt = dtls.max_md_start_dt where mstr.md_active=''A'')"" +
"", t9 as (select * from t8 join DB_IAW_ENV_DWH.shared_RDV.HUB_INVESTMENT_PRODUCT_TYPE dtls on SAT_INVESTMENT_PRODUCT_hk_hub = hk_hub) "" +
"",t10 as (select * from t7 left outer join t9 on SAT_INVESTMENT_PRODUCT_hk_hub = 	link_Investment_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE)"" +
""select link_Investment_RR_HK_HUB_CONTRACT,"" +
""link_Investment_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE,"" +
""link_Commission_HK_HUB_PARTY_ROLE_ADVISOR,"" +
""link_invest_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,"" +
""link_invest_HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,"" +
""link_Investment_RR_MD_SEQ,"" +
""sat_Cash_link_Investment_RR_MD_START_DT,"" +
""Systimestamp(),"" +
""sat_link_Cash_Investment_RR_MD_EXTRACT_DT,"" +
""sat_link_Cash_Investment_RR_MD_SOURCE,"" +
""link_Investment_RR_MD_SRC_SYSTEm,"" +
""sat_link_Cash_Investment_RR_A_C_SUMM_BALANCE_BUS_DATE	,"" +
""sat_link_Cash_Investment_RR_A_C_SUMM_SD_NET_AMT,"" +
""sat_link_Cash_Investment_RR_A_C_SUMM_TD_NET_AMT,"" +
""link_Investment_RR_CONTRACT_ID,"" +
""link_Investment_RR_RR_CD,"" +
""link_Investment_RR_INVESTMENT_PRODUCT_ID,"" +
""link_Commission_MASTER_CODE,"" +
""sat_Contract_A_C_CLIENT,"" +
""sat_Contract_ACCOUNT_RAP_CODE,"" +
""sat_Contract_ASC_1_RESP_PLAN_TYPES,"" +
""sat_Contract_RETAIL_PLAN,"" +
""sat_link_Cash_Investment_RR_A_C_CURRENCY, "" +
""sat_link_Commission_COMMISSIONPCT,"" +
""Sat_Product_Type_Sat_Product_Type_ISSUER_COMPANY_NAME,"" +
""sat_Contract_ASC_3_MANAGED_TYPE,"" +
""sat_Contract_ADMINISTRATOR_TYPE,"" +
""sat_Contract_A_C_ACCOUNT_CLASS,"" +
""sat_Contract_RETAIL_PLAN_RESP,"" +
""Translink_ex_EXCHANGERATE, "" +
""sat_link_Commission_COMMISSIONPCT_ADVISOR, "" +
""sat_link_Commission_COMMISSIONPCT_FINANCIAL "" +
  "" from t10 left outer join ( select HK_HUB_CONTRACT,HK_HUB_PARTY_ROLE_ADVISOR,HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES as link_invest_HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,ACCOUNT_RAP_CODE,"" +
""ASC_1_RESP_PLAN_TYPES, ""+
""RETAIL_PLAN,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER as link_invest_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER "" +
""from DB_IAW_ENV_DWH.shared_BDV.LINK_INVESTMENT_CONTRACT)  on LINK_INVESTMENT_RR_HK_HUB_CONTRACT = HK_HUB_CONTRACT "" +
""and link_Commission_HK_HUB_PARTY_ROLE_ADVISOR = HK_HUB_PARTY_ROLE_ADVISOR)"";
UPD_QUERY = "" UPDATE HOLDINGS_BDV.WT_INVESTMENT_CASH_IAS_NBIN "" + 
""SET HK_LINK = SHA1(UPPER(CONCAT( "" + 
""      COALESCE(TRIM(MD_SEQ), ''#NULL#''), ''|''  "" + 
""    , COALESCE(TRIM(MD_SOURCE), ''#NULL#''), ''|''  "" + 
""    , COALESCE(TRIM(MD_SRC_SYSTEM), ''#NULL#''), ''|''  "" + 
""    , COALESCE(TRIM(MD_EXTRACT_DT), ''#NULL#''), ''|''  "" + 
""    , COALESCE(TRIM(CONTRACT_ID), ''#NULL#''), ''|''  "" + 
""    , COALESCE(TRIM(MASTER_CODE), ''#NULL#''), ''|''  "" + 
""    , COALESCE(TRIM(INVESTMENT_PRODUCT_ID), ''#NULL#''), ''|''  "" + 
""    , COALESCE(TRIM(A_C_CLIENT), ''#NULL#''), ''|''  "" + 
""    ,''#NULL#'', ''|'' "" + 
""    ,COALESCE(TRIM(ACCOUNT_RAP_CODE), ''#NULL#''), ''|''  "" + 
""    ,COALESCE(TRIM(RETAIL_PLAN),''#NULL#''), ''|'' "" + 
""    ,COALESCE(TRIM(ASC_1_RESP_PLAN_TYPES),''#NULL#''), ''|''  "" + 
""    , ''#NULL#'' "" + 
""    ))), "" + 
""HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''0''), "" + 
""HK_HUB_INVESTMENT_PRODUCT_TYPE= SHA1(CONCAT(''IAS'', ''|'' , ''IASCASH'')), "" + 
""HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''0''), "" + 
""HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''0''), "" + 
""HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = COALESCE(HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,''0'') "" + 
""Where 1=1; "" 
var PRE_SQL_QUERY_ENV = PRE_SQL_QUERY.replaceAll(""_ENV_"" , ""_"" + ENV + ""_"");
 var PRE_sql_statement = snowflake.createStatement(
          {
          sqlText: PRE_SQL_QUERY_ENV
          });
 var result_PRE_SQL_scan = PRE_sql_statement.execute();  
 var INS_QUERY_ENV = INS_QUERY.replaceAll(""_ENV_"" , ""_"" + ENV + ""_"")
 var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY_ENV
          });
 var result_scan = sql_statement.execute();	   
 var UPD_QUERY_ENV = UPD_QUERY.replaceAll(""_ENV_"" , ""_"" + ENV + ""_"");
 var UPD_statement = snowflake.createStatement(
          {
          sqlText: UPD_QUERY_ENV
          });
 var result_UPD_scan = UPD_statement.execute(); 
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.HOLDINGS_BDV.SP_CONV_LOADBDV_RDV_HOLDINGS_TO_BDV_WT_LINK_INVESTMENT_IAS_NBIN(""ENV"" VARCHAR(16777216), ""IO_START_DATE"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
PRE_SQL_QUERY=""DELETE FROM DB_IAW_ENV_DWH.HOLDINGS_BDV.WT_INVESTMENT_IAS_NBIN"";
UPD_QUERY = """";
INS_QUERY = ""insert into DB_IAW_ENV_DWH.HOLDINGS_BDV.WT_INVESTMENT_IAS_NBIN(HK_HUB_CONTRACT	,"" +	
""HK_HUB_INVESTMENT_PRODUCT_TYPE,"" +		
""HK_HUB_PARTY_ROLE_ADVISOR,	"" +	
""HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,"" +		
""HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,	"" +
""MD_SEQ,		"" +
""MD_START_DT,	"" +
""MD_CREATION_DT,	"" +	
""MD_EXTRACT_DT,		"" +
""MD_SOURCE,		"" +
""MD_SRC_SYSTEM,	"" +
""TRAN_SUMM_CURR_MKT_VALUE,	"" +
""TRAN_SUMM_BUSINESS_DATE	,	"" +
""CONTRACT_ID	,"" +
""RR_CD	,	"" +
""INVESTMENT_PRODUCT_ID	,	"" +
""MASTER_CODE	,	"" +
""A_C_CLIENT	,	"" +
""ACCOUNT_RAP_CODE,"" +		
""ASC_1_RESP_PLAN_TYPES,"" +		
""RETAIL_PLAN	,	"" +
""A_C_CURRENCY,		"" +
""COMMISSIONPCT,	"" +
""ISSUER_COMPANY_NAME,"" +	
""ASC_3_MANAGED_TYPE	,	"" +
""ADMINISTRATOR_TYPE	,	"" +
""A_C_ACCOUNT_CLASS	,	"" +
""RETAIL_PLAN_RESP,	"" +
""EXCHANGERATE,	"" +
""MKT_PRICE_DATE,	"" +
""MARKET_PRICE_BID,	"" +
""MARKET_PRICE_ASK,	"" +
""MARKET_PRICE_CLOSE,	"" +
""PRICE_CURRENCY,	"" +
""TRAN_SUMM_CURR_MKT_PRICE,	"" +
""TRAN_SUMM_SFK_QTY,	"" +
""TRAN_SUMM_TRADE_QTY,	"" +
""TI_FACE_VALUE,	"" +
""TI_BASIS_POINT,	"" +
""COMMISSIONPCT_ADVISOR,	"" +
""COMMISSIONPCT_FINANCIAL) (with T1 as (select MD_START_DT as sat_link_Investment_RR_MD_START_DT "" +
"",mstr.MD_EXTRACT_DT as sat_link_Investment_RR_MD_EXTRACT_DT "" +
"",mstr.MD_SOURCE as sat_link_Investment_RR_MD_SOURCE"" +
"",TRAN_SUMM_CURR_MKT_VALUE as sat_link_Investment_RR_TRAN_SUMM_CURR_MKT_VALUE"" +
"",TRAN_SUMM_BUSINESS_DATE as sat_link_Investment_RR_TRAN_SUMM_BUSINESS_DATE"" +
"",HK_HUB_CONTRACT as link_Investment_RR_HK_HUB_CONTRACT"" +
"",HK_HUB_INVESTMENT_PRODUCT_TYPE as link_Investment_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE"" +
"" ,INVESTMENT_PRODUCT_ID as link_Investment_RR_INVESTMENT_PRODUCT_ID"" +
""  ,TRAN_SUMM_NET_SETT_AMT as sat_link_Investment_RR_TRAN_SUMM_NET_SETT_AMT"" +
""  ,MKT_PRICE_DATE as sat_link_Investment_MKT_PRICE_DATE"" +
""  ,MARKET_PRICE_BID as sat_link_Investment_MARKET_PRICE_BID"" +
""  ,MARKET_PRICE_ASK as sat_link_Investment_MARKET_PRICE_ASK"" +
""  ,MARKET_PRICE_CLOSE as sat_link_Investment_MARKET_PRICE_CLOSE"" +
""  ,PRICE_CURRENCY as sat_link_Investment_PRICE_CURRENCY"" +
""  ,TRAN_SUMM_CURR_MKT_PRICE as sat_link_Investment_TRAN_SUMM_CURR_MKT_PRICE"" +
""  ,TRAN_SUMM_SFK_QTY as sat_link_Investment_TRAN_SUMM_SFK_QTY"" +
""  ,TRAN_SUMM_TRADE_QTY as sat_link_Investment_TRAN_SUMM_TRADE_QTY"" +
""  ,TI_FACE_VALUE as sat_link_Investment_TI_FACE_VALUE"" +
""  ,TI_BASIS_POINT as sat_link_Investment_TI_BASIS_POINT"" +
"" ,MD_SEQ as link_Investment_RR_MD_SEQ"" +
"" ,dtls.MD_SRC_SYSTEM as link_Investment_RR_MD_SRC_SYSTEM"" +
"" ,CONTRACT_ID as link_Investment_RR_CONTRACT_ID"" +
"" ,RR_CD as link_Investment_RR_RR_CD , "" +
"" HK_HUB_REGISTERED_REPRESENTATIVE as  link_Investment_RR_HK_HUB_REGISTERED_REPRESENTATIVE "" +
"" from DB_IAW_ENV_DWH.HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_IAS_NBIN as mstr join DB_IAW_ENV_DWH.HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN as dtls "" +
""on mstr.HK_LINK = dtls.HK_LINK where MD_START_DT = TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') AND MD_ACTIVE = ''A'')"" +
"",T2 as "" +
""(select mstr.HK_LINK as HK_LINK "" +
"",COMMISSIONPCT as sat_link_Commission_COMMISSIONPCT "" +
"",COMMISSIONPCT_ADVISOR as sat_link_Commission_COMMISSIONPCT_ADVISOR"" +
"",COMMISSIONPCT_FINANCIAL as sat_link_Commission_COMMISSIONPCT_FINANCIAL "" +
"" from DB_IAW_ENV_DWH.shared_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE as mstr join "" +
""(select HK_LINK,max(md_start_dt) as max_md_start_dt from  DB_IAW_ENV_DWH.shared_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE "" +
"" where MD_START_DT <= TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') group by HK_LINK)"" +
"" as dtls on mstr.HK_LINK = dtls.hk_link and mstr.md_start_dt = dtls.max_md_start_dt where mstr.md_active=''A'' and mstr.md_src_system = ''IAS'')"" +
"" , t3 as(select dtls.HK_HUB_PARTY_ROLE_ADVISOR as link_Commission_HK_HUB_PARTY_ROLE_ADVISOR,"" +
"" sat_link_Commission_COMMISSIONPCT"" +
"" ,sat_link_Commission_COMMISSIONPCT_ADVISOR"" +
"" ,sat_link_Commission_COMMISSIONPCT_FINANCIAL"" +
"" ,HK_HUB_REGISTERED_REPRESENTATIVE as link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE"" +
"", MASTER_CODE as link_Commission_MASTER_CODE"" +
"" from t2 as mstr join DB_IAW_ENV_DWH.shared_BDV.LINK_PARTY_RELATIONSHIP_SHARE as dtls on mstr.hk_link = dtls.hk_link )"" +
"", t4 as (select * from t1 left outer join t3 on  link_Investment_RR_HK_HUB_REGISTERED_REPRESENTATIVE  = link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE)"" +
"", t5 as ( select mstr.HK_HUB as HK_HUB"" +
"",A_C_CLIENT	 as sat_Contract_A_C_CLIENT "" +
"",ACCOUNT_RAP_CODE as 	sat_Contract_ACCOUNT_RAP_CODE"" +
"",ASC_1_RESP_PLAN_TYPES as 	sat_Contract_ASC_1_RESP_PLAN_TYPES	"" +
"",RETAIL_PLAN	 as sat_Contract_RETAIL_PLAN "" +
"",ASC_3_MANAGED_TYPE	 as sat_Contract_ASC_3_MANAGED_TYPE	"" +
"",ADMINISTRATOR_TYPE as 	sat_Contract_ADMINISTRATOR_TYPE	"" +
"",A_C_ACCOUNT_CLASS	as sat_Contract_A_C_ACCOUNT_CLASS	"" +
"",RETAIL_PLAN_RESP	 as sat_Contract_RETAIL_PLAN_RESP "" +
"", A_C_CURRENCY     as SAT_CONTRACT_A_C_CURRENCY  "" +
"" from DB_IAW_ENV_DWH.shared_RDV.SAT_CONTRACT_IAS_NBIN as mstr join "" +
""  (select HK_HUB,max(md_start_dt) as max_md_start_dt from  DB_IAW_ENV_DWH.shared_RDV.SAT_CONTRACT_IAS_NBIN "" +
""   where MD_START_DT <= TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') group by HK_HUB) as dtls "" +
""         on mstr.HK_HUB = dtls.hk_HUB and mstr.md_start_dt = dtls.max_md_start_dt where mstr.md_active=''A'' )"" +
"", t6 as(select * from t4 left outer join t5 on HK_HUB = link_Investment_RR_HK_HUB_CONTRACT)"" +
"",t7 as(select * from t6 left outer join (select EXCHANGE_DATE, EXCHANGERATE as TRANSLINK_EX_EXCHANGERATE from DB_IAW_ENV_DWH.shared_BDV.TRANSLINK_EXCHANGE_RATE)"" +  
""on EXCHANGE_DATE = sat_link_Investment_RR_TRAN_SUMM_BUSINESS_DATE)"" +
"",t8 as(select mstr.hk_hub as SAT_INVESTMENT_PRODUCT_hk_hub,"" +
""ISSUER_COMPANY_NAME as  Sat_Product_Type_Sat_Product_Type_ISSUER_COMPANY_NAME "" +
""from DB_IAW_ENV_DWH.shared_BDV.SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE as mstr "" +
""join (select HK_HUB,max(md_start_dt) as max_md_start_dt from  DB_IAW_ENV_DWH.shared_BDV.SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE where MD_START_DT <= TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') "" +
""group by HK_HUB) as dtls "" +
""on mstr.HK_HUB = dtls.hk_HUB and mstr.md_start_dt = dtls.max_md_start_dt where mstr.md_active=''A'')"" +
"", t9 as (select * from t8 join DB_IAW_ENV_DWH.shared_RDV.HUB_INVESTMENT_PRODUCT_TYPE dtls on SAT_INVESTMENT_PRODUCT_hk_hub = hk_hub) "" +
"",t10 as (select * from t7 left outer join t9 on SAT_INVESTMENT_PRODUCT_hk_hub = 	link_Investment_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE)"" +
""select link_Investment_RR_HK_HUB_CONTRACT,"" +
""link_Investment_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE,"" +
""link_Commission_HK_HUB_PARTY_ROLE_ADVISOR,"" +
""link_invest_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,"" +
""link_invest_HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,"" +
""link_Investment_RR_MD_SEQ,"" +
""sat_link_Investment_RR_MD_START_DT,"" +
""Systimestamp(),"" +
""sat_link_Investment_RR_MD_EXTRACT_DT,"" +
""sat_link_Investment_RR_MD_SOURCE,"" +
""link_Investment_RR_MD_SRC_SYSTEm,"" +
""sat_link_Investment_RR_TRAN_SUMM_CURR_MKT_VALUE	,"" +
""sat_link_Investment_RR_TRAN_SUMM_BUSINESS_DATE,"" +
""link_Investment_RR_CONTRACT_ID,"" +
""link_Investment_RR_RR_CD,"" +
""link_Investment_RR_INVESTMENT_PRODUCT_ID,"" +
""link_Commission_MASTER_CODE,"" +
""sat_Contract_A_C_CLIENT,"" +
""ACCOUNT_RAP_CODE,"" +
""ASC_1_RESP_PLAN_TYPES,"" +
""RETAIL_PLAN,"" +
""sat_Contract_A_C_CURRENCY, "" +
""sat_link_Commission_COMMISSIONPCT,"" +
""Sat_Product_Type_Sat_Product_Type_ISSUER_COMPANY_NAME,"" +
""sat_Contract_ASC_3_MANAGED_TYPE,"" +
""sat_Contract_ADMINISTRATOR_TYPE,"" +
""sat_Contract_A_C_ACCOUNT_CLASS,"" +
""sat_Contract_RETAIL_PLAN_RESP,"" +
""Translink_ex_EXCHANGERATE,"" +
""sat_link_Investment_MKT_PRICE_DATE,"" +
""sat_link_Investment_MARKET_PRICE_BID,"" +
""sat_link_Investment_MARKET_PRICE_ASK,"" +
""sat_link_Investment_MARKET_PRICE_CLOSE,"" +
""sat_link_Investment_PRICE_CURRENCY,"" +
""sat_link_Investment_TRAN_SUMM_CURR_MKT_PRICE,"" +
""sat_link_Investment_TRAN_SUMM_SFK_QTY,"" +
""sat_link_Investment_TRAN_SUMM_TRADE_QTY,"" +
""sat_link_Investment_TI_FACE_VALUE,"" +
""sat_link_Investment_TI_BASIS_POINT,"" +
""sat_link_Commission_COMMISSIONPCT_ADVISOR,"" +
""sat_link_Commission_COMMISSIONPCT_FINANCIAL "" +
  "" from t10 left outer join ( select HK_HUB_CONTRACT,HK_HUB_PARTY_ROLE_ADVISOR,HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES as link_invest_HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,ACCOUNT_RAP_CODE,"" +
""ASC_1_RESP_PLAN_TYPES, ""+
""RETAIL_PLAN,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER as link_invest_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER "" +
""from DB_IAW_ENV_DWH.shared_BDV.LINK_INVESTMENT_CONTRACT)  on LINK_INVESTMENT_RR_HK_HUB_CONTRACT = HK_HUB_CONTRACT "" +
""and link_Commission_HK_HUB_PARTY_ROLE_ADVISOR = HK_HUB_PARTY_ROLE_ADVISOR)"";
UPD_QUERY = "" UPDATE DB_IAW_ENV_DWH.HOLDINGS_BDV.WT_INVESTMENT_IAS_NBIN "" + 
"" SET HK_LINK = SHA1(UPPER(CONCAT( "" + 
""       COALESCE(TRIM(MD_SEQ), ''#NULL#''), ''|''  "" + 
""     , COALESCE(TRIM(MD_SOURCE), ''#NULL#''), ''|''  "" + 
""     , COALESCE(TRIM(MD_SRC_SYSTEM), ''#NULL#''), ''|''  "" + 
""     , COALESCE(TRIM(MD_EXTRACT_DT), ''#NULL#''), ''|''  "" + 
""     , COALESCE(TRIM(CONTRACT_ID), ''#NULL#''), ''|''  "" + 
""     , COALESCE(TRIM(MASTER_CODE), ''#NULL#''), ''|''  "" + 
""     , COALESCE(TRIM(INVESTMENT_PRODUCT_ID), ''#NULL#''), ''|''  "" + 
""     , COALESCE(TRIM(A_C_CLIENT), ''#NULL#''), ''|''  "" + 
""     ,''#NULL#'', ''|''  "" + 
""     ,COALESCE(TRIM(ACCOUNT_RAP_CODE), ''#NULL#''), ''|''  "" + 
""     ,COALESCE(TRIM(RETAIL_PLAN),''#NULL#''), ''|'' "" + 
""     ,COALESCE(TRIM(ASC_1_RESP_PLAN_TYPES),''#NULL#''), ''|''  "" + 
""     , ''#NULL#'' "" + 
""     ))), "" + 
"" HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''0''), "" + 
"" HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''0''), "" + 
"" HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''0''), "" + 
"" HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = DECODE(TRUE, A_C_CLIENT IS NULL ,''0'',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''#NULL#''), ''|'' , COALESCE(TRIM(A_C_CLIENT), ''#NULL#''))))), "" + 
"" HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = DECODE(TRUE, ASC_1_RESP_PLAN_TYPES IS NULL AND RETAIL_PLAN IS NULL AND ACCOUNT_RAP_CODE IS NULL ,''0'',  "" + 
"" SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''#NULL#'') ,''|'', ''#NULL#'',''|'',COALESCE(TRIM(ACCOUNT_RAP_CODE),''#NULL#''), ''|'',  COALESCE(TRIM(RETAIL_PLAN),''#NULL#''),''|'',  "" + 
"" COALESCE(TRIM(CASE WHEN ACCOUNT_RAP_CODE <> ''Z'' THEN NULL ELSE ASC_1_RESP_PLAN_TYPES END),''#NULL#''))))) "" + 
"" Where 1=1 "" ;
var PRE_SQL_QUERY_ENV = PRE_SQL_QUERY.replaceAll(""_ENV_"" , ""_"" + ENV + ""_"");
 var PRE_sql_statement = snowflake.createStatement(
          {
          sqlText: PRE_SQL_QUERY_ENV
          });
 var result_PRE_SQL_scan = PRE_sql_statement.execute();  

 var INS_QUERY_ENV = INS_QUERY.replaceAll(""_ENV_"" , ""_"" + ENV + ""_"")
 var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY_ENV
          });
 var result_scan = sql_statement.execute();	 
 var UPD_QUERY_ENV = UPD_QUERY.replaceAll(""_ENV_"" , ""_"" + ENV + ""_"");
 var UPD_statement = snowflake.createStatement(
          {
          sqlText: UPD_QUERY_ENV
          });
 var result_UPD_scan = UPD_statement.execute();
 ';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.HOLDINGS_BDV.SP_CONV_LOADBDV_RDV_HOLDINGS_TO_BDV_WT_LINK_INVESTMENT_IAS_UNIVERIS(""ENV"" VARCHAR(16777216), ""IO_START_DATE"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '  
PRE_SQL_QUERY=""DELETE FROM DB_IAW_ENV_DWH.HOLDINGS_BDV.WT_INVESTMENT_IAS_UNIVERIS""; 
UPD_QUERY = """";
INS_QUERY = ""insert into HOLDINGS_BDV.WT_INVESTMENT_IAS_UNIVERIS(HK_HUB_CONTRACT	,  "" +
"" MD_SEQ	,"" +
""HK_HUB_INVESTMENT_PRODUCT_TYPE	,	"" +
""MD_EXTRACT_DT	, "" +
""MD_SOURCE	, "" +
""MD_SRC_SYSTEM	,"" +
""CONTRACT_ID,"" +
""INVESTMENT_PRODUCT_ID	,"" +
""BAL_DATE	,"" +
""MV	,"" +
""AUA	,"" +
""IVD_LOAD_FLAG	,"" +
""WF_IND	,	"" +
""MD_START_DT	,"" +
""MD_CREATION_DT	,"" +
""RR_CD	,"" +
""HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	,"" +
""CLIENT_ID	,"" +
""UNIVERIS_PLAN_ID	,"" +
""HK_HUB_PARTY_ROLE_ADVISOR	,	"" +
""HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES	,	"" +	
""MASTER_CODE	,	"" +
""PLN_MNEM	, "" +
""COMMISSIONPCT	,	"" +
""ISSUER_COMPANY_NAME	,"" +
""ADMINISTRATORY_TYPE ,"" +	
""COMMISSIONPCT_ADVISOR,	"" +
""COMMISSIONPCT_FINANCIAL)  "" +                                       
""(with T1 as (select  "" +
""HK_HUB_CONTRACT as link_Investment_RR_HK_HUB_CONTRACT "" +
"" ,MD_SEQ as link_Investment_RR_MD_SEQ  "" +
""  ,HK_HUB_INVESTMENT_PRODUCT_TYPE as link_Investment_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE "" +
"" ,dtls.MD_SRC_SYSTEM as link_Investment_RR_MD_SRC_SYSTEM "" +
"",dtls.MD_EXTRACT_DT as	link_Investment_RR_MD_EXTRACT_DT "" +
"",dtls.MD_SOURCE as	link_Investment_RR_MD_SOURCE "" +
 "",CONTRACT_ID as link_Investment_RR_CONTRACT_ID "" +
"" ,INVESTMENT_PRODUCT_ID as link_Investment_RR_INVESTMENT_PRODUCT_ID "" +
""  ,BAL_DATE	as sat_link_Investment_RR_BAL_DATE	"" +
"",MV as	sat_link_Investment_RR_MV "" +
"",AUA as	sat_link_Investment_RR_AUA "" +
"",IVD_LOAD_FLAG	as sat_link_Investment_RR_IVD_LOAD_FLAG	"" +
"",WF_IND as	sat_link_Investment_RR_WF_IND "" +
"",MD_START_DT as	sat_link_Investment_RR_MD_START_DT "" +
""from DB_IAW_ENV_DWH.HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_IAS_UNIVERIS as mstr join DB_IAW_ENV_DWH.HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN as dtls "" +
""on mstr.HK_LINK = dtls.HK_LINK where MD_START_DT = TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') AND MD_ACTIVE = ''A'') "" +
"",t2 as (select * from t1 as mstr join (select HK_HUB_CONTRACT,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER as Link_Investment_Contract_RR_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,RR_CD "" +
"" as	Link_Investment_Contract_RR_RR_CD "" + 
"" ,HK_HUB_REGISTERED_REPRESENTATIVE as  link_Investment_RR_HK_HUB_REGISTERED_REPRESENTATIVE "" +
""from DB_IAW_ENV_DWH.shared_RDV.LINK_INVESTMENT_CONTRACT_RR) as dtls "" +
""on link_Investment_RR_HK_HUB_CONTRACT = HK_HUB_CONTRACT)"" +
"",T3 as (select mstr.HK_LINK as HK_LINK "" +
"",COMMISSIONPCT as sat_link_Commission_COMMISSIONPCT "" +
"",COMMISSIONPCT_ADVISOR as sat_link_Commission_COMMISSIONPCT_ADVISOR "" +
"",COMMISSIONPCT_FINANCIAL as sat_link_Commission_COMMISSIONPCT_FINANCIAL "" +
"" from DB_IAW_ENV_DWH.shared_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE as mstr join "" +
""(select HK_LINK,max(md_start_dt) as max_md_start_dt from  DB_IAW_ENV_DWH.shared_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE "" +
"" where MD_START_DT <= TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') group by HK_LINK) "" +
"" as dtls on mstr.HK_LINK = dtls.hk_link and mstr.md_start_dt = dtls.max_md_start_dt where mstr.md_active=''A'' and mstr.md_src_system = ''IAS'')"" +
"", t4 as(select dtls.HK_HUB_PARTY_ROLE_ADVISOR as link_Commission_HK_HUB_PARTY_ROLE_ADVISOR,"" +
""  sat_link_Commission_COMMISSIONPCT"" +
"" ,sat_link_Commission_COMMISSIONPCT_ADVISOR"" +
"" ,sat_link_Commission_COMMISSIONPCT_FINANCIAL"" +
"",HK_HUB_REGISTERED_REPRESENTATIVE as link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE"" +
"", MASTER_CODE as link_Commission_MASTER_CODE"" +
"" from t3 as mstr join DB_IAW_ENV_DWH.shared_BDV.LINK_PARTY_RELATIONSHIP_SHARE as dtls on mstr.hk_link = dtls.hk_link )"" +
"" , t5 as (select * from t2 left outer join t4 on link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE = link_Investment_RR_HK_HUB_REGISTERED_REPRESENTATIVE)"" +
"", t6 as ( select mstr.hk_hub as SAT_INVESTMENT_PRODUCT_hk_hub,"" +
""ISSUER_COMPANY_NAME as  Sat_Product_Type_ISSUER_COMPANY_NAME "" +
""from DB_IAW_ENV_DWH.shared_BDV.SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE as mstr "" +
""join (select HK_HUB,max(md_start_dt) as max_md_start_dt from  DB_IAW_ENV_DWH.shared_BDV.SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE where MD_START_DT <= TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') "" +
""group by HK_HUB) as dtls "" +
""on mstr.HK_HUB = dtls.hk_HUB and mstr.md_start_dt = dtls.max_md_start_dt where mstr.md_active=''A'')"" +
"", t7 as (select * from t6 join DB_IAW_ENV_DWH.shared_RDV.HUB_INVESTMENT_PRODUCT_TYPE dtls on SAT_INVESTMENT_PRODUCT_hk_hub = hk_hub)"" +
"", t8 as (select * from t5 left outer join t7 on t5.link_Investment_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE = t7.hk_hub )"" +
"",t9 as ( select mstr.HK_HUB as uneiveris_HK_HUB, mstr.ADMINISTRATOR_TYPE as ADMINISTRATOR_TYPE"" +
"" from DB_IAW_ENV_DWH.shared_RDV.SAT_CONTRACT_IAS_UNIVERIS as mstr"" +
"" join (select HK_HUB,max(md_start_dt) as max_md_start_dt from   DB_IAW_ENV_DWH.shared_RDV.SAT_CONTRACT_IAS_UNIVERIS where MD_START_DT <= TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') "" +
""group by HK_HUB) as dtls "" +
""on mstr.HK_HUB = dtls.hk_HUB and mstr.md_start_dt = dtls.max_md_start_dt where mstr.md_active=''A'')"" +
"", t10 as (select * from t8 left outer join t9 on LINK_INVESTMENT_RR_HK_HUB_CONTRACT = uneiveris_HK_HUB)"" +
""select  "" +
""link_Investment_RR_HK_HUB_CONTRACT, "" +
""link_Investment_RR_MD_SEQ, "" +
""link_Investment_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE, "" +
""link_Investment_RR_MD_EXTRACT_DT, "" +
""link_Investment_RR_MD_SOURCE,"" +
""link_Investment_RR_MD_SRC_SYSTEM,"" +
""link_Investment_RR_CONTRACT_ID,"" +
""link_Investment_RR_INVESTMENT_PRODUCT_ID,"" +
""sat_link_Investment_RR_BAL_DATE	,"" +
""sat_link_Investment_RR_MV,	"" +
""sat_link_Investment_RR_AUA,"" +
""sat_link_Investment_RR_IVD_LOAD_FLAG,	"" +
""sat_link_Investment_RR_WF_IND	,"" +
""sat_link_Investment_RR_MD_START_DT	,"" +
""systimestamp(),"" +
""Link_Investment_Contract_RR_RR_CD,"" +
""Link_Investment_Contract_RR_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,"" +
""CLIENT_ID,"" +
""UNIVERIS_PLAN_ID	,"" +
""link_Commission_HK_HUB_PARTY_ROLE_ADVISOR,	"" +	
""HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,"" +			
""link_Commission_MASTER_CODE,	"" +	
""PLN_MNEM,		"" +
""sat_link_Commission_COMMISSIONPCT,"" +	
""sat_Product_Type_ISSUER_COMPANY_NAME,	"" +
""ADMINISTRATOR_TYPE, "" +
""sat_link_Commission_COMMISSIONPCT_ADVISOR, "" +
""sat_link_Commission_COMMISSIONPCT_FINANCIAL "" +
""	 from t10 left outer join DB_IAW_ENV_DWH.shared_BDV.LINK_INVESTMENT_CONTRACT as dtls on link_Investment_RR_HK_HUB_CONTRACT  =  dtls.HK_HUB_CONTRACT "" +
""and link_Commission_HK_HUB_PARTY_ROLE_ADVISOR=HK_HUB_PARTY_ROLE_ADVISOR)"";
UPD_QUERY = "" UPDATE HOLDINGS_BDV.WT_INVESTMENT_IAS_UNIVERIS ""+
""SET HK_LINK = SHA1(UPPER(CONCAT(""+
""      COALESCE(TRIM(MD_SEQ), ''#NULL#''), ''|'' ""+
""    , COALESCE(TRIM(MD_SOURCE), ''#NULL#''), ''|'' ""+
""    , COALESCE(TRIM(MD_SRC_SYSTEM), ''#NULL#''), ''|'' ""+
""    , COALESCE(TRIM(MD_EXTRACT_DT), ''#NULL#''), ''|'' ""+
""    , ''#NULL#'', ''|'' ""+
""    , COALESCE(TRIM(MASTER_CODE), ''#NULL#''), ''|'' ""+
""    , COALESCE(TRIM(INVESTMENT_PRODUCT_ID), ''#NULL#''), ''|'' ""+
""    , COALESCE(TRIM(CLIENT_ID), ''#NULL#''), ''|'' ""+
""    , COALESCE(TRIM(PLN_MNEM), ''#NULL#''), ''|'' ""+
""    , ''#NULL#'', ''|'' ""+
""    , ''#NULL#'', ''|'' ""+
""    , ''#NULL#'', ''|'' ""+
""    , COALESCE(TRIM(UNIVERIS_PLAN_ID), ''#NULL#'')""+
""    ))),""+
""HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''0''),""+
""HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''0''),""+
""HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''0''),""+
""HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''0''),""+
""HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = COALESCE(HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,''0'')""+
""Where 1=1"";
var PRE_SQL_QUERY_ENV = PRE_SQL_QUERY.replaceAll(""_ENV_"" , ""_"" + ENV + ""_"");
var PRE_sql_statement = snowflake.createStatement(
         {
         sqlText: PRE_SQL_QUERY_ENV
         });
var result_PRE_SQL_scan = PRE_sql_statement.execute();  
var INS_QUERY_ENV = INS_QUERY.replaceAll(""_ENV_"" , ""_"" + ENV + ""_"");
var sql_statement = snowflake.createStatement(
         {
         sqlText: INS_QUERY_ENV
         });
var result_scan = sql_statement.execute();  
var UPD_QUERY_ENV = UPD_QUERY.replaceAll(""_ENV_"" , ""_"" + ENV + ""_"");
var UPD_statement = snowflake.createStatement(
          {
          sqlText: UPD_QUERY_ENV
          });
 var result_UPD_scan = UPD_statement.execute();  
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.HOLDINGS_BDV.SP_CONV_LOADBDV_RDV_HOLDINGS_TO_BDV_WT_LINK_INVESTMENT_INVESTIA_UNIVERIS(""ENV"" VARCHAR(16777216), ""IO_START_DATE"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
PRE_SQL_QUERY=""DELETE FROM DB_IAW_ENV_DWH.HOLDINGS_BDV.WT_INVESTMENT_INVESTIA_UNIVERIS"";
UPD_QUERY = """";
INS_QUERY = ""insert into DB_IAW_ENV_DWH.HOLDINGS_BDV.WT_INVESTMENT_INVESTIA_UNIVERIS(HK_HUB_CONTRACT   ,  "" +
"" MD_SEQ    ,"" +
""HK_HUB_INVESTMENT_PRODUCT_TYPE ,   "" +
""MD_EXTRACT_DT  , "" +
""MD_SOURCE  , "" +
""MD_SRC_SYSTEM  ,"" +
""CONTRACT_ID,"" +
""INVESTMENT_PRODUCT_ID  ,"" +
""BAL_DATE   ,"" +
""MV ,"" +
""AUA    ,"" +
""IVD_LOAD_FLAG  ,"" +
""WF_IND ,   "" +
""MD_START_DT    ,"" +
""MD_CREATION_DT ,"" +
""RR_CD  ,"" +
""HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER   ,"" +
""CLIENT_ID  ,"" +
""UNIVERIS_PLAN_ID   ,"" +
""HK_HUB_PARTY_ROLE_ADVISOR  ,   "" +
""HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES ,   "" + 
""MASTER_CODE    ,   "" +
""PLN_MNEM   , "" +
""COMMISSIONPCT  ,   "" +
""ISSUER_COMPANY_NAME    ,"" +
""ADMINISTRATORY_TYPE ,"" +	
""COMMISSIONPCT_ADVISOR,	"" +
""COMMISSIONPCT_FINANCIAL)  "" +                                       
""(with T1 as (select  "" +
""HK_HUB_CONTRACT as link_Investment_RR_HK_HUB_CONTRACT "" +
"" ,HK_HUB_INVESTMENT_PRODUCT_TYPE AS LINK_INVESTMENT_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE "" +
"" ,UNIVERIS_PLAN_ID AS LINK_INVESTMENT_RR_UNIVERIS_PLAN_ID "" +
"" ,UNIVERIS_CLIENT_ID AS LINK_INVESTMENT_RR_UNIVERIS_CLIENT_ID "" +
"" ,MD_SEQ as link_Investment_RR_MD_SEQ  "" +
"" ,dtls.MD_SRC_SYSTEM as link_Investment_RR_MD_SRC_SYSTEM "" +
"",dtls.MD_EXTRACT_DT as link_Investment_RR_MD_EXTRACT_DT "" +
"",dtls.MD_SOURCE as link_Investment_RR_MD_SOURCE "" +
 "",CONTRACT_ID as link_Investment_RR_CONTRACT_ID "" +
"" ,INVESTMENT_PRODUCT_ID as link_Investment_RR_INVESTMENT_PRODUCT_ID "" +
""  ,BAL_DATE    as sat_link_Investment_RR_BAL_DATE  "" +
"",MV as sat_link_Investment_RR_MV "" +
"",AUA as    sat_link_Investment_RR_AUA "" +
"",IVD_LOAD_FLAG as sat_link_Investment_RR_IVD_LOAD_FLAG "" +
"",WF_IND as sat_link_Investment_RR_WF_IND "" +
"",MD_START_DT as    sat_link_Investment_RR_MD_START_DT "" +
""from DB_IAW_ENV_DWH.HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_INVESTIA_UNIVERIS as mstr join DB_IAW_ENV_DWH.HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN as dtls "" +
""on mstr.HK_LINK = dtls.HK_LINK where MD_START_DT = TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') AND MD_ACTIVE = ''A'') "" +
"",t2 as (select * from t1 as mstr join (select HK_HUB_CONTRACT,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER as Link_Investment_Contract_RR_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,RR_CD "" +
"" as    Link_Investment_Contract_RR_RR_CD "" + 
"" ,HK_HUB_REGISTERED_REPRESENTATIVE as  link_Investment_RR_HK_HUB_REGISTERED_REPRESENTATIVE "" +
"" from DB_IAW_ENV_DWH.shared_RDV.LINK_INVESTMENT_CONTRACT_RR) as dtls "" +
""on link_Investment_RR_HK_HUB_CONTRACT = HK_HUB_CONTRACT)"" +
"",T3 as (select mstr.HK_LINK as HK_LINK "" +
"",COMMISSIONPCT as sat_link_Commission_COMMISSIONPCT "" +
"",COMMISSIONPCT_ADVISOR as sat_link_Commission_COMMISSIONPCT_ADVISOR "" +
"",COMMISSIONPCT_FINANCIAL as sat_link_Commission_COMMISSIONPCT_FINANCIAL "" +
"" from DB_IAW_ENV_DWH.shared_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE as mstr join "" +
""(select HK_LINK,max(md_start_dt) as max_md_start_dt from  DB_IAW_ENV_DWH.shared_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE "" +
"" where MD_START_DT <= TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') group by HK_LINK) "" +
"" as dtls on mstr.HK_LINK = dtls.hk_link and mstr.md_start_dt = dtls.max_md_start_dt where mstr.md_active=''A'' and mstr.md_src_system = ''INVESTIA-UNIVERIS'')"" +
"", t4 as(select dtls.HK_HUB_PARTY_ROLE_ADVISOR as link_Commission_HK_HUB_PARTY_ROLE_ADVISOR,"" +
""  sat_link_Commission_COMMISSIONPCT"" +
"" ,sat_link_Commission_COMMISSIONPCT_ADVISOR"" +
"" ,sat_link_Commission_COMMISSIONPCT_FINANCIAL"" +
"",HK_HUB_REGISTERED_REPRESENTATIVE as link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE"" +
"", MASTER_CODE as link_Commission_MASTER_CODE"" +
"" from t3 as mstr join DB_IAW_ENV_DWH.shared_BDV.LINK_PARTY_RELATIONSHIP_SHARE as dtls on mstr.hk_link = dtls.hk_link )"" +
"" , t5 as (select * from t2 left outer join t4 on link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE = link_Investment_RR_HK_HUB_REGISTERED_REPRESENTATIVE)"" +
"", t6 as ( select mstr.hk_hub as SAT_INVESTMENT_PRODUCT_hk_hub,"" +
""ISSUER_COMPANY_NAME as  Sat_Product_Type_ISSUER_COMPANY_NAME "" +
""from DB_IAW_ENV_DWH.shared_BDV.SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE as mstr "" +
""join (select HK_HUB,max(md_start_dt) as max_md_start_dt from  DB_IAW_ENV_DWH.shared_BDV.SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE where MD_START_DT <= TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') "" +
""group by HK_HUB) as dtls "" +
""on mstr.HK_HUB = dtls.hk_HUB and mstr.md_start_dt = dtls.max_md_start_dt where mstr.md_active=''A'')"" +
"", t7 as (select * from t6 join DB_IAW_ENV_DWH.shared_RDV.HUB_INVESTMENT_PRODUCT_TYPE dtls on SAT_INVESTMENT_PRODUCT_hk_hub = hk_hub)"" +
"", t8 as (select * from t5 left outer join t7 on t5.LINK_INVESTMENT_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE = t7.hk_hub )"" +  
"",t9 as ( select mstr.HK_HUB as uneiveris_HK_HUB, mstr.ADMINISTRATOR_TYPE as ADMINISTRATOR_TYPE"" +
"" from DB_IAW_ENV_DWH.shared_RDV.SAT_CONTRACT_INVESTIA_UNIVERIS as mstr"" +
"" join (select HK_HUB,max(md_start_dt) as max_md_start_dt from   DB_IAW_ENV_DWH.shared_RDV.SAT_CONTRACT_INVESTIA_UNIVERIS where MD_START_DT <= TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') "" +
""group by HK_HUB) as dtls "" +
""on mstr.HK_HUB = dtls.hk_HUB and mstr.md_start_dt = dtls.max_md_start_dt where mstr.md_active=''A'')"" +
"", t10 as (select * from t8 left outer join t9 on LINK_INVESTMENT_RR_HK_HUB_CONTRACT = uneiveris_HK_HUB)"" + 
""select  "" +
""link_Investment_RR_HK_HUB_CONTRACT, "" +
""link_Investment_RR_MD_SEQ, "" +
""link_Investment_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE, "" +
""link_Investment_RR_MD_EXTRACT_DT, "" +
""link_Investment_RR_MD_SOURCE,"" +
""link_Investment_RR_MD_SRC_SYSTEM,"" +
""link_Investment_RR_CONTRACT_ID,"" +
""link_Investment_RR_INVESTMENT_PRODUCT_ID,"" +
""sat_link_Investment_RR_BAL_DATE    ,"" +
""sat_link_Investment_RR_MV, "" +
""sat_link_Investment_RR_AUA,"" +
""sat_link_Investment_RR_IVD_LOAD_FLAG,  "" +
""sat_link_Investment_RR_WF_IND  ,"" +
""sat_link_Investment_RR_MD_START_DT ,"" +
""systimestamp(),"" +
""Link_Investment_Contract_RR_RR_CD,"" +
""Link_Investment_Contract_RR_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,"" +
""LINK_INVESTMENT_RR_UNIVERIS_CLIENT_ID,"" +
""LINK_INVESTMENT_RR_UNIVERIS_PLAN_ID   ,"" +
""link_Commission_HK_HUB_PARTY_ROLE_ADVISOR, "" + 
""HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,"" +         
""link_Commission_MASTER_CODE,   "" + 
""PLN_MNEM,      "" +
""sat_link_Commission_COMMISSIONPCT,"" +  
""sat_Product_Type_ISSUER_COMPANY_NAME,  "" +
""ADMINISTRATOR_TYPE, "" +
""sat_link_Commission_COMMISSIONPCT_ADVISOR, "" +
""sat_link_Commission_COMMISSIONPCT_FINANCIAL "" +
""    from t10 left outer join DB_IAW_ENV_DWH.shared_BDV.LINK_INVESTMENT_CONTRACT as dtls on link_Investment_RR_HK_HUB_CONTRACT  =  dtls.HK_HUB_CONTRACT "" +  
""and link_Commission_HK_HUB_PARTY_ROLE_ADVISOR=HK_HUB_PARTY_ROLE_ADVISOR)"";

UPD_QUERY = "" UPDATE HOLDINGS_BDV.WT_INVESTMENT_INVESTIA_UNIVERIS ""+
"" SET HK_LINK = SHA1(UPPER(CONCAT( ""+
""      COALESCE(TRIM(MD_SEQ), ''#NULL#''), ''|'' ""+
""    , COALESCE(TRIM(MD_SOURCE), ''#NULL#''), ''|'' ""+
""    , COALESCE(TRIM(MD_SRC_SYSTEM), ''#NULL#''), ''|'' ""+
""    , COALESCE(TRIM(MD_EXTRACT_DT), ''#NULL#''), ''|'' ""+
""    , ''#NULL#'', ''|'' ""+
""    , COALESCE(TRIM(MASTER_CODE), ''#NULL#''), ''|'' ""+
""    , COALESCE(TRIM(INVESTMENT_PRODUCT_ID), ''#NULL#''), ''|'' ""+
""    , COALESCE(TRIM(CLIENT_ID), ''#NULL#''), ''|'' ""+
""    , COALESCE(TRIM(PLN_MNEM), ''#NULL#''), ''|'' ""+
""    , ''#NULL#'', ''|'' ""+
""    , ''#NULL#'', ''|'' ""+
""    , ''#NULL#'', ''|'' ""+
""    , COALESCE(TRIM(UNIVERIS_PLAN_ID), ''#NULL#'') ""+
""    ))),""+
""HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''0''),""+
""HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''0''),""+
""HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''0''),""+
""HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''0''),""+
""HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = COALESCE(HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,''0''),""+
""MD_CREATION_DT = SYSTIMESTAMP()""+
""Where 1=1"";

 var PRE_SQL_QUERY_ENV = PRE_SQL_QUERY.replaceAll(""_ENV_"" , ""_"" + ENV + ""_"");
 var PRE_sql_statement = snowflake.createStatement(
          {
          sqlText: PRE_SQL_QUERY_ENV
          });
 var result_PRE_SQL_scan = PRE_sql_statement.execute();  

 var INS_QUERY_ENV = INS_QUERY.replaceAll(""_ENV_"" , ""_"" + ENV + ""_"");
 var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY_ENV
          });
 var result_scan = sql_statement.execute();  
 
var UPD_QUERY_ENV = UPD_QUERY.replaceAll(""_ENV_"" , ""_"" + ENV + ""_"");
 var UPD_statement = snowflake.createStatement(
          {
          sqlText: UPD_QUERY_ENV
          });
 var result_UPD_scan = UPD_statement.execute();  
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.HOLDINGS_BDV.SP_CONV_LOADBDV_VW_INITIAL_LOADING_INVESTMENT_CASH_TO_WT_INVESTMENT_CASH(""ENV"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS ' 
var trunc_query = ""TRUNCATE table DB_IAW_<env>_DWH.HOLDINGS_BDV.WT_INVESTMENT_CASH_IAS_NBIN"";
var trunc_query_ENV = trunc_query.replaceAll(""_<env>_"",""_""+ ENV + ""_"");
var sql_statement1 = snowflake.createStatement({
  sqlText: trunc_query_ENV
});
var result1_scan = sql_statement1.execute(); 
INS_QUERY = ""INSERT INTO  DB_IAW_<env>_DWH.HOLDINGS_BDV.WT_INVESTMENT_CASH_IAS_NBIN (HK_LINK, ""+
""HK_HUB_CONTRACT, ""+
""HK_HUB_INVESTMENT_PRODUCT_TYPE, ""+
""HK_HUB_PARTY_ROLE_ADVISOR, ""+
""HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, ""+
""HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES, ""+
""MD_SEQ, ""+
""MD_START_DT, ""+
""MD_CREATION_DT, ""+
""MD_EXTRACT_DT, ""+
""MD_SOURCE, ""+
""MD_SRC_SYSTEM, ""+
""A_C_SUMM_SD_NET_AMT, ""+
""A_C_SUMM_TD_NET_AMT, ""+
""A_C_SUMM_BALANCE_BUS_DATE, ""+
""CONTRACT_ID, ""+
""RR_CD, ""+
""INVESTMENT_PRODUCT_ID, ""+
""MASTER_CODE, ""+
""A_C_CLIENT, ""+
""ACCOUNT_RAP_CODE, ""+
""ASC_1_RESP_PLAN_TYPES, ""+
""RETAIL_PLAN, ""+
""A_C_CURRENCY, ""+
""COMMISSIONPCT, ""+
""ISSUER_COMPANY_NAME, ""+
""ASC_3_MANAGED_TYPE, ""+
""ADMINISTRATOR_TYPE, ""+
""EXCHANGERATE, ""+
""A_C_ACCOUNT_CLASS, ""+
""RETAIL_PLAN_RESP) (SELECT HK_LINK, ""+
""HK_HUB_CONTRACT, ""+
""HK_HUB_INVESTMENT_PRODUCT_TYPE, ""+
""HK_HUB_PARTY_ROLE_ADVISOR, ""+
""HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, ""+
""HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES, ""+
""MD_SEQ, ""+
""MD_START_DT, ""+
""MD_CREATION_DT, ""+
""MD_EXTRACT_DT, ""+
""MD_SOURCE, ""+
""MD_SRC_SYSTEM, ""+
""A_C_SUMM_SD_NET_AMT, ""+
""A_C_SUMM_TD_NET_AMT, ""+
""A_C_SUMM_BALANCE_BUS_DATE, ""+
""CONTRACT_ID, ""+
""RR_CD, ""+
""INVESTMENT_PRODUCT_ID, ""+
""MASTER_CODE, ""+
""A_C_CLIENT, ""+
""ACCOUNT_RAP_CODE, ""+
""ASC_1_RESP_PLAN_TYPES, ""+
""RETAIL_PLAN, ""+
""A_C_CURRENCY, ""+
""COMMISSIONPCT, ""+
""ISSUE_COMPANY_NAME, ""+
""ASC_3_MANAGED_TYPE, ""+
""ADMINISTRATOR_TYPE, ""+
""EXCHANGERATE, ""+
""A_C_ACCOUNT_CLASS, ""+
""RETAIL_PLAN_RESP FROM DB_IAW_<env>_DWH.HOLDINGS_BDV.VW_INITIAL_LOADING_INVESTMENT_CASH_IAS_NBIN) ""
;
var INS_QUERY_ENV = INS_QUERY.replaceAll(""_<env>_"",""_""+ ENV + ""_"");
var sql_statement2 = snowflake.createStatement({
  sqlText: INS_QUERY_ENV
});
 var result2_scan = sql_statement2.execute(); 
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.HOLDINGS_BDV.SP_CONV_LOADBDV_VW_INITIAL_LOADING_INVESTMENT_TO_WT_INVESTMENT(""ENV"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS ' 
var delete_query = ""DELETE FROM DB_IAW_<env>_DWH.HOLDINGS_BDV.WT_INVESTMENT_INVESTIA_UNIVERIS WHERE 1=1"";
var delete_query_ENV = delete_query.replaceAll(""_<env>_"",""_""+ ENV + ""_"");
var sql_statement1 = snowflake.createStatement({
  sqlText: delete_query_ENV
});
var result1_scan = sql_statement1.execute(); 
INS_QUERY = ""INSERT INTO DB_IAW_<env>_DWH.HOLDINGS_BDV.WT_INVESTMENT_INVESTIA_UNIVERIS(HK_HUB_CONTRACT, "" +
""HK_HUB_INVESTMENT_PRODUCT_TYPE , "" +
""HK_HUB_PARTY_ROLE_ADVISOR	,  "" +
""HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	, "" + 
""HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES	 , "" +
""MD_SEQ	, "" +
""MD_START_DT	, "" +
""MD_EXTRACT_DT	, "" +
""MD_SOURCE	, "" +
""MD_SRC_SYSTEM	, "" +
""CONTRACT_ID	, "" +
""INVESTMENT_PRODUCT_ID	, "" +
""MASTER_CODE	, "" +
""RR_CD	, "" +
"" CLIENT_ID	, "" +
""PLN_MNEM	, "" +
""COMMISSIONPCT	, "" +
""ISSUER_COMPANY_NAME	, "" +
"" ADMINISTRATORY_TYPE, "" +
""BAL_DATE	, "" +
""MV	, "" +
""AUA	, "" +
""UNIVERIS_PLAN_ID	, "" +
""IVD_LOAD_FLAG	,  "" +
""WF_IND	 ) "" +
""(select "" +
""HK_HUB_CONTRACT, "" +
""HK_HUB_INVESTMENT_PRODUCT_TYPE , "" +
""HK_HUB_PARTY_ROLE_ADVISOR	,  "" +
""HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	,  "" +
""HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES	 , "" +
""MD_SEQ	, "" +
""MD_START_DT	, "" +
""MD_EXTRACT_DT	, "" +
""MD_SOURCE	, "" +
""MD_SRC_SYSTEM	, "" +
""CONTRACT_ID	, "" +
""INVESTMENT_PRODUCT_ID	, "" +
""MASTER_CODE	, "" +
""RR_CD	, "" +
""UNIVERIS_CLIENT_ID 	, "" +
""PLN_MNEM	, "" +
""COMMISSIONPCT	, "" +
""ISSUER_COMPANY_NAME	, "" +
""ADMINISTRATOR_TYPE, "" +
""BAL_DATE	, "" +
""MV	, "" +
""AUA	, "" +
""UNIVERIS_PLAN_ID	, "" +
""IVD_LOAD_FLAG	, "" +
""WF_IND	 "" +
""FROM DB_IAW_<env>_DWH.HOLDINGS_BDV.VW_INITIAL_LOADING_INVESTMENT_INVESTIA_UNIVERIS);"" 
var INS_QUERY_ENV = INS_QUERY.replaceAll(""_<env>_"",""_""+ ENV + ""_"");
var sql_statement2 = snowflake.createStatement({
  sqlText: INS_QUERY_ENV
});
 var result2_scan = sql_statement2.execute(); 
 var update_query = ""UPDATE DB_IAW_<env>_DWH.HOLDINGS_BDV.WT_INVESTMENT_INVESTIA_UNIVERIS ""+
""SET ""+
""HK_LINK = SHA1(UPPER(CONCAT( ""+
""      COALESCE(TRIM(MD_SEQ), ''#NULL#''), ''|'' ""+
""    , COALESCE(TRIM(MD_SOURCE), ''#NULL#''), ''|'' ""+
""    , COALESCE(TRIM(MD_SRC_SYSTEM), ''#NULL#''), ''|'' ""+
""    , COALESCE(TRIM(MD_EXTRACT_DT), ''#NULL#''), ''|'' ""+
""    , ''#NULL#'', ''|''   ""+
""    , COALESCE(TRIM(MASTER_CODE), ''#NULL#''), ''|'' ""+
""    , COALESCE(TRIM(INVESTMENT_PRODUCT_ID), ''#NULL#''), ''|'' ""+
""    , COALESCE(TRIM(CLIENT_ID), ''#NULL#''), ''|'' ""+
""    , COALESCE(TRIM(PLN_MNEM), ''#NULL#''), ''|'' ""+
""    , ''#NULL#'', ''|'' ""+
""    , ''#NULL#'', ''|'' ""+
""    , ''#NULL#'', ''|'' ""+
 ""   , COALESCE(TRIM(UNIVERIS_PLAN_ID), ''#NULL#'')""+
 ""   ))),""+
""HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''0''),""+
""HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''0''),""+
""HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''0''),""+
""HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''0''),""+
""HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = COALESCE(HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,''0''),""+
""MD_CREATION_DT = SYSTIMESTAMP() ""+
""Where 1=1"";
var update_query_ENV = update_query.replaceAll(""_<env>_"",""_"" + ENV + ""_"");
var sql_statement3 = snowflake.createStatement({ 
  sqlText: update_query_ENV
});
 var result3_scan = sql_statement3.execute(); 
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.HOLDINGS_BDV.SP_CONV_LOADSTG_STG_IAS_COMMISSION_TO_DM_EXPLORATION_REVENUES(""ENV"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS ' 
var delete_query = ""DELETE FROM DB_IAW_<env>_DM.EXPOLORATION.IAS_COMMISSION_REVENUES WHERE 1=1"";
var delete_query_ENV = delete_query.replaceAll(""_<env>_"",""_""+ ENV + ""_"");
var sql_statement1 = snowflake.createStatement({
  sqlText: delete_query_ENV
});
var result1_scan = sql_statement1.execute(); 
INS_QUERY = ""INSERT INTO DB_IAW_<env>_DM.EXPOLORATION.IAS_COMMISSION_REVENUES(""HK_LINK , "" +
""HK_HUB_CONTRACT	, "" +
""HK_HUB_PARTY_ROLE_ADVISOR	, "" +	
""MD_CREATION_DT	, "" +
""MD_START_DT	, "" +
""MD_SOURCE	, "" +
""MD_SRC_SYSTEM	, "" +
""MD_EXTRACT_DT	, "" +	
""REPID	, "" +
""ADVISOR_ID	, "" +	
""PROGRAM_TYPE	, "" +
""ACCOUNTID	, "" +
""PROCESSDATE	, "" +	
""SOURCECODE		, "" +
""QUANTITY	, "" +	
""TRANSTYPE	, "" +	
""REVENUE	, "" +	
""COMMISSION		, "" +
""NETCOMMISSION	, "" +	
""TRANSFEE) "" +
""(select "" +
""HK_LINK , "" +
""HK_HUB_CONTRACT	, "" +
""HK_HUB_PARTY_ROLE_ADVISOR	, "" +	
""MD_CREATION_DT	, "" +
""MD_START_DT	, "" +
""MD_SOURCE	, "" +
""MD_SRC_SYSTEM	, "" +
""MD_EXTRACT_DT	, "" +	
""REPID	, "" +
""ADVISOR_ID	, "" +	
""PROGRAM_TYPE	, "" +
""ACCOUNTID	, "" +
""PROCESSDATE	, "" +	
""SOURCECODE		, "" +
""QUANTITY	, "" +	
""TRANSTYPE	, "" +	
""REVENUE	, "" +	
""COMMISSION		, "" +
""NETCOMMISSION	, "" +	
""TRANSFEE "" +
""FROM DB_IAW_<env>_STG.IAS_COMMISSION.REVENUES);"" 
var INS_QUERY_ENV = INS_QUERY.replaceAll(""_<env>_"",""_""+ ENV + ""_"");
var sql_statement2 = snowflake.createStatement({
  sqlText: INS_QUERY_ENV
});
 var result2_scan = sql_statement2.execute(); 
 
';
create or replace schema DB_IAW_PROD_DWH.HOLDINGS_RDV;

create or replace TABLE DB_IAW_PROD_DWH.HOLDINGS_RDV.LINK_ACCRUED_INTEREST_NBIN (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash of the investment product type',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	PROCESS_DATE DATE COMMENT 'Process date',
	FIID VARCHAR(15) COMMENT 'IBM/OSS Security Id',
	PRODUCT_CODE VARCHAR(12) COMMENT 'Product code / Security group code',
	CUSIP VARCHAR(9) COMMENT 'CUSIP',
	ISIN VARCHAR(12) COMMENT 'ISIN NO',
	MARKET VARCHAR(12) COMMENT 'Market',
	SYMBOL VARCHAR(26) COMMENT 'Security Symbol',
	INTEREST_RATE NUMBER(29,2) COMMENT 'Income Profile Rate',
	ACCRUED_INTEREST_METHOD1 VARCHAR(1) COMMENT 'Accrued Int Method 1',
	ACCRUED_INTEREST_METHOD2 VARCHAR(1) COMMENT 'Accrued Int Method 2',
	DAILY_COUNT_BASIS VARCHAR(15) COMMENT 'US_NASD/ACTUAL_360/ACTUAL_365/ACTUAL',
	INTEREST_START_DATE DATE COMMENT 'Int. Start Date',
	YEAR_FRACTION NUMBER(29,9) COMMENT 'Year',
	BASE_ACCRUED_INTEREST NUMBER(29,11) COMMENT 'BASE ACCRUED INTEREST'
);
create or replace TABLE DB_IAW_PROD_DWH.HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
	HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for HUB_REGISTERED_REPRESENTATIVE',
	MD_SEQ VARCHAR(50) COMMENT 'The value of METADATA$FILE_ROW_NUMBER',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	RR_CD VARCHAR(50) COMMENT 'Advisor RR code',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product Type ID',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	UNIVERIS_CLIENT_ID NUMBER(38,0) COMMENT 'Univeris Client ID'
);
create or replace TABLE DB_IAW_PROD_DWH.HOLDINGS_RDV.SAT_LINK_INVESTMENT_CASH_RR_IAS_NBIN (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	A_C_SUMM_BALANCE_BUS_DATE DATE COMMENT 'Update business date',
	A_C_SUMM_SD_NET_AMT NUMBER(38,2) COMMENT 'A/C Summ settelment date Net Amt',
	A_C_SUMM_TD_NET_AMT NUMBER(38,2) COMMENT 'A/C Summ trade date Net Amt',
	A_C_CURRENCY VARCHAR(10) COMMENT 'Holding value currency'
);
create or replace TABLE DB_IAW_PROD_DWH.HOLDINGS_RDV.SAT_LINK_INVESTMENT_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ACT_SYSID NUMBER(38,0) NOT NULL COMMENT 'Holding system ID',
	REP_SYSID NUMBER(38,0) COMMENT 'Advisor ID',
	FISCAL_SYSID NUMBER(38,0) COMMENT 'Fiscal ID',
	BAL_DATE TIMESTAMP_NTZ(9) NOT NULL COMMENT 'Balance date',
	MV NUMBER(34,4) COMMENT 'Market value',
	CURRENCY_CD VARCHAR(8000) COMMENT 'Currency code',
	EXCH_DT TIMESTAMP_NTZ(9) COMMENT 'Exchange date',
	EXCH_RATE NUMBER(19,8) COMMENT 'Exchange rate',
	AUA NUMBER(34,4) COMMENT 'AUA',
	PRICE NUMBER(34,4) COMMENT 'Price',
	UNITS FLOAT COMMENT 'Units',
	BV NUMBER(34,4) COMMENT 'Book value',
	ACB NUMBER(34,4) COMMENT 'Adjusted cost based',
	NI_T NUMBER(34,4) COMMENT 'Net invested by trade date (not used)',
	NI_P NUMBER(34,4) COMMENT 'Net invested by process date',
	FREQ_CD VARCHAR(8000) COMMENT 'Frequency code (not used)',
	UNITS_TRD_DT FLOAT COMMENT 'Units calculated by trade date',
	FISCAL_TD_UNITS FLOAT COMMENT 'Units displayed for the fiscal year',
	IVD_LOAD_FLAG VARCHAR(3) COMMENT 'Front-end or back-end load indicator',
	WF_IND NUMBER(38,0)
);
create or replace TABLE DB_IAW_PROD_DWH.HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_IAS_NBIN (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	TRAN_SUMM_CURR_MKT_VALUE NUMBER(38,2) COMMENT 'Market value of the holding in CAD or USD',
	TRAN_SUMM_BUSINESS_DATE DATE COMMENT 'Update business date',
	TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
	B_V_SECURITY_POSITION_VAL NUMBER(38,2) COMMENT 'Book value',
	B_V_SECURITY_POSITION_COS NUMBER(38,4) COMMENT 'Average cost base',
	TRAN_SUMM_AVG_UNIT_COST NUMBER(38,5) COMMENT 'Average cost base',
	TRAN_SUMM_NET_SETT_AMT NUMBER(38,2) COMMENT 'Cash position',
	TRAN_SUMM_CURRENCY VARCHAR(10) COMMENT 'Holding value currency',
	TRAN_SUMM_SETT_QTY NUMBER(38,4) COMMENT 'Units',
	TRAN_SUMM_TRADE_QTY NUMBER(38,4) COMMENT 'Units calculated by trade date',
	TI_FACE_VALUE NUMBER(29,5) COMMENT 'TI Face Value',
	TI_BASIS_POINT NUMBER(29,5) COMMENT 'TI Basis Point',
	MKT_PRICE_DATE TIMESTAMP_NTZ(9) COMMENT 'Mkt Price Date',
	MARKET_PRICE_BID NUMBER(29,8) COMMENT 'Market Price Bid',
	MARKET_PRICE_ASK NUMBER(29,8) COMMENT 'Market Price Ask',
	MARKET_PRICE_CLOSE NUMBER(29,8) COMMENT 'Market Price Close',
	PRICE_CURRENCY VARCHAR(3) COMMENT 'Price Currency',
	TRAN_SUMM_CURR_MKT_PRICE NUMBER(29,8) COMMENT 'Tran Summ Curr Mkt Price',
	TRAN_SUMM_SFK_QTY NUMBER(29,4) COMMENT 'Tran Summ Sfk Qty'
);
create or replace TABLE DB_IAW_PROD_DWH.HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_IAS_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""\""A\""\"" row exists in the source, \""\""D\""\"" row does not exist in the source',
	ACT_SYSID NUMBER(38,0) NOT NULL COMMENT 'Holding system ID',
	REP_SYSID NUMBER(38,0) COMMENT 'Advisor ID',
	FISCAL_SYSID NUMBER(38,0) COMMENT 'Fiscal ID',
	BAL_DATE TIMESTAMP_NTZ(9) NOT NULL COMMENT 'Balance date',
	MV NUMBER(34,4) COMMENT 'Market value',
	CURRENCY_CD VARCHAR(8000) COMMENT 'Currency code',
	EXCH_DT TIMESTAMP_NTZ(9) COMMENT 'Exchange date',
	EXCH_RATE NUMBER(19,8) COMMENT 'Exchange rate',
	AUA NUMBER(34,4) COMMENT 'AUA',
	PRICE NUMBER(34,4) COMMENT 'Price',
	UNITS FLOAT COMMENT 'Units',
	BV NUMBER(34,4) COMMENT 'Book value',
	ACB NUMBER(34,4) COMMENT 'Adjusted cost based',
	NI_T NUMBER(34,4) COMMENT 'Net invested by trade date (not used)',
	NI_P NUMBER(34,4) COMMENT 'Net invested by process date',
	FREQ_CD VARCHAR(8000) COMMENT 'Frequency code (not used)',
	UNITS_TRD_DT FLOAT COMMENT 'Units calculated by trade date',
	FISCAL_TD_UNITS FLOAT COMMENT 'Units displayed for the fiscal year',
	IVD_LOAD_FLAG VARCHAR(3) COMMENT 'Front-end or back-end load indicator',
	WF_IND NUMBER(38,0) COMMENT 'Unknown'
);
create or replace TABLE DB_IAW_PROD_DWH.HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ACT_SYSID NUMBER(38,0) NOT NULL COMMENT 'Holding system ID',
	REP_SYSID NUMBER(38,0) COMMENT 'Advisor ID',
	FISCAL_SYSID NUMBER(38,0) COMMENT 'Fiscal ID',
	BAL_DATE TIMESTAMP_NTZ(9) NOT NULL COMMENT 'Balance date',
	MV NUMBER(34,4) COMMENT 'Market value',
	CURRENCY_CD VARCHAR(8000) COMMENT 'Currency code',
	EXCH_DT TIMESTAMP_NTZ(9) COMMENT 'Exchange date',
	EXCH_RATE NUMBER(19,8) COMMENT 'Exchange rate',
	AUA NUMBER(34,4) COMMENT 'AUA',
	PRICE NUMBER(34,4) COMMENT 'Price',
	UNITS FLOAT COMMENT 'Units',
	BV NUMBER(34,4) COMMENT 'Book value',
	ACB NUMBER(34,4) COMMENT 'Adjusted cost based',
	NI_T NUMBER(34,4) COMMENT 'Net invested by trade date (not used)',
	NI_P NUMBER(34,4) COMMENT 'Net invested by process date',
	FREQ_CD VARCHAR(8000) COMMENT 'Frequency code (not used)',
	UNITS_TRD_DT FLOAT COMMENT 'Units calculated by trade date',
	FISCAL_TD_UNITS FLOAT COMMENT 'Units displayed for the fiscal year',
	IVD_LOAD_FLAG VARCHAR(3) COMMENT 'Front-end or back-end load indicator',
	WF_IND NUMBER(38,0)
);
create or replace schema DB_IAW_PROD_DWH.PUBLIC;

create or replace schema DB_IAW_PROD_DWH.REVENUES_BDV;

create or replace TABLE DB_IAW_PROD_DWH.REVENUES_BDV.LINK_REVENUE (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for the REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CLIENT_ID VARCHAR(40) COMMENT 'unique client  ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Master Code (unique advisor ID)',
	PLN_MNEM VARCHAR(40) COMMENT 'unique plan ID',
	MARKETPRODUCT_ID VARCHAR(40) COMMENT 'unique product ID',
	CONTRACT_ID VARCHAR(40) COMMENT 'unique contract ID',
	ADVISOR_ID VARCHAR(50) COMMENT 'unique advisor ID',
	PAYMENT_DATE TIMESTAMP_NTZ(9) COMMENT 'Process Date',
	REVENUE NUMBER(38,12) COMMENT 'REVENUE AMOUNT',
	REVENUE_TYPE VARCHAR(512) COMMENT 'REVENUE TYPE',
	REVENUE_SUBTYPE VARCHAR(512) COMMENT 'REVENUE SUBTYPE',
	AUA NUMBER(38,12) COMMENT 'AUA value',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	ENTRY_TYPE VARCHAR(20) COMMENT 'Entry Type',
	STAMP DATE COMMENT 'Record Insertion Date',
	INSURANCE_REVENUE NUMBER(38,12) COMMENT 'Insurance Revenues',
	TRANSID NUMBER(38,0) COMMENT 'Transaction ID'
);
create or replace TABLE DB_IAW_PROD_DWH.REVENUES_BDV.LINK_REVENUE_CLONE (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for the REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CLIENT_ID VARCHAR(40) COMMENT 'unique client  ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Master Code (unique advisor ID)',
	PLN_MNEM VARCHAR(40) COMMENT 'unique plan ID',
	MARKETPRODUCT_ID VARCHAR(40) COMMENT 'unique product ID',
	CONTRACT_ID VARCHAR(40) COMMENT 'unique contract ID',
	ADVISOR_ID VARCHAR(50) COMMENT 'unique advisor ID',
	PAYMENT_DATE TIMESTAMP_NTZ(9) COMMENT 'Process Date',
	REVENUE NUMBER(38,12) COMMENT 'REVENUE AMOUNT',
	REVENUE_TYPE VARCHAR(512) COMMENT 'REVENUE TYPE',
	REVENUE_SUBTYPE VARCHAR(512) COMMENT 'REVENUE SUBTYPE',
	AUA NUMBER(38,12) COMMENT 'AUA value',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID'
);
create or replace TRANSIENT TABLE DB_IAW_PROD_DWH.REVENUES_BDV.WT_LINK_REVENUE (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for the REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CLIENT_ID VARCHAR(40) COMMENT 'unique client  ID',
	CONTRACT_ID VARCHAR(40) COMMENT 'unique contract ID',
	ADVISOR_ID VARCHAR(50) COMMENT 'unique advisor ID (PORTAL USERNAME)',
	MASTER_CODE VARCHAR(50) COMMENT 'Master Code (unique advisor ID)',
	PLN_MNEM VARCHAR(512) COMMENT 'unique plan ID',
	MARKETPRODUCT_ID VARCHAR(40) COMMENT 'unique product ID',
	PAYMENT_DATE TIMESTAMP_NTZ(9) COMMENT 'Process Date',
	REVENUE NUMBER(38,12) COMMENT 'REVENUE AMOUNT',
	REVENUE_TYPE VARCHAR(512) COMMENT 'REVENUE TYPE',
	REVENUE_SUBTYPE VARCHAR(512) COMMENT 'REVENUE SUBTYPE',
	AUA NUMBER(38,12),
	REVENUE_ID NUMBER(38,0) COMMENT 'REVENUE SYSID',
	PLN_SYSID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	ENTRY_TYPE VARCHAR(20) COMMENT 'Entry Type',
	STAMP DATE COMMENT 'Record Insertion Date',
	INSURANCE_REVENUE NUMBER(38,12) COMMENT 'Insurance Revenues',
	TRANSID NUMBER(38,0) COMMENT 'Transaction ID'
);
create or replace view DB_IAW_PROD_DWH.REVENUES_BDV.VW_INITIAL_LOADING_WT_LINK_REVENUE(
	PLN_MNEM,
	MARKETPRODUCT_ID,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_CONTRACT,
	MD_START_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	CLIENT_ID,
	CONTRACT_ID,
	ADVISOR_ID,
	MASTER_CODE,
	PAYMENT_DATE,
	REVENUE,
	REVENUE_TYPE,
	REVENUE_SUBTYPE,
	ENTRY_TYPE,
	STAMP,
	INSURANCE_REVENUE,
	TRANSID
) as
WITH EXCLUSION AS
(
SELECT
    R.REPID,
    S.IND_EXCLUDE,
    S.MD_ACTIVE
FROM STEWARDSHIP_RDV.REF_MANUAL_ADVISOR_RVP_IAS R                    
INNER JOIN STEWARDSHIP_RDV.SAT_REF_MANUAL_ADVISOR_RVP_IAS S
ON R.HK_HUB = S.HK_HUB
QUALIFY ROW_NUMBER() OVER (PARTITION BY R.REPID ORDER BY S.MD_START_DT DESC)=1  
),
LATEST_VERSION_CLIENT_CONTRACT AS (
	SELECT 
	LR.HK_LINK,
	VW_CC.HK_HUB_CONTRACT ,
	VW_CC.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	VW_CC.A_C_CLIENT, 
	COALESCE (VW_CC.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY LR.HK_LINK,VW_CC.HK_HUB_CONTRACT ORDER BY VW_CC.MD_START_DT DESC ),1) AS RANK_CLIENT_CONTRACT
	FROM REVENUES_RDV.LINK_REVENUE_RR_IAS_COMMISSION LR
	LEFT JOIN SHARED_BDV.VW_CLIENT_CONTRACT VW_CC 
	ON VW_CC.HK_HUB_CONTRACT = LR.HK_HUB_CONTRACT
	AND  VW_CC.MD_START_DT <= LR.MD_START_DT
)
SELECT 
	'-1' AS PLN_MNEM,
	'-1' AS MARKETPRODUCT_ID,
	VW_CC.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
	LR.HK_HUB_PARTY_ROLE_ADVISOR, 
	LR.HK_HUB_CONTRACT, 
	--DATEADD(DAY,1,LR.PROCESSDATE) AS MD_START_DT, 
	-- The Date has been generated as the TRUNC(STAMP) + 1 Day
	LR.MD_START_DT AS MD_START_DT, 
	LR.MD_SOURCE, 
	LR.MD_SRC_SYSTEM, 
	LR.MD_EXTRACT_DT, 
	VW_CC.A_C_CLIENT AS CLIENT_ID, 
	CAST(LR.ACCOUNTID AS VARCHAR(40)) AS CONTRACT_ID, 
	CAST(LR.ADVISOR_ID AS VARCHAR(50)) AS ADVISOR_ID, 
	LR.REPID AS MASTER_CODE, 
	LR.PROCESSDATE AS PAYMENT_DATE, 
	SUM(LR.COMMISSION) AS REVENUE, 
	CASE  WHEN LR.SOURCECODE = 'OFF' THEN 'Trade commissions'
		  WHEN LR.SOURCECODE = 'FXF' THEN 'Fee based/Managed' 
		  WHEN LR.SOURCECODE = 'MGD' THEN 'Fee based/Managed' 
		  WHEN LR.SOURCECODE = 'JRN' THEN 'Trailers' 
		  WHEN LR.SOURCECODE = 'MNL' THEN 'Trade commissions' 
		  WHEN LR.SOURCECODE = 'TRD' THEN 'Trade commissions' 
	ELSE 'Unkown' 
	END AS REVENUE_TYPE,
	CASE WHEN LR.SOURCECODE  = 'OFF' THEN 'OffBook commission' 
		 WHEN LR.SOURCECODE  = 'FXF' THEN 'Fixed fees' 
		 WHEN LR.SOURCECODE  = 'MGD' THEN 'Managed' 
		 WHEN LR.SOURCECODE  = 'JRN' THEN 'Trailer fees and GIC' 
		 WHEN LR.SOURCECODE  = 'MNL' THEN 'Others' 
		 WHEN LR.SOURCECODE  = 'TRD' THEN 'Trade commissions' 
	ELSE 'Unkown' 
	END AS REVENUE_SUBTYPE,
	LR.ENTRY_TYPE AS ENTRY_TYPE,
	LR.STAMP,
	0 AS INSURANCE_REVENUE,
	NULL AS TRANSID
FROM REVENUES_RDV.LINK_REVENUE_RR_IAS_COMMISSION LR
LEFT JOIN LATEST_VERSION_CLIENT_CONTRACT VW_CC 
	ON VW_CC.HK_HUB_CONTRACT = LR.HK_HUB_CONTRACT
	AND LR.HK_LINK = VW_CC.HK_LINK
	AND  VW_CC.MD_ACTIVE = 'A' AND VW_CC.RANK_CLIENT_CONTRACT = 1
LEFT JOIN EXCLUSION E 
    ON E.REPID = LR.REPID 
	AND E.IND_EXCLUDE = 1
	AND E.MD_ACTIVE = 'A'
WHERE (((LR.SOURCECODE <> 'EXP') AND (LR.SOURCECODE <> 'TXR'))
AND ( LR.ACCOUNTID NOT RLIKE '^[A-Z][A-Z].*' OR LR.ACCOUNTID IS NULL )
AND E.REPID IS NULL)
GROUP BY 
    HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
	HK_HUB_PARTY_ROLE_ADVISOR, 
	LR.HK_HUB_CONTRACT,
    LR.SOURCECODE,
	MD_START_DT, 
	MD_SOURCE, 
	MD_SRC_SYSTEM, 
	MD_EXTRACT_DT, 
	CLIENT_ID, 
	CONTRACT_ID, 
	ADVISOR_ID, 
	MASTER_CODE, 
	PAYMENT_DATE,
    LR.ENTRY_TYPE,
    LR.STAMP
    
UNION 

 SELECT 
	'-1' AS PLN_MNEM,
	'-1' AS MARKETPRODUCT_ID,
	'0' AS HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
	LR.HK_HUB_REGISTERED_REPRESENTATIVE AS HK_HUB_PARTY_ROLE_ADVISOR, 
	'0' AS HK_HUB_CONTRACT, 
	LR.MD_START_DT AS MD_START_DT, 
	LR.MD_SOURCE, 
	LR.MD_SRC_SYSTEM, 
	LR.MD_EXTRACT_DT, 
	'-1' AS CLIENT_ID, 
	'-1' AS CONTRACT_ID, 
	LR.USERID AS ADVISOR_ID, 
	LR.REPID AS MASTER_CODE, 
	LR.PROCESSDATE AS PAYMENT_DATE, 
	0 AS REVENUE, 
	'Insurance' AS REVENUE_TYPE,
    'Insurance' AS REVENUE_SUBTYPE,
	LR.ENTRY_TYPE AS ENTRY_TYPE,
	LR.STAMP,
	SUM(COMMISSIONCAD) AS INSURANCE_REVENUE,
	LR.TRANSID
FROM REVENUES_RDV.LINK_INSURANCE_REVENUE_RR_IAS_COMMISSION LR

WHERE LR.SOURCECODE NOT IN ('EXP','TXR','SEAA','SEZ9','QYYY')

GROUP BY 
    
	HK_HUB_PARTY_ROLE_ADVISOR, 
	MD_START_DT,
	MD_SOURCE, 
	MD_SRC_SYSTEM, 
	MD_EXTRACT_DT,
	MASTER_CODE,
	ADVISOR_ID,
	PAYMENT_DATE,
	LR.SOURCECODE, 
    LR.ENTRY_TYPE,
    LR.STAMP,
    LR.TRANSID;
create or replace view DB_IAW_PROD_DWH.REVENUES_BDV.VW_REVENUE_IAS_COMMISSION(
	HK_LINK,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_CONTRACT,
	MD_START_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	CLIENT_ID,
	MASTER_CODE,
	CONTRACT_ID,
	ADVISOR_ID,
	PLN_MNEM,
	MARKETPRODUCT_ID,
	PAYMENT_DATE,
	REVENUE,
	REVENUE_TYPE,
	REVENUE_SUBTYPE,
	AUA,
	ENTRY_TYPE,
	STAMP,
	INSURANCE_REVENUE,
	TRANSID
) as 
WITH EXCLUSION AS
(
SELECT
    R.REPID,
    S.IND_EXCLUDE,
    S.MD_ACTIVE
FROM STEWARDSHIP_RDV.REF_MANUAL_ADVISOR_RVP_IAS R                    
INNER JOIN STEWARDSHIP_RDV.SAT_REF_MANUAL_ADVISOR_RVP_IAS S
ON R.HK_HUB = S.HK_HUB
QUALIFY ROW_NUMBER() OVER (PARTITION BY R.REPID ORDER BY S.MD_START_DT DESC)=1  
)
SELECT 
	R.HK_LINK, 
	R.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
	R.HK_HUB_PARTY_ROLE_ADVISOR, 
	R.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES, 
	R.HK_HUB_INVESTMENT_PRODUCT_TYPE, 
	R.HK_HUB_CONTRACT, 
	R.MD_START_DT, 
	R.MD_SOURCE, 
	R.MD_SRC_SYSTEM, 
	R.MD_EXTRACT_DT, 
	R.CLIENT_ID, 
	R.MASTER_CODE,
	R.CONTRACT_ID, 
	R.ADVISOR_ID, 
	R.PLN_MNEM, 
	R.MARKETPRODUCT_ID, 
	R.PAYMENT_DATE, 
	R.REVENUE, 
	R.REVENUE_TYPE, 
	R.REVENUE_SUBTYPE, 
	R.AUA,
	R.ENTRY_TYPE,
	R.STAMP,
	R.INSURANCE_REVENUE,
	R.TRANSID
FROM REVENUES_BDV.WT_LINK_REVENUE R
LEFT JOIN EXCLUSION E 
ON E.REPID = R.MASTER_CODE AND E.IND_EXCLUDE = 1 AND E.MD_ACTIVE = 'A'
WHERE R.MD_SRC_SYSTEM = 'IAS-COMMISSION'
AND ( R.CONTRACT_ID NOT RLIKE '^[A-Z][A-Z].*' OR R.CONTRACT_ID IS NULL )
AND E.REPID IS NULL;
create or replace view DB_IAW_PROD_DWH.REVENUES_BDV.VW_REVENUE_IAS_UNIVERIS(
	HK_LINK,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_CONTRACT,
	MD_START_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	CLIENT_ID,
	MASTER_CODE,
	CONTRACT_ID,
	ADVISOR_ID,
	PLN_MNEM,
	MARKETPRODUCT_ID,
	PAYMENT_DATE,
	REVENUE,
	REVENUE_TYPE,
	REVENUE_SUBTYPE,
	AUA,
	PLN_SYSID
) as 
SELECT 
	R.HK_LINK, 
	R.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
	R.HK_HUB_PARTY_ROLE_ADVISOR, 
	R.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES, 
	R.HK_HUB_INVESTMENT_PRODUCT_TYPE, 
	R.HK_HUB_CONTRACT, 
	R.MD_START_DT, 
	R.MD_SOURCE, 
	R.MD_SRC_SYSTEM, 
	R.MD_EXTRACT_DT, 
	R.CLIENT_ID, 
	R.MASTER_CODE,
	R.CONTRACT_ID, 
	R.ADVISOR_ID, 
	R.PLN_MNEM, 
	R.MARKETPRODUCT_ID, 
	R.PAYMENT_DATE, 
	R.REVENUE, 
	R.REVENUE_TYPE, 
	R.REVENUE_SUBTYPE, 
	R.AUA,
	R.PLN_SYSID
FROM REVENUES_BDV.WT_LINK_REVENUE R
WHERE R.MD_SRC_SYSTEM = 'IAS-UNIVERIS';
create or replace view DB_IAW_PROD_DWH.REVENUES_BDV.VW_REVENUE_INVESTIA_UNIVERIS(
	HK_LINK,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_CONTRACT,
	MD_START_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	CLIENT_ID,
	MASTER_CODE,
	CONTRACT_ID,
	ADVISOR_ID,
	PLN_MNEM,
	MARKETPRODUCT_ID,
	PAYMENT_DATE,
	REVENUE,
	REVENUE_TYPE,
	REVENUE_SUBTYPE,
	AUA,
	PLN_SYSID
) as 
SELECT 
	R.HK_LINK, 
	R.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
	R.HK_HUB_PARTY_ROLE_ADVISOR, 
	R.HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES, 
	R.HK_HUB_INVESTMENT_PRODUCT_TYPE, 
	R.HK_HUB_CONTRACT, 
	R.MD_START_DT, 
	R.MD_SOURCE, 
	R.MD_SRC_SYSTEM, 
	R.MD_EXTRACT_DT, 
	R.CLIENT_ID, 
	R.MASTER_CODE,
	R.CONTRACT_ID, 
	R.ADVISOR_ID, 
	R.PLN_MNEM, 
	R.MARKETPRODUCT_ID, 
	R.PAYMENT_DATE, 
	R.REVENUE, 
	R.REVENUE_TYPE, 
	R.REVENUE_SUBTYPE, 
	R.AUA,
	R.PLN_SYSID
FROM REVENUES_BDV.WT_LINK_REVENUE R
WHERE R.MD_SRC_SYSTEM = 'INVESTIA-UNIVERIS';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.REVENUES_BDV.REVENUE_IAS_COMMISSION_TO_BDV_WT_LINK_REVENUE(""ENV"" VARCHAR(16777216), ""IO_START_DATE"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
 
INS_QUERY = ""INSERT INTO DB_IAW_env_dwh.Revenues_bdv.WT_LINK_REVENUE (HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, ""+
""HK_HUB_PARTY_ROLE_ADVISOR, ""+
""HK_HUB_CONTRACT, ""+
""MD_START_DT, ""+
""MD_SOURCE, ""+
""MD_SRC_SYSTEM, ""+
""MD_EXTRACT_DT, ""+
""CLIENT_ID, ""+
""CONTRACT_ID, ""+
""ADVISOR_ID, ""+
""MASTER_CODE, ""+
""PLN_MNEM, ""+
""MARKETPRODUCT_ID, ""+
""PAYMENT_DATE, ""+
""REVENUE, ""+
""REVENUE_TYPE, ""+
""REVENUE_SUBTYPE, ""+
""AUA) ""+
""(with t1 as (select   HK_HUB_PARTY_ROLE_ADVISOR as Link_Revenue_HK_HUB_PARTY_ROLE_ADVISOR, HK_HUB_CONTRACT	as Link_Revenue_HK_HUB_CONTRACT	,MD_SOURCE as  Link_Revenue_MD_SOURCE, ""+
""MD_SRC_SYSTEM	as Link_Revenue_MD_SRC_SYSTEM,MD_EXTRACT_DT	as Link_Revenue_MD_EXTRACT_DT, ACCOUNTID as	Link_Revenue_ACCOUNTID, ""+
""ADVISOR_ID as	Link_Revenue_ADVISOR_ID	, REPID as	Link_Revenue_REPID	, PROCESSDATE	Link_Revenue_PROCESSDATE,sum(REVENUE) as	Link_Revenue_O_REVENUE, ""+
""MD_START_DT as Link_Revenue_MD_START_DT , SOURCECODE as Link_Revenue_SOURCECODE from ""+
""DB_IAW_env_dwh.Revenues_rdv.LINK_REVENUE_RR_IAS_COMMISSION where MD_START_DT = TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') group by HK_HUB_CONTRACT	, MD_START_DT , ""+
""HK_HUB_PARTY_ROLE_ADVISOR, ""+    
""MD_EXTRACT_DT	, ""+
""MD_SOURCE, ""+
""MD_SRC_SYSTEM, ""+
""REPID	, ""+
""ADVISOR_ID	, ""+
""ACCOUNTID	, ""+
""PROCESSDATE	, ""+
""SOURCECODE ), t2 as ""+
""(select ""+
""HK_HUB_CONTRACT as VW_HK_HUB_CONTRACT ,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER as	VW_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER , ""+
""A_C_CLIENT as 	VW_A_C_CLIENT from DB_IAW_env_dwh.shared_bdv.VW_CLIENT_CONTRACT as mstr join ( ""+
""select HK_HUB_CONTRACT as dtls_hk_HUB_CONTRACT, max(md_start_dt) as max_start_dt from  DB_IAW_env_dwh.shared_bdv.VW_CLIENT_CONTRACT ""+
""where MD_START_DT <= TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') group by HK_HUB_CONTRACT ) as dtls ""+
""on HK_HUB_CONTRACT = dtls_hk_HUB_CONTRACT where MD_ACTIVE = ''A''), ""+
""t3 as (select * from t1 left outer join t2 on VW_HK_HUB_CONTRACT = Link_Revenue_HK_HUB_CONTRACT where Link_Revenue_SOURCECODE!=''EXP'' AND ""+
""Link_Revenue_SOURCECODE!=''TXR'' AND Link_Revenue_REPID!= ''SEAA'' AND  Link_Revenue_REPID!= ''SEZ9'' ""+
""AND Link_Revenue_REPID!= ''QYYY''), ""+
""t4 as (select ""+
""HK_Link as SAT_LINK_INVESTMENT_HK_LINK  from  DB_IAW_env_dwh.holdings_bdv.SAT_LINK_INVESTMENT as mstr join ( ""+
""select HK_LINK as dtls_HK_LINK, max(md_start_dt) as max_start_dt from   DB_IAW_env_dwh.holdings_bdv.SAT_LINK_INVESTMENT ""+
""where MD_START_DT <= TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') group by HK_LINK ) as dtls ""+
""on HK_LINK = dtls_hk_LINK where MD_ACTIVE = ''A''), ""+
""t5 as (select ""+
""AUA,HK_Link  as SAT_LINK_INVESTMENT_HK_LINK, md_src_system as Satlink_Investment_MD_SRC_SYSTEM  from  DB_IAW_env_dwh.holdings_bdv.SAT_LINK_INVESTMENT as mstr join ( ""+
""select HK_LINK as dtls_HK_LINK, max(md_start_dt) as max_start_dt from   DB_IAW_env_dwh.holdings_bdv.SAT_LINK_INVESTMENT ""+
""where MD_START_DT <= TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') group by HK_LINK ) as dtls ""+
""on HK_LINK = dtls_hk_LINK where MD_ACTIVE = ''A''), ""+
""t6 as(select Link_Investment_CONTRACT_ID, link_investment_master_code,SUM(AUA) as SUM_AUA, ""+
""link_investment_client_ID ""+
""from t5 as master join (select HK_LINK as dtls_HK_LINK, contract_Id as link_investment_HK_HUB_contract, master_code as link_investment_master_code, ""+
""HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER as Link_Investment_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, ""+
""HK_HUB_PARTY_ROLE_ADVISOR as Link_Investment_HK_HUB_PARTY_ROLE_ADVISOR,CONTRACT_ID as Link_Investment_CONTRACT_ID, ""+
""client_id as link_investment_client_ID  from DB_IAW_env_dwh.holdings_bdv.LINK_INVESTMENT) as dtls  on dtls_HK_LINK = SAT_LINK_INVESTMENT_HK_LINK ""+
""group by ""+
""Link_Investment_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	, ""+
""Link_Investment_HK_HUB_PARTY_ROLE_ADVISOR	, ""+
""Link_Investment_HK_HUB_CONTRACT	, ""+
""Link_Investment_CONTRACT_ID	, ""+
""Satlink_Investment_MD_SRC_SYSTEM, ""+
""Link_Investment_MASTER_CODE	, ""+
""Link_Investment_CLIENT_ID) ""+
""select VW_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, ""+
""Link_Revenue_HK_HUB_PARTY_ROLE_ADVISOR, ""+
""Link_Revenue_HK_HUB_CONTRACT, ""+
""TO_DATE(''"" + IO_START_DATE + ""'',''YYYY-MM-DD'') , ""+
""Link_Revenue_MD_SOURCE, ""+
""Link_Revenue_MD_SRC_SYSTEM, ""+
""Link_Revenue_MD_EXTRACT_DT, ""+
""VW_A_C_CLIENT, ""+
""Link_Revenue_ACCOUNTID, ""+
""Link_Revenue_ADVISOR_ID, ""+
""Link_Revenue_REPID, ""+
""-1, ""+
""-1, ""+
""Link_Revenue_PROCESSDATE, ""+
""Link_Revenue_O_REVENUE , ""+
""BUSINESS_RULES.UDF_CONV_BR_ALL_REVENUE_001(Link_Revenue_SOURCECODE)[''o_REVENUE_TYPE''], ""+
""BUSINESS_RULES.UDF_CONV_BR_ALL_REVENUE_001(Link_Revenue_SOURCECODE)[''o_REVENUE_SUBTYPE''], ""+
""SUM_AUA ""+
""from t3 left outer join t6 on Link_Revenue_ACCOUNTID = Link_Investment_CONTRACT_ID and ""+
""Link_Revenue_REPID	=	Link_Investment_MASTER_CODE and ""+
""VW_A_C_CLIENT	=	Link_Investment_CLIENT_ID ) "";
var INS_QUERY_ENV = INS_QUERY.replaceAll(""_env_"",""_""+ ENV + ""_"");
var sql_statement = snowflake.createStatement({
  sqlText: INS_QUERY_ENV
});
 var result_scan = sql_statement.execute(); 
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.REVENUES_BDV.SP_CONV_LOADBDV_RDV_INSURANCE_REVENUE_IAS_COMMISSION_TO_BDV_WT_LINK_REVENUE(""ENV"" VARCHAR(1000), ""IO_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
IO_DATA_START_DATE :=CHAR(39)||IO_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.REVENUES_BDV.WT_LINK_REVENUE WHERE MD_SRC_SYSTEM = ''''IAS-COMMISSION'''' AND REVENUE_TYPE=''''Insurance'''''';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.REVENUES_BDV.WT_LINK_REVENUE 
(
HK_HUB_PARTY_ROLE_ADVISOR, 
MD_START_DT, 
MD_SOURCE, 
MD_SRC_SYSTEM, 
MD_EXTRACT_DT, 
CLIENT_ID, 
CONTRACT_ID, 
ADVISOR_ID, 
MASTER_CODE, 
PLN_MNEM, 
MARKETPRODUCT_ID, 
PAYMENT_DATE,  
REVENUE_TYPE, 
REVENUE_SUBTYPE, 
ENTRY_TYPE,
STAMP,
INSURANCE_REVENUE,
TRANSID
) 
SELECT 
HK_HUB_REGISTERED_REPRESENTATIVE, 
TO_DATE(''||IO_DATA_START_DATE||'',''''YYYY-MM-DD''''),	 
MD_SOURCE, 
MD_SRC_SYSTEM, 
MD_EXTRACT_DT, 
''''-1'''', 
''''-1'''', 
USERID, 
REPID, 
''''-1'''', 
''''-1'''', 
PROCESSDATE, 
DECODE(SOURCECODE,
 ''''OFF'''' , ''''Trade commissions'''',
 ''''FXF'''' ,''''Fee based/Managed'''',
 ''''MGD'''' ,''''Fee based/Managed'''',
 ''''JRN'''' , ''''Trailers'''',
 ''''MNL'''',(CASE WHEN ENTRY_TYPE <> ''''INSREV'''' OR ENTRY_TYPE IS NULL THEN ''''Trade commissions'''' ELSE ''''Insurance'''' END),
 ''''TRD'''' ,''''Trade commissions'''',
 ''''Unkown'''' 
) AS REVENUE_TYPE, 
DECODE(SOURCECODE,
''''OFF'''' ,''''OffBook commission'''',
 ''''FXF'''' ,''''Fixed fees'''',
 ''''MGD'''' , ''''Managed'''',
 ''''JRN'''' ,''''Trailer fees and GIC'''',
 ''''MNL'''' ,(CASE WHEN ENTRY_TYPE <> ''''INSREV'''' OR ENTRY_TYPE IS NULL THEN ''''Others'''' ELSE ''''Insurance'''' END) , 
''''TRD'''' ,''''Trade commissions'''',
 ''''Unkown'''' 
)AS REVENUE_SUBTYPE, 
ENTRY_TYPE,
STAMP,
SUM(COMMISSIONCAD) AS INSURANCE_REVENUE,
TRANSID
FROM DB_IAW_''||ENV||''_DWH.REVENUES_RDV.LINK_INSURANCE_REVENUE_RR_IAS_COMMISSION
WHERE MD_START_DT = TO_DATE(''||IO_DATA_START_DATE||'', ''''YYYY-MM-DD'''') 
AND 
SOURCECODE!=''''EXP'''' AND SOURCECODE!=''''TXR'''' AND REPID!= ''''SEAA'''' AND  REPID!= ''''SEZ9''''
AND REPID!= ''''QYYY''''
GROUP BY 
HK_HUB_REGISTERED_REPRESENTATIVE, 
MD_EXTRACT_DT,
MD_SOURCE, 
MD_SRC_SYSTEM,
REPID,
USERID,
PROCESSDATE,
SOURCECODE,
ENTRY_TYPE,
STAMP,
TRANSID
     '';

INS_UPDATE :='' 
UPDATE REVENUES_BDV.WT_LINK_REVENUE 
SET 
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' 
, ''''#NULL#'''', ''''|'''' 
, COALESCE(TRIM(CLIENT_ID), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(PLN_MNEM), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(MARKETPRODUCT_ID), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(CONTRACT_ID), ''''#NULL#''''), ''''|'''' 
, ''''#NULL#'''', ''''|''''
, COALESCE(TRIM(PAYMENT_DATE), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(REVENUE_TYPE), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(REVENUE_SUBTYPE), ''''#NULL#''''), ''''|''''
, COALESCE(TRIM(ENTRY_TYPE), ''''#NULL#''''), ''''|''''
, COALESCE(TRIM(TO_VARCHAR(STAMP)), ''''#NULL#''''), ''''|''''
, COALESCE(TRIM(TO_VARCHAR(TRANSID)), ''''#NULL#'''')
))),
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = COALESCE (HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
HK_HUB_PARTY_ROLE_ADVISOR = COALESCE (HK_HUB_PARTY_ROLE_ADVISOR, ''''0''''),
HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES = COALESCE(HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES ,''''0''''),
HK_HUB_INVESTMENT_PRODUCT_TYPE = COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''''0'''') ,
HK_HUB_CONTRACT = COALESCE (HK_HUB_CONTRACT, ''''0''''),
AUA = COALESCE (AUA,0),
REVENUE = COALESCE (REVENUE,0)
WHERE MD_SRC_SYSTEM = ''''IAS-COMMISSION'''' AND REVENUE_TYPE=''''Insurance'''';
		'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.REVENUES_BDV.SP_CONV_LOADBDV_RDV_REVENUES_TO_BDV_WT_LINK_REVENUES(""ENV"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
TRUNC_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
TRUNC_QUERY := ''TRUNCATE TABLE DB_IAW_''||ENV||''_DWH.REVENUES_BDV.WT_LINK_REVENUE'';
INS_QUERY := ''INSERT INTO DB_IAW_''||ENV||''_DWH.REVENUES_BDV.WT_LINK_REVENUE(
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
HK_HUB_PARTY_ROLE_ADVISOR,
HK_HUB_CONTRACT,
MD_START_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
CLIENT_ID,
CONTRACT_ID,
ADVISOR_ID,
MASTER_CODE,
MARKETPRODUCT_ID,
PAYMENT_DATE,
REVENUE,
REVENUE_TYPE,
REVENUE_SUBTYPE)
(SELECT 
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
HK_HUB_PARTY_ROLE_ADVISOR,
HK_HUB_CONTRACT,
MD_START_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
CLIENT_ID,
CONTRACT_ID,
ADVISOR_ID,
MASTER_CODE,
MARKETPRODUCT_ID,
PAYMENT_DATE,
REVENUE,
REVENUE_TYPE,
REVENUE_SUBTYPE
FROM DB_IAW_''||ENV||''_DWH.REVENUES_BDV.VW_INITIAL_LOADING_WT_LINK_REVENUE)'';
UPD_QUERY := ''UPDATE DB_IAW_''||ENV||''_DWH.REVENUES_BDV.WT_LINK_REVENUE
SET
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''NULL''''), ''''|''''
, ''''NULL'''', ''''|''''
, COALESCE(TRIM(CLIENT_ID), ''''NULL''''), ''''|''''
, COALESCE(TRIM(MASTER_CODE), ''''NULL''''), ''''|''''
, COALESCE(TRIM(MARKETPRODUCT_ID), ''''NULL''''), ''''|''''
, COALESCE(TRIM(CONTRACT_ID), ''''NULL''''), ''''|''''
, ''''NULL'''', ''''|''''
, COALESCE(TRIM(PAYMENT_DATE), ''''NULL''''), ''''|''''
, COALESCE(TRIM(REVENUE_TYPE), ''''NULL''''), ''''|''''
, COALESCE(TRIM(REVENUE_SUBTYPE), ''''NULL'''')
))),
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = COALESCE (HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
HK_HUB_PARTY_ROLE_ADVISOR = COALESCE (HK_HUB_PARTY_ROLE_ADVISOR, ''''0''''),
HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES = ''''0'''',
HK_HUB_INVESTMENT_PRODUCT_TYPE = ''''0'''' ,
HK_HUB_CONTRACT = COALESCE (HK_HUB_CONTRACT, ''''0''''),
AUA = COALESCE (AUA,0)
WHERE MD_SRC_SYSTEM = ''''IAS-COMMISSION'''';'';
EXECUTE IMMEDIATE :TRUNC_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END

';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.REVENUES_BDV.SP_CONV_LOADBDV_RDV_REVENUE_IAS_COMMISSION_TO_BDV_WT_LINK_REVENUE(""ENV"" VARCHAR(16777216), ""IO_START_DATE"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
IO_START_DATE :=CHAR(39)||IO_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM REVENUES_BDV.WT_LINK_REVENUE WHERE MD_SRC_SYSTEM = ''''IAS-COMMISSION'''' AND REVENUE_TYPE<>''''Insurance'''''';
INS_INSERT := ''INSERT INTO REVENUES_BDV.WT_LINK_REVENUE (HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
HK_HUB_PARTY_ROLE_ADVISOR, 
HK_HUB_CONTRACT, 
MD_START_DT, 
MD_SOURCE, 
MD_SRC_SYSTEM, 
MD_EXTRACT_DT, 
CLIENT_ID, 
CONTRACT_ID, 
ADVISOR_ID, 
MASTER_CODE, 
PLN_MNEM, 
MARKETPRODUCT_ID, 
PAYMENT_DATE, 
REVENUE, 
REVENUE_TYPE, 
REVENUE_SUBTYPE, 
AUA,
ENTRY_TYPE,
STAMP) 
(with t1 as (select   HK_HUB_PARTY_ROLE_ADVISOR as Link_Revenue_HK_HUB_PARTY_ROLE_ADVISOR, HK_HUB_CONTRACT	as Link_Revenue_HK_HUB_CONTRACT	,MD_SOURCE as  Link_Revenue_MD_SOURCE, 
MD_SRC_SYSTEM	as Link_Revenue_MD_SRC_SYSTEM,MD_EXTRACT_DT	as Link_Revenue_MD_EXTRACT_DT, ACCOUNTID as	Link_Revenue_ACCOUNTID, 
ADVISOR_ID as	Link_Revenue_ADVISOR_ID	, REPID as	Link_Revenue_REPID	, PROCESSDATE	Link_Revenue_PROCESSDATE,sum(COMMISSION) as	Link_Revenue_O_REVENUE, 
MD_START_DT as Link_Revenue_MD_START_DT , SOURCECODE as Link_Revenue_SOURCECODE,ENTRY_TYPE as Link_Revenue_ENTRY_TYPE,STAMP as Link_Revenue_STAMP from 
Revenues_rdv.LINK_REVENUE_RR_IAS_COMMISSION where MD_START_DT = TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') group by HK_HUB_CONTRACT	, MD_START_DT , 
HK_HUB_PARTY_ROLE_ADVISOR,     
MD_EXTRACT_DT	, 
MD_SOURCE, 
MD_SRC_SYSTEM, 
REPID	, 
ADVISOR_ID	, 
ACCOUNTID	, 
PROCESSDATE	, 
SOURCECODE,
ENTRY_TYPE,
STAMP ), t2 as 
(select 
HK_HUB_CONTRACT as VW_HK_HUB_CONTRACT ,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER as	VW_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER , 
A_C_CLIENT as 	VW_A_C_CLIENT from shared_bdv.VW_CLIENT_CONTRACT as mstr join ( 
select HK_HUB_CONTRACT as dtls_hk_HUB_CONTRACT, max(md_start_dt) as max_start_dt from  shared_bdv.VW_CLIENT_CONTRACT 
where MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') group by HK_HUB_CONTRACT ) as dtls 
on HK_HUB_CONTRACT = dtls_hk_HUB_CONTRACT AND MD_START_DT = max_start_dt where MD_ACTIVE = ''''A''''), 
t3 as (select * from t1 left outer join t2 on VW_HK_HUB_CONTRACT = Link_Revenue_HK_HUB_CONTRACT where Link_Revenue_SOURCECODE!=''''EXP'''' AND 
Link_Revenue_SOURCECODE!=''''TXR'''' /*AND Link_Revenue_REPID!= ''''SEAA'''' AND  Link_Revenue_REPID!= ''''SEZ9'''' 
AND Link_Revenue_REPID!= ''''QYYY''''*/), 
t4 as (select 
*  from  holdings_bdv.SAT_LINK_INVESTMENT SLK  join ( 
select HK_LINK as dtls_HK_LINK, max(md_start_dt) as max_start_dt from   holdings_bdv.SAT_LINK_INVESTMENT 
where MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') group by HK_LINK ) as dtls 
on SLK.HK_LINK = dtls_hk_LINK AND SLK.MD_START_DT = max_start_dt where MD_ACTIVE = ''''A''''), 
t5 as (select 
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, HK_HUB_PARTY_ROLE_ADVISOR, HK_HUB_CONTRACT, CONTRACT_ID, MASTER_CODE, CLIENT_ID,t4.*  from  holdings_bdv.LINK_INVESTMENT LK join t4
on LK.HK_LINK = t4.HK_LINK ), 
t6 as(select CONTRACT_ID, MASTER_CODE,SUM(AUA) as SUM_AUA, 
CLIENT_ID
from t5  
group by 
t5.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	, 
t5.HK_HUB_PARTY_ROLE_ADVISOR	, 
t5.HK_HUB_CONTRACT	, 
t5.CONTRACT_ID	, 
t5.MD_SRC_SYSTEM, 
t5.MASTER_CODE	, 
t5.CLIENT_ID) 
select VW_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
Link_Revenue_HK_HUB_PARTY_ROLE_ADVISOR, 
Link_Revenue_HK_HUB_CONTRACT, 
TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') , 
Link_Revenue_MD_SOURCE, 
Link_Revenue_MD_SRC_SYSTEM, 
Link_Revenue_MD_EXTRACT_DT, 
VW_A_C_CLIENT, 
Link_Revenue_ACCOUNTID, 
Link_Revenue_ADVISOR_ID, 
Link_Revenue_REPID, 
-1, 
-1, 
Link_Revenue_PROCESSDATE, 
Link_Revenue_O_REVENUE , 

DECODE(Link_Revenue_SOURCECODE,
 ''''OFF'''' , ''''Trade commissions'''',
 ''''FXF'''' ,''''Fee based/Managed'''',
 ''''MGD'''' ,''''Fee based/Managed'''',
 ''''JRN'''' , ''''Trailers'''',
 ''''MNL'''',(CASE WHEN Link_Revenue_ENTRY_TYPE <> ''''INSREV'''' OR Link_Revenue_ENTRY_TYPE IS NULL THEN ''''Trade commissions'''' ELSE ''''Insurance'''' END),
 ''''TRD'''' ,''''Trade commissions'''',
 ''''Unkown'''' 
) AS REVENUE_TYPE, 
DECODE(Link_Revenue_SOURCECODE,
''''OFF'''' ,''''OffBook commission'''',
 ''''FXF'''' ,''''Fixed fees'''',
 ''''MGD'''' , ''''Managed'''',
 ''''JRN'''' ,''''Trailer fees and GIC'''',
 ''''MNL'''' ,(CASE WHEN Link_Revenue_ENTRY_TYPE <> ''''INSREV'''' OR Link_Revenue_ENTRY_TYPE IS NULL THEN ''''Others'''' ELSE ''''Insurance'''' END) , 
''''TRD'''' ,''''Trade commissions'''',
 ''''Unkown'''' 
)AS REVENUE_SUBTYPE, 

/*BUSINESS_RULES.UDF_CONV_BR_ALL_REVENUE_001(Link_Revenue_SOURCECODE)[''''o_REVENUE_TYPE''''], 
BUSINESS_RULES.UDF_CONV_BR_ALL_REVENUE_001(Link_Revenue_SOURCECODE)[''''o_REVENUE_SUBTYPE''''], */
SUM_AUA,
Link_Revenue_ENTRY_TYPE,
Link_Revenue_STAMP
from t3 left outer join t6 on Link_Revenue_ACCOUNTID = t6.CONTRACT_ID and 
Link_Revenue_REPID	=	t6.MASTER_CODE and 
VW_A_C_CLIENT	=	t6.CLIENT_ID ) '';


INS_UPDATE :='' UPDATE REVENUES_BDV.WT_LINK_REVENUE 
SET 
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' 
, ''''#NULL#'''', ''''|''''
, COALESCE(TRIM(CLIENT_ID), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(PLN_MNEM), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(MARKETPRODUCT_ID), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(CONTRACT_ID), ''''#NULL#''''), ''''|'''' 
, ''''#NULL#'''', ''''|''''
, COALESCE(TRIM(PAYMENT_DATE), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(REVENUE_TYPE), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(REVENUE_SUBTYPE), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(ENTRY_TYPE), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(TO_VARCHAR(STAMP)), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(TO_VARCHAR(TRANSID)), ''''#NULL#'''')
))),
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = COALESCE (HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
HK_HUB_PARTY_ROLE_ADVISOR = COALESCE (HK_HUB_PARTY_ROLE_ADVISOR, ''''0''''),
HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES = COALESCE(HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES ,''''0''''),
HK_HUB_INVESTMENT_PRODUCT_TYPE = COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''''0'''') ,
HK_HUB_CONTRACT = COALESCE (HK_HUB_CONTRACT, ''''0''''),
AUA = COALESCE (AUA,0),
INSURANCE_REVENUE= COALESCE (INSURANCE_REVENUE,0)
WHERE MD_SRC_SYSTEM = ''''IAS-COMMISSION'''' AND REVENUE_TYPE<>''''Insurance''''; '';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.REVENUES_BDV.SP_CONV_LOADBDV_RDV_REVENUE_PAYABLE_IAS_UNIVERIS_TO_BDV_WT_LINK_REVENUE(""ENV"" VARCHAR(16777216), ""IO_START_DATE"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
IO_START_DATE :=CHAR(39)||IO_START_DATE||CHAR(39);
INS_PRE_DEL := '' DELETE FROM REVENUES_BDV.WT_LINK_REVENUE WHERE MD_SRC_SYSTEM = ''''IAS-UNIVERIS'''' and MD_SOURCE LIKE ''''%REVENUE_PAYABLE%'''' '';
INS_INSERT := '' insert into REVENUES_BDV.WT_LINK_REVENUE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
HK_HUB_PARTY_ROLE_ADVISOR	, 
HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES, 
HK_HUB_INVESTMENT_PRODUCT_TYPE	, 
HK_HUB_CONTRACT	, 
MD_START_DT	, 
MD_SOURCE	, 
MD_SRC_SYSTEM	, 
MD_EXTRACT_DT	, 
CLIENT_ID	, 
CONTRACT_ID	, 
ADVISOR_ID	, 
MASTER_CODE	, 
PLN_MNEM	, 
MARKETPRODUCT_ID	, 
PAYMENT_DATE	, 
REVENUE	, 
REVENUE_TYPE	, 
REVENUE_SUBTYPE	, 
REVENUE_ID	, 
PLN_SYSID	) 
(with t1 as(select HK_HUB_INVESTMENT_PRODUCT_TYPE as link_revenue_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE, 
HK_HUB_CONTRACT as link_revenue_RR_HK_HUB_CONTRACT, 
dtls.MD_SOURCE as link_revenue_RR_MD_SOURCE, 
dtls.MD_SRC_SYSTEM as link_revenue_RR_MD_SRC_SYSTEM , 
mstr.MD_SRC_SYSTEM as    sat_link_md_src_system, 
IVR_SYSID as link_revenue_RR_IVR_SYSID, 
IVD_SYSID as   link_revenue_RR_IVD_SYSID, 
PAY_SYSID as link_revenue_RR_PAY_SYSID , 
PLN_SYSID as link_revenue_RR_PLN_SYSID , 
mstr.MD_EXTRACT_DT as sat_link_revenue_MD_EXTRACT_DT, 
REP_SYSID as   sat_link_revenue_REP_SYSID, 
COM_PRODUCTION_CD as  sat_link_revenue_COM_PRODUCTION_CD , 
payment_dt as  link_revenue_rr_payment_dt, 
process_dt as  link_revenue_rr_process_dt , 
COM_BEN_PYBL as  sat_link_revenue_COM_BEN_PYBL 
from revenues_rdv.SAT_LINK_REVENUE_PAYABLE_RR_IAS_UNIVERIS as mstr join revenues_rdv.LINK_REVENUE_RR as dtls on mstr.hk_link = dtls.hk_link
where mstr.MD_START_DT = TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') AND mstr.MD_ACTIVE = ''''A''''), 
t2 as(select * from t1 left outer join (select HK_HUB_CONTRACT, HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,contract_id from shared_rdv.LINK_INVESTMENT_CONTRACT_RR ) as dtls 
on HK_HUB_CONTRACT = link_revenue_RR_HK_HUB_CONTRACT), 
t3 as (select 
HK_HUB as SAT_REGISTERED_HK_HUB,REP_SYSID as sat_REP_SYSID  from  shared_rdv.SAT_REGISTERED_REPRESENTATIVE_IAS_UNIVERIS as mstr join ( 
select HK_HUB as dtls_HK_HUB, max(md_start_dt) as max_start_dt from   shared_rdv.SAT_REGISTERED_REPRESENTATIVE_IAS_UNIVERIS 
where MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') group by HK_HUB ) as dtls 
on HK_HUB = dtls_hk_HUB and MD_START_DT =  max_start_dt where MD_ACTIVE = ''''A''''), 
t4 as(  select * from t3 as master join (select HK_HUB as hub_hk_hub from  shared_rdv.HUB_REGISTERED_REPRESENTATIVE where CONTAINS(MD_SRC_SYSTEM, ''''IAS'''') ) as dtls 
on SAT_REGISTERED_HK_HUB = hub_hk_hub), 
t5 as(  select * from t2 left outer join t4 on sat_REP_SYSID = sat_link_revenue_REP_SYSID ), 
t6 as ( select 
HK_LINK as SAT_LINK_PARTY_RELATIONSHIP_HK_LINK,COMMISSIONPCT as sat_link_Commission_COMMISSIONPCT  from  shared_bdv.SAT_LINK_PARTY_RELATIONSHIP_SHARE as mstr join ( 
select HK_LINK as dtls_HK_LINK, max(md_start_dt) as max_start_dt from   shared_bdv.SAT_LINK_PARTY_RELATIONSHIP_SHARE 
where MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') group by HK_LINK) as dtls 
on HK_LINK = dtls_hk_LINK and MD_START_DT =  max_start_dt where MD_ACTIVE = ''''A''''), 
t7 as(  select * from t6 as master join (select HK_LINK, HK_HUB_PARTY_ROLE_ADVISOR as link_Commission_HK_HUB_PARTY_ROLE_ADVISOR, MASTER_CODE as  link_Commission_MASTER_CODE, 
HK_HUB_REGISTERED_REPRESENTATIVE as link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE 
from  shared_bdv.LINK_PARTY_RELATIONSHIP_SHARE where CONTAINS(MD_SRC_SYSTEM, ''''IAS'''') ) as dtls 
on SAT_LINK_PARTY_RELATIONSHIP_HK_LINK = HK_LINK), 
t8 as(select * from t5 left outer join t7 on  hub_hk_hub = link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE), 
t9 as (select 
HK_HUB as SAT_REF_COM_PRODUCTION_HK_HUB,COM_PRODUCTION_MNEM,COM_PRODUCTION_LONG_DESC  from  revenues_rdv.SAT_REF_COM_PRODUCTION as mstr join ( 
select HK_hub as dtls_HK_hub, max(md_start_dt) as max_start_dt from  revenues_rdv.SAT_REF_COM_PRODUCTION 
where MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') group by HK_HUB) as dtls 
on mstr.HK_HUB = dtls_hk_hub and MD_START_DT =  max_start_dt where MD_ACTIVE = ''''A''''), 
t10 as (select * from t9 join (select HK_HUB,COM_PRODUCTION_CD as Ref_com_prod_COM_PRODUCTION_CD from 
revenues_rdv.REF_COM_PRODUCTION) as dtls on SAT_REF_COM_PRODUCTION_HK_HUB = HK_HUB), 
t11 as (select * from t8 left outer join t10 on Ref_com_prod_COM_PRODUCTION_CD = sat_link_revenue_COM_PRODUCTION_CD ) 
select HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
link_Commission_HK_HUB_PARTY_ROLE_ADVISOR, 
Link_Invstment_cnt_HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES, 
link_revenue_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE, 
link_revenue_RR_HK_HUB_CONTRACT, 
TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD''''), 
link_revenue_RR_MD_SOURCE, 
link_revenue_RR_MD_SRC_SYSTEM, 
sat_link_revenue_MD_EXTRACT_DT, 
link_revenue_RR_IVR_SYSID, 
CONTRACT_ID	, 
link_Commission_MASTER_CODE, 
link_Commission_MASTER_CODE	, 
link_Invstment_cnt_PLN_MNEM	, 
link_revenue_RR_IVD_SYSID, 
IFF(link_revenue_rr_payment_dt is NULL, link_revenue_rr_process_dt,link_revenue_rr_payment_dt), 
sat_link_revenue_COM_BEN_PYBL * IFF(sat_link_Commission_COMMISSIONPCT IS NULL,100,sat_link_Commission_COMMISSIONPCT) * 0.01	 , 
BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_REVENUE_REVENUE_TYPE_002(sat_link_revenue_com_production_cd,sat_link_md_src_system), 
BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_REVENUE_REVENUE_SUBTYPE_003(COM_PRODUCTION_MNEM,COM_PRODUCTION_LONG_DESC), 
link_revenue_RR_PAY_SYSID, 
link_revenue_RR_PLN_SYSID from t11 left join (select HK_HUB_PARTY_ROLE_ADVISOR as Link_Invstment_cnt_HK_HUB_PARTY_ROLE_ADVISOR,  PLN_MNEM as Link_Invstment_cnt_PLN_MNEM, 
HK_HUB_CONTRACT as Link_Invstment_cnt_HK_HUB_CONTRACT,HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES as Link_Invstment_cnt_HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 
from   shared_bdv.LINK_INVESTMENT_CONTRACT where md_src_system = ''''IAS-UNIVERIS'''') 
on Link_Invstment_cnt_HK_HUB_PARTY_ROLE_ADVISOR = link_Commission_HK_HUB_PARTY_ROLE_ADVISOR  and 
Link_Invstment_cnt_HK_HUB_CONTRACT = link_revenue_RR_HK_HUB_CONTRACT 
where sat_link_revenue_COM_PRODUCTION_CD NOT in(''''02'''',''''20'''',''''21'''',''''22'''',''''23'''',''''24'''',''''25'''',''''26'''') ) ;''
;

INS_UPDATE :='' UPDATE REVENUES_BDV.WT_LINK_REVENUE
SET 
	HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' 
	, COALESCE (TO_VARCHAR(REVENUE_ID), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(CLIENT_ID), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(PLN_MNEM), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(MARKETPRODUCT_ID), ''''#NULL#''''), ''''|'''' 
	, ''''#NULL#'''', ''''|'''' 
	, COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(PAYMENT_DATE), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(REVENUE_TYPE), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(REVENUE_SUBTYPE), ''''#NULL#'''')
	))),
	HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''''0''''),
	HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''''0''''),
	HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''''0''''),
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES = COALESCE(HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES ,''''0'''')
    Where MD_SRC_SYSTEM = ''''IAS-UNIVERIS'''' AND MD_SOURCE LIKE ''''%REVENUE_PAYABLE%'''';
		'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.REVENUES_BDV.SP_CONV_LOADBDV_RDV_REVENUE_PAYABLE_INVESTIA_TO_BDV_WT_LINK_REVENUE(""ENV"" VARCHAR(16777216), ""IO_START_DATE"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
IO_START_DATE :=CHAR(39)||IO_START_DATE||CHAR(39);
INS_PRE_DEL := '' DELETE FROM REVENUES_BDV.WT_LINK_REVENUE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS''''
AND MD_SOURCE LIKE ''''%REVENUE_PAYABLE%'''''';
INS_INSERT := ''insert into revenues_bdv.WT_LINK_REVENUE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
HK_HUB_PARTY_ROLE_ADVISOR	, 
HK_HUB_INVESTMENT_PRODUCT_TYPE	, 
HK_HUB_CONTRACT	, 
MD_START_DT	, 
MD_SOURCE	, 
MD_SRC_SYSTEM	, 
MD_EXTRACT_DT	, 
CLIENT_ID	, 
CONTRACT_ID	, 
ADVISOR_ID	, 
MASTER_CODE	, 
MARKETPRODUCT_ID	, 
PAYMENT_DATE	, 
REVENUE	, 
REVENUE_TYPE	, 
REVENUE_SUBTYPE	, 
REVENUE_ID	, 
PLN_SYSID	) 
with t1 as (select HK_HUB_INVESTMENT_PRODUCT_TYPE as link_revenue_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE, 
HK_HUB_CONTRACT as link_revenue_RR_HK_HUB_CONTRACT, 
dtls.MD_SOURCE as link_revenue_RR_MD_SOURCE, 
COM_PRODUCTION_CD as sat_link_revenue_COM_PRODUCTION_CD , 
dtls.MD_SRC_SYSTEM as link_revenue_RR_MD_SRC_SYSTEM , 
mstr.MD_SRC_SYSTEM as    sat_link_md_src_system, 
IVR_SYSID as link_revenue_RR_IVR_SYSID, 
IVD_SYSID as   link_revenue_RR_IVD_SYSID, 
PAY_SYSID as link_revenue_RR_PAY_SYSID , 
PLN_SYSID as link_revenue_RR_PLN_SYSID , 
mstr.MD_EXTRACT_DT as sat_link_revenue_MD_EXTRACT_DT, 
REP_SYSID as   sat_link_revenue_REP_SYSID, 
payment_dt as  link_revenue_rr_payment_dt, 
COM_PYBL as  sat_link_revenue_COM_BEN_PYBL, 
process_dt as  link_revenue_rr_process_dt 
from revenues_rdv.SAT_LINK_REVENUE_PAYABLE_RR_INVESTIA_UNIVERIS as mstr join revenues_rdv.LINK_REVENUE_RR as dtls on mstr.hk_link = dtls.hk_link 
where mstr.MD_START_DT = TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') AND mstr.MD_ACTIVE = ''''A''''), 
t2 as(select max(slic.MD_START_DT) as md_max_start_dt,lic.hk_hub_contract as lic_hk_hub_contract from shared_rdv.SAT_LINK_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS as slic join shared_rdv.LINK_INVESTMENT_CONTRACT_RR as lic  on slic.hk_link = lic.hk_link 
where slic.MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') and lic.md_src_system = ''''INVESTIA-UNIVERIS'''' group by lic.hk_hub_contract), 
t3 as(select  HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER as lic2_Inv_Contract_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,lic.hk_hub_contract as lic2_hk_hub_contract , 
CONTRACT_ID as LIHCPass2_CONTRACT_ID,slic.md_active as slic2_md_active, slic.MD_START_DT as slic2_MD_START_DT  from shared_rdv.SAT_LINK_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS as slic join shared_rdv.LINK_INVESTMENT_CONTRACT_RR as lic  on slic.hk_link = lic.hk_link 
where slic.MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') and lic.md_src_system = ''''INVESTIA-UNIVERIS'''' ), 
t4 as (select * from t2 join t3 on lic_hk_hub_contract = lic2_hk_hub_contract AND md_max_start_dt=slic2_MD_START_DT where slic2_md_active = ''''A''''), 
t5 as (select * from t1 left outer join t4 on lic_hk_hub_contract = link_revenue_RR_HK_HUB_CONTRACT), 
t6 as (select 
HK_HUB as SAT_REGISTERED_HK_HUB,REP_SYSID as sat_REP_SYSID,md_active  from  shared_rdv.SAT_REGISTERED_REPRESENTATIVE_INVESTIA_UNIVERIS as mstr join ( 
select HK_HUB as dtls_HK_HUB, max(md_start_dt) as max_start_dt from   shared_rdv.SAT_REGISTERED_REPRESENTATIVE_INVESTIA_UNIVERIS 
where MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') group by HK_HUB ) as dtls 
on HK_HUB = dtls_hk_HUB and MD_START_DT =  max_start_dt where MD_ACTIVE = ''''A''''), 
t7 as(  select * from t6 as master join (select HK_HUB as hub_hk_hub from  shared_rdv.HUB_REGISTERED_REPRESENTATIVE where MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''' 
)  as dtls 
on SAT_REGISTERED_HK_HUB = hub_hk_hub where md_active = ''''A''''), 
t8 as(  select * from t5 left outer join t7 on sat_REP_SYSID = sat_link_revenue_REP_SYSID ), 
t9 as ( select MD_ACTIVE, 
HK_LINK as SAT_LINK_PARTY_RELATIONSHIP_HK_LINK,COMMISSIONPCT as sat_link_Commission_COMMISSIONPCT  from  shared_bdv.SAT_LINK_PARTY_RELATIONSHIP_SHARE as mstr join ( 
select HK_LINK as dtls_HK_LINK, max(md_start_dt) as max_start_dt from   shared_bdv.SAT_LINK_PARTY_RELATIONSHIP_SHARE 
where MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') group by HK_LINK) as dtls 
on HK_LINK = dtls_hk_LINK and MD_START_DT =  max_start_dt where MD_ACTIVE = ''''A''''), 
t10 as(  select * from t9 as master join (select HK_LINK, HK_HUB_PARTY_ROLE_ADVISOR as link_Commission_HK_HUB_PARTY_ROLE_ADVISOR, MASTER_CODE as  link_Commission_MASTER_CODE, 
HK_HUB_REGISTERED_REPRESENTATIVE as link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE,MD_SRC_SYSTEM 
from  shared_bdv.LINK_PARTY_RELATIONSHIP_SHARE where MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''' )  as dtls 
on SAT_LINK_PARTY_RELATIONSHIP_HK_LINK = HK_LINK where MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''' and MD_ACTIVE = ''''A'''' ), 
t11 as(select * from t8 left outer join t10 on  hub_hk_hub = link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE ), 
t12 as ( select hk_HUB as SAT_prod_HK_HUB,COM_PRODUCTION_MNEM,COM_PRODUCTION_LONG_DESC from  revenues_rdv.SAT_REF_COM_PRODUCTION_INVESTIA_UNIVERIS as mstr join ( 
select HK_HUB as dtls_HK_HUB, max(md_start_dt) as max_start_dt from  revenues_rdv.SAT_REF_COM_PRODUCTION_INVESTIA_UNIVERIS 
where MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') group by HK_HUB) as dtls 
on HK_HUB = dtls_hk_HUB and MD_START_DT =  max_start_dt where MD_ACTIVE = ''''A''''), 
t13 as (select * from t12 join (select * 
from revenues_rdv.REF_COM_PRODUCTION) on hk_HUB = SAT_prod_HK_HUB ) 
select lic2_Inv_Contract_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
link_Commission_HK_HUB_PARTY_ROLE_ADVISOR, 
link_revenue_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE, 
link_revenue_RR_HK_HUB_CONTRACT, 
TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD''''), 
link_revenue_RR_MD_SOURCE, 
link_revenue_RR_MD_SRC_SYSTEM, 
sat_link_revenue_MD_EXTRACT_DT, 
link_revenue_RR_IVR_SYSID, 
LIHCPass2_CONTRACT_ID, 
link_Commission_MASTER_CODE, 
link_Commission_MASTER_CODE, 
link_revenue_RR_IVD_SYSID, 
link_revenue_RR_PAYMENT_DT, 
sat_link_revenue_COM_BEN_PYBL * IFF(sat_link_Commission_COMMISSIONPCT IS NULL,100,sat_link_Commission_COMMISSIONPCT) * 0.01, 
BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_REVENUE_REVENUE_TYPE_002(sat_link_revenue_com_production_cd,sat_link_md_src_system), 
BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_REVENUE_REVENUE_SUBTYPE_003(COM_PRODUCTION_MNEM,COM_PRODUCTION_LONG_DESC), 
link_revenue_RR_PAY_SYSID, 
link_revenue_RR_PLN_SYSID 
from t11 left outer join t13 on sat_link_revenue_COM_PRODUCTION_CD = COM_PRODUCTION_CD 
where  sat_link_revenue_COM_PRODUCTION_CD NOT in(''''02'''',''''20'''',''''21'''',''''22'''',''''23'''',''''24'''',''''25'''',''''26'''') ;
'';
INS_UPDATE :='' UPDATE REVENUES_BDV.WT_LINK_REVENUE
SET 
	HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' 
	, COALESCE (TO_VARCHAR(REVENUE_ID), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(CLIENT_ID), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(PLN_MNEM), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(MARKETPRODUCT_ID), ''''#NULL#''''), ''''|'''' 
	, ''''#NULL#'''', ''''|'''' 
	, COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(PAYMENT_DATE), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(REVENUE_TYPE), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(REVENUE_SUBTYPE), ''''#NULL#'''')
	))),
	HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''''0''''),
	HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''''0''''),
	HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''''0''''),
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES = COALESCE(HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES ,''''0'''')
Where MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS''''
AND MD_SOURCE LIKE ''''%REVENUE_PAYABLE%'''';
		'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.REVENUES_BDV.SP_CONV_LOADBDV_RDV_REVENUE_PAYABLE_TO_BDV_WT_LINK_REVENUES(""ENV"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
DEL_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_DWH.REVENUES_BDV.WT_LINK_REVENUE WHERE MD_SRC_SYSTEM = ''''IAS-UNIVERIS''''
AND MD_SOURCE LIKE ''''%REVENUE_PAYABLE%'''';'';
INS_QUERY := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.REVENUES_BDV.WT_LINK_REVENUE
(
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
HK_HUB_PARTY_ROLE_ADVISOR,
HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES,
HK_HUB_INVESTMENT_PRODUCT_TYPE,
HK_HUB_CONTRACT,
MD_START_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
CLIENT_ID,
ADVISOR_ID,
MASTER_CODE,
PLN_MNEM,
MARKETPRODUCT_ID,
PAYMENT_DATE,
REVENUE,
REVENUE_TYPE,
REVENUE_SUBTYPE,
REVENUE_ID,
PLN_SYSID	)
(
SELECT
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
HK_HUB_PARTY_ROLE_ADVISOR,
HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
HK_HUB_INVESTMENT_PRODUCT_TYPE,
HK_HUB_CONTRACT,
MD_START_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
CLIENT_ID,
MASTER_CODE,
MASTER_CODE,
PLN_MNEM,
MARKETPRODUCT_ID,
PAYMENT_DT,
REVENUE,
REVENUE_TYPE,
REVENUE_SUBTYPE,
REVENUE_ID,
PLN_SYSID
FROM DB_IAW_''||ENV||''_DWH.REVENUES_BDV.VW_INITIAL_LOADING_INVESTIA_REVENUE_PAYABLE_WT_LINK_REVENUE)'';

UPD_QUERY := ''UPDATE DB_IAW_''||ENV||''_DWH.REVENUES_BDV.WT_LINK_REVENUE
SET
	HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''NULL''''), ''''|''''
	, COALESCE (TO_VARCHAR(REVENUE_ID), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(CLIENT_ID), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(MASTER_CODE), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(PLN_MNEM), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(MARKETPRODUCT_ID), ''''NULL''''), ''''|''''
	, ''''NULL'''', ''''|''''
	, COALESCE(TO_VARCHAR(PLN_SYSID), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(PAYMENT_DATE), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(REVENUE_TYPE), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(REVENUE_SUBTYPE), ''''NULL'''')
	))),
	HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''''0''''),
	HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''''0''''),
	HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''''0''''),
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES = COALESCE(HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES ,''''0'''')
Where MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS''''
AND MD_SOURCE LIKE ''''%REVENUE_PAYABLE%'''';'';


EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.REVENUES_BDV.SP_CONV_LOADBDV_RDV_TRAILER_FEES_IAS_UNIVERIS_TO_BDV_WT_LINK_REVENUE(""ENV"" VARCHAR(16777216), ""IO_START_DATE"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
IO_START_DATE :=CHAR(39)||IO_START_DATE||CHAR(39);
INS_PRE_DEL := '' DELETE FROM REVENUES_BDV.WT_LINK_REVENUE WHERE MD_SRC_SYSTEM = ''''IAS-UNIVERIS''''
AND MD_SOURCE LIKE ''''%PLN_SRF%''''; '';
INS_INSERT := ''insert into  revenues_bdv.WT_LINK_REVENUE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
HK_HUB_PARTY_ROLE_ADVISOR	, 
HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES	, 
HK_HUB_INVESTMENT_PRODUCT_TYPE	, 
HK_HUB_CONTRACT	, 
MD_START_DT, 
MD_SOURCE	, 
MD_SRC_SYSTEM, 
MD_EXTRACT_DT	, 
CLIENT_ID	, 
CONTRACT_ID, 
ADVISOR_ID	, 
MASTER_CODE	, 
PLN_MNEM	, 
MARKETPRODUCT_ID	, 
PAYMENT_DATE	, 
REVENUE	, 
REVENUE_TYPE	, 
REVENUE_SUBTYPE	, 
REVENUE_ID	) 
(with t1 as(select HK_HUB_INVESTMENT_PRODUCT_TYPE as link_revenue_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE, 
HK_HUB_CONTRACT as link_revenue_RR_HK_HUB_CONTRACT, 
dtls.MD_SOURCE as link_revenue_RR_MD_SOURCE, 
dtls.MD_SRC_SYSTEM as link_revenue_RR_MD_SRC_SYSTEM , 
mstr.MD_SRC_SYSTEM as    sat_link_md_src_system, 
IVR_SYSID as link_revenue_RR_IVR_SYSID, 
IVD_SYSID as   link_revenue_RR_IVD_SYSID, 
PAY_SYSID as link_revenue_RR_PAY_SYSID , 
PLN_SYSID as link_revenue_RR_PLN_SYSID , 
mstr.MD_EXTRACT_DT as sat_link_revenue_MD_EXTRACT_DT, 
REP_SYSID as   sat_link_revenue_REP_SYSID, 
COM_PYBL as  sat_link_revenue_COM_BEN_PYBL, 
EXCH_RATE as sat_link_revenue_EXCH_RATE, 
payment_dt as  link_revenue_rr_payment_dt, 
process_dt as  link_revenue_rr_process_dt, 
rep_code as sat_link_rep_cd 
from revenues_rdv.SAT_LINK_REVENUE_TRAILER_FEES_RR_IAS_UNIVERIS as mstr join revenues_rdv.LINK_REVENUE_RR as dtls 
on mstr.hk_link = dtls.hk_link 
where mstr.md_start_dt = TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') AND MSTR.MD_ACTIVE = ''''A'''' ), 
t2 as(select * from t1 left outer join (select HK_HUB_CONTRACT, HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,contract_id,client_id from shared_rdv.LINK_INVESTMENT_CONTRACT_RR ) as dtls 
on HK_HUB_CONTRACT = link_revenue_RR_HK_HUB_CONTRACT), 
t3 as (select 
HK_HUB as SAT_REGISTERED_HK_HUB,REP_SYSID as sat_REP_SYSID,MD_ACTIVE  from  shared_rdv.SAT_REGISTERED_REPRESENTATIVE_IAS_UNIVERIS as mstr join ( 
select HK_HUB as dtls_HK_HUB, max(md_start_dt) as max_start_dt from   shared_rdv.SAT_REGISTERED_REPRESENTATIVE_IAS_UNIVERIS 
where MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') group by HK_HUB ) as dtls 
on HK_HUB = dtls_hk_HUB and MD_START_DT =  max_start_dt where MD_ACTIVE = ''''A''''), 
t4 as(  select * from t3 as master join (select HK_HUB as hub_hk_hub,rr_CD as hub_rr_cd from  shared_rdv.HUB_REGISTERED_REPRESENTATIVE where CONTAINS(MD_SRC_SYSTEM, ''''IAS'''') ) as dtls 
on SAT_REGISTERED_HK_HUB = hub_hk_hub where MD_ACTIVE = ''''A''''), 
t5 as(select * from t2 left outer join t4 on sat_link_rep_cd = hub_rr_cd), 
t6 as ( select 
HK_LINK as SAT_LINK_PARTY_RELATIONSHIP_HK_LINK,COMMISSIONPCT as sat_link_Commission_COMMISSIONPCT  from  shared_bdv.SAT_LINK_PARTY_RELATIONSHIP_SHARE as mstr join ( 
select HK_LINK as dtls_HK_LINK, max(md_start_dt) as max_start_dt from   shared_bdv.SAT_LINK_PARTY_RELATIONSHIP_SHARE 
where MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') group by HK_LINK) as dtls 
on HK_LINK = dtls_hk_LINK and MD_START_DT =  max_start_dt where MD_ACTIVE = ''''A'''' and md_src_system = ''''IAS''''), 
t7 as(  select * from t6 as master join (select HK_LINK, HK_HUB_PARTY_ROLE_ADVISOR as link_Commission_HK_HUB_PARTY_ROLE_ADVISOR, MASTER_CODE as  link_Commission_MASTER_CODE, 
HK_HUB_REGISTERED_REPRESENTATIVE as link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE 
from  shared_bdv.LINK_PARTY_RELATIONSHIP_SHARE ) as dtls 
on SAT_LINK_PARTY_RELATIONSHIP_HK_LINK = HK_LINK), 
t8 as(select * from t5 left outer join t7 on  hub_hk_hub = link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE) 
select HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
link_Commission_HK_HUB_PARTY_ROLE_ADVISOR, 
link_Invstment_cnt_HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES, 
link_revenue_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE, 
link_revenue_RR_HK_HUB_CONTRACT, 
TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD''''), 
link_revenue_RR_MD_SOURCE, 
link_revenue_RR_MD_SRC_SYSTEM, 
sat_link_revenue_MD_EXTRACT_DT, 
CLIENT_ID, 
CONTRACT_ID, 
link_Commission_MASTER_CODE, 
link_Commission_MASTER_CODE	, 
Link_Inv_Contract_PLN_MNEM, 
link_revenue_RR_IVD_SYSID, 
link_revenue_RR_PAYMENT_DT, 
sat_link_revenue_COM_BEN_PYBL * IFF(sat_link_revenue_EXCH_RATE is NULL,1,sat_link_revenue_EXCH_RATE) * IFF(sat_link_Commission_COMMISSIONPCT IS NULL,100,sat_link_Commission_COMMISSIONPCT) * 0.01 , 
''''Trailers'''', 
''''Mutual Fund Servicing Commissions'''', 
link_revenue_RR_PAY_SYSID 
from t8 left outer join (select HK_HUB_PARTY_ROLE_ADVISOR as Link_Invstment_cnt_HK_HUB_PARTY_ROLE_ADVISOR ,PLN_MNEM as Link_Inv_Contract_PLN_MNEM, 
HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES as link_Invstment_cnt_HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 
,HK_HUB_CONTRACT as Link_Invstment_cnt_HK_HUB_CONTRACT from shared_bdv.LINK_INVESTMENT_CONTRACT ) 
on Link_Invstment_cnt_HK_HUB_PARTY_ROLE_ADVISOR = link_Commission_HK_HUB_PARTY_ROLE_ADVISOR  and 
Link_Invstment_cnt_HK_HUB_CONTRACT = link_revenue_RR_HK_HUB_CONTRACT ) ;'';

INS_UPDATE :='' 
UPDATE REVENUES_BDV.WT_LINK_REVENUE
SET 
	HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' 
	, COALESCE (TO_VARCHAR(REVENUE_ID), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(CLIENT_ID), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(PLN_MNEM), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(MARKETPRODUCT_ID), ''''#NULL#''''), ''''|'''' 
	, ''''#NULL#'''', ''''|'''' 
	, COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(PAYMENT_DATE), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(REVENUE_TYPE), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(REVENUE_SUBTYPE), ''''#NULL#'''')
	))),
	HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''''0''''),
	HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''''0''''),
	HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''''0''''),
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES =  COALESCE(HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES ,''''0'''')
Where MD_SRC_SYSTEM = ''''IAS-UNIVERIS''''
AND MD_SOURCE LIKE ''''%PLN_SRF%'''';
		'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.REVENUES_BDV.SP_CONV_LOADBDV_RDV_TRAILER_FEES_INVESTIA_TO_BDV_WT_LINK_REVENUE(""ENV"" VARCHAR(16777216), ""IO_START_DATE"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
IO_START_DATE :=CHAR(39)||IO_START_DATE||CHAR(39);
INS_PRE_DEL := '' DELETE FROM REVENUES_BDV.WT_LINK_REVENUE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS''''
AND MD_SOURCE LIKE ''''%PLN_SRF%''''; '';
INS_INSERT := ''insert into revenues_bdv.WT_LINK_REVENUE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
HK_HUB_PARTY_ROLE_ADVISOR	, 
HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES, 
HK_HUB_INVESTMENT_PRODUCT_TYPE	, 
HK_HUB_CONTRACT	, 
MD_START_DT	, 
MD_SOURCE	, 
MD_SRC_SYSTEM	, 
MD_EXTRACT_DT	, 
CLIENT_ID	, 
CONTRACT_ID	, 
ADVISOR_ID	, 
MASTER_CODE	, 
PLN_MNEM	, 
MARKETPRODUCT_ID	, 
PAYMENT_DATE	, 
REVENUE	, 
REVENUE_TYPE	, 
REVENUE_SUBTYPE	, 
PLN_SYSID ,
REVENUE_ID 
		) 
with t1 as(select HK_HUB_INVESTMENT_PRODUCT_TYPE as link_revenue_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE, 
HK_HUB_CONTRACT as link_revenue_RR_HK_HUB_CONTRACT, 
dtls.MD_SOURCE as link_revenue_RR_MD_SOURCE, 
dtls.MD_SRC_SYSTEM as link_revenue_RR_MD_SRC_SYSTEM , 
mstr.MD_SRC_SYSTEM as    sat_link_md_src_system, 
IVR_SYSID as link_revenue_RR_IVR_SYSID, 
IVD_SYSID as   link_revenue_RR_IVD_SYSID, 
PAY_SYSID as link_revenue_RR_PAY_SYSID , 
PLN_SYSID as link_revenue_RR_PLN_SYSID , 
mstr.MD_EXTRACT_DT as sat_link_revenue_MD_EXTRACT_DT, 
REP_SYSID as   sat_link_revenue_REP_SYSID, 
payment_dt as  link_revenue_rr_payment_dt, 
COM_PYBL as  sat_link_revenue_COM_BEN_PYBL, 
EXCH_RATE as sat_link_revenue_EXCH_RATE, 
process_dt as  link_revenue_rr_process_dt, 
REP_CODE as  sat_link_revenue_REP_CODE 
from revenues_rdv.SAT_LINK_REVENUE_TRAILER_FEES_RR_INVESTIA_UNIVERIS as mstr join revenues_rdv.LINK_REVENUE_RR as dtls on mstr.hk_link = dtls.hk_link 
where mstr.MD_START_DT = TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') AND mstr.MD_ACTIVE = ''''A''''), 
t2 as(select max(slic.MD_START_DT) as md_max_start_dt,lic.hk_hub_contract as lic_hk_hub_contract from shared_rdv.SAT_LINK_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS as slic join shared_rdv.LINK_INVESTMENT_CONTRACT_RR as lic  on slic.hk_link = lic.hk_link 
where slic.MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') and lic.md_src_system = ''''INVESTIA-UNIVERIS'''' group by lic.hk_hub_contract), 
t3 as(select  md_start_dt,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER as lic2_Inv_Contract_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,lic.hk_hub_contract as lic2_hk_hub_contract , 
CONTRACT_ID as LIHCPass2_CONTRACT_ID, client_ID as LIHCPass2_client_ID,slic.md_active as slic2_md_active from shared_rdv.SAT_LINK_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS as slic join shared_rdv.LINK_INVESTMENT_CONTRACT_RR as lic  on slic.hk_link = lic.hk_link 
where slic.MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') and lic.md_src_system = ''''INVESTIA-UNIVERIS'''' ), 
t4 as (select * from t2 join t3 on lic_hk_hub_contract = lic2_hk_hub_contract and md_max_start_dt = md_start_dt where slic2_md_active = ''''A''''), 
t5 as (select * from t1 left outer join t4 on lic_hk_hub_contract = link_revenue_RR_HK_HUB_CONTRACT), 
t6 as (select 
HK_HUB as SAT_REGISTERED_HK_HUB,REP_SYSID as sat_REP_SYSID,md_active  from  shared_rdv.SAT_REGISTERED_REPRESENTATIVE_INVESTIA_UNIVERIS as mstr join ( 
select HK_HUB as dtls_HK_HUB, max(md_start_dt) as max_start_dt from   shared_rdv.SAT_REGISTERED_REPRESENTATIVE_INVESTIA_UNIVERIS 
where MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') group by HK_HUB ) as dtls 
on HK_HUB = dtls_hk_HUB and MD_START_DT =  max_start_dt where MD_ACTIVE = ''''A''''), 
t7 as(  select * from t6 as master join (select HK_HUB as hub_hk_hub,rr_CD as hub_rr_cd from  shared_rdv.HUB_REGISTERED_REPRESENTATIVE where MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''' 
)  as dtls 
on SAT_REGISTERED_HK_HUB = hub_hk_hub where md_active = ''''A''''), 
t8 as(  select * from t5 left outer join t7 on hub_rr_cd = sat_link_revenue_REP_CODE ), 
t9 as ( select MD_ACTIVE, 
HK_LINK as SAT_LINK_PARTY_RELATIONSHIP_HK_LINK,COMMISSIONPCT as sat_link_Commission_COMMISSIONPCT  from  shared_bdv.SAT_LINK_PARTY_RELATIONSHIP_SHARE as mstr join ( 
select HK_LINK as dtls_HK_LINK, max(md_start_dt) as max_start_dt from   shared_bdv.SAT_LINK_PARTY_RELATIONSHIP_SHARE 
where MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') group by HK_LINK) as dtls 
on HK_LINK = dtls_hk_LINK and MD_START_DT =  max_start_dt where MD_ACTIVE = ''''A''''), 
t10 as(  select * from t9 as master join (select HK_LINK, HK_HUB_PARTY_ROLE_ADVISOR as link_Commission_HK_HUB_PARTY_ROLE_ADVISOR, MASTER_CODE as  link_Commission_MASTER_CODE, 
HK_HUB_REGISTERED_REPRESENTATIVE as link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE,MD_SRC_SYSTEM 
from  shared_bdv.LINK_PARTY_RELATIONSHIP_SHARE where MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''' )  as dtls 
on SAT_LINK_PARTY_RELATIONSHIP_HK_LINK = HK_LINK where MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''' and MD_ACTIVE = ''''A'''' ), 
t11 as(select * from t8 left outer join t10 on  hub_hk_hub = link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE ), 
t12 as ( select hk_link as SAT_LINK_inv_hk_link from  shared_bdv.SAT_LINK_INVESTMENT_CONTRACT as mstr join ( 
select HK_LINK as dtls_HK_LINK, max(md_start_dt) as max_start_dt from   shared_bdv.SAT_LINK_INVESTMENT_CONTRACT 
where MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') group by HK_LINK) as dtls 
on HK_LINK = dtls_hk_LINK and MD_START_DT =  max_start_dt where MD_ACTIVE = ''''A''''), 
t13 as (select * from t12 join (select hk_LINK,HK_HUB_PARTY_ROLE_ADVISOR as Link_Invstment_cnt_HK_HUB_PARTY_ROLE_ADVISOR ,PLN_MNEM as Link_Inv_Contract_PLN_MNEM, 
HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES as Link_Inv_Contract_HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 
,HK_HUB_CONTRACT as Link_Invstment_cnt_HK_HUB_CONTRACT 
,  HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER as Link_Inv_Contract_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 
,CLIENT_ID as Link_Inv_Contract_Link_Inv_Contract_CLIENT_ID 
,CONTRACT_ID as Link_Inv_Contract_Link_Inv_CONTRACT_ID 
from shared_bdv.LINK_INVESTMENT_CONTRACT) on hk_LINK = SAT_LINK_inv_hk_link) 
select Link_Inv_Contract_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
link_Commission_HK_HUB_PARTY_ROLE_ADVISOR, 
Link_Inv_Contract_HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES, 
link_revenue_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE, 
link_revenue_RR_HK_HUB_CONTRACT, 
TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD''''), 
link_revenue_RR_MD_SOURCE, 
link_revenue_RR_MD_SRC_SYSTEM, 
sat_link_revenue_MD_EXTRACT_DT, 
LIHCPass2_client_ID, 
LIHCPass2_CONTRACT_ID, 
link_Commission_MASTER_CODE, 
link_Commission_MASTER_CODE, 
Link_Inv_Contract_PLN_MNEM, 
link_revenue_RR_IVD_SYSID, 
link_revenue_RR_PAYMENT_DT, 
sat_link_revenue_COM_BEN_PYBL * IFF(sat_link_revenue_EXCH_RATE is NULL,1,sat_link_revenue_EXCH_RATE) * IFF(sat_link_Commission_COMMISSIONPCT IS NULL,100,sat_link_Commission_COMMISSIONPCT) * 0.01	 , 
''''Trailers'''', 
''''Mutual Fund Servicing Commissions'''', 
link_revenue_RR_PLN_SYSID, 
link_revenue_RR_PAY_SYSID 
from t11 left outer join t13 on Link_Invstment_cnt_HK_HUB_CONTRACT = link_revenue_RR_HK_HUB_CONTRACT and 
Link_Invstment_cnt_HK_HUB_PARTY_ROLE_ADVISOR = link_commission_HK_HUB_PARTY_ROLE_ADVISOR ;
'';

INS_UPDATE :='' 
UPDATE REVENUES_BDV.WT_LINK_REVENUE
SET 
	HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' 
	, COALESCE (TO_VARCHAR(REVENUE_ID), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(CLIENT_ID), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(PLN_MNEM), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(MARKETPRODUCT_ID), ''''#NULL#''''), ''''|'''' 
	, ''''#NULL#'''', ''''|'''' 
	, COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#''''),''''|''''
	, COALESCE(TRIM(PAYMENT_DATE), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(REVENUE_TYPE), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(REVENUE_SUBTYPE), ''''#NULL#'''')
	))),
	HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''''0''''),
	HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''''0''''),
	HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''''0''''),
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES =  COALESCE(HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES ,''''0'''')
Where MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS''''
AND MD_SOURCE LIKE ''''%PLN_SRF%'''';
		'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.REVENUES_BDV.SP_CONV_LOADBDV_RDV_TRAILER_FEES_TO_BDV_WT_LINK_REVENUES(""ENV"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
DEL_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_DWH.REVENUES_BDV.WT_LINK_REVENUE WHERE MD_SRC_SYSTEM = ''''IAS-UNIVERIS''''
AND MD_SOURCE LIKE ''''%PLN_SRF%'''';'';
INS_QUERY := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.REVENUES_BDV.WT_LINK_REVENUE(
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
HK_HUB_PARTY_ROLE_ADVISOR,
HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES,
HK_HUB_INVESTMENT_PRODUCT_TYPE,
HK_HUB_CONTRACT,
MD_START_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
CLIENT_ID,
CONTRACT_ID,
ADVISOR_ID,
MASTER_CODE,
PLN_MNEM,
MARKETPRODUCT_ID,
PAYMENT_DATE,
REVENUE,
REVENUE_TYPE,
REVENUE_SUBTYPE,
REVENUE_ID,
PLN_SYSID)
(
SELECT
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
HK_HUB_PARTY_ROLE_ADVISOR,
HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
HK_HUB_INVESTMENT_PRODUCT_TYPE,
HK_HUB_CONTRACT,
MD_START_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
IVR_SYSID,
CONTRACT_ID,
ADVISOR_ID,
MASTER_CODE,
PLN_MNEM,
MARKETPRODUCT_ID,
PAYMENT_DT,
REVENUE,
REVENUE_TYPE,
REVENUE_SUBTYPE,
REVENUE_ID,
PLN_SYSID
FROM DB_IAW_''||ENV||''_DWH.REVENUES_BDV.VW_INITIAL_LOADING_INVESTIA_TRAILER_FEES_WT_LINK_REVENUE)'';

UPD_QUERY := ''UPDATE DB_IAW_''||ENV||''_DWH.REVENUES_BDV.WT_LINK_REVENUE
SET
	HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''NULL''''), ''''|''''
	, COALESCE (TO_VARCHAR(REVENUE_ID), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(CLIENT_ID), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(MASTER_CODE), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(PLN_MNEM), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(MARKETPRODUCT_ID), ''''NULL''''), ''''|''''
	, ''''NULL'''', ''''|''''
	, COALESCE(TO_VARCHAR(PLN_SYSID), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(PAYMENT_DATE), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(REVENUE_TYPE), ''''NULL''''), ''''|''''
	, COALESCE(TRIM(REVENUE_SUBTYPE), ''''NULL'''')
	))),
	HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''''0''''),
	HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''''0''''),
	HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''''0''''),
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES =  COALESCE(HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES ,''''0'''')
Where MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS''''
AND MD_SOURCE LIKE ''''%PLN_SRF%'''';'';


EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.REVENUES_BDV.SP_CONV_LOADBDV_RDV_WRAP_FEES_INVESTIA_TO_BDV_WT_LINK_REVENUE(""ENV"" VARCHAR(16777216), ""IO_START_DATE"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
IO_START_DATE :=CHAR(39)||IO_START_DATE||CHAR(39);
INS_PRE_DEL := '' DELETE FROM REVENUES_BDV.WT_LINK_REVENUE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS''''
AND MD_SOURCE LIKE ''''%WRAP_FEE%''''; '';
INS_INSERT := ''insert into revenues_bdv.WT_LINK_REVENUE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
HK_HUB_PARTY_ROLE_ADVISOR	, 
HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES, 
HK_HUB_INVESTMENT_PRODUCT_TYPE	, 
HK_HUB_CONTRACT	, 
MD_START_DT	, 
MD_SOURCE	, 
MD_SRC_SYSTEM	, 
MD_EXTRACT_DT	, 
CLIENT_ID	, 
CONTRACT_ID	, 
ADVISOR_ID	, 
MASTER_CODE	, 
PLN_MNEM	, 
MARKETPRODUCT_ID	, 
PAYMENT_DATE	, 
REVENUE	, 
REVENUE_TYPE	, 
REVENUE_SUBTYPE	, 
REVENUE_ID	, 
PLN_SYSID	) 
with t1 as (select HK_HUB_INVESTMENT_PRODUCT_TYPE as link_revenue_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE, 
HK_HUB_CONTRACT as link_revenue_RR_HK_HUB_CONTRACT, 
dtls.MD_SOURCE as link_revenue_RR_MD_SOURCE, 
dtls.MD_SRC_SYSTEM as link_revenue_RR_MD_SRC_SYSTEM , 
mstr.MD_SRC_SYSTEM as    sat_link_md_src_system, 
IVR_SYSID as link_revenue_RR_IVR_SYSID, 
IVD_SYSID as   link_revenue_RR_IVD_SYSID, 
PAY_SYSID as link_revenue_RR_PAY_SYSID , 
PLN_SYSID as link_revenue_RR_PLN_SYSID , 
mstr.MD_EXTRACT_DT as sat_link_revenue_MD_EXTRACT_DT, 
REP_SYSID as   sat_link_revenue_REP_SYSID, 
payment_dt as  link_revenue_rr_payment_dt, 
FEE_AMT as    sat_link_revenue_FEE_AMT, 
process_dt as  link_revenue_rr_process_dt 
from revenues_rdv.SAT_LINK_REVENUE_WRAP_FEE_RR_INVESTIA_UNIVERIS as mstr join revenues_rdv.LINK_REVENUE_RR as dtls on mstr.hk_link = dtls.hk_link 
where mstr.MD_START_DT = TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') AND mstr.MD_ACTIVE = ''''A''''  AND STATUS_CD = ''''F'''' AND FISCAL_SYSID >= 201901 AND dtls.md_src_system=''''INVESTIA-UNIVERIS''''), 
t2 as(select max(slic.MD_START_DT) as md_max_start_dt,lic.hk_hub_contract as lic_hk_hub_contract from shared_rdv.SAT_LINK_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS as slic join shared_rdv.LINK_INVESTMENT_CONTRACT_RR as lic  on slic.hk_link = lic.hk_link 
where slic.MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') and lic.md_src_system = ''''INVESTIA-UNIVERIS'''' group by lic.hk_hub_contract), 
t3 as(select lic.hk_hub_contract as lic2_hk_hub_contract , slic.md_active as slic2_md_active, slic.MD_START_DT as slic2_md_start_dt from shared_rdv.SAT_LINK_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS as slic join shared_rdv.LINK_INVESTMENT_CONTRACT_RR as lic  on slic.hk_link = lic.hk_link 
where slic.MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') and lic.md_src_system = ''''INVESTIA-UNIVERIS'''' ), 
t4 as (select * from t2 join t3 on lic_hk_hub_contract = lic2_hk_hub_contract AND md_max_start_dt=slic2_md_start_dt  where slic2_md_active = ''''A''''), 
t5 as (select * from t1 left outer join t4 on lic_hk_hub_contract = link_revenue_RR_HK_HUB_CONTRACT), 
t6 as (select 
HK_HUB as SAT_REGISTERED_HK_HUB,REP_SYSID as sat_REP_SYSID  from  shared_rdv.SAT_REGISTERED_REPRESENTATIVE_INVESTIA_UNIVERIS as mstr join ( 
select HK_HUB as dtls_HK_HUB, max(md_start_dt) as max_start_dt from   shared_rdv.SAT_REGISTERED_REPRESENTATIVE_INVESTIA_UNIVERIS 
where MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') group by HK_HUB ) as dtls 
on HK_HUB = dtls_hk_HUB and MD_START_DT =  max_start_dt where MD_ACTIVE = ''''A''''), 
t7 as(  select * from t6 as master join (select HK_HUB as hub_hk_hub from  shared_rdv.HUB_REGISTERED_REPRESENTATIVE where MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''')  as dtls 
on SAT_REGISTERED_HK_HUB = hub_hk_hub), 
t8 as(  select * from t5 left outer join t7 on sat_REP_SYSID = sat_link_revenue_REP_SYSID ), 
t9 as ( select 
HK_LINK as SAT_LINK_PARTY_RELATIONSHIP_HK_LINK,COMMISSIONPCT as sat_link_Commission_COMMISSIONPCT  from  shared_bdv.SAT_LINK_PARTY_RELATIONSHIP_SHARE as mstr join ( 
select HK_LINK as dtls_HK_LINK, max(md_start_dt) as max_start_dt from   shared_bdv.SAT_LINK_PARTY_RELATIONSHIP_SHARE 
where MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') group by HK_LINK) as dtls 
on HK_LINK = dtls_hk_LINK and MD_START_DT =  max_start_dt where MD_ACTIVE = ''''A''''), 
t10 as(  select * from t9 as master join (select HK_LINK, HK_HUB_PARTY_ROLE_ADVISOR as link_Commission_HK_HUB_PARTY_ROLE_ADVISOR, MASTER_CODE as  link_Commission_MASTER_CODE, 
HK_HUB_REGISTERED_REPRESENTATIVE as link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE 
from  shared_bdv.LINK_PARTY_RELATIONSHIP_SHARE where MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''')  as dtls 
on SAT_LINK_PARTY_RELATIONSHIP_HK_LINK = HK_LINK), 
t11 as(select * from t8 left outer join t10 on  hub_hk_hub = link_Commission_HK_HUB_REGISTERED_REPRESENTATIVE), 
t12 as ( select hk_link as SAT_LINK_inv_hk_link from  shared_bdv.SAT_LINK_INVESTMENT_CONTRACT as mstr join ( 
select HK_LINK as dtls_HK_LINK, max(md_start_dt) as max_start_dt from   shared_bdv.SAT_LINK_INVESTMENT_CONTRACT 
where MD_START_DT <= TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD'''') group by HK_LINK) as dtls 
on HK_LINK = dtls_hk_LINK and MD_START_DT =  max_start_dt where MD_ACTIVE = ''''A''''), 
t13 as (select * from t12 join (select hk_LINK,HK_HUB_PARTY_ROLE_ADVISOR as Link_Invstment_cnt_HK_HUB_PARTY_ROLE_ADVISOR ,PLN_MNEM as Link_Inv_Contract_PLN_MNEM, 
HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES as Link_Inv_Contract_HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 
,HK_HUB_CONTRACT as Link_Invstment_cnt_HK_HUB_CONTRACT 
,  HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER as Link_Inv_Contract_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 
,CLIENT_ID as Link_Inv_Contract_Link_Inv_Contract_CLIENT_ID 
,CONTRACT_ID as Link_Inv_Contract_Link_Inv_CONTRACT_ID 
from shared_bdv.LINK_INVESTMENT_CONTRACT) on hk_LINK = SAT_LINK_inv_hk_link) 
select Link_Inv_Contract_HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
link_Commission_HK_HUB_PARTY_ROLE_ADVISOR, 
Link_Inv_Contract_HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES, 
link_revenue_RR_HK_HUB_INVESTMENT_PRODUCT_TYPE, 
link_revenue_RR_HK_HUB_CONTRACT, 
TO_DATE(''||IO_START_DATE||'',''''YYYY-MM-DD''''), 
link_revenue_RR_MD_SOURCE, 
link_revenue_RR_MD_SRC_SYSTEM, 
sat_link_revenue_MD_EXTRACT_DT, 
Link_Inv_Contract_Link_Inv_Contract_CLIENT_ID, 
Link_Inv_Contract_Link_Inv_CONTRACT_ID, 
link_Commission_MASTER_CODE, 
link_Commission_MASTER_CODE, 
Link_Inv_Contract_PLN_MNEM, 
link_revenue_RR_IVD_SYSID, 
link_revenue_RR_PAYMENT_DT, 
IFF(sat_link_Commission_COMMISSIONPCT IS NULL,1,sat_link_Commission_COMMISSIONPCT/100) * sat_link_revenue_FEE_AMT	 , 
''''Fee based/Managed'''', 
''''Fee for Service'''', 
link_revenue_RR_PAY_SYSID,
link_revenue_RR_PLN_SYSID 
from t11 left outer join t13 on Link_Invstment_cnt_HK_HUB_CONTRACT = link_revenue_RR_HK_HUB_CONTRACT and 
Link_Invstment_cnt_HK_HUB_PARTY_ROLE_ADVISOR = link_commission_HK_HUB_PARTY_ROLE_ADVISOR ;
'';

INS_UPDATE :='' 
UPDATE REVENUES_BDV.WT_LINK_REVENUE
SET 
	HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' 
	, COALESCE (TO_VARCHAR(REVENUE_ID), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(CLIENT_ID), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(PLN_MNEM), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(MARKETPRODUCT_ID), ''''#NULL#''''), ''''|'''' 
	, ''''#NULL#'''', ''''|'''' 
	, COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#''''), ''''|''''
	, COALESCE(TRIM(PAYMENT_DATE), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(REVENUE_TYPE), ''''#NULL#''''), ''''|'''' 
	, COALESCE(TRIM(REVENUE_SUBTYPE), ''''#NULL#'''')
	))),
	HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''''0''''),
	HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''''0''''),
	HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''''0''''),
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
	HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES =  COALESCE(HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES ,''''0'''')
Where MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS''''
AND MD_SOURCE LIKE ''''%WRAP_FEE%'''';
		'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.REVENUES_BDV.SP_CONV_LOADSTG_PSA_INVESTIA_UNIVERIS_TO_STG_CLIENTS(""ENV"" VARCHAR(1000), ""IO_PATH"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
DEL_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.ACCOUNT_HOLDER WHERE 1=1;'';
INS_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.ACCOUNT_HOLDER
(
	MD_START_DT,
	MD_SOURCE,
	IVR_SYSID,
	REP_SYSID,
	RECIPIENT_DESC_ENG,
	RECIPIENT_DESC_FRE,
	CORP_CD,
	IVR_ST_NAME_ENG,
	IVR_ST_NAME_FRE,
	IVR_REG_2,
	LANG_CD,
	IVR_RES_CD,
	IVR_SETUP_DT,
	IVR_STOP_DT,
	IVR_FRGN_CTNT,
	IVR_HOLD_MAIL,
	IVR_INC_ADR,
	IVR_STMT_FREQ,
	IVR_STMT_TYPE,
	IVR_STMT_DT,
	IVR_OLD_DLR,
	SALARY_DESC,
	IVR_KYC_DT,
	IVR_PRIM_BDT,
	MD_EXTRACT_DT,
	MD_SRC_SYSTEM,
	CREATE_DT
)
FROM
	(
	SELECT
		TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6,t.$7, t.$8,t.$9, t.$10,
		t.$11, t.$12, t.$13, t.$14, t.$15, t.$16,t.$17, t.$18,t.$19, t.$20, t.$21,t.$22, t.$23,t.$24, t.$25
	FROM
		@DATALAKE.''||IO_PATH||'' T
	) pattern =''''.*CLIENTS_.*csv''''file_format=(format_name=INVESTIA.PIPE_UTF16);
	'';

UPD_QUERY := ''UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.ACCOUNT_HOLDER
SET
    HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(IVR_SYSID), ''''#NULL#'''')))),
	MD_HASHDIFF=SHA1(CONCAT(
	COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|'''',
	COALESCE(RECIPIENT_DESC_ENG, ''''#NULL#''''), ''''|'''' , 	
	COALESCE(RECIPIENT_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
	COALESCE(CORP_CD, ''''#NULL#''''), ''''|'''' ,
	COALESCE(IVR_ST_NAME_ENG, ''''#NULL#''''), ''''|'''' ,
	COALESCE(IVR_ST_NAME_FRE, ''''#NULL#''''), ''''|'''' ,
	COALESCE(IVR_REG_2, ''''#NULL#''''), ''''|'''' ,
	COALESCE(LANG_CD, ''''#NULL#''''), ''''|'''' ,
	COALESCE(IVR_RES_CD, ''''#NULL#''''), ''''|'''' ,
	COALESCE(TO_VARCHAR(IVR_SETUP_DT),''''#NULL#''''), ''''|'''',
	COALESCE(TO_VARCHAR(IVR_STOP_DT),''''#NULL#''''), ''''|'''',
	COALESCE(TO_VARCHAR(IVR_FRGN_CTNT),''''#NULL#''''), ''''|'''',
	COALESCE(TO_VARCHAR(IVR_HOLD_MAIL),''''#NULL#''''), ''''|'''',
	COALESCE(TO_VARCHAR(IVR_INC_ADR),''''#NULL#''''), ''''|'''',
	COALESCE(IVR_STMT_FREQ, ''''#NULL#''''), ''''|'''' ,
	COALESCE(IVR_STMT_TYPE, ''''#NULL#''''), ''''|'''' ,
	COALESCE(TO_VARCHAR(IVR_STMT_DT),''''#NULL#''''), ''''|'''',
	COALESCE(IVR_OLD_DLR, ''''#NULL#''''), ''''|'''' ,
	COALESCE(SALARY_DESC, ''''#NULL#''''), ''''|'''' ,
	COALESCE(TO_VARCHAR(IVR_KYC_DT),''''#NULL#''''), ''''|'''',
	COALESCE(TO_VARCHAR(IVR_PRIM_BDT),''''#NULL#''''), ''''|'''',
	COALESCE(TO_VARCHAR(CREATE_DT),''''#NULL#''''))),	
	MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;'';


EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.REVENUES_BDV.""SP_CONV_LoadBDV_RDV_INSURANCE_REVENUE_IAS_COMMISSION_To_BDV_WT_LINK_REVENUE""(""ENV"" VARCHAR(1000), ""IO_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
IO_DATA_START_DATE :=CHAR(39)||IO_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.REVENUES_BDV.WT_LINK_REVENUE WHERE MD_SRC_SYSTEM = ''''IAS-COMMISSION'''' AND REVENUE_TYPE=''''Insurance'''''';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.REVENUES_BDV.WT_LINK_REVENUE 
(
HK_HUB_PARTY_ROLE_ADVISOR, 
MD_START_DT, 
MD_SOURCE, 
MD_SRC_SYSTEM, 
MD_EXTRACT_DT, 
CLIENT_ID, 
CONTRACT_ID, 
ADVISOR_ID, 
MASTER_CODE, 
PLN_MNEM, 
MARKETPRODUCT_ID, 
PAYMENT_DATE,  
REVENUE_TYPE, 
REVENUE_SUBTYPE, 
ENTRY_TYPE,
STAMP,
INSURANCE_REVENUE,
TRANSID
) 
SELECT 
HK_HUB_REGISTERED_REPRESENTATIVE, 
TO_DATE(''||IO_DATA_START_DATE||'',''''YYYY-MM-DD''''),	 
MD_SOURCE, 
MD_SRC_SYSTEM, 
MD_EXTRACT_DT, 
''''-1'''', 
''''-1'''', 
USERID, 
REPID, 
''''-1'''', 
''''-1'''', 
PROCESSDATE, 
DECODE(SOURCECODE,
 ''''OFF'''' , ''''Trade commissions'''',
 ''''FXF'''' ,''''Fee based/Managed'''',
 ''''MGD'''' ,''''Fee based/Managed'''',
 ''''JRN'''' , ''''Trailers'''',
 ''''MNL'''',(CASE WHEN ENTRY_TYPE <> ''''INSREV'''' OR ENTRY_TYPE IS NULL THEN ''''Trade commissions'''' ELSE ''''Insurance'''' END),
 ''''TRD'''' ,''''Trade commissions'''',
 ''''Unkown'''' 
) AS REVENUE_TYPE, 
DECODE(SOURCECODE,
''''OFF'''' ,''''OffBook commission'''',
 ''''FXF'''' ,''''Fixed fees'''',
 ''''MGD'''' , ''''Managed'''',
 ''''JRN'''' ,''''Trailer fees and GIC'''',
 ''''MNL'''' ,(CASE WHEN ENTRY_TYPE <> ''''INSREV'''' OR ENTRY_TYPE IS NULL THEN ''''Others'''' ELSE ''''Insurance'''' END) , 
''''TRD'''' ,''''Trade commissions'''',
 ''''Unkown'''' 
)AS REVENUE_SUBTYPE, 
ENTRY_TYPE,
STAMP,
SUM(COMMISSIONCAD) AS INSURANCE_REVENUE,
TRANSID
FROM DB_IAW_''||ENV||''_DWH.REVENUES_RDV.LINK_INSURANCE_REVENUE_RR_IAS_COMMISSION
WHERE MD_START_DT = TO_DATE(''||IO_DATA_START_DATE||'', ''''YYYY-MM-DD'''') 
AND 
SOURCECODE!=''''EXP'''' AND SOURCECODE!=''''TXR'''' AND REPID!= ''''SEAA'''' AND  REPID!= ''''SEZ9''''
AND REPID!= ''''QYYY''''
GROUP BY 
HK_HUB_REGISTERED_REPRESENTATIVE, 
MD_EXTRACT_DT,
MD_SOURCE, 
MD_SRC_SYSTEM,
REPID,
USERID,
PROCESSDATE,
SOURCECODE,
ENTRY_TYPE,
STAMP,
TRANSID
     '';

INS_UPDATE :='' 
UPDATE REVENUES_BDV.WT_LINK_REVENUE 
SET 
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' 
, ''''#NULL#'''', ''''|'''' 
, COALESCE(TRIM(CLIENT_ID), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(PLN_MNEM), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(MARKETPRODUCT_ID), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(CONTRACT_ID), ''''#NULL#''''), ''''|'''' 
, ''''#NULL#'''', ''''|''''
, COALESCE(TRIM(PAYMENT_DATE), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(REVENUE_TYPE), ''''#NULL#''''), ''''|'''' 
, COALESCE(TRIM(REVENUE_SUBTYPE), ''''#NULL#''''), ''''|''''
, COALESCE(TRIM(ENTRY_TYPE), ''''#NULL#''''), ''''|''''
, COALESCE(TRIM(TO_VARCHAR(STAMP)), ''''#NULL#''''), ''''|''''
, COALESCE(TRIM(TO_VARCHAR(TRANSID)), ''''#NULL#'''')
))),
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = COALESCE (HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
HK_HUB_PARTY_ROLE_ADVISOR = COALESCE (HK_HUB_PARTY_ROLE_ADVISOR, ''''0''''),
HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES = COALESCE(HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES ,''''0''''),
HK_HUB_INVESTMENT_PRODUCT_TYPE = COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''''0'''') ,
HK_HUB_CONTRACT = COALESCE (HK_HUB_CONTRACT, ''''0''''),
AUA = COALESCE (AUA,0),
REVENUE = COALESCE (REVENUE,0)
WHERE MD_SRC_SYSTEM = ''''IAS-COMMISSION'''' AND REVENUE_TYPE=''''Insurance'''';
		'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
create or replace schema DB_IAW_PROD_DWH.REVENUES_RDV;

create or replace TABLE DB_IAW_PROD_DWH.REVENUES_RDV.LINK_INSURANCE_REVENUE_RR_IAS_COMMISSION (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	TRANSID NUMBER(38,0) COMMENT 'Transaction ID',
	EXTTRANSID VARCHAR(20) COMMENT 'Extended transaction ID',
	PROCESSDATE DATE COMMENT 'Process date',
	TRANSDATE TIMESTAMP_NTZ(9) COMMENT 'Transaction date',
	SOURCECODE VARCHAR(24) COMMENT 'Source code / Transaction type',
	CANCELIND NUMBER(38,0) COMMENT 'Cancel indicator',
	REPID VARCHAR(24) COMMENT 'Representative ID',
	CURRENCY VARCHAR(6) COMMENT 'transaction currency',
	EXCHANGERATE NUMBER(38,2) COMMENT 'the exchange rate used for the transaction',
	ENTRY_TYPE VARCHAR(24) COMMENT 'entry type = insurance revenue',
	COMMISSION NUMBER(38,2) COMMENT 'Representative gross commission',
	COMMISSIONCAD NUMBER(38,2) COMMENT 'Representative gross commission in CAD',
	OVERRIDEIND NUMBER(38,0) COMMENT 'Override indicator',
	ACCURATEIND NUMBER(38,0) COMMENT 'Accuracy indicator',
	DESCRIPTION VARCHAR(250) COMMENT 'Description',
	NUMBEROFORDERS NUMBER(38,0) COMMENT 'Number of orders',
	NETCOMMISSION NUMBER(38,2) COMMENT 'Representative net commission',
	TRANSFEE NUMBER(38,2) COMMENT 'Representative transaction fees',
	SHAREIND NUMBER(38,0) COMMENT 'Share indicator',
	AFFECTGROSSCOMMIND NUMBER(38,0) COMMENT 'Affect gross commission Indicator',
	REVENUEONLYIND NUMBER(38,0) COMMENT 'Revenu Only Indicator',
	NOTE VARCHAR(250) COMMENT 'Notes',
	REVNO VARCHAR(250) COMMENT 'Revision number',
	STAMP DATE COMMENT 'Record insertion date',
	USERID VARCHAR(250) COMMENT 'User ID'
);
create or replace TABLE DB_IAW_PROD_DWH.REVENUES_RDV.LINK_REVENUE_RR (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	PAY_SYSID NUMBER(38,0) COMMENT 'Payable ID - Main key',
	PAYMENT_DT TIMESTAMP_NTZ(9) COMMENT 'Payable Paid Date',
	PLN_SYSID NUMBER(38,0) COMMENT 'Plan (Account) ID (related to PLN)',
	IVR_SYSID NUMBER(38,0) COMMENT 'Investor (Client) ID (related to IVR)',
	IVD_SYSID NUMBER(38,0) COMMENT 'Product ID (related to IVD link with parent IVT)',
	PROCESS_DT TIMESTAMP_NTZ(9) COMMENT 'Revenue payable process date'
);
create or replace TABLE DB_IAW_PROD_DWH.REVENUES_RDV.LINK_REVENUE_RR_IAS_COMMISSION (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	REPID VARCHAR(50) COMMENT 'MASTER CODE code',
	ADVISOR_ID VARCHAR(512) COMMENT 'Advisor ID in commission portal',
	PROGRAM_TYPE VARCHAR(512) COMMENT 'Program type of the account',
	ACCOUNTID VARCHAR(100) COMMENT 'Account ID',
	PROCESSDATE DATE COMMENT 'Process Date',
	SOURCECODE VARCHAR(50) COMMENT 'Source Code / TRANSACTION_TYPE',
	QUANTITY NUMBER(38,0) COMMENT 'Transaction quantity',
	TRANSTYPE VARCHAR(10) COMMENT 'Transaction Type ([B]uy/[S]ell) / BUY_SELL_INDICATOR',
	REVENUE NUMBER(38,2) COMMENT 'Representative gross revenue',
	COMMISSION NUMBER(38,2) COMMENT 'Representative gross commission',
	NETCOMMISSION NUMBER(38,2) COMMENT 'Representative net commission',
	TRANSFEE NUMBER(38,2) COMMENT 'Representative transaction fees',
	ENTRY_TYPE VARCHAR(20) COMMENT 'Entry Type',
	STAMP DATE COMMENT 'Record Insertion Date'
);
create or replace TABLE DB_IAW_PROD_DWH.REVENUES_RDV.LINK_REVENUE_RR_IAS_COMMISSION_CLONE (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	REPID VARCHAR(50) COMMENT 'MASTER CODE code',
	ADVISOR_ID VARCHAR(512) COMMENT 'Advisor ID in commission portal',
	PROGRAM_TYPE VARCHAR(512) COMMENT 'Program type of the account',
	ACCOUNTID VARCHAR(100) COMMENT 'Account ID',
	PROCESSDATE DATE COMMENT 'Process Date',
	SOURCECODE VARCHAR(50) COMMENT 'Source Code / TRANSACTION_TYPE',
	QUANTITY NUMBER(38,0) COMMENT 'Transaction quantity',
	TRANSTYPE VARCHAR(10) COMMENT 'Transaction Type ([B]uy/[S]ell) / BUY_SELL_INDICATOR',
	REVENUE NUMBER(38,2) COMMENT 'Representative gross revenue',
	COMMISSION NUMBER(38,2) COMMENT 'Representative gross commission',
	NETCOMMISSION NUMBER(38,2) COMMENT 'Representative net commission',
	TRANSFEE NUMBER(38,2) COMMENT 'Representative transaction fees',
	ENTRY_TYPE VARCHAR(20)
);
create or replace TABLE DB_IAW_PROD_DWH.REVENUES_RDV.REF_COM_PRODUCTION (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	COM_PRODUCTION_CD VARCHAR(2) COMMENT 'Product ID'
);
create or replace TABLE DB_IAW_PROD_DWH.REVENUES_RDV.SAT_LINK_REVENUE_PAYABLE_RR_IAS_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PYBL_STATUS VARCHAR(3) COMMENT 'Payable Status',
	EVENT_PROC_SYSID NUMBER(38,0) COMMENT 'Event Procedure ID',
	EVENT_RPT_SYSID NUMBER(38,0) COMMENT 'Event Report ID',
	BEN_SYSID NUMBER(38,0) COMMENT 'Beneficiary ID (related to REP table)',
	REP_SYSID NUMBER(38,0) COMMENT 'Advisor ID (related to REP table)',
	DEAL_SYSID NUMBER(38,0) COMMENT 'Deal ID (related to REP_DEAL link with parent REP table)',
	COM_SYSID NUMBER(38,0) COMMENT 'Comm ID (Related to REP_COM link with parents REP_DEAL, REP)',
	DIST_SYSID NUMBER(38,0) COMMENT 'Payroll Distribution ID (related to REP_PAY_DIST)',
	TRX_SYSID NUMBER(38,0) COMMENT 'Transaction ID (related to TRX)',
	ACT_SYSID NUMBER(38,0) COMMENT 'Account (Position) ID (related to ACT)',
	MGT_CD VARCHAR(5) COMMENT 'Managemet Cie ID (related to MGT)',
	TRX_CD NUMBER(38,0) COMMENT 'Transaction Code id (related to S_TRX_CD)',
	PROC_DT TIMESTAMP_NTZ(9) COMMENT 'Payable Process Date',
	PAY_PERIOD VARCHAR(5) COMMENT 'Pay Period',
	TAX_YEAR VARCHAR(4) COMMENT 'Pay Fiscal Year',
	TRADE_DT TIMESTAMP_NTZ(9) COMMENT 'Transaction Trade date (related to TRX)',
	GRSS_AMT FLOAT COMMENT 'Transaction Gross Amount (related to TRX)',
	COM_DLR FLOAT COMMENT 'Commission Dealer Amount',
	COM_PYBL FLOAT COMMENT 'Commission Amount',
	COM_BEN_PYBL FLOAT COMMENT 'Commission Pay to the Beneficiary',
	TICKET_CHG FLOAT COMMENT 'Ticket Charge',
	PAY_CD VARCHAR(3) COMMENT 'Pay Code',
	COM_PRODUCTION_CD VARCHAR(2) COMMENT 'Commission Type Code (related to S_COM_PROD)',
	AMOUNT FLOAT COMMENT 'Amount (related to Payroll Distribution)',
	USR_SYSID NUMBER(38,0) COMMENT 'User ID (related to SYS_USER_CD)',
	OTX_SYSID NUMBER(38,0) COMMENT 'Order ID (related to OTX)',
	DISPLAY_FLAG NUMBER(38,0) COMMENT 'Display Flag',
	DLR_MINIMUM VARCHAR(1) COMMENT 'Dealer Minimum',
	ORIG_PAY_PER VARCHAR(18) COMMENT 'Original Pay Period',
	IVT_TYPE VARCHAR(4) COMMENT 'Type of Product',
	COM_PAY_SYSID NUMBER(38,0) COMMENT 'Commission Pay ID',
	INTERNAL_COMM BOOLEAN COMMENT 'Internal Commission',
	WRHS_IND BOOLEAN COMMENT 'WRHS IND'
);
create or replace TABLE DB_IAW_PROD_DWH.REVENUES_RDV.SAT_LINK_REVENUE_PAYABLE_RR_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PYBL_STATUS VARCHAR(6) COMMENT 'Payable Status',
	EVENT_PROC_SYSID NUMBER(38,0) COMMENT 'Event Procedure ID',
	EVENT_RPT_SYSID NUMBER(38,0) COMMENT 'Event Report ID',
	BEN_SYSID NUMBER(38,0) COMMENT 'Beneficiary ID (related to REP table)',
	REP_SYSID NUMBER(38,0) COMMENT 'Advisor ID (related to REP table)',
	DEAL_SYSID NUMBER(38,0) COMMENT 'Deal ID (related to REP_DEAL link with parent REP table)',
	COM_SYSID NUMBER(38,0) COMMENT 'Comm ID (Related to REP_COM link with parents REP_DEAL, REP)',
	DIST_SYSID NUMBER(38,0) COMMENT 'Payroll Distribution ID (related to REP_PAY_DIST)',
	TRX_SYSID NUMBER(38,0) COMMENT 'Transaction ID (related to TRX)',
	ACT_SYSID NUMBER(38,0) COMMENT 'Account (Position) ID (related to ACT)',
	MGT_CD VARCHAR(10) COMMENT 'Managemet Cie ID (related to MGT)',
	TRX_CD NUMBER(38,0) COMMENT 'Transaction Code id (related to S_TRX_CD)',
	PAY_PERIOD VARCHAR(10) COMMENT 'Pay Period',
	TAX_YEAR VARCHAR(8) COMMENT 'Pay Fiscal Year',
	TRADE_DT TIMESTAMP_NTZ(9) COMMENT 'Transaction Trade date (related to TRX)',
	GRSS_AMT FLOAT COMMENT 'Transaction Gross Amount (related to TRX)',
	COM_DLR FLOAT COMMENT 'Commission Dealer Amount',
	COM_PYBL FLOAT COMMENT 'Commission Amount',
	COM_BEN_PYBL FLOAT COMMENT 'Commission Pay to the Beneficiary',
	TICKET_CHG FLOAT COMMENT 'Ticket Charge',
	PAY_CD VARCHAR(6) COMMENT 'Pay Code',
	COM_PRODUCTION_CD VARCHAR(4) COMMENT 'Commission Type Code (related to S_COM_PROD)',
	AMOUNT FLOAT COMMENT 'Amount (related to Payroll Distribution)',
	USR_SYSID NUMBER(38,0) COMMENT 'User ID (related to SYS_USER_CD)',
	OTX_SYSID NUMBER(38,0) COMMENT 'Order ID (related to OTX)',
	DISPLAY_FLAG NUMBER(38,0) COMMENT 'Display Flag',
	DLR_MINIMUM VARCHAR(2) COMMENT 'Dealer Minimum',
	ORIG_PAY_PER VARCHAR(36) COMMENT 'Original Pay Period',
	IVT_TYPE VARCHAR(8) COMMENT 'Type of Product',
	COM_PAY_SYSID NUMBER(38,0) COMMENT 'Commission Pay ID',
	INTERNAL_COMM BOOLEAN COMMENT 'Internal Commission',
	WRHS_IND BOOLEAN COMMENT 'WRHS IND'
);
create or replace TABLE DB_IAW_PROD_DWH.REVENUES_RDV.SAT_LINK_REVENUE_TRAILER_FEES_RR_IAS_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	FAS_FILE_NAME VARCHAR(40) COMMENT 'Fundserv File Name',
	FROM_DT TIMESTAMP_NTZ(9) COMMENT 'From date',
	MGT_CD VARCHAR(3) COMMENT 'Management Cie (related to MGT)',
	CURRENCY_CD VARCHAR(3) COMMENT 'Currency Code',
	INCOME_TYPE VARCHAR(4) COMMENT 'Type of Income',
	REP_CODE VARCHAR(5) COMMENT 'Rep Code (related to REP)',
	COM_PYBL FLOAT COMMENT 'Commission Amount',
	EXCH_DT TIMESTAMP_NTZ(9) COMMENT 'Exchange Rate Date',
	EXCH_RATE FLOAT COMMENT 'Exchange Rate',
	LAST_UPD_DT TIMESTAMP_NTZ(9) NOT NULL COMMENT 'Last Update Date',
	USR_SYSID NUMBER(38,0) COMMENT 'User ID (related to SYS_USER_CD)',
	FISCAL_SYSID NUMBER(38,0) COMMENT 'Fiscal ID',
	JUR_CD VARCHAR(3) COMMENT 'Jurisdiction Code',
	ACT_TAX_COLLCTD FLOAT COMMENT 'Unknown',
	DLR_SYSID NUMBER(38,0) COMMENT 'Deal ID (related to DLR)',
	RGN_SYSID NUMBER(38,0) COMMENT 'Region ID (related to RGN)',
	BRN_SYSID NUMBER(38,0) COMMENT 'Branch ID (related to BRN)',
	REP_SYSID NUMBER(38,0) COMMENT 'Rep ID (related to REP)'
);
create or replace TABLE DB_IAW_PROD_DWH.REVENUES_RDV.SAT_LINK_REVENUE_TRAILER_FEES_RR_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	FAS_FILE_NAME VARCHAR(80) COMMENT 'Fundserv File Name',
	FROM_DT TIMESTAMP_NTZ(9) COMMENT 'From date',
	MGT_CD VARCHAR(6) COMMENT 'Management Cie (related to MGT)',
	CURRENCY_CD VARCHAR(6) COMMENT 'Currency Code',
	INCOME_TYPE VARCHAR(8) COMMENT 'Type of Income',
	REP_CODE VARCHAR(10) COMMENT 'Rep Code (related to REP)',
	COM_PYBL FLOAT COMMENT 'Commission Amount',
	EXCH_DT TIMESTAMP_NTZ(9) COMMENT 'Exchange Rate Date',
	EXCH_RATE FLOAT COMMENT 'Exchange Rate',
	LAST_UPD_DT TIMESTAMP_NTZ(9) NOT NULL COMMENT 'Last Update Date',
	USR_SYSID NUMBER(38,0) COMMENT 'User ID (related to SYS_USER_CD)',
	FISCAL_SYSID NUMBER(38,0) COMMENT 'Fiscal ID',
	JUR_CD VARCHAR(6) COMMENT 'Jurisdiction Code',
	ACT_TAX_COLLCTD FLOAT,
	DLR_SYSID NUMBER(38,0) COMMENT 'Deal ID (related to DLR)',
	RGN_SYSID NUMBER(38,0) COMMENT 'Region ID (related to RGN)',
	BRN_SYSID NUMBER(38,0) COMMENT 'Branch ID (related to BRN)',
	REP_SYSID NUMBER(38,0) COMMENT 'Rep ID (related to REP)'
);
create or replace TABLE DB_IAW_PROD_DWH.REVENUES_RDV.SAT_LINK_REVENUE_WRAP_FEE_RR_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	BATCH_SYSID NUMBER(38,0) NOT NULL COMMENT 'Batch ID',
	STATUS_CD VARCHAR(2) COMMENT 'Status Code',
	CET_WF_SYSID NUMBER(38,0) COMMENT 'Code to reference with CET Table',
	WF_IND NUMBER(38,0),
	ACT_SYSID NUMBER(38,0) COMMENT 'Account (Position) ID (related to ACT)',
	OTX_SYSID NUMBER(38,0) COMMENT 'Order ID (related to OTX)',
	AVG_MV FLOAT COMMENT 'Average Market Value',
	CREATE_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date',
	FEE_AMT FLOAT COMMENT 'Fee amount',
	FEE_GST FLOAT COMMENT 'Fee GST ( taxe )',
	FEE_PST FLOAT COMMENT 'Fee PST ( taxe )',
	FEE_TOTAL_AMT FLOAT COMMENT 'Fee total amount ( taxe included )',
	DLR_SYSID NUMBER(38,0) COMMENT 'Deal ID (related to DLR)',
	RGN_SYSID NUMBER(38,0) COMMENT 'Region ID (related to RGN)',
	BRN_SYSID NUMBER(38,0) COMMENT 'Branch ID (related to BRN)',
	REP_SYSID NUMBER(38,0) COMMENT 'Rep ID (related to REP)',
	USR_SYSID NUMBER(38,0) COMMENT 'USer ID',
	DESCRIPTION VARCHAR(120),
	LAST_UPD_DT TIMESTAMP_NTZ(9) COMMENT 'Last upadate date',
	SRF_SYSID NUMBER(38,0) COMMENT 'SRF  ID',
	OTHER_COM_SYSID NUMBER(38,0),
	FISCAL_SYSID NUMBER(38,0)
);
create or replace TABLE DB_IAW_PROD_DWH.REVENUES_RDV.SAT_REF_COM_PRODUCTION (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	COM_PRODUCTION_MNEM VARCHAR(5) COMMENT 'Product mnemonic code',
	COM_PRODUCTION_DESC VARCHAR(15) COMMENT 'Product description',
	COM_PRODUCTION_LONG_DESC VARCHAR(40) COMMENT 'Product long description',
	COM_PRODUCTION_MNEM_ENG VARCHAR(5) COMMENT 'Product mnemonic code english',
	COM_PRODUCTION_MNEM_FRE VARCHAR(5) COMMENT 'Product mnemonic code french',
	COM_PRODUCTION_DESC_ENG VARCHAR(15) COMMENT 'Product description english',
	COM_PRODUCTION_DESC_FRE VARCHAR(15) COMMENT 'prduct description french',
	COM_PRODUCTION_LONG_DESC_ENG VARCHAR(50) COMMENT 'Product long description english',
	COM_PRODUCTION_LONG_DESC_FRE VARCHAR(60) COMMENT 'Product long description french',
	CRC_TRND_RPT_CAT VARCHAR(1) COMMENT 'Unknown',
	COMMISSION_LEVEL NUMBER(38,0) COMMENT 'Unknown',
	CAC_TYPE_CD NUMBER(38,0) COMMENT 'Unknown',
	ACC_REPORT_IND NUMBER(38,0) COMMENT 'Unknown'
);
create or replace TABLE DB_IAW_PROD_DWH.REVENUES_RDV.SAT_REF_COM_PRODUCTION_INVESTIA_UNIVERIS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	COM_PRODUCTION_MNEM VARCHAR(10) COMMENT 'Product mnemonic code',
	COM_PRODUCTION_DESC VARCHAR(30) COMMENT 'Product description',
	COM_PRODUCTION_LONG_DESC VARCHAR(80) COMMENT 'Product long description',
	COM_PRODUCTION_MNEM_ENG VARCHAR(10) COMMENT 'Product mnemonic code english',
	COM_PRODUCTION_MNEM_FRE VARCHAR(10) COMMENT 'Product mnemonic code french',
	COM_PRODUCTION_DESC_ENG VARCHAR(30) COMMENT 'Product description english',
	COM_PRODUCTION_DESC_FRE VARCHAR(30) COMMENT 'prduct description french',
	COM_PRODUCTION_LONG_DESC_ENG VARCHAR(100) COMMENT 'Product long description english',
	COM_PRODUCTION_LONG_DESC_FRE VARCHAR(120) COMMENT 'Product long description french',
	CRC_TRND_RPT_CAT VARCHAR(2),
	COMMISSION_LEVEL NUMBER(38,0),
	CAC_TYPE_CD NUMBER(38,0),
	ACC_REPORT_IND NUMBER(38,0)
);
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.REVENUES_RDV.SP_CONV_DATAVAULT_LOADSATELLITE_INSERT_AUDIT_ID(""ENV"" VARCHAR(16777216), ""SRC_SATELLITE_LV"" VARCHAR(16777216), ""SRC_SATELLITE"" VARCHAR(16777216), ""SRC_DATA"" VARCHAR(16777216), ""TGT_MAPPING"" VARCHAR(16777216), ""TGT_OBJ"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
//ins_query = ""insert into "" tgt_obj(TGT-MAPPING)(
//with t1 as(
//SELECT HK_HUB, MAX(MD_START_DT) AS MD_START_DT FROM src_Satellite_lv  WHERE MD_ACTIVE = ''A'' GROUP BY(HK_HUB)),
// t2 as(SELECT mstr.HK_HUB AS HK_HUB,mstr.MD_HASHDIFF AS MD_HASHDIFF FROM src_Satellite AS MSTR JOIN T1 AS DTLS ON  dtls.HK_HUB= mstr.HK_HUB AND dtls.MD_START_DT = mstr.MD_START_DT WHERE MD_ACTIVE = ''A'')
//SELECT src_mapping FROM src_Data AS MSTR LEFT OUTER JOIN T2 AS DTLS ON MSTR.HK_HUB = DTLS.HK_HUB AND MSTR.MD_HASHDIFF = DTLS.MD_HASHDIFF WHERE DTLS.Hk_hub IS NULL)

 
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.REVENUES_RDV.SP_CONV_DATAVAULT_LOADSATELLITE_INSERT_AUDIT_ID(""ENV"" VARCHAR(16777216), ""SRC_SATELLITE_LV"" VARCHAR(16777216), ""SRC_SATELLITE"" VARCHAR(16777216), ""SRC_DATA"" VARCHAR(16777216), ""TGT_OBJ"" VARCHAR(16777216), ""TGT_MAPPING"" VARCHAR(16777216), ""AUDIT_ID"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var src_app_tgt_mapping = """";
var tgt = TGT_MAPPING;
tgt.split("","").forEach(element => 
{
if (element !== ""MD_CREATION_DT"" && element !== ""MD_CREATION_AUDIT_ID"" && element !== ""MD_ACTIVE"") 
 
 src_app_tgt_mapping = src_app_tgt_mapping + ""MSTR."" + element + "","";
 
});

INS_QUERY = ""insert into "" + TGT_OBJ + ""("" + TGT_MAPPING + "")("" 
                    + ""with t1 as(""
+ ""SELECT HK_HUB, MAX(MD_START_DT) AS MD_START_DT FROM "" + SRC_SATELLITE_LV + "" WHERE MD_ACTIVE = ''A'' GROUP BY(HK_HUB)),"" +
 ""t2 as(SELECT mstr.HK_HUB AS HK_HUB,mstr.MD_HASHDIFF AS MD_HASHDIFF FROM "" + SRC_SATELLITE + "" AS MSTR JOIN T1 AS DTLS ON  dtls.HK_HUB= mstr.HK_HUB AND dtls.MD_START_DT = mstr.MD_START_DT WHERE MD_ACTIVE = ''A'')""
+ "" SELECT "" + src_app_tgt_mapping +
          ""CURRENT_TIMESTAMP"" + "","" + AUDIT_ID + "","" + ""''A''"" +
"" FROM "" + SRC_DATA + "" AS MSTR LEFT OUTER JOIN T2 AS DTLS ON MSTR.HK_HUB = DTLS.HK_HUB AND MSTR.MD_HASHDIFF = DTLS.MD_HASHDIFF WHERE DTLS.Hk_hub IS NULL)"";

 var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          });
 var result_scan = sql_statement.execute();	
';
create or replace schema DB_IAW_PROD_DWH.SHARED_BDV;

create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.HUB_PARTY_ROLE_ADVISOR (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MASTER_CODE VARCHAR(50) COMMENT 'registered representative code'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.LINK_INVESTMENT_CONTRACT (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ADVISOR',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	CLIENT_ID VARCHAR(100) COMMENT 'Client ID',
	MASTER_CD VARCHAR(50) COMMENT 'MASTER CODE of the advisor',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	PLN_MNEM VARCHAR(512) COMMENT 'Plan code',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	ASC_1_RESP_PLAN_TYPES VARCHAR(10) COMMENT 'subtype of the RESP plans'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.LINK_PARTY_RELATIONSHIP_SHARE (
	HK_LINK VARCHAR(64) COMMENT 'Hash of the business keys',
	HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(64) COMMENT 'Hash of the business keys REGISTERED REPRESENTATIVE',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(64) COMMENT 'Hash of the business keys PARTY ROLE ADVISOR',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	A_C_REPRESENTATIVE VARCHAR(40) COMMENT 'Unique code of representative',
	MASTER_CODE VARCHAR(40) COMMENT 'Unique code of advisor'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES_AGG (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.SAT_CONTRACT_AUA_SEG_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ACCOUNT_AUA_SEGMENT VARCHAR(1000) COMMENT 'Represents the segmentation of advisors based on their AUA',
	ACCOUNT_AUA_SEGMENT_ORDER NUMBER(38,0) COMMENT 'Order of the AUA segmentation, this field is done for Power BI display'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.SAT_CONTRACT_COMPUTE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PLAN_CODE VARCHAR(8000),
	PLAN_LABEL VARCHAR(8000),
	ACCOUNT_TYPE VARCHAR(16777216),
	GROUP_TYPE_CODE VARCHAR(8000),
	ACCUMULATION_TYPE VARCHAR(8000),
	ACCOUNT_IND NUMBER(1,0) COMMENT 'Account Flag, Total Number of Client Accounts',
	CASH_EQLT_PROFILE_PCT VARCHAR(3) COMMENT 'Cash or Equivalent Profile %',
	INCOME_PROFILE_PCT VARCHAR(3) COMMENT 'Income Profile %',
	GROWTH_PROFILE_PCT VARCHAR(3) COMMENT 'Growth Profile %',
	SPECULATION_PROFILE_PCT VARCHAR(3) COMMENT 'Speculation Profile %',
	UNKNOWN_PROFILE_PCT VARCHAR(3) COMMENT 'Unknown Profile %',
	LOW_RISK_PCT VARCHAR(3) COMMENT 'Low Risk %',
	MEDIUM_RISK_PCT VARCHAR(3) COMMENT 'Medium Risk %',
	HIGH_RISK_PCT VARCHAR(3) COMMENT 'High Risk %',
	UNKNOWN_RISK_PCT VARCHAR(3) COMMENT 'Unknown Risk %',
	NBIN_CLIENT_ID VARCHAR(50) COMMENT 'NBIN Clients Id.'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.SAT_IAS_NBIN_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Sat',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PLAN_CODE VARCHAR(8000) COMMENT 'Plan Code',
	PLAN_LABEL VARCHAR(8000) COMMENT 'Plan label',
	ACCOUNT_TYPE VARCHAR(16777216) COMMENT 'Account type',
	GROUP_TYPE_CODE VARCHAR(8000) COMMENT 'Group type code',
	ACCUMULATION_TYPE VARCHAR(8000) COMMENT 'Type of Accumulation'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Sat',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	SYMBOL VARCHAR(512) COMMENT 'Security Symbol',
	NAME VARCHAR(1000) COMMENT 'Product name',
	ASSET_CATEGORY VARCHAR(512) COMMENT 'Under what category the asset belongs to',
	CATEGORY VARCHAR(512) COMMENT 'Type of Category',
	PRODUCT_GROUP VARCHAR(512) COMMENT 'The group the product belong to',
	ISSUER_COMPANY_CODE VARCHAR(4) COMMENT 'Code of the issuer Company',
	ISSUER_COMPANY_NAME VARCHAR(1000) COMMENT 'Name of the issuer Company'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.SAT_LINK_INVESTMENT_CONTRACT (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE (
	HK_LINK VARCHAR(64) COMMENT 'Hash of the business keys',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	COM_TYPE VARCHAR(50) COMMENT 'Commission Type',
	COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
	IS_RESHARED NUMBER(7,3) COMMENT 'Indicator to identify IsReshared or not',
	PHYSICAL NUMBER(7,3) COMMENT 'PHYSICAL number',
	TOREPID VARCHAR(50) COMMENT 'Advisor id',
	COMMISSIONPCT_ADVISOR NUMBER(6,3) COMMENT 'Advisor Commission PCT',
	COMMISSIONPCT_FINANCIAL NUMBER(6,3) COMMENT 'Financial Commission PCT'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_AUA_SEG_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	CLIENT_AUA_SEGMENT VARCHAR(1000) COMMENT 'Represents the segmentation of clients based on their AUA',
	CLIENT_AUA_SEGMENT_ORDER NUMBER(38,0) COMMENT 'Order of the AUA segmentation, this field is done for Power BI display'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_CLEAN (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	CLIENT_ANNUAL_GROSS_INC_CLEAN NUMBER(38,0) COMMENT 'Amount of the client annual gross income as a number'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""\""A\""\"" row exists in the source, \""\""D\""\"" row does not exist in the source',
	INCOME_AMT NUMBER(38,2) COMMENT 'Client income',
	INCOME_LEVEL_1_SEGMENT VARCHAR(50) COMMENT 'Client level 1 income Segment : $30k - $50k',
	INCOME_LEVEL_1_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client level 1 income Segment ORDER',
	INCOME_LEVEL_2_SEGMENT VARCHAR(50) COMMENT 'Client level 2 income Segment : Lower Income',
	INCOME_LEVEL_2_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client level 2 income Segment ORDER',
	AGE_SEGMENT VARCHAR(50) COMMENT 'Client Age Segment : 25-34',
	AGE_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client Age Segment ORDER',
	NEW_CLIENT_IND VARCHAR(16777216) COMMENT 'New client indicator',
	CLIENT_START_DT TIMESTAMP_NTZ(9) COMMENT 'Client Start Date',
	CLIENT_INV_KNOWLEDGE_LVL VARCHAR(10) COMMENT 'Clients Account Investment Knowledge',
	CLIENT_NAME VARCHAR(2000) COMMENT 'Client name',
	CLIENT_AGE NUMBER(38,0) COMMENT 'Client Age'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.SAT_PARTY_ROLE_ADVISOR_AUA_SEG_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ADVISOR_AUA_SEGMENT VARCHAR(1000) COMMENT 'Represents the segmentation of advisors based on their AUA',
	ADVISOR_AUA_SEGMENT_ORDER NUMBER(38,0) COMMENT 'Order of the AUA segmentation, this field is done for Power BI display',
	SUSPENDED_IND NUMBER(1,0) COMMENT 'suspended Flag, if an advisor is deleted in certs but still have AUA, will be considered as suspended'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.SAT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	COMPANY_CODE VARCHAR(50) COMMENT 'Code of the company',
	COMPANY_NAME VARCHAR(512) COMMENT 'Name of the company',
	REGULATORY_ORGANIZATION_NAME VARCHAR(512) COMMENT 'Name of the regulatory organisation company',
	REGULATORY_ORGANIZATION_CODE VARCHAR(50) COMMENT 'Code of the regulatory organisation company',
	DEALER_CODE VARCHAR(50) COMMENT 'Code of the dealer',
	DEALER_NAME VARCHAR(512) COMMENT 'Name of the dealer',
	REGION_CODE VARCHAR(512) COMMENT 'Code of the region',
	REGION_NAME VARCHAR(512) COMMENT 'Nmae of the region',
	REGION_VP VARCHAR(16777216) COMMENT 'full name of the RVP',
	BRANCHCODE VARCHAR(50) COMMENT 'Code of the representative branch code',
	BRANCHNAME VARCHAR(512) COMMENT 'Name of the representative branch',
	TEAM_CODE NUMBER(38,0) COMMENT 'Representant Group ID',
	TEAM_NAME VARCHAR(512) COMMENT 'Advisor team description',
	ADVISOR_FULLNAME VARCHAR(512) COMMENT 'Representative name',
	FIRSTNAME VARCHAR(512) COMMENT 'Representative first name',
	LASTNAME VARCHAR(512) COMMENT 'Representative last name',
	ADVISOR_CORPORATION_NAME VARCHAR(512) COMMENT 'Representative corporation name',
	STATUS VARCHAR(512) COMMENT 'Active RR code indicator',
	GROUP_RSP_INDICATOR VARCHAR(512) COMMENT 'Group retirement saving Plans indicator',
	PROVINCE_CODE VARCHAR(16777216) COMMENT 'province code',
	PROVINCE VARCHAR(16777216) COMMENT 'province name',
	ADVISOR_START_DATE TIMESTAMP_NTZ(9) COMMENT 'Advisor Start date',
	NEW_ADVISOR NUMBER(38,0) COMMENT 'Flag to identify the advisor',
	DEPARTED_ADVISOR_IND NUMBER(1,0) COMMENT 'DEPARTED ADVISOR INDICATOR',
	END_DATE TIMESTAMP_NTZ(9) COMMENT 'Departure date of the advisor (TBD)',
	REASON VARCHAR(1000) COMMENT 'Reason of departure',
	NEW_FIRM VARCHAR(1000) COMMENT 'Departure destination',
	NEW_FIRM_TYPE VARCHAR(1000) COMMENT 'Departure destination Type',
	NEW_FIRM_BACK_OFFICE VARCHAR(1000) COMMENT 'Departure destination Back-Office',
	PRESTIGE_STATUS VARCHAR(100) COMMENT 'Prestige Status',
	PRIMARY_ROLE VARCHAR(500) COMMENT 'PRIMARY ROLE',
	TRANSITION_PERIOD_END_DATE TIMESTAMP_NTZ(9) COMMENT 'Advisor transition end date',
	DEAL_ASSESTS NUMBER(11,0) COMMENT 'Deal assets',
	EXPECTED_ASSESTS NUMBER(11,0) COMMENT 'Expected assets',
	PREVIOUS_FIRM VARCHAR(100) COMMENT 'Previous Firm of the Advisor',
	PREVIOUS_FIRM_TYPE VARCHAR(100) COMMENT 'Previous Firm type of the Advisor',
	AGE_SEGMENT VARCHAR(50) COMMENT 'Advisor Age Segment : 25-34',
	AGE_SEGMENT_ORD NUMBER(2,0) COMMENT 'Advisor Age Segment ORDER',
	MD_ACTIVE_CERTS VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the certs source',
	ADVISOR_AGE NUMBER(38,0) COMMENT 'Age of the dealer',
	REP_EMAIL VARCHAR(1000) COMMENT 'Advisor repemail',
	CBM VARCHAR(1000) COMMENT 'Advisor cbm',
	BRANCH_NRD VARCHAR(1000) COMMENT 'Advisor branch nrd',
	BRANCH_ADDRESS1 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS1',
	BRANCH_ADDRESS2 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS2',
	BRANCH_CITY VARCHAR(1000) COMMENT 'Advisor branch city',
	BRANCH_POSTAL_CODE VARCHAR(1000) COMMENT 'Advisor branch postal code'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.SAT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH_CLONE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	COMPANY_CODE VARCHAR(50) COMMENT 'Code of the company',
	COMPANY_NAME VARCHAR(512) COMMENT 'Name of the company',
	REGULATORY_ORGANIZATION_NAME VARCHAR(512) COMMENT 'Name of the regulatory organisation company',
	REGULATORY_ORGANIZATION_CODE VARCHAR(50) COMMENT 'Code of the regulatory organisation company',
	DEALER_CODE VARCHAR(50) COMMENT 'Code of the dealer',
	DEALER_NAME VARCHAR(512) COMMENT 'Name of the dealer',
	REGION_CODE VARCHAR(512) COMMENT 'Code of the region',
	REGION_NAME VARCHAR(512) COMMENT 'Nmae of the region',
	REGION_VP VARCHAR(16777216) COMMENT 'full name of the RVP',
	BRANCHCODE VARCHAR(50) COMMENT 'Code of the representative branch code',
	BRANCHNAME VARCHAR(512) COMMENT 'Name of the representative branch',
	TEAM_CODE NUMBER(38,0) COMMENT 'Representant Group ID',
	TEAM_NAME VARCHAR(512) COMMENT 'Advisor team description',
	ADVISOR_FULLNAME VARCHAR(512) COMMENT 'Representative name',
	FIRSTNAME VARCHAR(512) COMMENT 'Representative first name',
	LASTNAME VARCHAR(512) COMMENT 'Representative last name',
	ADVISOR_CORPORATION_NAME VARCHAR(512) COMMENT 'Representative corporation name',
	STATUS VARCHAR(512) COMMENT 'Active RR code indicator',
	GROUP_RSP_INDICATOR VARCHAR(512) COMMENT 'Group retirement saving Plans indicator',
	PROVINCE_CODE VARCHAR(16777216) COMMENT 'province code',
	PROVINCE VARCHAR(16777216) COMMENT 'province name',
	ADVISOR_START_DATE TIMESTAMP_NTZ(9) COMMENT 'Advisor Start date',
	NEW_ADVISOR NUMBER(38,0) COMMENT 'Flag to identify the advisor',
	DEPARTED_ADVISOR_IND NUMBER(1,0) COMMENT 'DEPARTED ADVISOR INDICATOR',
	END_DATE TIMESTAMP_NTZ(9) COMMENT 'Departure date of the advisor (TBD)',
	REASON VARCHAR(1000) COMMENT 'Reason of departure',
	NEW_FIRM VARCHAR(1000) COMMENT 'Departure destination',
	NEW_FIRM_TYPE VARCHAR(1000) COMMENT 'Departure destination Type',
	NEW_FIRM_BACK_OFFICE VARCHAR(1000) COMMENT 'Departure destination Back-Office',
	PRESTIGE_STATUS VARCHAR(100) COMMENT 'Prestige Status',
	PRIMARY_ROLE VARCHAR(500) COMMENT 'PRIMARY ROLE',
	TRANSITION_PERIOD_END_DATE TIMESTAMP_NTZ(9) COMMENT 'Advisor transition end date',
	DEAL_ASSESTS NUMBER(11,0) COMMENT 'Deal assets',
	EXPECTED_ASSESTS NUMBER(11,0) COMMENT 'Expected assets',
	PREVIOUS_FIRM VARCHAR(100) COMMENT 'Previous Firm of the Advisor',
	PREVIOUS_FIRM_TYPE VARCHAR(100) COMMENT 'Previous Firm type of the Advisor',
	AGE_SEGMENT VARCHAR(50) COMMENT 'Advisor Age Segment : 25-34',
	AGE_SEGMENT_ORD NUMBER(2,0) COMMENT 'Advisor Age Segment ORDER',
	MD_ACTIVE_CERTS VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the certs source',
	ADVISOR_AGE NUMBER(38,0) COMMENT 'Age of the dealer',
	REP_EMAIL VARCHAR(1000) COMMENT 'Advisor repemail',
	CBM VARCHAR(1000) COMMENT 'Advisor cbm',
	BRANCH_NRD VARCHAR(1000) COMMENT 'Advisor branch nrd',
	BRANCH_ADDRESS1 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS1',
	BRANCH_ADDRESS2 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS2',
	BRANCH_CITY VARCHAR(1000) COMMENT 'Advisor branch city',
	BRANCH_POSTAL_CODE VARCHAR(1000) COMMENT 'Advisor branch postal code'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Sat',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PLAN_CODE VARCHAR(8000) COMMENT 'The plan code',
	PLAN_LABEL VARCHAR(8000) COMMENT 'The plan label',
	ACCOUNT_TYPE VARCHAR(8000) COMMENT 'The account type',
	GROUP_TYPE_CODE VARCHAR(8000) COMMENT 'The group type code',
	ACCUMULATION_TYPE VARCHAR(8000) COMMENT 'The accumulation type'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_NBIN_AGG (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.TRANSLINK_EXCHANGE_RATE (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	EXCHANGE_DATE DATE COMMENT 'Exchange rate date',
	EXCHANGERATE NUMBER(38,8) COMMENT 'Conversion rate from USD to CAD',
	REVNO NUMBER(38,0) COMMENT 'Modification version number'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.WT_ADVISOR_IAS_CERTS (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	CID VARCHAR(500) COMMENT 'Source account id  exp: #100002 ',
	FIRST_NAME VARCHAR(500) COMMENT 'First name of the advisor',
	LAST_NAME VARCHAR(500) COMMENT 'last name of the advisor',
	FULL_NAME VARCHAR(1000) COMMENT 'Full name of the advisor',
	PRIMARY_ROLE VARCHAR(500) COMMENT 'Primary role of the advisor',
	RVP VARCHAR(500) COMMENT 'RVP of the advisor',
	BRANCH_NRD VARCHAR(500) COMMENT 'Code of the Branch',
	BRANCH_NAME VARCHAR(500) COMMENT 'Name of the Branch',
	PROVINCE VARCHAR(500) COMMENT 'Province of the advisor',
	IS_ACTIVE NUMBER(1,0) COMMENT 'Flag to identify the whether the advisor is active or not',
	TRADE_NAME VARCHAR(2000) COMMENT 'Trade of the advisor',
	PORTAL_IDS VARCHAR(2000) COMMENT 'Portal identifier exp: PortalIds_#118048',
	BEGIN_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor begin date',
	END_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor end date',
	RR_CD VARCHAR(2000) COMMENT 'Registered representative code',
	ADVISOR_BIRTH_DATE DATE COMMENT 'Advisor month and year of birth'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.WT_IAS_NBIN_SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID',
	PLAN_CODE VARCHAR(8000) COMMENT 'Plan Code',
	PLAN_LABEL VARCHAR(8000) COMMENT 'Plan label',
	ACCOUNT_TYPE VARCHAR(16777216) COMMENT 'Type of Account',
	GROUP_TYPE_CODE VARCHAR(8000) COMMENT 'Group code',
	ACCUMULATION_TYPE VARCHAR(8000) COMMENT 'Accumulation Type',
	ASC_1_RESP_PLAN_TYPES VARCHAR(100) COMMENT 'If Account rap code is the same, ASC_1_RESP_PLAN_TYPES is used to identify the plan'
);
create or replace TRANSIENT TABLE DB_IAW_PROD_DWH.SHARED_BDV.WT_INVESTMENT_CONTRACT_IAS_NBIN (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ADVISOR',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	CLIENT_ID VARCHAR(100) COMMENT 'Client ID',
	MASTER_CD VARCHAR(50) COMMENT 'MASTER CODE of the advisor',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	PLN_MNEM VARCHAR(512) COMMENT 'Plan code',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	ASC_1_RESP_PLAN_TYPES VARCHAR(10) COMMENT 'subtype of the RESP plans'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.WT_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_NBIN_AGG (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.WT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE_MC (
	HK_LINK VARCHAR(64) COMMENT 'Hash of the business keys',
	HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(64) COMMENT 'Hash of the business keys',
	HK_HUB_ADVISOR VARCHAR(64) COMMENT 'Hash of the business keys',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_SRC_SYSTEM VARCHAR(1000) COMMENT 'Represents the source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	FROMREPID VARCHAR(50) COMMENT 'RR code',
	TOREPID VARCHAR(50) COMMENT 'Master code',
	SHARETYPE VARCHAR(50) COMMENT 'Sharing Type (codeSet)',
	SOURCECODE VARCHAR(50) COMMENT 'Source Code / TRANSACTION_TYPE',
	PRODUCTCODE VARCHAR(50) COMMENT 'Product Code / SECURITY_GROUP_CODE',
	REVENUEPCT NUMBER(6,3) COMMENT 'Dispatch of revenues (percentage)',
	COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
	NETCOMMISSIONPCT NUMBER(6,3) COMMENT 'Net Commission Sharing Percentage',
	FEEPCT NUMBER(6,3) COMMENT 'Fee Sharing Percentage',
	REVNO NUMBER(38,0) COMMENT 'Revision number',
	STAMP TIMESTAMP_NTZ(9) COMMENT 'Source row timestamp',
	COMMISSIONPCT_ADVISOR NUMBER(6,3) COMMENT 'Advisor Commission PCT',
	COMMISSIONPCT_FINANCIAL NUMBER(6,3) COMMENT 'Financial Commission PCT',
	NETCOMMISSIONPCT_ADVISOR NUMBER(6,3) COMMENT 'Advisor Net Commission PCT',
	NETCOMMISSIONPCT_FINANCIAL NUMBER(6,3) COMMENT 'Financial Net Commission PCT',
	ADVISOR_ROLE VARCHAR(100) COMMENT 'Advisor Role'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.WT_LINK_PARTY_RELATIONSHIP_SHARE (
	HK_LINK VARCHAR(64) COMMENT 'Hash of the business keys',
	HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(64) COMMENT 'Hash of the business keys',
	HK_HUB_ADVISOR VARCHAR(64) COMMENT 'Hash of the business keys',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_SRC_SYSTEM VARCHAR(1000) COMMENT 'Represents the source system',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	A_C_REPRESENTATIVE VARCHAR(50) COMMENT 'RR code',
	COM_TYPE VARCHAR(50) COMMENT 'Commission type',
	COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
	IS_RESHARED NUMBER(7,3) COMMENT 'Indicator to identify  it is Reshared or not',
	MASTER_CODE VARCHAR(50) COMMENT 'Master code',
	PHYSICAL NUMBER(7,3) COMMENT 'PHYSICAL number ',
	TOREPID VARCHAR(50) COMMENT 'To Representative ID',
	COMMISSIONPCT_ADVISOR NUMBER(6,3) COMMENT 'Advisor Commission PCT',
	COMMISSIONPCT_FINANCIAL NUMBER(6,3) COMMENT 'Financial Commission PCT'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.WT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Master code of the Advisor',
	COMPANY_CODE VARCHAR(50) COMMENT 'ADVISOR COMPANY CODE ',
	COMPANY_NAME VARCHAR(512) COMMENT 'ADVISOR COMPANY NAME ',
	REGULATORY_ORGANIZATION_NAME VARCHAR(512) COMMENT 'Regulatory Organisation NAME ',
	REGULATORY_ORGANIZATION_CODE VARCHAR(50) COMMENT 'Regulatory Organisation Code ',
	DEALER_CODE VARCHAR(50) COMMENT 'Dealer code',
	DEALER_NAME VARCHAR(512) COMMENT 'Dealer Name',
	REGION_CODE VARCHAR(512) COMMENT 'Region Code',
	REGION_NAME VARCHAR(512) COMMENT 'Region Name',
	REGION_VP VARCHAR(16777216) COMMENT 'Regional VP',
	BRANCHCODE VARCHAR(50) COMMENT 'Branch Code',
	BRANCHNAME VARCHAR(512) COMMENT 'Branch name',
	TEAM_CODE NUMBER(38,0) COMMENT 'Team Code',
	TEAM_NAME VARCHAR(512) COMMENT 'Team name',
	ADVISOR_FULLNAME VARCHAR(512) COMMENT 'Advisor Full name',
	FIRSTNAME VARCHAR(512) COMMENT 'Advisor First name',
	LASTNAME VARCHAR(512) COMMENT 'Advisor Last name',
	ADVISOR_CORPORATION_NAME VARCHAR(512) COMMENT 'Advisor corporation name',
	STATUS VARCHAR(512) COMMENT 'Advisor status',
	GROUP_RSP_INDICATOR VARCHAR(512) COMMENT 'Indiactor to show its Group RSp or not',
	PROVINCE_CODE VARCHAR(16777216) COMMENT 'Code of Province',
	PROVINCE VARCHAR(16777216) COMMENT 'Province',
	ADVISOR_START_DATE TIMESTAMP_NTZ(9) COMMENT 'Start date of the advisor',
	NEW_ADVISOR NUMBER(38,0) COMMENT 'Flag to identify new advisor',
	DEPARTED_ADVISOR_IND NUMBER(1,0) COMMENT 'DEPARTED ADVISOR INDICATOR',
	END_DATE TIMESTAMP_NTZ(9) COMMENT 'Departure date of the advisor (TBD)',
	REASON VARCHAR(1000) COMMENT 'Reason of departure',
	NEW_FIRM VARCHAR(1000) COMMENT 'Departure destination',
	NEW_FIRM_TYPE VARCHAR(1000) COMMENT 'Departure destination Type',
	NEW_FIRM_BACK_OFFICE VARCHAR(1000) COMMENT 'Departure destination Back-Office',
	PRESTIGE_STATUS VARCHAR(100) COMMENT 'Prestige Status',
	PRIMARY_ROLE VARCHAR(500) COMMENT 'Primary role',
	TRANSITION_PERIOD_END_DATE TIMESTAMP_NTZ(9) COMMENT 'Advisor transition end date',
	DEAL_ASSESTS NUMBER(11,0) COMMENT 'Deal assets',
	EXPECTED_ASSESTS NUMBER(11,0) COMMENT 'Expected assets',
	PREVIOUS_FIRM VARCHAR(100) COMMENT 'Previous Firm of the Advisor',
	PREVIOUS_FIRM_TYPE VARCHAR(100) COMMENT 'Previous Firm type of the Advisor',
	AGE_SEGMENT VARCHAR(50) COMMENT 'Advisor Age Segment : 25-34',
	AGE_SEGMENT_ORD NUMBER(2,0) COMMENT 'Advisor Age Segment ORDER',
	MD_ACTIVE_CERTS VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the certs source',
	ADVISOR_AGE NUMBER(38,0) COMMENT 'Age of the dealer',
	REP_EMAIL VARCHAR(1000) COMMENT 'Advisor repemail',
	CBM VARCHAR(1000) COMMENT 'Advisor cbm',
	BRANCH_NRD VARCHAR(1000) COMMENT 'Advisor branch nrd',
	BRANCH_ADDRESS1 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS1',
	BRANCH_ADDRESS2 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS2',
	BRANCH_CITY VARCHAR(1000) COMMENT 'Advisor branch city',
	BRANCH_POSTAL_CODE VARCHAR(1000) COMMENT 'Advisor branch postal code'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.WT_REGISTERED_REPRESENTATIVE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	HK_SAT VARCHAR(40) COMMENT 'Hash of the Satellite for the multi-active keys',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	RR_CD VARCHAR(50) COMMENT 'registered representative code',
	REPNAME VARCHAR(512) COMMENT 'Representative name',
	FIRSTNAME VARCHAR(512) COMMENT 'Representative first name',
	LASTNAME VARCHAR(512) COMMENT 'Representative last name',
	BRANCHCODE VARCHAR(50) COMMENT 'Code of the representative branch code',
	BRANCHNAME VARCHAR(512) COMMENT 'Name of the representative branch',
	GROUPID NUMBER(38,0) COMMENT 'Representant Group ID',
	GROUPDESCRIPTION VARCHAR(512) COMMENT 'Advisor group description',
	FIXEDFEEIND NUMBER(38,0) COMMENT 'Fixed fees indicator',
	MANAGEDIND NUMBER(38,0) COMMENT 'Managed indicator',
	REFIND NUMBER(38,0) COMMENT 'Holding value currency',
	ACTIVEIND NUMBER(38,0) COMMENT 'Active RR code indicator',
	SEGFUNDIND NUMBER(38,0) COMMENT 'Segregated funds indicator',
	REVNO NUMBER(38,0) COMMENT 'Revision number',
	STAMP TIMESTAMP_NTZ(9) COMMENT 'Source row timestamp',
	USERID VARCHAR(512) COMMENT 'User id',
	ACTIVE NUMBER(38,0) COMMENT 'Active user indicator',
	ADVISOR_ID VARCHAR(512) COMMENT 'Advisor id',
	COMMRATEPCT NUMBER(6,3) COMMENT 'Default Commission Rate Percentage',
	SHAREGROSSCOMMIND NUMBER(38,0) COMMENT 'Indicator of share of gross commission',
	STARTDATE DATE COMMENT 'the starting date of the advisor',
	MAINREPCODE VARCHAR(50) COMMENT 'Main RR code',
	RGN_MGR VARCHAR(512) COMMENT 'The name of the regional VP',
	BRN_CD VARCHAR(50) COMMENT 'Univeris Code for the advisors branch',
	BRN_NAME VARCHAR(512) COMMENT 'The advisor branch name',
	REP_LNAME VARCHAR(512) COMMENT 'Advisor last name',
	REP_FNAME VARCHAR(512) COMMENT 'Advisor first name'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.WT_REGISTERED_REPRESENTATIVE_IAS_CERTS (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	HK_SAT VARCHAR(40) COMMENT 'Hash of the Satellite for the multi-active keys',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	RR_CD VARCHAR(50) COMMENT 'registered representative code',
	CID VARCHAR(500) COMMENT 'Source account id exp: #100002',
	FIRST_NAME VARCHAR(500) COMMENT 'Advisor First name',
	LAST_NAME VARCHAR(500) COMMENT 'Advisor Last name',
	FULL_NAME VARCHAR(1000) COMMENT 'Advisor Full name',
	PRIMARY_ROLE VARCHAR(500) COMMENT 'Advisor Primary role',
	RVP VARCHAR(500) COMMENT 'Reginal VP of advisor',
	BRANCH_NRD VARCHAR(500) COMMENT 'Branch code of the Advisor',
	BRANCH_NAME VARCHAR(500) COMMENT 'Branch Name of the Advisor',
	PROVINCE VARCHAR(500) COMMENT 'PROVINCE of the advisor',
	IS_ACTIVE NUMBER(1,0) COMMENT 'Indicator to show the advisor is active or not',
	TRADE_NAME VARCHAR(2000) COMMENT 'Trade name',
	PORTAL_IDS VARCHAR(2000) COMMENT 'Portal id exp- PortalIds_#118048 ',
	BEGIN_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor begin date',
	END_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor end date',
	ADVISOR_BIRTH_DATE DATE COMMENT 'Advisor month and year of birth',
	RDV_RR_IAS_CERTS_MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version for RDV Sat_REGISTERED_REPRESENTATIVE_IAS_CERTS',
	REP_EMAIL VARCHAR(1000) COMMENT 'Advisor repemail',
	CBM VARCHAR(1000) COMMENT 'Advisor cbm',
	BRANCH_ADDRESS1 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS1',
	BRANCH_ADDRESS2 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS2',
	BRANCH_CITY VARCHAR(1000) COMMENT 'Advisor branch city',
	BRANCH_POSTAL_CODE VARCHAR(1000) COMMENT 'Advisor branch postal code'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.WT_SAT_CONTRACT_AUA_SEG_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	ACCOUNT_AUA_SEGMENT VARCHAR(1000) COMMENT 'Represents the segmentation of advisors based on their AUA',
	ACCOUNT_AUA_SEGMENT_ORDER NUMBER(38,0) COMMENT 'Order of the AUA segmentation, this field is done for Power BI display'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.WT_SAT_CONTRACT_COMPUTE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PLAN_CODE VARCHAR(8000),
	PLAN_LABEL VARCHAR(8000),
	ACCOUNT_TYPE VARCHAR(16777216),
	GROUP_TYPE_CODE VARCHAR(8000),
	ACCUMULATION_TYPE VARCHAR(8000),
	ACCOUNT_IND NUMBER(1,0) COMMENT 'Account Flag, Total Number of Client Accounts',
	CASH_EQLT_PROFILE_PCT VARCHAR(3) COMMENT 'Cash or Equivalent Profile %',
	INCOME_PROFILE_PCT VARCHAR(3) COMMENT 'Income Profile %',
	GROWTH_PROFILE_PCT VARCHAR(3) COMMENT 'Growth Profile %',
	SPECULATION_PROFILE_PCT VARCHAR(3) COMMENT 'Speculation Profile %',
	UNKNOWN_PROFILE_PCT VARCHAR(3) COMMENT 'Unknown Profile %',
	LOW_RISK_PCT VARCHAR(3) COMMENT 'Low Risk %',
	MEDIUM_RISK_PCT VARCHAR(3) COMMENT 'Medium Risk %',
	HIGH_RISK_PCT VARCHAR(3) COMMENT 'High Risk %',
	UNKNOWN_RISK_PCT VARCHAR(3) COMMENT 'Unknown Risk %',
	NBIN_CLIENT_ID VARCHAR(50) COMMENT 'NBIN Clients Id.'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.WT_SAT_INVESTMENT_PRODUCT_TYPE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	SYMBOL VARCHAR(512),
	NAME VARCHAR(1000),
	ASSET_CATEGORY VARCHAR(512),
	CATEGORY VARCHAR(512),
	PRODUCT_GROUP VARCHAR(512),
	ISSUER_COMPANY_CODE VARCHAR(512),
	ISSUER_COMPANY_NAME VARCHAR(1000)
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.WT_SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	SYMBOL VARCHAR(1000) COMMENT 'Product Symbol',
	NAME VARCHAR(1000) COMMENT 'Product name',
	ASSET_CATEGORY VARCHAR(1000) COMMENT 'Category of the Product exp: common stock, debentures etc',
	CATEGORY VARCHAR(1000) COMMENT 'Catogory of the product',
	PRODUCT_GROUP VARCHAR(1000) COMMENT 'Group of the product',
	ISSUER_COMPANY_CODE VARCHAR(1000) COMMENT 'Issuer Company code',
	ISSUER_COMPANY_NAME VARCHAR(1000) COMMENT 'Issuer Company Name'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.WT_SAT_INVESTMENT_PRODUCT_TYPE_MERGE (
	HK_HUB VARCHAR(7000) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(7000) DEFAULT '0' COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	SYMBOL VARCHAR(1000),
	NAME VARCHAR(1000),
	ISSUER_COMPANY_NAME VARCHAR(1000)
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_AUA_SEG_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CLIENT_AUA_SEGMENT VARCHAR(1000) COMMENT 'Represents the segmentation of clients based on their AUA',
	CLIENT_AUA_SEGMENT_ORDER NUMBER(38,0) COMMENT 'Order of the AUA segmentation, this field is done for Power BI display'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	INCOME_AMT NUMBER(38,2) COMMENT 'Client income',
	INCOME_LEVEL_1_SEGMENT VARCHAR(50) COMMENT 'Client level 1 income Segment : $30k - $50k',
	INCOME_LEVEL_1_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client level 1 income Segment ORDER',
	INCOME_LEVEL_2_SEGMENT VARCHAR(50) COMMENT 'Client level 2 income Segment : Lower Income',
	INCOME_LEVEL_2_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client level 2 income Segment ORDER',
	CLIENT_AUA_SEGMENT VARCHAR(50) COMMENT 'Client AUA Segment : 25k-100k',
	CLIENT_AUA_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client AUA Segment ORDER',
	AGE_SEGMENT VARCHAR(50) COMMENT 'Client Age Segment : 25-34',
	AGE_SEGMENT_ORD NUMBER(2,0) COMMENT 'Client Age Segment ORDER',
	NEW_CLIENT_IND VARCHAR(16777216) COMMENT 'New client indicator',
	CLIENT_START_DT TIMESTAMP_NTZ(9) COMMENT 'Client Start Date',
	CLIENT_INV_KNOWLEDGE_LVL VARCHAR(10) COMMENT 'Clients Account Investment Knowledge',
	CLIENT_NAME VARCHAR(2000) COMMENT 'Client name',
	CLIENT_AGE NUMBER(38,0) COMMENT 'Client Age'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ADVISOR_AUA_SEG_COMPUTE (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	ADVISOR_AUA_SEGMENT VARCHAR(1000) COMMENT 'Represents the segmentation of advisors based on their AUA',
	ADVISOR_AUA_SEGMENT_ORDER NUMBER(38,0) COMMENT 'Order of the AUA segmentation, this field is done for Power BI display',
	SUSPENDED_IND NUMBER(1,0) COMMENT 'suspended Flag, if an advisor is deleted in certs but still have AUA, will be considered as suspended'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_BDV.WT_SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) DEFAULT '0' COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID',
	PLAN_CODE VARCHAR(8000) COMMENT 'The plan code',
	PLAN_LABEL VARCHAR(8000) COMMENT 'The plan label',
	ACCOUNT_TYPE VARCHAR(16777216) COMMENT 'The account type',
	GROUP_TYPE_CODE VARCHAR(8000) COMMENT 'The group type code',
	ACCUMULATION_TYPE VARCHAR(8000) COMMENT 'The accumulation type',
	ASC_1_RESP_PLAN_TYPES VARCHAR(100) COMMENT 'subtype of the RESP plans'
);
create or replace view DB_IAW_PROD_DWH.SHARED_BDV.VW_CLIENT_CONTRACT(
	HK_HUB_CONTRACT,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	A_C_CLIENT,
	MD_START_DT,
	MD_ACTIVE
) as 
SELECT  DISTINCT 
HC.HK_HUB AS HK_HUB_CONTRACT
,SHA1(UPPER(CONCAT(COALESCE(TRIM(HC.MD_SRC_SYSTEM), '#NULL#'), '|' , COALESCE(TRIM(SC.A_C_CLIENT), '#NULL#')))) AS HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
,A_C_CLIENT
,SC.MD_START_DT 
,SC.MD_ACTIVE 
FROM SHARED_RDV.HUB_CONTRACT HC 
INNER JOIN SHARED_RDV.SAT_CONTRACT_IAS_NBIN SC 
	ON HC.HK_HUB = SC.HK_HUB 
WHERE 
	A_C_CLIENT NOT  RLIKE '^[A-Z][A-Z].*' 
	AND A_C_CLIENT IS NOT NULL;
create or replace view DB_IAW_PROD_DWH.SHARED_BDV.VW_EXCHANGE_RATE(
	HK_LINK,
	MD_START_DT,
	MD_CREATION_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_CREATION_AUDIT_ID,
	MD_EXTRACT_DT,
	EXCHANGE_DATE,
	EXCHANGERATE,
	REVNO
) as
SELECT 
SHA1(UPPER(CONCAT(COALESCE(TRIM('IAS'), '#NULL#'), '|' , COALESCE(TRIM(TO_VARCHAR(EXCHANGE_DATE)), '#NULL#')))) AS HK_LINK,
NVL(MD_START_DT, LAG(MD_START_DT) IGNORE NULLS OVER (ORDER BY EXCHANGE_DATE)) AS MD_START_DT, 
NVL(MD_CREATION_DT, LAG(MD_CREATION_DT) IGNORE NULLS OVER (ORDER BY EXCHANGE_DATE)) AS MD_CREATION_DT,
NVL(MD_SOURCE, LAG(MD_SOURCE) IGNORE NULLS OVER (ORDER BY EXCHANGE_DATE)) AS MD_SOURCE,
NVL(MD_SRC_SYSTEM, LAG(MD_SRC_SYSTEM) IGNORE NULLS OVER (ORDER BY EXCHANGE_DATE)) AS MD_SRC_SYSTEM,
NVL(MD_CREATION_AUDIT_ID, LAG(MD_CREATION_AUDIT_ID) IGNORE NULLS OVER (ORDER BY EXCHANGE_DATE)) AS MD_CREATION_AUDIT_ID,
NVL(MD_EXTRACT_DT, LAG(MD_EXTRACT_DT) IGNORE NULLS OVER (ORDER BY EXCHANGE_DATE)) AS MD_EXTRACT_DT, 
EXCHANGE_DATE,
NVL(EXCHANGERATE, LAG(EXCHANGERATE) IGNORE NULLS OVER (ORDER BY EXCHANGE_DATE)) AS EXCHANGERATE, 
NVL(REVNO, LAG(REVNO) IGNORE NULLS OVER (ORDER BY EXCHANGE_DATE)) AS REVNO
FROM
(SELECT D.""DATE"" AS EXCHANGE_DATE,E.EXCHANGERATE,HK_LINK, MD_START_DT, MD_CREATION_DT, MD_SOURCE, MD_SRC_SYSTEM, MD_CREATION_AUDIT_ID, MD_EXTRACT_DT, REVNO
FROM STEWARDSHIP_RDV.REF_DATE D
LEFT OUTER JOIN SHARED_RDV.TRANSLINK_EXCHANGE_RATE E 
ON D.""DATE""=E.EXCHANGE_DATE 
WHERE D.""DATE"" BETWEEN (SELECT MIN(EXCHANGE_DATE) FROM SHARED_RDV.TRANSLINK_EXCHANGE_RATE) AND (SELECT MAX(EXCHANGE_DATE) FROM SHARED_RDV.TRANSLINK_EXCHANGE_RATE)
ORDER BY D.""DATE"") E;
create or replace view DB_IAW_PROD_DWH.SHARED_BDV.VW_IAS_RRCODE_MASTERCODE_TRANS(
	A_C_REPRESENTATIVE,
	COMMISSIONPCT,
	TOREPID,
	MASTER_CODE,
	PHYSICAL,
	COM_TYPE,
	IS_RESHARED,
	MD_START_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	ADVISOR_ROLE
) as
/* Advisors from commission portal : All active users of the portal */
WITH ADV AS 
(
	SELECT DISTINCT TRIM(RM.MAINREPCODE) AS MAINREPCODE, RM.FIRSTNAME, RM.LASTNAME
	FROM SHARED_BDV.WT_REGISTERED_REPRESENTATIVE rm 
	WHERE rm.ACTIVE = 1 
	ORDER BY MAINREPCODE, RM.FIRSTNAME, RM.LASTNAME 
),
/* Only active shares of commissions */
LV_SHARE AS 
(
	SELECT * FROM SHARED_BDV.WT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE_MC R
	-- WHERE SHARETYPE <> 'noreference' AND SHARETYPE <> 'option' AND (FROMREPID <> 'SBEP' OR SHARETYPE <> 'override') -- Same filter available in IAS mapping (Pradeep)
),
/* Case 1 : RR code share with a master code of an advisor */
FROM_RR_TO_MAIN AS
(
	SELECT DISTINCT TRIM(s.FROMREPID) AS FROMREPID, s.COMMISSIONPCT, TRIM(s.TOREPID) AS TOREPID, 
	TRIM(ADV_to.MAINREPCODE) AS MASTER_CODE, 1 AS PHYSICAL, 'FROM_RR_TO_MAIN' AS COM_TYPE, 0 AS IS_RESHARED, s.MD_START_DT ,s.MD_SOURCE ,s.MD_EXTRACT_DT, COALESCE(s.ADVISOR_ROLE,'-1') AS ADVISOR_ROLE
	FROM LV_SHARE s 
	LEFT JOIN ADV ADV_to
	ON TRIM(s.TOREPID) = TRIM(ADV_to.MAINREPCODE)
	WHERE ADV_to.MAINREPCODE IS NOT NULL -- AND s.COMMISSIONPCT > 0
	ORDER BY FROMREPID
),
/* Case 2 : RR code share with RR code that has a master code */
FROM_RR_TO_RR_TO_MAIN AS
(
	SELECT DISTINCT TRIM(s.FROMREPID) AS FROMREPID, s.COMMISSIONPCT, TRIM(s.TOREPID) AS TOREPID, 
  TRIM(rr.MAINREPCODE) AS MASTER_CODE, 1 AS PHYSICAL, 'FROM_RR_TO_RR_TO_MAIN' AS COM_TYPE, 0 AS IS_RESHARED, s.MD_START_DT,s.MD_SOURCE ,s.MD_EXTRACT_DT, COALESCE(s.ADVISOR_ROLE,'-1') AS ADVISOR_ROLE
	FROM LV_SHARE s 
	LEFT JOIN FROM_RR_TO_MAIN
	ON FROM_RR_TO_MAIN.FROMREPID = TRIM(s.FROMREPID) AND FROM_RR_TO_MAIN.TOREPID = TRIM(s.TOREPID) 	
	LEFT JOIN SHARED_BDV.WT_REGISTERED_REPRESENTATIVE rr 
	ON TRIM(rr.RR_CD) = TRIM(s.TOREPID) AND rr.ACTIVE=1 AND TRIM(rr.RR_CD) = TRIM(rr.MAINREPCODE)
	WHERE FROM_RR_TO_MAIN.FROMREPID IS NULL --AND s.COMMISSIONPCT > 0 
	AND rr.MAINREPCODE IS NOT NULL
	ORDER BY FROMREPID
),
/* RR code share with an RR code that is not linked to a main rep code */
OTHER AS
(
	SELECT DISTINCT TRIM(s.FROMREPID) AS FROMREPID, s.COMMISSIONPCT, TRIM(s.TOREPID) AS TOREPID, 
  TRIM(s.TOREPID) AS MASTER_CODE, 0 AS PHYSICAL, 'OTHER' AS COM_TYPE, 0 AS IS_RESHARED, s.MD_START_DT,s.MD_SOURCE ,s.MD_EXTRACT_DT, COALESCE(s.ADVISOR_ROLE,'-1')  AS ADVISOR_ROLE
	FROM LV_SHARE s 
	LEFT JOIN FROM_RR_TO_MAIN
	ON FROM_RR_TO_MAIN.FROMREPID = TRIM(s.FROMREPID) AND FROM_RR_TO_MAIN.TOREPID = TRIM(s.TOREPID) 
	LEFT JOIN FROM_RR_TO_RR_TO_MAIN
	ON FROM_RR_TO_RR_TO_MAIN.FROMREPID = TRIM(s.FROMREPID) AND FROM_RR_TO_RR_TO_MAIN.TOREPID = TRIM(s.TOREPID)
	WHERE --s.COMMISSIONPCT > 0 AND 
	FROM_RR_TO_MAIN.FROMREPID IS NULL AND  FROM_RR_TO_RR_TO_MAIN.FROMREPID IS NULL 
	ORDER BY FROMREPID
),
AV_ALL AS
(
	SELECT T.A_C_REPRESENTATIVE, T.COMMISSIONPCT, T.TOREPID, T.MASTER_CODE, T.PHYSICAL, T.COM_TYPE, T.IS_RESHARED, T.MD_START_DT, T.MD_SOURCE,'IAS' AS MD_SRC_SYSTEM ,T.MD_EXTRACT_DT,T.ADVISOR_ROLE
 	FROM 
	(
		SELECT FROMREPID AS A_C_REPRESENTATIVE, COMMISSIONPCT, TOREPID, MASTER_CODE, PHYSICAL, COM_TYPE, IS_RESHARED,MD_START_DT,MD_SOURCE,MD_EXTRACT_DT,ADVISOR_ROLE
		FROM FROM_RR_TO_MAIN
		WHERE MASTER_CODE IS NOT NULL
		
		UNION ALL
		
		SELECT FROMREPID AS A_C_REPRESENTATIVE, COMMISSIONPCT, TOREPID, MASTER_CODE, PHYSICAL, COM_TYPE, IS_RESHARED,MD_START_DT,MD_SOURCE,MD_EXTRACT_DT,ADVISOR_ROLE
		FROM FROM_RR_TO_RR_TO_MAIN
		WHERE MASTER_CODE IS NOT NULL
		
		UNION ALL
		
		SELECT FROMREPID AS A_C_REPRESENTATIVE, COMMISSIONPCT, TOREPID, MASTER_CODE, PHYSICAL, COM_TYPE, IS_RESHARED,MD_START_DT,MD_SOURCE,MD_EXTRACT_DT,ADVISOR_ROLE
		FROM OTHER
		WHERE MASTER_CODE IS NOT NULL
	) AS T
)
SELECT *
FROM AV_ALL
ORDER BY A_C_REPRESENTATIVE;
create or replace view DB_IAW_PROD_DWH.SHARED_BDV.VW_INITIAL_LOADING_INVESTIA_UNIVERIS_WT_TRANSLINK_FINANCIAL_TRANSACTION(
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_CONTRACT,
	MD_START_DT,
	MD_CREATION_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	TRANSACTION_ID,
	UNIVERIS_CLIENT_ID,
	MASTER_CODE,
	UNIVERIS_PLAN_ID,
	INVESTMENT_PRODUCT_ID,
	PLN_MNEM,
	TRADE_DATE,
	GROSS_AMOUNT,
	TRANSACTION_TYPE,
	ORD_TRANSACTION_TYPE,
	CASH_FLOW,
	CASH_FLOW_TYPE,
	ADMINISTRATORY_TYPE
) as
WITH 
LATEST_VERSION_CONTRACT AS (
	SELECT SLR.HK_LINK,
	SLR.MD_START_DT,
	SLC.ADMINISTRATOR_TYPE, 
	COALESCE (SLC.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLR.HK_LINK,LR.HK_HUB_CONTRACT ORDER BY SLC.MD_START_DT DESC ),1) AS RANK_CONTRACT
	FROM TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_INVESTIA_UNIVERIS SLR
	INNER JOIN TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR LR 
		ON SLR.HK_LINK = LR.HK_LINK
	LEFT JOIN SHARED_RDV.SAT_CONTRACT_INVESTIA_UNIVERIS SLC 
		ON SLC.HK_HUB = LR.HK_HUB_CONTRACT  
	    AND SLC.MD_START_DT <= SLR.MD_START_DT
),
LATEST_VERSION_PRODUCT AS (
	SELECT SLR.HK_LINK,
	SLR.MD_START_DT,
	SLC.SYMBOL, 
	COALESCE (SLC.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLR.HK_LINK,LR.HK_HUB_INVESTMENT_PRODUCT_TYPE ORDER BY SLC.MD_START_DT DESC ),1) AS RANK_PRODUCT
	FROM TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_INVESTIA_UNIVERIS SLR
	INNER JOIN TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR LR 
		ON SLR.HK_LINK = LR.HK_LINK
	LEFT JOIN SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_UNIVERIS SLC 
		ON SLC.HK_HUB = LR.HK_HUB_INVESTMENT_PRODUCT_TYPE  
	    AND SLC.MD_START_DT <= SLR.MD_START_DT
),
LATEST_VERSION_REGISTERED_REPRESENTATIVE AS(
SELECT
	SLR.HK_LINK,
	SLR.MD_START_DT,
	SRR.HK_HUB,
	COALESCE (SRR.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLR.HK_LINK,SRR.HK_HUB ORDER BY SRR.MD_START_DT DESC ),1) AS RANK_RR
FROM TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_INVESTIA_UNIVERIS SLR
	INNER JOIN TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR LR 
    ON SLR.HK_LINK = LR.HK_LINK
LEFT JOIN SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_INVESTIA_UNIVERIS SRR 
    ON SRR.REP_SYSID = SLR.REP_SYSID
	AND SRR.MD_START_DT <= SLR.MD_START_DT
),
LATEST_VERSION_SHARE AS (
	SELECT 
	LVRR.HK_LINK,
	COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE,
	COMM_SHARE.MD_START_DT,
	COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR,
	COMM_SHARE.MASTER_CODE,
	COMM_SHARE.COMMISSIONPCT,
	COALESCE (COMM_SHARE.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY LVRR.HK_LINK,COMM_SHARE.HK_LINK ORDER BY COMM_SHARE.MD_START_DT DESC ),1) AS RANK_SHARE
FROM LATEST_VERSION_REGISTERED_REPRESENTATIVE LVRR
	LEFT JOIN 	( SELECT LCS.HK_LINK,LCS.HK_HUB_REGISTERED_REPRESENTATIVE,CS.MD_START_DT,LCS.HK_HUB_PARTY_ROLE_ADVISOR,LCS.MASTER_CODE,CS.COMMISSIONPCT,CS.MD_ACTIVE
	        	FROM SHARED_BDV.LINK_PARTY_RELATIONSHIP_SHARE LCS 
	        	INNER JOIN SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE CS 
	        		ON CS.HK_LINK=LCS.HK_LINK AND CS.MD_SRC_SYSTEM = 'INVESTIA-UNIVERIS'
	    		) COMM_SHARE
	    ON LVRR.HK_HUB=COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE
	    AND  COMM_SHARE.MD_START_DT <= DATEADD(SECOND, 86399, LVRR.MD_START_DT) 
	    AND  LVRR.MD_ACTIVE = 'A' AND LVRR.RANK_RR = 1
),
LATEST_VERSION_BDV_INVESTMENT_CONTRACT AS (
	SELECT SLR.HK_LINK,
	SLR.MD_START_DT,
	LC.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES ,
	LC.PLN_MNEM ,
	LC.MD_SRC_SYSTEM , 
	COALESCE (SLC.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLR.HK_LINK,LR.HK_HUB_CONTRACT ORDER BY SLC.MD_START_DT DESC ),1) AS RANK_CONTRACT
	FROM TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_INVESTIA_UNIVERIS SLR
	INNER JOIN TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR LR 
		ON SLR.HK_LINK = LR.HK_LINK
	LEFT JOIN LATEST_VERSION_SHARE COMM_SHARE
    ON COMM_SHARE.HK_LINK = SLR.HK_LINK 
    AND  COMM_SHARE.MD_ACTIVE = 'A' AND COMM_SHARE.RANK_SHARE = 1 
	LEFT JOIN SHARED_BDV.LINK_INVESTMENT_CONTRACT LC 
		ON LC.HK_HUB_CONTRACT = LR.HK_HUB_CONTRACT
		AND lc.HK_HUB_PARTY_ROLE_ADVISOR = COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR
	LEFT JOIN  SHARED_BDV.SAT_LINK_INVESTMENT_CONTRACT SLC
	    ON SLC.HK_LINK = LC.HK_LINK 
	    AND SLC.MD_START_DT <= SLR.MD_START_DT
)
SELECT DISTINCT 
	--COALESCE(LIC.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,'0') AS HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
	COALESCE(COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR,'0') AS HK_HUB_PARTY_ROLE_ADVISOR, 
	DECODE(TRUE, CON.PLN_MNEM IS NULL ,'0', SHA1(UPPER(CONCAT(COALESCE(TRIM(CON.MD_SRC_SYSTEM),'#NULL#') ,'|', COALESCE(TRIM(CON.PLN_MNEM),'#NULL#'), '|', '#NULL#','|', '#NULL#','|', '#NULL#' )))) AS HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES, 
	COALESCE(LR.HK_HUB_INVESTMENT_PRODUCT_TYPE,'0') AS HK_HUB_INVESTMENT_PRODUCT_TYPE, 
	COALESCE(LR.HK_HUB_CONTRACT,'0') AS HK_HUB_CONTRACT, 
	SLR.TRADE_DT AS MD_START_DT, 
	CURRENT_TIMESTAMP() AS MD_CREATION_DT, 
	SLR.MD_SOURCE AS MD_SOURCE, 
	LR.MD_SRC_SYSTEM AS MD_SRC_SYSTEM, 
	SLR.MD_EXTRACT_DT AS MD_EXTRACT_DT, 
	LR.TRANSACTION_ID AS TRANSACTION_ID, 
	LR.UNIVERIS_CLIENT_ID AS UNIVERIS_CLIENT_ID, 
	COMM_SHARE.MASTER_CODE AS MASTER_CODE, 
	LR.UNIVERIS_PLAN_ID AS UNIVERIS_PLAN_ID, 
	LR.INVESTMENT_PRODUCT_ID AS INVESTMENT_PRODUCT_ID, 
	CON.PLN_MNEM AS PLN_MNEM, 
	SLR.TRADE_DT AS TRADE_DATE, 
	SLR.TRX_GROSS * NVL(COMM_SHARE.COMMISSIONPCT/100,1) AS GROSS_AMOUNT, 
	CASE
			WHEN SLR.SPR_CTGY = 'PUR' THEN 'Purchases'
			WHEN SLR.SPR_CTGY = 'RED' THEN 'Redemptions'
			WHEN SLR.TRX_MNEM_ENG LIKE '%SWI%' THEN 'Switch In'
			WHEN SLR.TRX_MNEM_ENG LIKE '%SWO%' THEN 'Switch Out'
			WHEN SLR.TRX_MNEM_ENG LIKE '%TIN%' THEN 'Transfer In'
			WHEN SLR.TRX_MNEM_ENG LIKE '%TOT%' THEN 'Transfer Out'
			WHEN SLR.TRX_MNEM_ENG LIKE '%XIN%'
			OR SLR.TRX_MNEM_ENG LIKE '%DXI%' THEN 'External Transfer In'
			WHEN SLR.TRX_MNEM_ENG LIKE '%XOT%'
			OR SLR.TRX_MNEM_ENG LIKE '%DXO%' THEN 'External Transfer Out'
			ELSE 'Others'
	END AS TRANSACTION_TYPE, 
	CAST((CASE 1 WHEN (CASE WHEN (SLR.SPR_CTGY = 'PUR') THEN 1 
	      WHEN NOT (SLR.SPR_CTGY = 'PUR') THEN 0 ELSE NULL END) THEN 1 
	      WHEN (CASE WHEN (SLR.SPR_CTGY = 'RED') THEN 1 
	      WHEN NOT (SLR.SPR_CTGY = 'RED') THEN 0 ELSE NULL END) THEN 2 
	      WHEN (CASE WHEN (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'SWI') > 0) THEN 1 
	      WHEN NOT (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'SWI') > 0) THEN 0 ELSE NULL END) THEN 3 
	      WHEN (CASE WHEN (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'SWO') > 0) THEN 1 
	      WHEN NOT (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'SWO') > 0) THEN 0 ELSE NULL END) THEN 4 
	      WHEN (CASE WHEN (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'TIN') > 0) THEN 1 
	      WHEN NOT (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'TIN') > 0) THEN 0 ELSE NULL END) THEN 5 
	      WHEN (CASE WHEN (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'TOT') > 0) THEN 1 
	      WHEN NOT (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'TOT') > 0) THEN 0 ELSE NULL END) THEN 6 
	      WHEN (CASE WHEN ((REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'XIN') > 0) OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'DXI') > 0)) THEN 1 
	      WHEN NOT ((REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'XIN') > 0)  OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'DXI') > 0)) THEN 0 ELSE NULL END) THEN 7 
	      WHEN (CASE WHEN ((REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'XOT') > 0) OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'DXO') > 0)) THEN 1 
	      WHEN NOT ((REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'XOT') > 0) OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'DXO') > 0)) THEN 0 ELSE NULL END) THEN 8 ELSE 9 END) AS DECIMAL(1, 0)) 
	AS ORD_TRANSACTION_TYPE,
	(CASE 1 WHEN (CASE WHEN ((((REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'XIN') > 0)
	 OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'DXI') > 0)) 
	 OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'XOT') > 0)) 
	 OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'DXO') > 0)) THEN 1 
	 WHEN NOT ((((REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'XIN') > 0) 
	 OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'DXI') > 0)) 
	 OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'XOT') > 0)) 
	 OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'DXO') > 0)) THEN 0 ELSE NULL END) THEN 'Yes' ELSE 'No' END)
	 AS CASH_FLOW,
	CAST((CASE 1 WHEN (CASE WHEN (((((REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'XIN') > 0) 
	 OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'DXI') > 0)) 
	 OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'XOT') > 0)) 
	 OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'DXO') > 0)) AND 
	 (((SLR.TRX_GROSS * (CASE WHEN COMM_SHARE.COMMISSIONPCT IS NULL THEN 1 ELSE COMM_SHARE.COMMISSIONPCT END)) 
	 * SLR.SPR_FACTOR) >= 0)) THEN 1 
	 WHEN NOT (((((REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'XIN') > 0) 
	 OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'DXI') > 0)) 
	 OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'XOT') > 0)) 
	 OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'DXO') > 0)) 
	 AND (((SLR.TRX_GROSS * (CASE WHEN COMM_SHARE.COMMISSIONPCT IS NULL THEN 1 ELSE COMM_SHARE.COMMISSIONPCT END))
	 * SLR.SPR_FACTOR) >= 0)) THEN 0 ELSE NULL END) THEN 'IN FLOW'
	 WHEN (CASE WHEN (((((REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'XIN') > 0) 
	 OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'DXI') > 0)) 
	 OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'XOT') > 0)) 
	 OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'DXO') > 0)) 
	 AND (((SLR.TRX_GROSS * (CASE WHEN COMM_SHARE.COMMISSIONPCT IS NULL THEN 1 ELSE COMM_SHARE.COMMISSIONPCT END)) 
	 * SLR.SPR_FACTOR) < 0)) THEN 1 WHEN NOT (((((REGEXP_INSTR(SLR.TRX_MNEM_ENG, 
	 'XIN') > 0) OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'DXI') > 0)) 
	 OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'XOT') > 0)) 
	 OR (REGEXP_INSTR(SLR.TRX_MNEM_ENG, 'DXO') > 0)) 
	 AND (((SLR.TRX_GROSS * (CASE WHEN COMM_SHARE.COMMISSIONPCT IS NULL THEN 1 
	 ELSE COMM_SHARE.COMMISSIONPCT END)) * SLR.SPR_FACTOR) < 0)) 
	 THEN 0 ELSE NULL END) THEN 'OUT FLOW' ELSE 'OTHER' END) AS VARCHAR(8))
	 AS CASH_FLOW_TYPE, 
	SC.ADMINISTRATOR_TYPE AS ADMINISTRATORY_TYPE	
FROM TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_INVESTIA_UNIVERIS SLR
INNER JOIN TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR LR 
	ON SLR.HK_LINK = LR.HK_LINK
LEFT JOIN LATEST_VERSION_SHARE COMM_SHARE
    ON COMM_SHARE.HK_LINK = SLR.HK_LINK 
    AND  COMM_SHARE.MD_ACTIVE = 'A' AND COMM_SHARE.RANK_SHARE = 1 
LEFT JOIN LATEST_VERSION_BDV_INVESTMENT_CONTRACT CON
    ON CON.HK_LINK = SLR.HK_LINK 
    AND  CON.MD_ACTIVE = 'A' AND CON.RANK_CONTRACT = 1    
LEFT JOIN LATEST_VERSION_PRODUCT PR
    ON PR.HK_LINK = SLR.HK_LINK 
    AND  PR.MD_ACTIVE = 'A' AND PR.RANK_PRODUCT = 1  
LEFT JOIN LATEST_VERSION_CONTRACT SC
    ON SC.HK_LINK = SLR.HK_LINK 
    AND  SC.MD_ACTIVE = 'A' AND SC.RANK_CONTRACT = 1  
WHERE
	SLR.SPR_CTGY IN ('PUR', 'PAC', 'RED', 'AWD', 'SWI', 'SWO', 'TIN', 'TOT', 'XIN', 'XOT')
	AND PR.SYMBOL NOT IN ('MRC001', 'IAAFCCA', 'INVCCA');
create or replace view DB_IAW_PROD_DWH.SHARED_BDV.VW_INITIAL_LOADING_INVESTMENT_CASH_IAS_NBIN(
	MD_SEQ,
	HK_LINK,
	HK_HUB_CONTRACT,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	MD_START_DT,
	MD_CREATION_DT,
	MD_EXTRACT_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	A_C_SUMM_SD_NET_AMT,
	A_C_SUMM_TD_NET_AMT,
	A_C_SUMM_BALANCE_BUS_DATE,
	CONTRACT_ID,
	RR_CD,
	INVESTMENT_PRODUCT_ID,
	MASTER_CODE,
	A_C_CLIENT,
	ACCOUNT_RAP_CODE,
	ASC_1_RESP_PLAN_TYPES,
	RETAIL_PLAN,
	A_C_CURRENCY,
	COMMISSIONPCT,
	ISSUE_COMPANY_NAME,
	ASC_3_MANAGED_TYPE,
	ADMINISTRATOR_TYPE,
	A_C_ACCOUNT_CLASS,
	RETAIL_PLAN_RESP,
	EXCHANGERATE,
	MD_ACTIVE,
	RANK_SHARE,
	COMMISSIONPCT_ADVISOR,
	COMMISSIONPCT_FINANCIAL
) as
WITH LATEST_VERSION_SHARE AS (
	SELECT 
	SLH.HK_LINK,
	COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE,
	COMM_SHARE.MD_START_DT,
	COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR,
	COMM_SHARE.MASTER_CODE,
	COMM_SHARE.COMMISSIONPCT,
	COALESCE (COMM_SHARE.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLH.HK_LINK,COMM_SHARE.HK_LINK ORDER BY COMM_SHARE.MD_START_DT DESC ),1) AS RANK_SHARE,
	COMM_SHARE.COMMISSIONPCT_ADVISOR,
	COMM_SHARE.COMMISSIONPCT_FINANCIAL
	FROM DB_IAW_PROD_DWH.HOLDINGS_RDV.SAT_LINK_INVESTMENT_CASH_RR_IAS_NBIN SLH
	INNER JOIN DB_IAW_PROD_DWH.HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
	    ON  SLH.HK_LINK=LH.HK_LINK
	LEFT JOIN 	( SELECT LCS.HK_LINK,LCS.HK_HUB_REGISTERED_REPRESENTATIVE,CS.MD_START_DT,LCS.HK_HUB_PARTY_ROLE_ADVISOR,LCS.MASTER_CODE,CS.COMMISSIONPCT,CS.MD_ACTIVE,CS.COMMISSIONPCT_ADVISOR,CS.COMMISSIONPCT_FINANCIAL
	        	FROM SHARED_BDV.LINK_PARTY_RELATIONSHIP_SHARE LCS 
	        	INNER JOIN SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE CS 
	        		ON CS.HK_LINK=LCS.HK_LINK AND CS.MD_SRC_SYSTEM = 'IAS'
	    		) COMM_SHARE
	    ON LH.HK_HUB_REGISTERED_REPRESENTATIVE=COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE
	    AND  COMM_SHARE.MD_START_DT <= DATEADD(SECOND, 86399, SLH.A_C_SUMM_BALANCE_BUS_DATE) 
)
SELECT 	LH.MD_SEQ,	
		SHA1(UPPER(CONCAT(
		      COALESCE(TRIM(LH.MD_SEQ), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.MD_SOURCE), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.MD_SRC_SYSTEM), '#NULL#'), '|' 
		    , COALESCE(TRIM(SLH.MD_EXTRACT_DT), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.CONTRACT_ID), '#NULL#'), '|' 
		    , COALESCE(TRIM(COMM_SHARE.MASTER_CODE), '#NULL#'), '|' 
		    , COALESCE(TRIM(LH.INVESTMENT_PRODUCT_ID), '#NULL#'), '|' 
		    , COALESCE(TRIM(CONTRACT.A_C_CLIENT), '#NULL#'), '|' 
		    ,'#NULL#', '|' -- PLN_MNEM
		    ,COALESCE(TRIM(CONTRACT.ACCOUNT_RAP_CODE), '#NULL#'), '|' 
		    ,COALESCE(TRIM(CONTRACT.RETAIL_PLAN),'#NULL#'), '|'
		    ,COALESCE(TRIM(CONTRACT.ASC_1_RESP_PLAN_TYPES),'#NULL#'), '|' 
		    , '#NULL#' -- PLN_SYSID
	    ))) AS HK_LINK,
		COALESCE(LH.HK_HUB_CONTRACT,'0') AS HK_HUB_CONTRACT, 
		SHA1(CONCAT('IAS', '|' , 'IASCASH')) AS HK_HUB_INVESTMENT_PRODUCT_TYPE, 
		COALESCE(COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR,'0') AS HK_HUB_PARTY_ROLE_ADVISOR, 
		DECODE(TRUE, CONTRACT.A_C_CLIENT IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM(LH.MD_SRC_SYSTEM), '#NULL#'), '|' , COALESCE(TRIM(CONTRACT.A_C_CLIENT), '#NULL#')))))  AS HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
		DECODE(TRUE, CONTRACT.ASC_1_RESP_PLAN_TYPES IS NULL AND CONTRACT.RETAIL_PLAN IS NULL AND CONTRACT.ACCOUNT_RAP_CODE IS NULL ,'0', 
		SHA1(UPPER(CONCAT(COALESCE(TRIM(LH.MD_SRC_SYSTEM),'#NULL#') ,'|', '#NULL#','|',COALESCE(TRIM(CONTRACT.ACCOUNT_RAP_CODE),'#NULL#'), '|',  COALESCE(TRIM(CONTRACT.RETAIL_PLAN),'#NULL#'),'|', 
		COALESCE(TRIM(CASE WHEN CONTRACT.ACCOUNT_RAP_CODE <> 'Z' THEN NULL ELSE CONTRACT.ASC_1_RESP_PLAN_TYPES END),'#NULL#'))))) AS HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
		SLH.A_C_SUMM_BALANCE_BUS_DATE AS MD_START_DT, 
		CURRENT_TIMESTAMP() AS MD_CREATION_DT, 
		SLH.MD_EXTRACT_DT AS MD_EXTRACT_DT, 
		LH.MD_SOURCE AS MD_SOURCE, 
		LH.MD_SRC_SYSTEM AS MD_SRC_SYSTEM, 
		SLH.A_C_SUMM_SD_NET_AMT,
		SLH.A_C_SUMM_TD_NET_AMT,
		SLH.A_C_SUMM_BALANCE_BUS_DATE ,
		LH.CONTRACT_ID AS CONTRACT_ID, 
		LH.RR_CD AS RR_CD, 
		LH.INVESTMENT_PRODUCT_ID AS INVESTMENT_PRODUCT_ID, 
		COMM_SHARE.MASTER_CODE AS MASTER_CODE, 
		CONTRACT.A_C_CLIENT AS A_C_CLIENT, 
		CONTRACT.ACCOUNT_RAP_CODE,
		CONTRACT.ASC_1_RESP_PLAN_TYPES AS ASC_1_RESP_PLAN_TYPES	,
		CONTRACT.RETAIL_PLAN,
		CONTRACT.A_C_CURRENCY,
		COMM_SHARE.COMMISSIONPCT,
		'' AS ISSUE_COMPANY_NAME,
		CONTRACT.ASC_3_MANAGED_TYPE,
		CONTRACT.ADMINISTRATOR_TYPE,
		CONTRACT.A_C_ACCOUNT_CLASS,
		CONTRACT.RETAIL_PLAN_RESP,
		LER.EXCHANGERATE,
		COALESCE (COMM_SHARE.MD_ACTIVE,'A') AS MD_ACTIVE,
		COALESCE (ROW_NUMBER() OVER (PARTITION BY SLH.HK_LINK,COMM_SHARE.HK_LINK ORDER BY COMM_SHARE.MD_START_DT DESC ),1) AS RANK_SHARE,
		COMM_SHARE.COMMISSIONPCT_ADVISOR,
		COMM_SHARE.COMMISSIONPCT_FINANCIAL
FROM DB_IAW_PROD_DWH.HOLDINGS_RDV.SAT_LINK_INVESTMENT_CASH_RR_IAS_NBIN SLH
INNER JOIN DB_IAW_PROD_DWH.HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN LH
    ON  SLH.HK_LINK=LH.HK_LINK
LEFT JOIN LATEST_VERSION_SHARE COMM_SHARE
    ON LH.HK_HUB_REGISTERED_REPRESENTATIVE=COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE
    AND  COMM_SHARE.HK_LINK = SLH.HK_LINK 
    AND  COMM_SHARE.MD_ACTIVE = 'A' AND COMM_SHARE.RANK_SHARE = 1
LEFT JOIN 	( SELECT SC.*
            FROM SHARED_RDV.SAT_CONTRACT_IAS_NBIN SC 
            WHERE SC.MD_ACTIVE='A'
			) CONTRACT
    ON LH.HK_HUB_CONTRACT = CONTRACT.HK_HUB  
LEFT JOIN SHARED_BDV.TRANSLINK_EXCHANGE_RATE LER
	ON LER.EXCHANGE_DATE = SLH.A_C_SUMM_BALANCE_BUS_DATE;
create or replace view DB_IAW_PROD_DWH.SHARED_BDV.VW_INITIAL_LOADING_SAT_LINK_COMMISSION_SHARE_MULTIIMAGE(
	HK_LINK,
	MD_START_DT,
	MD_HASHDIFF,
	MD_ACTIVE,
	PREVIOUS_HASHDIFF,
	PREVIOUS_ACTIVE,
	ROW_SRC
) as
WITH STG AS 
(
	SELECT DISTINCT r.HK_LINK, r.MD_START_DT, r.MD_HASHDIFF, r.MD_ACTIVE , 'STG' AS ROW_SRC
	FROM SHARED_BDV.VW_INITIAL_LOADING_WT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE r	
),
SAT AS
(
	SELECT 	DISTINCT r.HK_LINK, 
			LAST_VALUE(r.MD_START_DT) over (partition by r.HK_LINK order by r.MD_START_DT asc) AS MD_START_DT,
			LAST_VALUE(r.MD_HASHDIFF) over (partition by r.HK_LINK order by r.MD_START_DT asc) AS MD_HASHDIFF,
			LAST_VALUE(r.MD_ACTIVE) over (partition by r.HK_LINK order by r.MD_START_DT asc) AS MD_ACTIVE,
			'SAT' AS ROW_SRC
	FROM SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE r
	WHERE MD_SRC_SYSTEM <> 'INVESTIA-UNIVERIS'
),
SRC AS
(
	SELECT 	r.HK_LINK, 
			r.MD_START_DT, 
			r.MD_HASHDIFF, 
			r.MD_ACTIVE,
			lag(r.MD_HASHDIFF, 1, '0') over (partition by r.HK_LINK order by r.MD_START_DT,MD_ACTIVE asc) AS PREVIOUS_HASHDIFF,
			lag(r.MD_ACTIVE, 1, '0') over (partition by r.HK_LINK order by r.MD_START_DT,MD_ACTIVE asc) AS PREVIOUS_ACTIVE,
			r.ROW_SRC
	FROM 
	(
		SELECT * FROM SAT
		UNION  
		SELECT * FROM STG
	) AS r
),
RSLT AS
(
  SELECT * 
  FROM SRC r
  WHERE r.MD_HASHDIFF <> r.PREVIOUS_HASHDIFF OR r.MD_ACTIVE <> r.PREVIOUS_ACTIVE
)
SELECT RSLT.* 
FROM RSLT
LEFT JOIN SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE S ON RSLT.HK_LINK = S.HK_LINK AND RSLT.MD_START_DT = S.MD_START_DT --AND S.MD_ACTIVE = RSLT.MD_ACTIVE
WHERE S.HK_LINK IS NULL;
create or replace view DB_IAW_PROD_DWH.SHARED_BDV.VW_INITIAL_LOADING_WT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE(
	HK_LINK,
	HK_HUB_REGISTERED_REPRESENTATIVE,
	HK_HUB_PARTY_ROLE_ADVISOR,
	MD_HASHDIFF,
	MD_START_DT,
	MD_ACTIVE,
	MD_SRC_SYSTEM,
	MD_SOURCE,
	MD_CREATION_DT,
	MD_EXTRACT_DT,
	A_C_REPRESENTATIVE,
	MASTER_CODE,
	COM_TYPE,
	COMMISSIONPCT,
	IS_RESHARED,
	PHYSICAL,
	TOREPID
) as
WITH ADV AS 
(
	SELECT DISTINCT TRIM(MAINREPCODE) AS MAINREPCODE, FIRSTNAME, LASTNAME
	FROM SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE h
	INNER JOIN SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_COMMISSION s 
	ON s.HK_HUB = h.HK_HUB 
	WHERE ACTIVE = 1 
	QUALIFY ROW_NUMBER() OVER (PARTITION BY S.HK_HUB, S.HK_SAT ORDER BY S.MD_START_DT ASC) = 1
	ORDER BY MAINREPCODE, FIRSTNAME, LASTNAME 	
),

/* Only active shares of commissions */
LV_SHARE AS 
(
	SELECT * FROM SHARED_RDV.LINK_COMMISSION_SHARE_RR l
	INNER JOIN SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR s 
	ON s.HK_LINK = l.HK_LINK 
	WHERE SHARETYPE <> 'noreference' AND SHARETYPE <> 'option' AND (FROMREPID <> 'SBEP' OR SHARETYPE <> 'override')
),

/* Case 1 : RR code share with a master code of an advisor */
FROM_RR_TO_MAIN AS
(
	SELECT DISTINCT TRIM(s.FROMREPID) AS FROMREPID, s.COMMISSIONPCT, TRIM(s.TOREPID) AS TOREPID, 
	TRIM(ADV_to.MAINREPCODE) AS MASTER_CODE, 1 AS PHYSICAL, 'FROM_RR_TO_MAIN' AS COM_TYPE, 0 AS IS_RESHARED, s.MD_START_DT, s.MD_ACTIVE
	FROM LV_SHARE s 
	LEFT JOIN ADV ADV_to
	ON TRIM(s.TOREPID) = TRIM(ADV_to.MAINREPCODE)
	WHERE ADV_to.MAINREPCODE IS NOT NULL AND s.COMMISSIONPCT > 0
	ORDER BY FROMREPID
),

/* Case 2 : RR code share with RR code that has a master code */
FROM_RR_TO_RR_TO_MAIN AS
(
	SELECT DISTINCT TRIM(s.FROMREPID) AS FROMREPID, s.COMMISSIONPCT, TRIM(s.TOREPID) AS TOREPID, 
  	TRIM(rr.MAINREPCODE) AS MASTER_CODE, 1 AS PHYSICAL, 'FROM_RR_TO_RR_TO_MAIN' AS COM_TYPE, 0 AS IS_RESHARED, s.MD_START_DT, s.MD_ACTIVE
	FROM LV_SHARE s 
	LEFT JOIN FROM_RR_TO_MAIN
	ON FROM_RR_TO_MAIN.FROMREPID = TRIM(s.FROMREPID) AND FROM_RR_TO_MAIN.TOREPID = TRIM(s.TOREPID) 	
	LEFT JOIN 
		(SELECT MAINREPCODE, h.RR_CD AS REPID, ACTIVE FROM SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_COMMISSION s
		INNER JOIN SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE h ON s.HK_HUB = h.HK_HUB
		QUALIFY ROW_NUMBER() OVER (PARTITION BY S.HK_HUB, S.HK_SAT ORDER BY S.MD_START_DT ASC) = 1
		) rr 
	ON TRIM(rr.REPID) = TRIM(s.TOREPID) AND rr.ACTIVE=1 AND TRIM(rr.REPID) = TRIM(rr.MAINREPCODE)
	WHERE FROM_RR_TO_MAIN.FROMREPID IS NULL AND s.COMMISSIONPCT > 0 AND rr.MAINREPCODE IS NOT NULL
	ORDER BY FROMREPID
),

/* RR code share with an RR code that is not linked to a main rep code */
OTHER AS
(
	SELECT DISTINCT TRIM(s.FROMREPID) AS FROMREPID, s.COMMISSIONPCT, TRIM(s.TOREPID) AS TOREPID, 
  	TRIM(s.TOREPID) AS MASTER_CODE, 0 AS PHYSICAL, 'OTHER' AS COM_TYPE, 0 AS IS_RESHARED, s.MD_START_DT, s.MD_ACTIVE
	FROM LV_SHARE s 
	LEFT JOIN FROM_RR_TO_MAIN
	ON FROM_RR_TO_MAIN.FROMREPID = TRIM(s.FROMREPID) AND FROM_RR_TO_MAIN.TOREPID = TRIM(s.TOREPID) 
	LEFT JOIN FROM_RR_TO_RR_TO_MAIN
	ON FROM_RR_TO_RR_TO_MAIN.FROMREPID = TRIM(s.FROMREPID) AND FROM_RR_TO_RR_TO_MAIN.TOREPID = TRIM(s.TOREPID)
	WHERE s.COMMISSIONPCT > 0 AND FROM_RR_TO_MAIN.FROMREPID IS NULL AND  FROM_RR_TO_RR_TO_MAIN.FROMREPID IS NULL 
	ORDER BY FROMREPID
),

AV_ALL AS
(
	SELECT T.A_C_REPRESENTATIVE, T.COMMISSIONPCT, T.TOREPID, T.MASTER_CODE, T.PHYSICAL, T.COM_TYPE, T.IS_RESHARED, T.MD_START_DT, T.MD_ACTIVE
	FROM 
	(
		SELECT FROMREPID AS A_C_REPRESENTATIVE, COMMISSIONPCT, TOREPID, MASTER_CODE, PHYSICAL, COM_TYPE, IS_RESHARED, MD_START_DT, MD_ACTIVE
		FROM FROM_RR_TO_MAIN
		WHERE MASTER_CODE IS NOT NULL
		
		UNION ALL
		
		SELECT FROMREPID AS A_C_REPRESENTATIVE, COMMISSIONPCT, TOREPID, MASTER_CODE, PHYSICAL, COM_TYPE, IS_RESHARED, MD_START_DT, MD_ACTIVE
		FROM FROM_RR_TO_RR_TO_MAIN
		WHERE MASTER_CODE IS NOT NULL
		
		UNION ALL
		
		SELECT FROMREPID AS A_C_REPRESENTATIVE, COMMISSIONPCT, TOREPID, MASTER_CODE, PHYSICAL, COM_TYPE, IS_RESHARED, MD_START_DT, MD_ACTIVE
		FROM OTHER
		WHERE MASTER_CODE IS NOT NULL
	) AS T
)

SELECT 
SHA1(CONCAT(COALESCE('IAS','#NULL#'),'|', COALESCE(A_C_REPRESENTATIVE, '#NULL#'), '|' , COALESCE(TOREPID,'#NULL#'))) AS HK_LINK,
SHA1(CONCAT(COALESCE('IAS','#NULL#'),'|', COALESCE(A_C_REPRESENTATIVE, '#NULL#'))) AS HK_HUB_REGISTERED_REPRESENTATIVE,
SHA1(CONCAT(COALESCE('IAS','#NULL#'),'|', COALESCE(MASTER_CODE, '#NULL#'))) AS HK_HUB_PARTY_ROLE_ADVISOR,
SHA1(CONCAT(COALESCE(COM_TYPE, '#NULL#'), '|' , COALESCE(TO_VARCHAR(COMMISSIONPCT),'#NULL#'), '|', COALESCE(TO_VARCHAR(IS_RESHARED),'#NULL#'),'|', COALESCE(TO_VARCHAR(PHYSICAL),'#NULL#'),'|',COALESCE(TOREPID, '#NULL#'))) AS MD_HASHDIFF,
MD_START_DT,
MD_ACTIVE,
'IAS' AS MD_SRC_SYSTEM,
'SHAREHIST' AS MD_SOURCE,
SYSTIMESTAMP() AS MD_CREATION_DT,
TO_DATE(SYSTIMESTAMP()) AS MD_EXTRACT_DT,
A_C_REPRESENTATIVE,
MASTER_CODE,
COM_TYPE,
COMMISSIONPCT,
IS_RESHARED,
PHYSICAL,
TOREPID
FROM AV_ALL
ORDER BY A_C_REPRESENTATIVE;
create or replace view DB_IAW_PROD_DWH.SHARED_BDV.VW_INVESTMENT_PRODUCT_TYPE_COMPUTE(
	HK_HUB,
	MD_HASHDIFF,
	MD_SOURCE,
	MD_START_DT,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_EXTRACT_DT,
	MD_SRC_SYSTEM,
	SYMBOL,
	PRODUCT_NAME,
	ASSET_CATEGORY,
	CATEGORY,
	PRODUCT_GROUP,
	ISSUER_COMPANY_CODE,
	ISSUER_COMPANY_NAME
) as 
SELECT DISTINCT 
HK_HUB,
MD_HASHDIFF ,
MD_SOURCE ,
MD_START_DT ,
MD_CREATION_DT ,
MD_CREATION_AUDIT_ID ,
MD_EXTRACT_DT ,
MD_SRC_SYSTEM,
SYMBOL,
CASE WHEN  NB_SYM   >1 THEN ""SOURCE Name"" ELSE MERGED_Name END AS Product_Name,
ASSET_CATEGORY,      
CATEGORY,
PRODUCT_GROUP,
ISSUER_COMPANY_CODE,
ISSUER_COMPANY_NAME
FROM (
SELECT 
DMP.HK_HUB,
DMP.MD_HASHDIFF ,
DMP.MD_SOURCE ,
DMP.MD_SRC_SYSTEM,
DMP.MD_START_DT ,
DMP.MD_CREATION_DT ,
DMP.MD_CREATION_AUDIT_ID ,
DMP.MD_EXTRACT_DT ,
DMP.SYMBOL,
upper(P_MERGE.""NAME"") AS MERGED_Name,
upper(DMP.NAME) AS ""SOURCE Name"",
COUNT(DMP.SYMBOL) OVER (PARTITION BY DMP.SYMBOL,DMP.MD_SRC_SYSTEM) AS NB_SYM,
DMP.ASSET_CATEGORY,      
DMP.CATEGORY,
DMP.PRODUCT_GROUP,
DMP.ISSUER_COMPANY_CODE,
P_MERGE.ISSUER_COMPANY_NAME 
FROM DB_IAW_PROD_DWH.SHARED_BDV.WT_SAT_INVESTMENT_PRODUCT_TYPE DMP 
LEFT JOIN DB_IAW_PROD_DWH.SHARED_BDV.WT_SAT_INVESTMENT_PRODUCT_TYPE_MERGE P_MERGE
ON DMP.SYMBOL = P_MERGE.SYMBOL
---WHERE DMP.SYMBOL  IN  ('MGS2359')
) FINAL_TAB
---WHERE SYMBOL IN  ('MGS2359') 
ORDER BY SYMBOL;
create or replace view DB_IAW_PROD_DWH.SHARED_BDV.VW_ORGANIC_GROWTH_EXCEPTION_SHR(
	A_C_REPRESENTATIVE,
	TOREPID,
	MASTER_CODE,
	PHYSICAL,
	COM_TYPE,
	IS_RESHARED,
	MD_START_DT,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	COMMISIONPCT,
	OGE_SHR_COMM_PCT,
	OGE_MD_SOURCE,
	START_DATE,
	END_DATE,
	SHR_MD_SOURCE,
	LAST_START_DATE,
	LAST_END_DATE,
	LAST_MD_SOURCE,
	COMMISSIONPCT_ADVISOR,
	COMMISSIONPCT_FINANCIAL
) as
SELECT 
A_C_REPRESENTATIVE,TOREPID,MASTER_CODE,PHYSICAL,COM_TYPE,IS_RESHARED,MD_START_DT,MD_SRC_SYSTEM,MD_EXTRACT_DT,SHR_COMM_PCT AS COMMISIONPCT, OGE_SHR_COMM_PCT, OGE_MD_SOURCE,START_DATE, END_DATE, SHR_MD_SOURCE,
LAST_START_DATE, LAST_END_DATE, LAST_MD_SOURCE, COMMISSIONPCT_ADVISOR, COMMISSIONPCT_FINANCIAL
FROM (
	WITH OGException
	AS
	(
		SELECT    h.SOURCE_MASTER_CODE, 
		          h.DESTINATION_MASTER_CODE, 
				  h.START_DATE, 
		          s.SHARE_PCT , 
		          s.END_DATE, 
		          s.MD_SOURCE 
		FROM      DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_ORGANIC_GROWTH_EXCEPTIONS h 
		INNER JOIN DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_ORGANIC_GROWTH_EXCEPTIONS_IAPW s 
		ON h.HK_HUB = s.HK_HUB 
		WHERE s.MD_ACTIVE = 'A'
	),
	OGRepCodeExists AS
	(
		SELECT    h.SOURCE_MASTER_CODE, MAX(h.START_DATE) AS LAST_START_DATE, MAX(s.END_DATE) AS LAST_END_DATE, MAX(s.MD_SOURCE) as LAST_MD_SOURCE
		FROM      DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_ORGANIC_GROWTH_EXCEPTIONS h 
		INNER JOIN DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_ORGANIC_GROWTH_EXCEPTIONS_IAPW s 
		ON h.HK_HUB = s.HK_HUB 
		WHERE s.MD_ACTIVE = 'A'
		GROUP BY h.SOURCE_MASTER_CODE
	),
	FINANCIAL_PCT_CALC AS
	(
		SELECT 
	     A_C_REPRESENTATIVE, COMMISSIONPCT, TOREPID, MASTER_CODE, PHYSICAL, COM_TYPE, IS_RESHARED, MD_START_DT, MD_SOURCE, MD_SRC_SYSTEM, MD_EXTRACT_DT, ADVISOR_ROLE,
		 COUNT(MASTER_CODE)OVER (PARTITION BY A_C_REPRESENTATIVE) nb_Part_Shard_CD,
		 SUM(DECODE(ADVISOR_ROLE,'isAdvisor',1,0))OVER (PARTITION BY A_C_REPRESENTATIVE) nb_adv_Shard_CD,
		 SUM(DECODE(ADVISOR_ROLE,'isAdvisor',COMMISSIONPCT,0)) OVER (PARTITION BY A_C_REPRESENTATIVE) AS Total_advs_pct,
		CASE    
	   		WHEN nb_adv_Shard_CD = 0 THEN COMMISSIONPCT
			WHEN nb_adv_Shard_CD=  1 THEN DECODE(ADVISOR_ROLE,'isAdvisor',100,0)
			WHEN nb_adv_Shard_CD>1 THEN DECODE(Total_advs_pct,0,DECODE(ADVISOR_ROLE,'isAdvisor',100/nb_adv_Shard_CD,0),DECODE(ADVISOR_ROLE,'isAdvisor',COMMISSIONPCT,0))
		   ELSE -1 END AS Numerator,
		CASE
	  		WHEN nb_adv_Shard_CD IN (0,1) THEN 100
			ELSE DECODE(Total_advs_pct,0,100,Total_advs_pct) END AS denominator
		FROM DB_IAW_PROD_DWH.SHARED_BDV.VW_IAS_RRCODE_MASTERCODE_TRANS
	)
	SELECT DISTINCT
	       rr.A_C_REPRESENTATIVE, 
	       rr.TOREPID, 
	       rr.MASTER_CODE, 
	       rr.PHYSICAL,rr.COM_TYPE, 
	       rr.IS_RESHARED, 
	       rr.MD_START_DT, 
	       rr.MD_SRC_SYSTEM, 
	       rr.MD_EXTRACT_DT,
	       rr.COMMISSIONPCT AS SHR_COMM_PCT,
	       OGException.SHARE_PCT AS OGE_SHR_COMM_PCT,
	       OGException.MD_SOURCE AS OGE_MD_SOURCE,
	       OGException.START_DATE,
	       OGException.END_DATE,
	       rr.MD_SOURCE AS SHR_MD_SOURCE,
	       OGRepCodeExists.LAST_START_DATE,
	       OGRepCodeExists.LAST_END_DATE,
		   OGRepCodeExists.LAST_MD_SOURCE,
		   DECODE(rr.ADVISOR_ROLE,'isAdvisor',100,0) AS COMMISSIONPCT_ADVISOR,
		   (FINANCIAL_PCT_CALC.Numerator/FINANCIAL_PCT_CALC.denominator) *100 AS COMMISSIONPCT_FINANCIAL
	FROM   DB_IAW_PROD_DWH.SHARED_BDV.VW_IAS_RRCODE_MASTERCODE_TRANS rr
	LEFT JOIN OGException
		ON   OGException.SOURCE_MASTER_CODE  = rr.A_C_REPRESENTATIVE
		AND  OGException.DESTINATION_MASTER_CODE  = rr.MASTER_CODE 
		--AND  '2022-07-11' BETWEEN OGException.START_DATE AND OGException.END_DATE
	LEFT JOIN OGRepCodeExists
		ON   OGRepCodeExists.SOURCE_MASTER_CODE  = rr.A_C_REPRESENTATIVE 
		--AND  '2022-07-11' BETWEEN OGRepCodeExists.START_DATE AND OGRepCodeExists.END_DATE
	--AND   rr.A_C_REPRESENTATIVE IN  ('SCJH','SBNY','ST3K') 
	 LEFT JOIN FINANCIAL_PCT_CALC
	 ON  FINANCIAL_PCT_CALC.A_C_REPRESENTATIVE = rr.A_C_REPRESENTATIVE
	 AND FINANCIAL_PCT_CALC.MASTER_CODE = rr.MASTER_CODE
 	WHERE rr.MD_SRC_SYSTEM = 'IAS'
UNION ALL 
	SELECT SOURCE_MASTER_CODE,DESTINATION_MASTER_CODE,  REPID,PHYSICAL,COM_TYPE,IS_RESHARED,MD_START_DT,MD_SRC_SYSTEM,MD_EXTRACT_DT,COMMISIONPCT,
	       OGE_SHR_COMM_PCT,OG_MD_SOURCE,START_DATE,END_DATE,SHR_MD_SOURCE,LAST_START_DATE,LAST_END_DATE,LAST_MD_SOURCE
		   ,OGE_SHR_COMM_PCT AS COMMISSIONPCT_ADVISOR, OGE_SHR_COMM_PCT  AS COMMISSIONPCT_FINANCIAL  -- For exact Exception rep Rows It wont affect, so have the OGE Comm PCT overruled this column. --
	FROM (
	WITH OGRepCodeExists AS
	(
	SELECT    h.SOURCE_MASTER_CODE, MAX(h.START_DATE) AS LAST_START_DATE, MAX(s.END_DATE) AS LAST_END_DATE, MAX(s.MD_SOURCE) as LAST_MD_SOURCE
	FROM      DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_ORGANIC_GROWTH_EXCEPTIONS h 
	INNER JOIN DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_ORGANIC_GROWTH_EXCEPTIONS_IAPW s 
	ON h.HK_HUB = s.HK_HUB 
	WHERE s.MD_ACTIVE = 'A'
	GROUP BY h.SOURCE_MASTER_CODE
	)
	SELECT oex.SOURCE_MASTER_CODE,oex.DESTINATION_MASTER_CODE,oex.DESTINATION_MASTER_CODE AS REPID,NULL AS PHYSICAL, NULL AS COM_TYPE, NULL AS IS_RESHARED, NULL AS MD_START_DT, 'IAS'AS MD_SRC_SYSTEM,  NULL AS MD_EXTRACT_DT,
	NULL AS COMMISIONPCT,  oex.SHARE_PCT AS  OGE_SHR_COMM_PCT, oex.OG_MD_SOURCE, oex.START_DATE,oex.END_DATE, NULL AS SHR_MD_SOURCE, OGRepCodeExists.LAST_START_DATE, OGRepCodeExists.LAST_END_DATE, OGRepCodeExists.LAST_MD_SOURCE
	FROM DB_IAW_PROD_DWH.STEWARDSHIP_RDV.VW_ORGANIC_GROWTH_EXCLUSIONS_IAPW oex
	LEFT JOIN OGRepCodeExists
		ON   OGRepCodeExists.SOURCE_MASTER_CODE  = oex.SOURCE_MASTER_CODE 
	WHERE oex.MD_ACTIVE = 'A'
	)
ORDER BY 1 
);
create or replace view DB_IAW_PROD_DWH.SHARED_BDV.VW_PARTY_ROLE_ACCOUNT_HOLDER_CLEAN(
	HK_HUB,
	MD_START_DT,
	MD_SOURCE,
	CLIENT_ANNUAL_GROSS_INC_CLEAN,
	MD_HASHDIFF,
	CLIENT_INV_KNOWLEDGE_LVL,
	CLIENT_NAME,
	CLIENT_AGE,
	MD_ACTIVE
) as 
SELECT c.HK_HUB,
	   c.MD_START_DT,
	   c.MD_SOURCE,
	CASE 
		WHEN c.CLIENT_TAX_RECIP_TYPE IN (3,4) 											    THEN NULL
		WHEN c.CLIENT_ANNUAL_GROSS_INC LIKE '%K%' 										    THEN TRY_TO_NUMBER(regexp_replace(c.CLIENT_ANNUAL_GROSS_INC,'[^0-9]',''))
		WHEN c.CLIENT_ANNUAL_GROSS_INC LIKE '%M%' 										    THEN TRY_TO_NUMBER(regexp_replace(c.CLIENT_ANNUAL_GROSS_INC,'[^0-9]','')) * 1000
		WHEN TRY_TO_NUMBER(regexp_replace(c.CLIENT_ANNUAL_GROSS_INC,'[^0-9]','')) = 0 		THEN NULL
		WHEN TRY_TO_NUMBER(regexp_replace(c.CLIENT_ANNUAL_GROSS_INC,'[^0-9]','')) < 1000 	THEN TRY_TO_NUMBER(regexp_replace(c.CLIENT_ANNUAL_GROSS_INC,'[^0-9]',''))
		WHEN TRY_TO_NUMBER(regexp_replace(c.CLIENT_ANNUAL_GROSS_INC,'[^0-9]','')) >= 1000 	THEN TRY_TO_NUMBER(regexp_replace(c.CLIENT_ANNUAL_GROSS_INC,'[^0-9]',''))*0.001
		ELSE NULL 
	END AS CLIENT_ANNUAL_GROSS_INC_CLEAN,
	SHA2(CONCAT(COALESCE(TO_VARCHAR(CLIENT_ANNUAL_GROSS_INC_CLEAN), 'NULL')) , 256) AS MD_HASHDIFF,
	CASE 
	WHEN c.CLIENT_INV_KNOWLEDGE_LVL = '1' THEN 'Excellent'
	WHEN c.CLIENT_INV_KNOWLEDGE_LVL = '2' THEN 'Good'
	WHEN c.CLIENT_INV_KNOWLEDGE_LVL = '3' THEN 'Fair'
	ELSE 'Blank' 
	END AS CLIENT_INV_KNOWLEDGE_LVL,
	CASE 
	WHEN c.CLIENT_TAX_RECIP_TYPE='1' THEN INITCAP(CASE WHEN trim(ifnull(c.A_C_FIRST_NAME,'') || (case when c.A_C_MIDDLE_NAME is NOT null then concat(' ',c.A_C_MIDDLE_NAME,' ') else ' ' end) || ifnull(c.A_C_LAST_NAME,'')) ='' THEN NULL ELSE 
	trim(ifnull(c.A_C_FIRST_NAME,'') || (case when c.A_C_MIDDLE_NAME is NOT null then concat(' ',c.A_C_MIDDLE_NAME,' ') else ' ' end) || ifnull(c.A_C_LAST_NAME,'')) end)
	WHEN c.CLIENT_TAX_RECIP_TYPE='2' THEN (case when (c.A_C_FIRST_NAME is null  and c.A_C_MIDDLE_NAME is null and c.A_C_LAST_NAME is NULL AND c.CLIENT_FIRST_NAME is null and c.CLIENT_LAST_NAME is NULL) THEN NULL
	WHEN (c.A_C_FIRST_NAME is null  and c.A_C_MIDDLE_NAME is null and c.A_C_LAST_NAME is NULL AND (c.CLIENT_FIRST_NAME IS NOT NULL OR c.CLIENT_LAST_NAME IS NOT null))
	then INITCAP(TRIM((ifnull(c.CLIENT_FIRST_NAME,'') || ' ' || ifnull(c.CLIENT_LAST_NAME,''))))
	when (c.CLIENT_FIRST_NAME is null and c.CLIENT_LAST_NAME is null and (c.A_C_FIRST_NAME is not null or c.A_C_MIDDLE_NAME is not null or c.A_C_LAST_NAME IS NOT null)) then 
	INITCAP(trim((ifnull(c.A_C_FIRST_NAME,'') || (case when c.A_C_MIDDLE_NAME is NOT null then concat(' ',c.A_C_MIDDLE_NAME,' ') else ' ' end) ||ifnull(c.A_C_LAST_NAME,''))))
	else
	INITCAP(trim((ifnull(c.A_C_FIRST_NAME,'') || (case when c.A_C_MIDDLE_NAME is NOT null then concat(' ',c.A_C_MIDDLE_NAME,' ') else ' ' end) ||ifnull(c.A_C_LAST_NAME,'')))) || ' and ' ||
	INITCAP(trim(ifnull(c.CLIENT_FIRST_NAME,'') || ' ' || ifnull(c.CLIENT_LAST_NAME,''))) END)
	WHEN c.CLIENT_TAX_RECIP_TYPE IN ('3','4','5','6','7','0') THEN INITCAP(c.A_C_NAME) ELSE null end as CLIENT_NAME,
	FLOOR(DATEDIFF('day',(CASE WHEN c.CLIENT_BIRTH_DATE IS NULL THEN c.MD_START_DT ELSE c.CLIENT_BIRTH_DATE END),c.MD_START_DT)/365.25) AS CLIENT_AGE,
	c.MD_ACTIVE
		FROM DB_IAW_PROD_DWH.SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_IAS_NBIN c;
create or replace view DB_IAW_PROD_DWH.SHARED_BDV.VW_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH(
	HK_HUB_PARTY_ROLE_ADVISOR,
	MASTER_CODE,
	BEGIN_DT,
	MD_START_DT,
	MD_ACTIVE,
	MD_ACTIVE_CERTS,
	CERTS_REGION_VP,
	ADVISOR_FULLNAME,
	BRN_CD,
	BRN_NAME,
	REP_LNAME,
	REP_FNAME,
	PRIMARY_ROLE,
	ADVISOR_BIRTH_DATE,
	REP_EMAIL,
	CBM,
	BRANCH_NRD,
	BRANCH_ADDRESS1,
	BRANCH_ADDRESS2,
	BRANCH_CITY,
	BRANCH_POSTAL_CODE,
	CERTS_PROVINCE_CODE,
	CERTS_PROVINCE_NAME
) as
SELECT DISTINCT SH.HK_HUB_PARTY_ROLE_ADVISOR,
    SH.MASTER_CODE,
    COALESCE(cert.BEGIN_DT, WTRRCOMM.STARTDATE, '9999-12-31') AS BEGIN_DT,
    COALESCE(
        RR.MD_START_DT,
        RC.MD_START_DT,
        URR.MD_START_DT,
        WTRRCOMM.MD_START_DT,
        sat.MD_START_DT
    ) AS MD_START_DT,
    --added by SV
    COALESCE(
        RR.MD_ACTIVE,
        RC.MD_ACTIVE,
        URR.MD_ACTIVE,
        WTRRCOMM.MD_ACTIVE,
        sat.MD_ACTIVE
    ) AS MD_ACTIVE,
    --added by SV
    COALESCE(cert.MD_ACTIVE, ICAR.MD_ACTIVE) AS MD_ACTIVE_CERTS,
    DECODE(TRIM(cert.RVP),'',null,'#N/A',null,TRIM(cert.RVP)) AS CERTS_REGION_VP,	-- RELATED TO B82765		-- CERTS
    --	DECODE(TRIM(ICAR.FULL_NAME),'',null,'#N/A',null,TRIM(ICAR.FULL_NAME))	-- REMOVED BECAUSE SOME NAME WILL SHOW UP AND ARE NOT RVPS. CERTS JOINED DIFFRENTLY BASED ON First Name and Last Name of the Registered Representative

    COALESCE(
        NULLIF(regexp_replace(RR.REPNAME, '\\(.*\\)', ''), ''),
        NULLIF(regexp_replace(RC.REPNAME, '\\(.*\\)', ''), ''),
        NULLIF(regexp_replace(URR.REP_LNAME, '\\(.*\\)', ''), '') || ', ' || NULLIF(regexp_replace(URR.REP_FNAME, '\\(.*\\)', ''), ''),
        ''
    ) || ' (' || sh.MASTER_CODE || ')' AS ADVISOR_FULLNAME,

    URR.BRN_CD,
    URR.BRN_NAME,
    URR.REP_LNAME,
    URR.REP_FNAME,
    CASE
        WHEN substring(UPPER(SH.MASTER_CODE), 1, 4) in ('PART', 'CORP') THEN 'Corporation'
        WHEN substring(UPPER(SH.MASTER_CODE), 1, 2) = 'IM' THEN 'Corporation'
        WHEN SH.MASTER_CODE in ('SNAG', 'RAAW', 'BFE2H', 'SGDM') THEN 'Corporation'
        ELSE cert.PRIMARY_ROLE
    END AS PRIMARY_ROLE,
    cert.ADVISOR_BIRTH_DATE as ADVISOR_BIRTH_DATE,
	cert.REP_EMAIL as REP_EMAIL,
	cert.CBM as CBM,
    cert.BRANCH_NRD as BRANCH_NRD,
	cert.BRANCH_ADDRESS1 as BRANCH_ADDRESS1,
	cert.BRANCH_ADDRESS2 as BRANCH_ADDRESS2,
	cert.BRANCH_CITY as BRANCH_CITY,
	cert.BRANCH_POSTAL_CODE as BRANCH_POSTAL_CODE,
    CASE
        WHEN cert.PROVINCE = 'Alberta' THEN 'AB'
        WHEN cert.PROVINCE = 'British Columbia' THEN 'BC'
        WHEN cert.PROVINCE = 'Manitoba' THEN 'MB'
        WHEN cert.PROVINCE = 'New Brunswick' THEN 'NB'
        WHEN cert.PROVINCE = 'Newfoundland' THEN 'NF'
        WHEN cert.PROVINCE = 'Nova Scotia' THEN 'NS'
        WHEN cert.PROVINCE = 'Northwest Territories' THEN 'NT'
        WHEN cert.PROVINCE = 'Nunavut' THEN 'NU'
        WHEN cert.PROVINCE = 'Ontario' THEN 'ON'
        WHEN cert.PROVINCE = 'Prince Edward Island' THEN 'PE'
        WHEN cert.PROVINCE = 'Quebec' THEN 'QC'
        WHEN cert.PROVINCE = 'Saskatchewan' THEN 'SK'
        WHEN cert.PROVINCE = 'Yukon Territory' THEN 'YT'
        ELSE 'N/A'
    END AS CERTS_PROVINCE_CODE,																							-- RELATED TO B77731

    decode(cert.PROVINCE,'Newfoundland','Newfoundland and Labrador',null,'N/A',cert.PROVINCE) as CERTS_PROVINCE_NAME	-- RELATED TO B77731
FROM
    SHARED_BDV.LINK_PARTY_RELATIONSHIP_SHARE sh
    INNER JOIN SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE sat ON sh.HK_LINK = sat.HK_LINK
    LEFT JOIN (SELECT * FROM SHARED_BDV.WT_REGISTERED_REPRESENTATIVE_IAS_CERTS QUALIFY ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY RDV_RR_IAS_CERTS_MD_START_DT DESC, MD_ACTIVE ASC)=1 ) cert 
	ON sh.MASTER_CODE = cert.RR_CD
	LEFT JOIN SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE c ON c.RR_CD = sh.MASTER_CODE
    AND c.MD_SRC_SYSTEM IN ('IAS-COMMISSION', 'IAS_CERTS', 'IAS-UNIVERIS')
    LEFT JOIN SHARED_BDV.WT_REGISTERED_REPRESENTATIVE RR ON c.HK_HUB = RR.HK_HUB
    AND RR.MAINREPCODE = c.RR_CD
    AND rr.ACTIVE = 1
    LEFT JOIN SHARED_BDV.WT_REGISTERED_REPRESENTATIVE RC ON c.HK_HUB = RC.HK_HUB
    AND RC.ACTIVE = 0
    -- GET UNIVERIS DATA
    LEFT JOIN SHARED_BDV.WT_REGISTERED_REPRESENTATIVE URR ON c.HK_HUB = URR.HK_HUB
    LEFT JOIN SHARED_BDV.WT_REGISTERED_REPRESENTATIVE_IAS_CERTS ICAR ON (
        CONTAINS(UPPER(ICAR.FIRST_NAME), UPPER(TRIM(RR.FIRSTNAME)))
        AND CONTAINS(UPPER(ICAR.LAST_NAME), UPPER(TRIM(RR.LASTNAME)))
    )
    OR CONTAINS(UPPER(ICAR.FULL_NAME), UPPER(TRIM(RR.REPNAME)))
    OR (
        CONTAINS(
            UPPER(ICAR.FULL_NAME),
            UPPER(TRIM(SPLIT_PART(RR.REPNAME, ',', 1)))
        )
        AND CONTAINS(
            UPPER(ICAR.FULL_NAME),
            UPPER(TRIM(SPLIT_PART(RR.REPNAME, ',', 2)))
        )
    )
    LEFT JOIN SHARED_BDV.WT_REGISTERED_REPRESENTATIVE WTRRCOMM ON WTRRCOMM.MAINREPCODE = c.RR_CD
    AND c.HK_HUB = WTRRCOMM.HK_HUB
    AND WTRRCOMM.ACTIVE = 0
WHERE
    sh.MD_SRC_SYSTEM IN ('IAS', 'IAS-COMMISSION')
GROUP BY
    SH.HK_HUB_PARTY_ROLE_ADVISOR,
    SH.MASTER_CODE,
    COALESCE(cert.BEGIN_DT, WTRRCOMM.STARTDATE, '9999-12-31'),
    COALESCE(
        RR.MD_START_DT,
        RC.MD_START_DT,
        URR.MD_START_DT,
        WTRRCOMM.MD_START_DT,
        sat.MD_START_DT
    ),
    COALESCE(
        RR.MD_ACTIVE,
        RC.MD_ACTIVE,
        URR.MD_ACTIVE,
        WTRRCOMM.MD_ACTIVE,
        sat.MD_ACTIVE
    ),
    COALESCE(cert.MD_ACTIVE, ICAR.MD_ACTIVE),
    CERTS_REGION_VP,			-- RELATED TO B82765: Changed from ""Region VP"" to CERTS_REGION_VP
    ADVISOR_FULLNAME,			-- RELATED TO B82765: Changed from ""Advisor fullname"" to ADVISOR_FULLNAME
    URR.BRN_CD,
    URR.BRN_NAME,
    URR.REP_LNAME,
    URR.REP_FNAME,
    cert.PRIMARY_ROLE,
    cert.ADVISOR_BIRTH_DATE,
    cert.REP_EMAIL,
	cert.CBM,
    cert.BRANCH_NRD,
	cert.BRANCH_ADDRESS1,
	cert.BRANCH_ADDRESS2,
	cert.BRANCH_CITY,
	cert.BRANCH_POSTAL_CODE,
    CERTS_PROVINCE_CODE,		-- RELATED TO B77731
    CERTS_PROVINCE_NAME		-- RELATED TO B77731
;
create or replace view DB_IAW_PROD_DWH.SHARED_BDV.VW_SAT_CONTRACT_COMPUTE(
	HK_HUB,
	MD_START_DT,
	MD_HASH_NAT_KEYS,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	CONTRACT_ID,
	PLAN_MNEMONIC_CD,
	PLAN_MNEMONIC_LBL,
	OPEN_DATE,
	CLOSE_DATE,
	GROUP_TYPE_CD,
	ADMINISTRATOR_TYPE,
	MD_ACTIVE,
	PLAN_CODE,
	PLAN_LABEL,
	ACCOUNT_TYPE,
	GROUP_TYPE_CODE,
	ACCUMULATION_TYPE,
	ACCOUNT_IND,
	CASH_EQLT_PROFILE_PCT,
	INCOME_PROFILE_PCT,
	GROWTH_PROFILE_PCT,
	SPECULATION_PROFILE_PCT,
	UNKNOWN_PROFILE_PCT,
	LOW_RISK_PCT,
	MEDIUM_RISK_PCT,
	HIGH_RISK_PCT,
	UNKNOWN_RISK_PCT,
	NBIN_CLIENT_ID
) as 

/*********************** NBIN ************************/

WITH latest_rapcode_plan AS 
(
SELECT PLAN_LABEL, ACCOUNT_TYPE, GROUP_TYPE_CODE,ACCUMULATION_TYPE, ACCOUNT_RAP_CODE, RETAIL_PLAN, ASC_1_RESP_PLAN_TYPES, md_active, s.MD_START_DT 
FROM STEWARDSHIP_RDV.REF_RAPCODE_PLAN  r 
INNER JOIN STEWARDSHIP_RDV.SAT_REF_RAPCODE_PLAN_IAS s ON r.HK_HUB = s.HK_HUB 
)                           
SELECT s.HK_HUB,
s.MD_START_DT,
s.HK_HUB as MD_HASH_NAT_KEYS,
s.MD_SOURCE,
s.MD_SRC_SYSTEM,
s.MD_EXTRACT_DT,
h.CONTRACT_ID,
lp.GROUP_TYPE_CODE as PLAN_MNEMONIC_CD,
lp.PLAN_LABEL as PLAN_MNEMONIC_LBL,
s.A_C_OPEN_DATE as OPEN_DATE,
s.A_C_CLOSING_DATE as  CLOSE_DATE,
lp.GROUP_TYPE_CODE as GROUP_TYPE_CD,
s.ADMINISTRATOR_TYPE,
s.MD_ACTIVE, 
CASE WHEN s.ACCOUNT_RAP_CODE='Z' AND lp.ASC_1_RESP_Plan_Types IS NULL THEN CONCAT(IFNULL(s.ACCOUNT_RAP_CODE,''),'_',IFNULL(s.RETAIL_PLAN,''), '_', '0') WHEN s.ACCOUNT_RAP_CODE='Z' AND lp.ASC_1_RESP_Plan_Types IS NOT NULL THEN  CONCAT(IFNULL(s.ACCOUNT_RAP_CODE,''),'_',IFNULL(s.RETAIL_PLAN,''), '_', IFNULL(lp.ASC_1_RESP_Plan_Types, ''))  else CONCAT(IFNULL(s.ACCOUNT_RAP_CODE,''),'_',IFNULL(s.RETAIL_PLAN,'')) END AS PLAN_CODE,
IFNULL(lp.PLAN_LABEL, 'N/A')                                                            AS PLAN_LABEL,
CASE WHEN IFNULL(lp.ACCOUNT_TYPE, 'N/A') = 'Non-Registered'
THEN 'Non registered' ELSE IFNULL(lp.ACCOUNT_TYPE, 'N/A') END                                                               AS ACCOUNT_TYPE,
IFNULL(lp.GROUP_TYPE_CODE, 'N/A')                                                       AS GROUP_TYPE_CODE,
lp.ACCUMULATION_TYPE                                                                    AS ACCUMULATION_TYPE,
CASE WHEN s.A_C_CLOSING_DATE = '0001-01-01' and substring(h.CONTRACT_ID,1,2) not rlike '[A-Z][A-Z]' 
          and substring(h.CONTRACT_ID,1,4) <> '379A' and substring(h.CONTRACT_ID,1,3) <> '7XZ'
          and substring(h.CONTRACT_ID,7,1) <> 'J' THEN 1
ELSE 0 END AS ACCOUNT_IND,
-- IVT Obj Cde
DECODE ( COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(IVT_OBJ_CDE), 'M[[:digit:]]+'),2,2)) ,0), 99, 100,
          COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(IVT_OBJ_CDE), 'M[[:digit:]]+'),2,2)) ,0) ) AS CASH_EQLT_PROFILE_PCT,
DECODE ( COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(IVT_OBJ_CDE), 'B[[:digit:]]+'),2,2)) ,0), 99, 100,
          COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(IVT_OBJ_CDE), 'B[[:digit:]]+'),2,2)) ,0) ) AS INCOME_PROFILE_PCT,
DECODE ( COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(IVT_OBJ_CDE), 'G[[:digit:]]+'),2,2)) ,0), 99, 100,
          COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(IVT_OBJ_CDE), 'G[[:digit:]]+'),2,2)) ,0) ) AS GROWTH_PROFILE_PCT,
DECODE ( COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(IVT_OBJ_CDE), 'S[[:digit:]]+'),2,2)) ,0), 99, 100,
          COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(IVT_OBJ_CDE), 'S[[:digit:]]+'),2,2)) ,0) ) AS SPECULATION_PROFILE_PCT,
DECODE (
       COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,1 ) ,0) + 
	   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,2 ) ,0)  + 
	   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,3 ) ,0)  +
   	   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,4 ) ,0)  +
   	   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,5 ) ,0) 
	   , 99, 100,
		   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,1 ) ,0) + 
		   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,2 ) ,0)  + 
		   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,3 ) ,0)  +
		   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,4 ) ,0)  +
		   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(TRIM(IVT_OBJ_CDE), 1,5 ) ,0) 
	   ) as UNKNOWN_PROFILE_PCT,
-- Risk Tolerance --
DECODE ( COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(RISK_TOLERANCE), 'L[[:digit:]]+'),2,2)) ,0) , 99, 100,
			COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(RISK_TOLERANCE), 'L[[:digit:]]+'),2,2)) ,0) ) as LOW_RISK_PCT,
DECODE ( COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(RISK_TOLERANCE), 'M[[:digit:]]+'),2,2)) ,0) , 99, 100,
			COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(RISK_TOLERANCE), 'M[[:digit:]]+'),2,2)) ,0) ) as MEDIUM_RISK_PCT,
DECODE ( COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(RISK_TOLERANCE), 'H[[:digit:]]+'),2,2)) ,0) , 99, 100,
			COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(RISK_TOLERANCE), 'H[[:digit:]]+'),2,2)) ,0) ) as HIGH_RISK_PCT,
DECODE (			
	       COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,1 ) ,0) + 
		   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,2 ) ,0)  + 
		   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,3 ) ,0)  +
	   	   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,4 ) ,0)  +
	   	   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,5 ) ,0) 
		, 99, 100,
			   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,1 ) ,0) + 
			   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,2 ) ,0)  + 
			   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,3 ) ,0)  +
			   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,4 ) ,0)  +
			   COALESCE ( SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(TRIM(RISK_TOLERANCE), 1,5 ) ,0) 
		) as UNKNOWN_RISK_PCT,
s.A_C_CLIENT AS NBIN_CLIENT_ID
FROM SHARED_RDV.HUB_CONTRACT h 
INNER JOIN SHARED_RDV.SAT_CONTRACT_IAS_NBIN s 
ON s.HK_HUB = h.HK_HUB      
LEFT JOIN latest_rapcode_plan lp
ON (s.ACCOUNT_RAP_CODE=lp.ACCOUNT_RAP_CODE AND lp.ACCOUNT_RAP_CODE NOT IN ('Z','P') ) 
OR (s.ACCOUNT_RAP_CODE=lp.ACCOUNT_RAP_CODE AND lp.ACCOUNT_RAP_CODE='Z' AND s.ASC_1_RESP_Plan_Types=lp.ASC_1_RESP_Plan_Types) 
OR (lp.ACCOUNT_RAP_CODE='P' AND s.ACCOUNT_RAP_CODE='P' AND lp.RETAIL_PLAN=s.RETAIL_PLAN)

UNION ALL

/*********************** IAS UNIVERIS ************************/
SELECT s.HK_HUB,
s.MD_START_DT,
s.HK_HUB as MD_HASH_NAT_KEYS,
s.MD_SOURCE,
s.MD_SRC_SYSTEM,
s.MD_EXTRACT_DT,
h.CONTRACT_ID,
IP.PLN_MNEM_ENG as PLAN_MNEMONIC_CD,
IP.PLN_DESC_ENG  as PLAN_MNEMONIC_LBL,
s.SETUP_DT as OPEN_DATE,
s.CLOSE_DT as  CLOSE_DATE,
IP.STMT_GROUP_MNEM as GROUP_TYPE_CD,
s.ADMINISTRATOR_TYPE,
s.MD_ACTIVE,
IP.PLN_MNEM_ENG                                                         AS PLAN_CODE,
IP.PLN_DESC_ENG                                                         AS PLAN_LABEL,
CASE WHEN IP.PLN_REG=0 THEN 'Non registered' 
     ELSE 'Registered' END                                          AS ACCOUNT_TYPE,
IP.STMT_GROUP_MNEM                                            AS GROUP_TYPE_CODE,
'N/A'                                                               AS ACCUMULATION_TYPE,
NULL AS ACCOUNT_IND,
NULL as CASH_EQLT_PROFILE_PCT
,NULL as INCOME_PROFILE_PCT
,NULL as GROWTH_PROFILE_PCT
,NULL as SPECULATION_PROFILE_PCT
,NULL as UNKNOWN_PROFILE_PCT
,NULL as LOW_RISK_PCT
,NULL as MEDIUM_RISK_PCT
,NULL as HIGH_RISK_PCT
,NULL as UNKNOWN_RISK_PCT
,NULL AS NBIN_CLIENT_ID
FROM SHARED_RDV.HUB_CONTRACT h 
INNER JOIN SHARED_RDV.SAT_CONTRACT_IAS_UNIVERIS s
ON s.HK_HUB = h.HK_HUB LEFT OUTER JOIN (
SELECT sref.* FROM SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_UNIVERIS sref
INNER JOIN SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES R
ON sref.HK_HUB = R.HK_HUB) IP 
ON s.PLN_CD =IP.PLN_CD  

UNION ALL

/*********************** INVESTIA UNIVERIS ************************/

SELECT s.HK_HUB,
s.MD_START_DT,
s.HK_HUB as MD_HASH_NAT_KEYS,
s.MD_SOURCE,
s.MD_SRC_SYSTEM,
s.MD_EXTRACT_DT,
h.CONTRACT_ID,
IP.PLN_MNEM_ENG as PLAN_MNEMONIC_CD,
IP.PLN_DESC_ENG  as PLAN_MNEMONIC_LBL,
s.SETUP_DT as OPEN_DATE,
s.CLOSE_DT as  CLOSE_DATE,
IP.STMT_GROUP_MNEM as GROUP_TYPE_CD,
s.ADMINISTRATOR_TYPE,
s.MD_ACTIVE,
IP.PLN_MNEM_ENG                                                         AS PLAN_CODE,
IP.PLN_DESC_ENG                                                         AS PLAN_LABEL,
CASE WHEN IP.PLN_REG=0 THEN 'Non registered' 
     ELSE 'Registered' END                                          AS ACCOUNT_TYPE,
IP.STMT_GROUP_MNEM                                            AS GROUP_TYPE_CODE,
'N/A'                                                               AS ACCUMULATION_TYPE,
NULL AS ACCOUNT_IND,
NULL as CASH_EQLT_PROFILE_PCT
,NULL as INCOME_PROFILE_PCT
,NULL as GROWTH_PROFILE_PCT
,NULL as SPECULATION_PROFILE_PCT
,NULL as UNKNOWN_PROFILE_PCT
,NULL as LOW_RISK_PCT
,NULL as MEDIUM_RISK_PCT
,NULL as HIGH_RISK_PCT
,NULL as UNKNOWN_RISK_PCT
,NULL AS NBIN_CLIENT_ID
FROM SHARED_RDV.HUB_CONTRACT h 
INNER JOIN SHARED_RDV.SAT_CONTRACT_INVESTIA_UNIVERIS s
ON s.HK_HUB = h.HK_HUB  LEFT OUTER JOIN (
SELECT sref.* FROM SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_INVESTIA_UNIVERIS sref
INNER JOIN SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES R
ON sref.HK_HUB = R.HK_HUB) IP 
ON s.PLN_CD =IP.PLN_CD;
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.SHARED_BDV.EXTRACT_ACCOUNT_RISK_IVTOBJCDE_PCT(""P_ATTRIBUTE"" VARCHAR(15), ""SUBSTRING_START_POSITION"" NUMBER(38,0), ""POSITION_OCCUR"" NUMBER(38,0))
RETURNS NUMBER(38,0)
LANGUAGE SQL
AS 'SELECT COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(P_ATTRIBUTE), ''[A|C|D|E|F|H|I|J|K|L|N|O|P|Q|R|T|U|V|W|X|Y|Z][[:digit:]]+'',SUBSTRING_START_POSITION,POSITION_OCCUR ),2,2)) ,0)';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.SHARED_BDV.EXTRACT_ACCOUNT_RISK_TOLERANCE_PCT(""P_ATTRIBUTE"" VARCHAR(15), ""SUBSTRING_START_POSITION"" NUMBER(38,0), ""POSITION_OCCUR"" NUMBER(38,0))
RETURNS NUMBER(38,0)
LANGUAGE SQL
AS 'SELECT COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(P_ATTRIBUTE), ''[A|B|C|D|E|F|G|I|J|K|N|O|P|Q|R|S|T|U|V|W|X|Y|Z][[:digit:]]+'',SUBSTRING_START_POSITION,POSITION_OCCUR ),2,2)) ,0)';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_BR_ALL_ACCOUNT_AUA_SEGMENTATION_002(""I_ACCOUNT_SUM_AUA"" FLOAT)
RETURNS OBJECT
LANGUAGE JAVASCRIPT
AS '  
  
  var RESULT = {}
 switch(true) {
   case I_ACCOUNT_SUM_AUA == 0 :
    RESULT = {o_ACCOUNT_AUA_SEGMENT:""0"",o_ACCOUNT_AUA_SEGMENT_ORDER:-1}
    break; 
    case I_ACCOUNT_SUM_AUA <= 1000000 :
    RESULT = {o_ACCOUNT_AUA_SEGMENT: ""<= 1M"" ,o_ACCOUNT_AUA_SEGMENT_ORDER:1}
    break;
  case I_ACCOUNT_SUM_AUA > 1000000  && I_ACCOUNT_SUM_AUA <= 5000000 :
    RESULT = {o_ACCOUNT_AUA_SEGMENT:""1M-5M"",o_ACCOUNT_AUA_SEGMENT_ORDER:2}
    break;  
   case I_ACCOUNT_SUM_AUA > 5000000  && I_ACCOUNT_SUM_AUA <= 10000000 :
    RESULT = {o_ACCOUNT_AUA_SEGMENT:""5M-10M"",o_ACCOUNT_AUA_SEGMENT_ORDER:3}
    break;   
   case I_ACCOUNT_SUM_AUA > 10000000  && I_ACCOUNT_SUM_AUA <= 20000000 :
    RESULT = {o_ACCOUNT_AUA_SEGMENT:""10M-20M"",o_ACCOUNT_AUA_SEGMENT_ORDER:4}
    break;   
   break;   
   case I_ACCOUNT_SUM_AUA > 20000000  && I_ACCOUNT_SUM_AUA <= 30000000 :
    RESULT = {o_ACCOUNT_AUA_SEGMENT:""20M-30M"",o_ACCOUNT_AUA_SEGMENT_ORDER:5}
    break;      
  case I_ACCOUNT_SUM_AUA > 30000000  && I_ACCOUNT_SUM_AUA <= 50000000 :
    RESULT = {o_ACCOUNT_AUA_SEGMENT:""30M-50M"",o_ACCOUNT_AUA_SEGMENT_ORDER:6}
    break; 
    case  I_ACCOUNT_SUM_AUA > 50000000 :
     RESULT = {o_ACCOUNT_AUA_SEGMENT:""> 50M"",o_ACCOUNT_AUA_SEGMENT_ORDER:7}
    break; 
   
  default:
     RESULT = {o_ACCOUNT_AUA_SEGMENT:""Unknown"",o_ACCOUNT_AUA_SEGMENT_ORDER:0}
}   
  return RESULT;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_HOLDINGS_TO_BDV_WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_AUA_SEG_COMPUTE(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_AUA_SEG_COMPUTE WHERE MD_SRC_SYSTEM = ''''IAS'''' '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_AUA_SEG_COMPUTE (
HK_HUB	
,MD_START_DT		 	
,MD_CREATION_DT	
,MD_CREATION_AUDIT_ID
,MD_SOURCE	
,MD_SRC_SYSTEM	
,MD_EXTRACT_DT	
,CLIENT_AUA_SEGMENT	
,CLIENT_AUA_SEGMENT_ORDER )
SELECT 
	bdv.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	
	,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')	
	,CURRENT_TIMESTAMP
	,CURRENT_TIMESTAMP
	,MAX(bdv2.MD_SOURCE)
	,MAX(bdv2.MD_SRC_SYSTEM)
	,MAX(bdv2.MD_EXTRACT_DT)
	,BUSINESS_RULES.UDF_CONV_BR_ALL_CLIENT_AUA_SEGMENTATION_002(SUM(bdv2.AUA))[''''o_CLIENT_AUA_SEGMENT''''] 
	,BUSINESS_RULES.UDF_CONV_BR_ALL_CLIENT_AUA_SEGMENTATION_002(SUM(bdv2.AUA))[''''o_CLIENT_AUA_SEGMENT_ORDER'''']
	FROM (
	SELECT *
			FROM DB_IAW_''||ENV||''_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT
			)bdv2
		JOIN (
		SELECT *
			FROM (
				SELECT *
					,ROW_NUMBER() OVER (
						PARTITION BY HK_LINK ORDER BY MD_START_DT DESC
						) RN
				FROM DB_IAW_''||ENV||''_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT
				WHERE MD_START_DT = TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
                ) SATHUB
			WHERE SATHUB.RN = 1 
			) rdv ON rdv.HK_LINK = bdv2.HK_LINK AND rdv.MD_START_DT = bdv2.MD_START_DT
		JOIN DB_IAW_''||ENV||''_DWH.HOLDINGS_BDV.LINK_INVESTMENT bdv ON bdv.HK_LINK = bdv2.HK_LINK
		WHERE bdv2.MD_ACTIVE = ''''A'''' AND bdv2.MD_SRC_SYSTEM = ''''IAS''''
		GROUP BY bdv.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
              '';
INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_AUA_SEG_COMPUTE
SET
	MD_HASHDIFF=
	SHA1(CONCAT(COALESCE(CLIENT_AUA_SEGMENT, ''''#NULL#''''), ''''|'''',COALESCE(TO_VARCHAR(CLIENT_AUA_SEGMENT_ORDER), ''''#NULL#'''')))
Where HK_HUB <> ''''0'''' AND MD_SRC_SYSTEM = ''''IAS'''';
'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_HOLDINGS_TO_BDV_WT_SAT_PARTY_ROLE_ADVISOR_AUA_SEG_COMPUTE(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000), ""I_AUDIT_ID"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;
BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ADVISOR_AUA_SEG_COMPUTE'';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ADVISOR_AUA_SEG_COMPUTE
(
HK_HUB
,MD_START_DT
,MD_CREATION_DT
,MD_CREATION_AUDIT_ID
,MD_SOURCE
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,ADVISOR_AUA_SEGMENT
,ADVISOR_AUA_SEGMENT_ORDER
,SUSPENDED_IND
)
SELECT
SATPARTY_BDV.HK_HUB_PARTY_ROLE_ADVISOR
,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
,CURRENT_TIMESTAMP
,''''-1''''
,SATPARTY_BDV.O_MAX_MD_SOURCE
,SATPARTY_BDV.O_MAX_MD_SRC_SYSTEM
,SATPARTY_BDV.O_MAX_MD_EXTRACT_DT
,BUSINESS_RULES.UDF_CONV_BR_ALL_ADVISOR_AUA_SEGMENTATION_002(SATPARTY_BDV.O_ADVISOR_SUM_AUA)[''''o_ADVISOR_AUA_SEGMENT'''']
,BUSINESS_RULES.UDF_CONV_BR_ALL_ADVISOR_AUA_SEGMENTATION_002(SATPARTY_BDV.O_ADVISOR_SUM_AUA)[''''o_ADVISOR_AUA_SEGMENT_ORDER'''']
,CASE WHEN SATPARTY_BDV.O_MAX_MD_ACTIVE=''''D'''' AND SATPARTY_BDV.O_ADVISOR_SUM_AUA !=0 THEN 1 ELSE 0 END
FROM
(
	SELECT  SUM(CASE WHEN BDV.AUA IS NULL THEN 0 ELSE BDV.AUA END) AS O_ADVISOR_SUM_AUA
	,MAX(BDV.MD_SOURCE) AS O_MAX_MD_SOURCE
	,MAX(BDV.MD_SRC_SYSTEM) AS O_MAX_MD_SRC_SYSTEM
	,MAX(BDV.MD_EXTRACT_DT) AS O_MAX_MD_EXTRACT_DT
	,MAX(BDV.MD_ACTIVE_CERTS)   AS O_MAX_MD_ACTIVE
	,BDV.HK_HUB_PARTY_ROLE_ADVISOR AS HK_HUB_PARTY_ROLE_ADVISOR
	FROM
	( SELECT * FROM 
		(
		SELECT SAT_LINKCV.*, LINK.HK_HUB_PARTY_ROLE_ADVISOR, LINK.MASTER_CODE FROM
		(SELECT SAT_LINK.* FROM DB_IAW_''||ENV||''_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT SAT_LINK
		JOIN
		(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_LINK ORDER BY MD_START_DT DESC) RN 
		   FROM DB_IAW_''||ENV||''_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT 
		     WHERE MD_START_DT = TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) SAT_LINKCV
		ON SAT_LINKCV.HK_LINK = SAT_LINK.HK_LINK 
		AND SAT_LINKCV.MD_START_DT = SAT_LINK.MD_START_DT
		WHERE SAT_LINK.MD_ACTIVE = ''''A''''
		)SAT_LINKCV
		JOIN
		DB_IAW_''||ENV||''_DWH.HOLDINGS_BDV.LINK_INVESTMENT LINK
		ON LINK.HK_LINK = SAT_LINKCV.HK_LINK
		) BDV1
	LEFT JOIN
		(SELECT SAT_PARTY.HK_HUB, SAT_PARTY.MD_ACTIVE_CERTS FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH SAT_PARTY
		JOIN
		(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN 
		    FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH 
			WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) SAT_PARTYCV
		ON SAT_PARTYCV.HK_HUB = SAT_PARTY.HK_HUB 
		AND SAT_PARTYCV.MD_START_DT = SAT_PARTY.MD_START_DT 
		WHERE SAT_PARTY.MD_ACTIVE = ''''A''''
		) BDV2
		ON BDV1.HK_HUB_PARTY_ROLE_ADVISOR = BDV2.HK_HUB
		) 
	BDV GROUP BY BDV.HK_HUB_PARTY_ROLE_ADVISOR
	) SATPARTY_BDV
 '';

INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ADVISOR_AUA_SEG_COMPUTE
SET
MD_HASHDIFF=SHA1(
CONCAT(COALESCE(ADVISOR_AUA_SEGMENT , '''' #NULL#''''),''''|''''
,COALESCE(TO_VARCHAR(ADVISOR_AUA_SEGMENT_ORDER), '''' #NULL#''''), ''''|''''
,COALESCE(TO_VARCHAR(SUSPENDED_IND), '''' #NULL#'''')
))
Where HK_HUB <> ''''0''''
'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_HOLDINGS_TO_BDV_WT_SAT_PARTY_ROLE_ADVISOR_AUA_SEG_COMPUTE_TEST(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000), ""I_AUDIT_ID"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;
BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ADVISOR_AUA_SEG_COMPUTE'';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ADVISOR_AUA_SEG_COMPUTE
(
HK_HUB
,MD_START_DT
,MD_CREATION_DT
,MD_CREATION_AUDIT_ID
,MD_SOURCE
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,ADVISOR_AUA_SEGMENT
,ADVISOR_AUA_SEGMENT_ORDER
--,SUSPENDED_IND
)
SELECT
SATPARTY_BDV.HK_HUB_PARTY_ROLE_ADVISOR
,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
,CURRENT_TIMESTAMP
,''''-1''''
,SATPARTY_BDV.O_MAX_MD_SOURCE
,SATPARTY_BDV.O_MAX_MD_SRC_SYSTEM
,SATPARTY_BDV.O_MAX_MD_EXTRACT_DT
,BUSINESS_RULES.UDF_CONV_BR_ALL_ADVISOR_AUA_SEGMENTATION_002(SATPARTY_BDV.O_ADVISOR_SUM_AUA)[''''o_ADVISOR_AUA_SEGMENT'''']
,BUSINESS_RULES.UDF_CONV_BR_ALL_ADVISOR_AUA_SEGMENTATION_002(SATPARTY_BDV.O_ADVISOR_SUM_AUA)[''''o_ADVISOR_AUA_SEGMENT_ORDER'''']
--,CASE WHEN SATPARTY_BDV.O_MAX_MD_ACTIVE=''''D'''' AND SATPARTY_BDV.O_ADVISOR_SUM_AUA !=0 THEN 1 ELSE 0 END
FROM
(
SELECT  SUM(CASE WHEN BDV.AUA IS NULL THEN 0 ELSE BDV.AUA END) AS O_ADVISOR_SUM_AUA
,MAX(BDV.MD_SOURCE) AS O_MAX_MD_SOURCE
,MAX(BDV.MD_SRC_SYSTEM) AS O_MAX_MD_SRC_SYSTEM
,MAX(BDV.MD_EXTRACT_DT) AS O_MAX_MD_EXTRACT_DT
--,MAX(BDV.MD_ACTIVE_CERTS)   AS O_MAX_MD_ACTIVE
,BDV.HK_HUB_PARTY_ROLE_ADVISOR AS HK_HUB_PARTY_ROLE_ADVISOR
FROM
( SELECT * FROM 
(
SELECT SAT_LINKCV.*, LINK.HK_HUB_PARTY_ROLE_ADVISOR, LINK.MASTER_CODE FROM
(SELECT SAT_LINK.* FROM DB_IAW_''||ENV||''_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT SAT_LINK
JOIN
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_LINK ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) SAT_LINKCV
ON SAT_LINKCV.HK_LINK = SAT_LINK.HK_LINK  AND SAT_LINKCV.MD_START_DT = SAT_LINK.MD_START_DT WHERE SAT_LINK.MD_ACTIVE = ''''A''''
)SAT_LINKCV
JOIN
DB_IAW_''||ENV||''_DWH.HOLDINGS_BDV.LINK_INVESTMENT LINK
ON LINK.HK_LINK = SAT_LINKCV.HK_LINK
) BDV1
LEFT JOIN
(SELECT SAT_PARTY.HK_HUB FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH SAT_PARTY
JOIN
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) SAT_PARTYCV
ON SAT_PARTYCV.HK_HUB = SAT_PARTY.HK_HUB AND SAT_PARTYCV.MD_START_DT = SAT_PARTY.MD_START_DT WHERE SAT_PARTY.MD_ACTIVE = ''''A''''
) BDV2
ON BDV1.HK_HUB_PARTY_ROLE_ADVISOR = BDV2.HK_HUB
) BDV GROUP BY BDV.HK_HUB_PARTY_ROLE_ADVISOR
) SATPARTY_BDV
 '';

INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ADVISOR_AUA_SEG_COMPUTE
SET
MD_HASHDIFF=SHA1(
CONCAT(COALESCE(ADVISOR_AUA_SEGMENT , '''' #NULL#''''),''''|''''
,COALESCE(TO_VARCHAR(ADVISOR_AUA_SEGMENT_ORDER), '''' #NULL#''''), ''''|''''
--,COALESCE(TO_VARCHAR(SUSPENDED_IND), '''' #NULL#'''')
))
Where HK_HUB <> ''''0''''
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_IAS_CERTS_HUB_SAT_TO_BDV_WT_ADVISOR_IAS_CERTS(""ENV"" VARCHAR(1000), ""DATA_START_DATE"" VARCHAR(20))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
TRUNC_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
TRUNC_QUERY := ''TRUNCATE TABLE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_ADVISOR_IAS_CERTS'';

INS_QUERY:= ''INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_ADVISOR_IAS_CERTS (
HK_HUB,
MD_HASHDIFF,
MD_CREATION_DT,
MD_CREATION_AUDIT_ID,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
MD_ACTIVE,
CID,
FIRST_NAME,
LAST_NAME,
FULL_NAME,
PRIMARY_ROLE,
RVP,
BRANCH_NRD,
BRANCH_NAME,
PROVINCE,
IS_ACTIVE,
TRADE_NAME,
PORTAL_IDS,
BEGIN_DT,
END_DT,
RR_CD,
ADVISOR_BIRTH_DATE,
MD_START_DT
)
(
WITH
  LV AS (
  SELECT
	HK_HUB AS LV_HK_HUB,
	MAX(MD_START_DT) AS O_DATA_START_DATE
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_ADVISOR_IAS_CERTS
	WHERE MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')
	GROUP BY HK_HUB
  ),
  Jnr_SAT AS (
  SELECT
  A.LV_HK_HUB 					AS  LV_HK_HUB,
  A.O_DATA_START_DATE 			AS  O_DATA_START_DATE,
  B.HK_HUB 						AS 	HK_HUB,
  B.MD_START_DT 				AS 	MD_START_DT,
  B.MD_HASHDIFF 				AS 	MD_HASHDIFF,
  B.MD_CREATION_DT 				AS 	MD_CREATION_DT,
  B.MD_CREATION_AUDIT_ID 		AS 	MD_CREATION_AUDIT_ID,
  B.MD_SOURCE 					AS 	MD_SOURCE,
  B.MD_SRC_SYSTEM 				AS 	MD_SRC_SYSTEM,
  B.MD_EXTRACT_DT 				AS 	MD_EXTRACT_DT,
  B.MD_ACTIVE 					AS 	MD_ACTIVE,
  B.FIRST_NAME 					AS 	FIRST_NAME,
  B.LAST_NAME 					AS 	LAST_NAME,
  B.FULL_NAME 					AS 	FULL_NAME,
  B.PRIMARY_ROLE 				AS 	PRIMARY_ROLE,
  B.RVP 						AS 	RVP,
  B.BRANCH_NRD 					AS 	BRANCH_NRD,
  B.BRANCH_NAME 				AS 	BRANCH_NAME,
  B.PROVINCE 					AS 	PROVINCE,
  B.IS_ACTIVE 					AS 	IS_ACTIVE,
  B.TRADE_NAME 					AS 	TRADE_NAME,
  B.PORTAL_IDS 					AS 	PORTAL_IDS,
  B.BEGIN_DT 					AS 	BEGIN_DT,
  B.END_DT 						AS 	END_DT,
  B.ADVISOR_BIRTH_DATE 			AS 	ADVISOR_BIRTH_DATE
  FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_ADVISOR_IAS_CERTS B
  JOIN LV A
  ON B.HK_HUB = A.LV_HK_HUB
  AND B.MD_START_DT = A.O_DATA_START_DATE
  WHERE B.MD_ACTIVE = ''''A''''
  ),
  JNR_SAT_HUB AS (
  SELECT
	B.CID AS HUB_CID,
	B.HK_HUB AS HUB_HK_HUB,
	B.MD_EXTRACT_DT AS HUB_MD_EXTRACT_DT,
	B.MD_SRC_SYSTEM AS HUB_MD_SRC_SYSTEM,
	B.RR_CD AS HUB_RR_CD,
	A.LV_HK_HUB 				AS 	LV_HK_HUB,
	A.O_DATA_START_DATE 		AS 	O_DATA_START_DATE,
	A.HK_HUB 					AS 	HK_HUB,
	A.MD_START_DT 				AS 	MD_START_DT,
	A.MD_HASHDIFF 				AS 	MD_HASHDIFF,
	A.MD_CREATION_DT 			AS 	MD_CREATION_DT,
	A.MD_CREATION_AUDIT_ID 		AS 	MD_CREATION_AUDIT_ID,
	A.MD_SOURCE 				AS 	MD_SOURCE,
	A.MD_SRC_SYSTEM 			AS 	MD_SRC_SYSTEM,
	A.MD_EXTRACT_DT 			AS 	MD_EXTRACT_DT,
	A.MD_ACTIVE 				AS 	MD_ACTIVE,
	A.FIRST_NAME 				AS 	FIRST_NAME,
	A.LAST_NAME 				AS 	LAST_NAME,
	A.FULL_NAME 				AS 	FULL_NAME,
	A.PRIMARY_ROLE 				AS 	PRIMARY_ROLE,
	A.RVP 						AS 	RVP,
	A.BRANCH_NRD 				AS 	BRANCH_NRD,
	A.BRANCH_NAME 				AS 	BRANCH_NAME,
	A.PROVINCE 					AS 	PROVINCE,
	A.IS_ACTIVE 				AS 	IS_ACTIVE,
	A.TRADE_NAME 				AS 	TRADE_NAME,
	A.PORTAL_IDS 				AS 	PORTAL_IDS,
	A.BEGIN_DT 					AS 	BEGIN_DT,
	A.END_DT 					AS 	END_DT,
	A.ADVISOR_BIRTH_DATE 		AS 	ADVISOR_BIRTH_DATE
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.HUB_ADVISOR_IAS_CERTS B
	JOIN Jnr_SAT A
	ON B.HK_HUB = A.HK_HUB	
  )
  SELECT 
	HK_HUB,
	MD_HASHDIFF,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	MD_ACTIVE,
	HUB_CID,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
	PRIMARY_ROLE,
	RVP,
	BRANCH_NRD,
	BRANCH_NAME,
	PROVINCE,
	IS_ACTIVE,
	TRADE_NAME,
	PORTAL_IDS,
	BEGIN_DT,
	END_DT,
	HUB_RR_CD,
	ADVISOR_BIRTH_DATE,
	TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')
	FROM JNR_SAT_HUB)'';
  

EXECUTE IMMEDIATE :TRUNC_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END


';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_IAS_CERTS_REGISTERED_REPRESENTATIVE_TO_BDV_WT_REGISTERED_REPRESENTATIVE_IAS_CERTS(""ENV"" VARCHAR(1000), ""DATA_START_DATE"" VARCHAR(20))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
TRUNC_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
TRUNC_QUERY := ''TRUNCATE TABLE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_REGISTERED_REPRESENTATIVE_IAS_CERTS'';

INS_QUERY:= ''INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_REGISTERED_REPRESENTATIVE_IAS_CERTS (
HK_HUB,
HK_SAT,
MD_START_DT,
MD_CREATION_DT,
MD_ACTIVE,
RR_CD,
FIRST_NAME,
LAST_NAME,
FULL_NAME,
PRIMARY_ROLE,
RVP,
BRANCH_NRD,
BRANCH_NAME,
PROVINCE,
IS_ACTIVE,
TRADE_NAME,
PORTAL_IDS,
BEGIN_DT,
END_DT,
ADVISOR_BIRTH_DATE,
RDV_RR_IAS_CERTS_MD_START_DT,
REP_EMAIL,
BRANCH_ADDRESS1,
BRANCH_ADDRESS2,
BRANCH_CITY,
BRANCH_POSTAL_CODE,
CBM
)
(
WITH
  LV AS (
  SELECT
	HK_HUB AS LV_HK_HUB,
	HK_SAT AS LV_HK_SAT,
	MAX(MD_START_DT) AS O_DATA_START_DATE
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_CERTS
	WHERE MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')
	GROUP BY HK_HUB,HK_SAT
  ),
  JNR_SAT AS (
  SELECT
	A.LV_HK_HUB 			AS 	LV_HK_HUB,
	A.LV_HK_SAT 			AS 	LV_HK_SAT,
	A.O_DATA_START_DATE 	AS 	O_DATA_START_DATE,
	B.HK_HUB 				AS 	HK_HUB,
	B.HK_SAT			 	AS 	HK_SAT,
	B.MD_START_DT 			AS 	MD_START_DT,
	B.MD_HASHDIFF 			AS 	MD_HASHDIFF,
	B.MD_CREATION_DT 		AS 	MD_CREATION_DT,
	B.MD_CREATION_AUDIT_ID 	AS 	MD_CREATION_AUDIT_ID,
	B.MD_SOURCE 			AS 	MD_SOURCE,
	B.MD_SRC_SYSTEM 		AS 	MD_SRC_SYSTEM,
	B.MD_EXTRACT_DT 		AS 	MD_EXTRACT_DT,
	B.MD_ACTIVE 			AS 	MD_ACTIVE,
	B.CID 					AS 	CID,
	B.FIRST_NAME 			AS 	FIRST_NAME,
	B.LAST_NAME 			AS 	LAST_NAME,
	B.FULL_NAME 			AS 	FULL_NAME,
	B.PRIMARY_ROLE 			AS 	PRIMARY_ROLE,
	B.RVP 					AS 	RVP,
	B.BRANCH_NRD 			AS 	BRANCH_NRD,
	B.BRANCH_NAME		 	AS 	BRANCH_NAME,
	B.PROVINCE 				AS 	PROVINCE,
	B.IS_ACTIVE 			AS 	IS_ACTIVE,
	B.TRADE_NAME 			AS 	TRADE_NAME,
	B.PORTAL_IDS 			AS 	PORTAL_IDS,
	B.BEGIN_DT 				AS 	BEGIN_DT,
	B.END_DT 				AS 	END_DT,
	B.ADVISOR_BIRTH_DATE 	AS 	ADVISOR_BIRTH_DATE,
	B.REP_EMAIL 			AS 	REP_EMAIL,
	B.BRANCH_ADDRESS1	 	AS 	BRANCH_ADDRESS1,
	B.BRANCH_ADDRESS2 		AS 	BRANCH_ADDRESS2,
	B.BRANCH_CITY 			AS 	BRANCH_CITY,
	B.BRANCH_POSTAL_CODE 	AS 	BRANCH_POSTAL_CODE,
	B.CBM 					AS 	CBM
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_CERTS B
	JOIN LV A
	ON B.HK_HUB = A.LV_HK_HUB
	AND B.HK_SAT = A.LV_HK_SAT
	AND B.MD_START_DT = A.O_DATA_START_DATE
	WHERE B.MD_ACTIVE=''''A'''' OR B.MD_ACTIVE=''''D''''
  ),
  JNR_SAT_HUB AS (
  SELECT 
	B.HK_HUB AS HUB_HK_HUB,
	B.MD_EXTRACT_DT AS HUB_MD_EXTRACT_DT,
	B.MD_SRC_SYSTEM AS HUB_MD_SRC_SYSTEM,
	B.RR_CD AS HUB_RR_CD,
	A.LV_HK_HUB 					AS 	LV_HK_HUB,
	A.LV_HK_SAT 					AS 	LV_HK_SAT,
	A.O_DATA_START_DATE 			AS 	O_DATA_START_DATE,
	A.HK_HUB 						AS 	HK_HUB,
	A.HK_SAT 						AS 	HK_SAT,
	A.MD_START_DT 					AS 	MD_START_DT,
	A.MD_HASHDIFF 					AS 	MD_HASHDIFF,
	A.MD_CREATION_DT 				AS 	MD_CREATION_DT,
	A.MD_CREATION_AUDIT_ID 			AS 	MD_CREATION_AUDIT_ID,
	A.MD_SOURCE 					AS 	MD_SOURCE,
	A.MD_SRC_SYSTEM 				AS 	MD_SRC_SYSTEM,
	A.MD_EXTRACT_DT 				AS 	MD_EXTRACT_DT,
	A.MD_ACTIVE 					AS 	MD_ACTIVE,
	A.CID 							AS 	CID,
	A.FIRST_NAME 					AS 	FIRST_NAME,
	A.LAST_NAME 					AS 	LAST_NAME,
	A.FULL_NAME 					AS 	FULL_NAME,
	A.PRIMARY_ROLE 					AS 	PRIMARY_ROLE,
	A.RVP 							AS 	RVP,
	A.BRANCH_NRD 					AS 	BRANCH_NRD,
	A.BRANCH_NAME 					AS 	BRANCH_NAME,
	A.PROVINCE 						AS 	PROVINCE,
	A.IS_ACTIVE 					AS 	IS_ACTIVE,
	A.TRADE_NAME 					AS 	TRADE_NAME,
	A.PORTAL_IDS 					AS 	PORTAL_IDS,
	A.BEGIN_DT 						AS 	BEGIN_DT,
	A.END_DT 						AS 	END_DT,
	A.ADVISOR_BIRTH_DATE   			AS 	ADVISOR_BIRTH_DATE,
	A.REP_EMAIL 					AS 	REP_EMAIL,
	A.BRANCH_ADDRESS1	 			AS 	BRANCH_ADDRESS1,
	A.BRANCH_ADDRESS2 				AS 	BRANCH_ADDRESS2,
	A.BRANCH_CITY 					AS 	BRANCH_CITY,
	A.BRANCH_POSTAL_CODE 			AS 	BRANCH_POSTAL_CODE,
	A.CBM 							AS 	CBM
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE B 
	JOIN JNR_SAT A
	ON B.HK_HUB = A.HK_HUB
  )
  SELECT
    HK_HUB,
	HK_SAT,
	TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD''''),
	CURRENT_DATE,
	MD_ACTIVE,
	HUB_RR_CD,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
	PRIMARY_ROLE,
	RVP,
	BRANCH_NRD,
	BRANCH_NAME,
	PROVINCE,
	IS_ACTIVE,
	TRADE_NAME,
	PORTAL_IDS,
	BEGIN_DT,
	END_DT,
	ADVISOR_BIRTH_DATE,
	MD_START_DT,
    REP_EMAIL,
	BRANCH_ADDRESS1,
	BRANCH_ADDRESS2,
	BRANCH_CITY,
	BRANCH_POSTAL_CODE,
	CBM
	FROM JNR_SAT_HUB)'';
  

EXECUTE IMMEDIATE :TRUNC_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END


';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_IAS_COMMISSION_SHARE_SAT_TO_BDV_WT_REGISTERED_REPRESENTATIVE(""ENV"" VARCHAR(1000), ""DATA_START_DATE"" VARCHAR(20))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
TRUNC_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
TRUNC_QUERY := ''TRUNCATE TABLE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_REGISTERED_REPRESENTATIVE'';

INS_QUERY:= ''INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_REGISTERED_REPRESENTATIVE
(
HK_HUB,
HK_SAT,
MD_START_DT,
MD_HASHDIFF,
MD_CREATION_DT,
MD_SOURCE,
MD_CREATION_AUDIT_ID,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
MD_ACTIVE,
RR_CD,
REPNAME,
FIRSTNAME,
LASTNAME,
BRANCHCODE,
BRANCHNAME,
GROUPID,
GROUPDESCRIPTION,
FIXEDFEEIND,
MANAGEDIND,
REFIND,
ACTIVEIND,
SEGFUNDIND,
REVNO,
STAMP,
USERID,
ACTIVE,
ADVISOR_ID,
COMMRATEPCT,
SHAREGROSSCOMMIND,
STARTDATE,
MAINREPCODE,
RGN_MGR,
BRN_CD,
BRN_NAME,
REP_LNAME,
REP_FNAME
)
(
WITH
  LV AS (
  SELECT
	HK_HUB AS LV_HK_HUB,
	HK_SAT AS LV_HK_SAT,
	MAX(MD_START_DT) AS O_DATA_START_DATE
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_COMMISSION
	WHERE MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')
	GROUP BY HK_HUB, HK_SAT
  ),
  FLTR_ACTV AS (
  SELECT
	A.LV_HK_HUB 				AS LV_HK_HUB,
	A.LV_HK_SAT 				AS LV_HK_SAT,
	A.O_DATA_START_DATE 		AS O_DATA_START_DATE,
	B.HK_HUB 					AS HK_HUB,
	B.HK_SAT 					AS HK_SAT,
	B.MD_START_DT 				AS MD_START_DT,
	B.MD_HASHDIFF 				AS MD_HASHDIFF,
	B.MD_CREATION_DT 			AS MD_CREATION_DT,
	B.MD_CREATION_AUDIT_ID 		AS MD_CREATION_AUDIT_ID,
	B.MD_SOURCE 				AS MD_SOURCE,
	B.MD_SRC_SYSTEM 			AS MD_SRC_SYSTEM,
	B.MD_EXTRACT_DT 			AS MD_EXTRACT_DT,
	B.MD_ACTIVE 				AS MD_ACTIVE,
	B.REPNAME 					AS REPNAME,
	B.FIRSTNAME 				AS FIRSTNAME,
	B.LASTNAME 					AS LASTNAME,
	B.BRANCHCODE 				AS BRANCHCODE,
	B.BRANCHNAME 				AS BRANCHNAME,
	B.GROUPID 					AS GROUPID,
	B.GROUPDESCRIPTION 			AS GROUPDESCRIPTION, 
	B.FIXEDFEEIND 				AS FIXEDFEEIND,
	B.MANAGEDIND 				AS MANAGEDIND,
	B.REFIND 					AS REFIND,
	B.ACTIVEIND 				AS ACTIVEIND,
	B.SEGFUNDIND 				AS SEGFUNDIND,
	B.REVNO 					AS REVNO,
	B.STAMP 					AS STAMP,
	B.USERID 					AS USERID,
	B.ACTIVE 					AS ACTIVE,
	B.ADVISOR_ID 				AS ADVISOR_ID,
	B.COMMRATEPCT 				AS COMMRATEPCT,
	B.SHAREGROSSCOMMIND 		AS SHAREGROSSCOMMIND,
	B.STARTDATE 				AS STARTDATE,
	B.MAINREPCODE 				AS MAINREPCODE
	FROM 
	DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_COMMISSION B
	JOIN LV A
	ON  B.HK_HUB = A.LV_HK_HUB
	AND B.HK_SAT = A.LV_HK_SAT
	AND B.MD_START_DT = A.O_DATA_START_DATE
	WHERE 
	B.MD_ACTIVE = ''''A''''
	),
	JNR_SAT_HUB AS (
	SELECT
	B.HK_HUB AS HUB_HK_HUB,
	B.MD_EXTRACT_DT AS HUB_MD_EXTRACT_DT,
	B.MD_SRC_SYSTEM AS HUB_MD_SRC_SYSTEM,
	B.RR_CD AS HUB_RR_CD,
	A.LV_HK_HUB AS 	LV_HK_HUB,
	A.LV_HK_SAT AS 	LV_HK_SAT,
	A.O_DATA_START_DATE AS 	O_DATA_START_DATE,
	A.HK_HUB AS 	HK_HUB,
	A.HK_SAT AS 	HK_SAT,
	A.MD_START_DT AS 	MD_START_DT,
	A.MD_HASHDIFF AS 	MD_HASHDIFF,
	A.MD_CREATION_DT AS 	MD_CREATION_DT,
	A.MD_CREATION_AUDIT_ID AS 	MD_CREATION_AUDIT_ID,
	A.MD_SOURCE AS 	MD_SOURCE,
	A.MD_SRC_SYSTEM AS 	MD_SRC_SYSTEM,
	A.MD_EXTRACT_DT AS 	MD_EXTRACT_DT,
	A.MD_ACTIVE AS 	MD_ACTIVE,
	A.REPNAME AS 	REPNAME,
	A.FIRSTNAME AS 	FIRSTNAME,
	A.LASTNAME AS 	LASTNAME,
	A.BRANCHCODE AS 	BRANCHCODE,
	A.BRANCHNAME AS 	BRANCHNAME,
	A.GROUPID AS 	GROUPID,
	A.GROUPDESCRIPTION AS  	GROUPDESCRIPTION, 
	A.FIXEDFEEIND AS 	FIXEDFEEIND,
	A.MANAGEDIND AS 	MANAGEDIND,
	A.REFIND AS 	REFIND,
	A.ACTIVEIND AS 	ACTIVEIND,
	A.SEGFUNDIND AS 	SEGFUNDIND,
	A.REVNO AS 	REVNO,
	A.STAMP AS 	STAMP,
	A.USERID AS 	USERID,
	A.ACTIVE AS 	ACTIVE,
	A.ADVISOR_ID AS 	ADVISOR_ID,
	A.COMMRATEPCT AS 	COMMRATEPCT,
	A.SHAREGROSSCOMMIND AS 	SHAREGROSSCOMMIND,
	A.STARTDATE AS 	STARTDATE,
	A.MAINREPCODE AS 	MAINREPCODE
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE B
	JOIN FLTR_ACTV A
	ON A.HK_HUB = B.HK_HUB
	),
	LV_UNIVERIS AS (
	SELECT 
	HK_HUB AS LV_UNIVERIS_HK_HUB,
	MAX(MD_START_DT) AS O_DATA_START_DATE_UNIVERIS
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_UNIVERIS
	WHERE MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')
	GROUP BY HK_HUB
	),
	JNR_SAT_UNIVERIS AS (
	SELECT
	A.LV_UNIVERIS_HK_HUB AS LV_UNIVERIS_HK_HUB,
	A.O_DATA_START_DATE_UNIVERIS AS O_DATA_START_DATE_UNIVERIS,
	B.HK_HUB AS 	SAT_UNIVERIS_HK_HUB,
	B.MD_START_DT AS 	SAT_UNIVERIS_MD_START_DT,
	B.MD_HASHDIFF AS 	SAT_UNIVERIS_MD_HASHDIFF,
	B.MD_CREATION_DT AS 	SAT_UNIVERIS_MD_CREATION_DT,
	B.MD_CREATION_AUDIT_ID AS 	SAT_UNIVERIS_MD_CREATION_AUDIT_ID,
	B.MD_SOURCE AS 	SAT_UNIVERIS_MD_SOURCE,
	B.MD_SRC_SYSTEM AS 	SAT_UNIVERIS_MD_SRC_SYSTEM,
	B.MD_EXTRACT_DT AS 	SAT_UNIVERIS_MD_EXTRACT_DT,
	B.MD_ACTIVE AS 	SAT_UNIVERIS_MD_ACTIVE,
	B.COMPANY_CD AS 	SAT_UNIVERIS_COMPANY_CD,
	B.COMPANY_NAME AS 	SAT_UNIVERIS_COMPANY_NAME,
	B.REGULATORY_ORG_CD AS 	SAT_UNIVERIS_REGULATORY_ORG_CD,
	B.REGULATORY_ORG_NAME AS 	SAT_UNIVERIS_REGULATORY_ORG_NAME,
	B.DLR_SYSID AS 	SAT_UNIVERIS_DLR_SYSID,
	B.DLR_CD AS 	SAT_UNIVERIS_DLR_CD,
	B.DLR_NAME_ENG AS 	SAT_UNIVERIS_DLR_NAME_ENG,
	B.RGN_SYSID AS 	SAT_UNIVERIS_RGN_SYSID,
	B.RGN_CD AS 	SAT_UNIVERIS_RGN_CD,
	B.RGN_NAME AS 	SAT_UNIVERIS_RGN_NAME,
	B.RGN_MGR AS 	SAT_UNIVERIS_RGN_MGR,
	B.BRN_SYSID AS 	SAT_UNIVERIS_BRN_SYSID,
	B.BRN_CD AS 	SAT_UNIVERIS_BRN_CD,
	B.BRN_NAME AS 	SAT_UNIVERIS_BRN_NAME,
	B.REP_TEAM_CD AS 	SAT_UNIVERIS_REP_TEAM_CD,
	B.REP_TEAM_NAME AS 	SAT_UNIVERIS_REP_TEAM_NAME,
	B.REP_SYSID AS 	SAT_UNIVERIS_REP_SYSID,
	B.NK_REP_CORP_NAME AS 	SAT_UNIVERIS_NK_REP_CORP_NAME,
	B.REP_LNAME AS 	SAT_UNIVERIS_REP_LNAME,
	B.REP_FNAME AS 	SAT_UNIVERIS_REP_FNAME,
	B.REP_ST_NAME AS 	SAT_UNIVERIS_REP_ST_NAME,
	B.REP_GRP_RSP AS 	SAT_UNIVERIS_REP_GRP_RSP
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_UNIVERIS B
	JOIN LV_UNIVERIS A
	ON B.HK_HUB = A.LV_UNIVERIS_HK_HUB
	AND B.MD_START_DT = A.O_DATA_START_DATE_UNIVERIS
	),
	 Jnr_SAT_IAS_lett_join_SAT_UNIVERIS AS (
	 SELECT 
	  B.HUB_HK_HUB AS 	HUB_HK_HUB,
	  B.HUB_MD_EXTRACT_DT AS 	HUB_MD_EXTRACT_DT,
	  B.HUB_MD_SRC_SYSTEM AS 	HUB_MD_SRC_SYSTEM,
	  B.HUB_RR_CD AS 	HUB_RR_CD,
	  B.LV_HK_HUB AS 	LV_HK_HUB,
	  B.LV_HK_SAT AS 	LV_HK_SAT,
	  B.O_DATA_START_DATE AS 	O_DATA_START_DATE,
	  B.HK_HUB AS 	HK_HUB,
	  B.HK_SAT AS 	HK_SAT,
	  B.MD_START_DT AS 	MD_START_DT,
	  B.MD_HASHDIFF AS 	MD_HASHDIFF,
	  B.MD_CREATION_DT AS 	MD_CREATION_DT,
	  B.MD_CREATION_AUDIT_ID AS 	MD_CREATION_AUDIT_ID,
	  B.MD_SOURCE AS 	MD_SOURCE,
	  B.MD_SRC_SYSTEM AS 	MD_SRC_SYSTEM,
	  B.MD_EXTRACT_DT AS 	MD_EXTRACT_DT,
	  B.MD_ACTIVE AS 	MD_ACTIVE,
	  B.REPNAME AS 	REPNAME,
	  B.FIRSTNAME AS 	FIRSTNAME,
	  B.LASTNAME AS 	LASTNAME,
	  B.BRANCHCODE AS 	BRANCHCODE,
	  B.BRANCHNAME AS 	BRANCHNAME,
	  B.GROUPID AS 	GROUPID,
	  B.GROUPDESCRIPTION AS  	GROUPDESCRIPTION, 
	  B.FIXEDFEEIND AS 	FIXEDFEEIND,
	  B.MANAGEDIND AS 	MANAGEDIND,
	  B.REFIND AS 	REFIND,
	  B.ACTIVEIND AS 	ACTIVEIND,
	  B.SEGFUNDIND AS 	SEGFUNDIND,
	  B.REVNO AS 	REVNO,
	  B.STAMP AS 	STAMP,
	  B.USERID AS 	USERID,
	  B.ACTIVE AS 	ACTIVE,
	  B.ADVISOR_ID AS 	ADVISOR_ID,
	  B.COMMRATEPCT AS 	COMMRATEPCT,
	  B.SHAREGROSSCOMMIND AS 	SHAREGROSSCOMMIND,
	  B.STARTDATE AS 	STARTDATE,
	  B.MAINREPCODE AS 	MAINREPCODE,
	  A.LV_UNIVERIS_HK_HUB AS 	LV_UNIVERIS_HK_HUB,
	  A.O_DATA_START_DATE_UNIVERIS AS 	O_DATA_START_DATE_UNIVERIS,
	  A.SAT_UNIVERIS_HK_HUB AS 	SAT_UNIVERIS_HK_HUB,
	  A.SAT_UNIVERIS_MD_START_DT AS 	SAT_UNIVERIS_MD_START_DT,
	  A.SAT_UNIVERIS_MD_HASHDIFF AS 	SAT_UNIVERIS_MD_HASHDIFF,
	  A.SAT_UNIVERIS_MD_CREATION_DT AS 	SAT_UNIVERIS_MD_CREATION_DT,
	  A.SAT_UNIVERIS_MD_CREATION_AUDIT_ID AS 	SAT_UNIVERIS_MD_CREATION_AUDIT_ID,
	  A.SAT_UNIVERIS_MD_SOURCE AS 	SAT_UNIVERIS_MD_SOURCE,
	  A.SAT_UNIVERIS_MD_SRC_SYSTEM AS 	SAT_UNIVERIS_MD_SRC_SYSTEM,
	  A.SAT_UNIVERIS_MD_EXTRACT_DT AS 	SAT_UNIVERIS_MD_EXTRACT_DT,
	  A.SAT_UNIVERIS_MD_ACTIVE AS 	SAT_UNIVERIS_MD_ACTIVE,
	  A.SAT_UNIVERIS_COMPANY_CD AS 	SAT_UNIVERIS_COMPANY_CD,
	  A.SAT_UNIVERIS_COMPANY_NAME AS 	SAT_UNIVERIS_COMPANY_NAME,
	  A.SAT_UNIVERIS_REGULATORY_ORG_CD AS 	SAT_UNIVERIS_REGULATORY_ORG_CD,
	  A.SAT_UNIVERIS_REGULATORY_ORG_NAME AS 	SAT_UNIVERIS_REGULATORY_ORG_NAME,
	  A.SAT_UNIVERIS_DLR_SYSID AS 	SAT_UNIVERIS_DLR_SYSID,
	  A.SAT_UNIVERIS_DLR_CD AS 	SAT_UNIVERIS_DLR_CD,
	  A.SAT_UNIVERIS_DLR_NAME_ENG AS 	SAT_UNIVERIS_DLR_NAME_ENG,
	  A.SAT_UNIVERIS_RGN_SYSID AS 	SAT_UNIVERIS_RGN_SYSID,
	  A.SAT_UNIVERIS_RGN_CD AS 	SAT_UNIVERIS_RGN_CD,
	  A.SAT_UNIVERIS_RGN_NAME AS 	SAT_UNIVERIS_RGN_NAME,
	  A.SAT_UNIVERIS_RGN_MGR AS 	SAT_UNIVERIS_RGN_MGR,
	  A.SAT_UNIVERIS_BRN_SYSID AS 	SAT_UNIVERIS_BRN_SYSID,
	  A.SAT_UNIVERIS_BRN_CD AS 	SAT_UNIVERIS_BRN_CD,
	  A.SAT_UNIVERIS_BRN_NAME AS 	SAT_UNIVERIS_BRN_NAME,
	  A.SAT_UNIVERIS_REP_TEAM_CD AS 	SAT_UNIVERIS_REP_TEAM_CD,
	  A.SAT_UNIVERIS_REP_TEAM_NAME AS 	SAT_UNIVERIS_REP_TEAM_NAME,
	  A.SAT_UNIVERIS_REP_SYSID AS 	SAT_UNIVERIS_REP_SYSID,
	  A.SAT_UNIVERIS_NK_REP_CORP_NAME AS 	SAT_UNIVERIS_NK_REP_CORP_NAME,
	  A.SAT_UNIVERIS_REP_LNAME AS 	SAT_UNIVERIS_REP_LNAME,
	  A.SAT_UNIVERIS_REP_FNAME AS 	SAT_UNIVERIS_REP_FNAME,
	  A.SAT_UNIVERIS_REP_ST_NAME AS 	SAT_UNIVERIS_REP_ST_NAME,
	  A.SAT_UNIVERIS_REP_GRP_RSP	SAT_UNIVERIS_REP_GRP_RSP
	  FROM JNR_SAT_HUB B
	  LEFT JOIN JNR_SAT_UNIVERIS A 
	  ON B.HK_HUB = A.SAT_UNIVERIS_HK_HUB
	  )
	  SELECT 
	  HK_HUB,
	  HK_SAT,
	  MD_START_DT,
	  MD_HASHDIFF,
	  MD_CREATION_DT,
	  MD_SOURCE,
	  MD_CREATION_AUDIT_ID,
	  MD_SRC_SYSTEM,
	  MD_EXTRACT_DT,
	  MD_ACTIVE,
	  HUB_RR_CD,
	  REPNAME,
	  FIRSTNAME,
	  LASTNAME,
	  BRANCHCODE,
	  BRANCHNAME,
	  GROUPID,
	  GROUPDESCRIPTION,
	  FIXEDFEEIND,
	  MANAGEDIND,
	  REFIND,
	  ACTIVEIND,
	  SEGFUNDIND,
	  REVNO,
	  STAMP,
	  USERID,
	  ACTIVE,
	  ADVISOR_ID,
	  COMMRATEPCT,
	  SHAREGROSSCOMMIND,
	  STARTDATE,
	  MAINREPCODE,
	  SAT_UNIVERIS_RGN_MGR,
	  SAT_UNIVERIS_BRN_CD,
	  SAT_UNIVERIS_BRN_NAME,
	  SAT_UNIVERIS_REP_LNAME,
	  SAT_UNIVERIS_REP_FNAME
	  FROM Jnr_SAT_IAS_lett_join_SAT_UNIVERIS)'';
  

EXECUTE IMMEDIATE :TRUNC_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END


';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_IAS_COMMISSION_SHARE_TO_BDV_WT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE_MC(""ENV"" VARCHAR(1000), ""DATA_START_DATE"" VARCHAR(20))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
TRUNC_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
TRUNC_QUERY := ''TRUNCATE TABLE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE_MC'';
INS_QUERY:= ''INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE_MC (
HK_LINK,
HK_HUB_REGISTERED_REPRESENTATIVE,
HK_HUB_ADVISOR,
MD_SOURCE,
MD_HASHDIFF,
MD_CREATION_DT,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
MD_CREATION_AUDIT_ID,
FROMREPID,
TOREPID,
SHARETYPE,
SOURCECODE,
PRODUCTCODE,
REVENUEPCT,
COMMISSIONPCT,
NETCOMMISSIONPCT,
FEEPCT,
REVNO,
STAMP,
ADVISOR_ROLE,
MD_START_DT
)
(
WITH
  LV AS (
  SELECT
	HK_LINK AS LV_HK_LINK,
	MAX(MD_START_DT) AS O_START_DATE
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR
	WHERE MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')
	GROUP BY HK_LINK
  ),
  FLTR_ACTIVE AS (
  SELECT
	A.LV_HK_LINK 				AS LV_HK_LINK,
	A.O_START_DATE 				AS O_START_DATE,
	B.COMMISSIONPCT 			AS COMMISSIONPCT,
	B.FEEPCT 					AS FEEPCT,
	B.HK_LINK 					AS HK_LINK,
	B.MD_ACTIVE 				AS MD_ACTIVE,
	B.MD_CREATION_AUDIT_ID 		AS MD_CREATION_AUDIT_ID,
	B.MD_CREATION_DT 			AS MD_CREATION_DT,
	B.MD_EXTRACT_DT 			AS MD_EXTRACT_DT,
	B.MD_HASHDIFF 				AS MD_HASHDIFF,
	B.MD_SOURCE 				AS MD_SOURCE,
	B.MD_SRC_SYSTEM 			AS MD_SRC_SYSTEM,
	B.MD_START_DT 				AS MD_START_DT,
	B.NETCOMMISSIONPCT 			AS NETCOMMISSIONPCT,
	NULL 						AS PRODUCTCODE,
	B.REVENUEPCT 				AS REVENUEPCT,
	B.REVNO 					AS REVNO,
	NULL  						AS SHARETYPE,
	NULL  						AS SOURCECODE,
	B.STAMP 					AS STAMP
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR B
	JOIN LV A
	ON B.HK_LINK = A.LV_HK_LINK
	AND B.MD_START_DT = A.O_START_DATE
	WHERE B.MD_ACTIVE = ''''A''''
	),
  Joiner_IAS_Commission_Share AS (
  SELECT 
	A.COMMISSIONPCT AS COMMISSIONPCT,
	A.FEEPCT AS FEEPCT,
	A.HK_LINK AS HK_LINK,
	A.MD_CREATION_AUDIT_ID AS MD_CREATION_AUDIT_ID,
	A.MD_CREATION_DT AS MD_CREATION_DT,
	A.MD_EXTRACT_DT AS MD_EXTRACT_DT,
	A.MD_HASHDIFF AS MD_HASHDIFF,
	A.MD_SOURCE AS MD_SOURCE,
	A.MD_SRC_SYSTEM AS MD_SRC_SYSTEM,
	A.MD_START_DT AS MD_START_DT,
	A.NETCOMMISSIONPCT AS NETCOMMISSIONPCT,
	A.REVENUEPCT AS REVENUEPCT,
	A.REVNO AS REVNO,
	A.STAMP AS STAMP,
	B.FROMREPID AS HUB_FROMREPID,
	B.HK_HUB_FROM AS HUB_HK_HUB_FROM,
	B.HK_HUB_TO AS HUB_HK_HUB_TO,
	B.HK_LINK AS HUB_HK_LINK,
	B.PRODUCTCODE AS HUB_PRODUCTCODE,
	B.SHARETYPE AS HUB_SHARETYPE,
	B.SOURCECODE AS HUB_SOURCECODE,
	B.TOREPID AS HUB_TOREPID
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.LINK_COMMISSION_SHARE_RR B
	JOIN FLTR_ACTIVE A
	ON B.HK_LINK = A.HK_LINK
	WHERE trim(HUB_SHARETYPE) !=''''noreference'''' and trim(HUB_SHARETYPE) !=''''option'''' and (trim(HUB_SHARETYPE) !=''''override'''' or HUB_FROMREPID!=''''SBEP'''')),
    LV_SATRR_COM AS (
  SELECT
	HK_HUB AS LV_SATRR_COM_HK_HUB,
	MAX(MD_START_DT) AS LV_SATRR_COM_START_DATE
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_COMMISSION
	WHERE MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')
	GROUP BY HK_HUB
  ),
  FLTR_SATRR_COM_ACTIVE AS (
  SELECT
	B.HK_HUB 				    AS SATRR_COM_HK_HUB,
	B.MD_START_DT 				AS SATRR_COM_MD_START_DT,
	B.HK_SAT 			        AS SATRR_COM_HK_SAT,
	B.REVNO 					AS SATRR_COM_REVNO,
	B.STAMP 					AS SATRR_COM_STAMP,
    B.MAINREPCODE               AS SATRR_COM_MAINREPCODE,
    B.ADVISOR_ROLE              AS SATRR_COM_ADVISOR_ROLE,
    C.RR_CD                     AS HUBRR_COM_RR_CD
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_COMMISSION B
	JOIN LV_SATRR_COM A
	ON B.HK_HUB = A.LV_SATRR_COM_HK_HUB
	AND B.MD_START_DT = A.LV_SATRR_COM_START_DATE
    INNER JOIN DB_IAW_''||ENV||''_DWH.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE C
    ON C.HK_HUB = A.LV_SATRR_COM_HK_HUB
	WHERE B.MD_ACTIVE = ''''A''''
	),
    Joiner_MAIN_HUB_SAT_RR_COMM AS
    (
        select * 
        from Joiner_IAS_Commission_Share A
        left join FLTR_SATRR_COM_ACTIVE B
        on A.HUB_FROMREPID = B.HUBRR_COM_RR_CD and 
        A.HUB_TOREPID = B.SATRR_COM_MAINREPCODE
    )
	SELECT 
	HK_LINK,
	HUB_HK_HUB_FROM,
	HUB_HK_HUB_TO,
	MD_SOURCE,
	MD_HASHDIFF,
	MD_CREATION_DT,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	MD_CREATION_AUDIT_ID,
	HUB_FROMREPID,
	HUB_TOREPID,
	HUB_SHARETYPE,
	HUB_SOURCECODE,
	HUB_PRODUCTCODE,
	REVENUEPCT,
	COMMISSIONPCT,
	NETCOMMISSIONPCT,
	FEEPCT,
	SATRR_COM_REVNO,
	SATRR_COM_STAMP,
    SATRR_COM_ADVISOR_ROLE,
	TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') 
	FROM Joiner_MAIN_HUB_SAT_RR_COMM
    WHERE COMMISSIONPCT>0 or SATRR_COM_ADVISOR_ROLE=''''isAdvisor'''')'';
EXECUTE IMMEDIATE :TRUNC_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_IAS_NBIN_TO_BDV_WT_AGG_PLANSP(""ENV"" VARCHAR(1000), ""DATA_START_DATE"" VARCHAR(20))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
	DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
	DEL_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_NBIN_AGG
	WHERE MD_SRC_SYSTEM = ''''IAS'''''';
INS_QUERY := ''INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_NBIN_AGG(
	MD_START_DT,
	MD_HASHDIFF,
	MD_CREATION_AUDIT_ID,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	MD_ACTIVE,
	RETAIL_PLAN,
	ACCOUNT_RAP_CODE
	)
	(
	WITH
					LV AS (
							SELECT
								HK_HUB,
								MD_START_DT,
								MAX(MD_START_DT) AS O_MAX_DATE_LV
							FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_NBIN 
								WHERE MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')
								GROUP BY HK_HUB, MD_START_DT
								 ),
					SAT AS (
							SELECT
								B.HK_HUB AS SAT_HK_HUB,
								B.MD_START_DT AS SAT_MD_START_DT,
								B.MD_HASHDIFF AS SAT_MD_HASHDIFF,
								B.MD_SRC_SYSTEM AS SAT_MD_SRC_SYSTEM,
								B.MD_ACTIVE AS SAT_MD_ACTIVE
							FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_NBIN B
							JOIN LV A
								ON A.HK_HUB = B.HK_HUB
								AND A.O_MAX_DATE_LV = B.MD_START_DT
								WHERE B.MD_ACTIVE = ''''A'''' AND B.HK_HUB != ''''0''''
								),
					REFF AS (
							SELECT
								B.HK_HUB AS REF_HK_HUB,           
								B.MD_CREATION_DT AS REF_MD_CREATION_DT,
								B.MD_CREATION_AUDIT_ID AS REF_MD_CREATION_AUDIT_ID,
								B.MD_SOURCE AS REF_MD_SOURCE,
								B.MD_SRC_SYSTEM AS REF_MD_SRC_SYSTEM,
								B.MD_EXTRACT_DT AS REF_MD_EXTRACT_DT,
								B.PLN_MNEM AS REF_PLN_MNEM,
								B.A_C_ACCOUNT_CLASS AS REF_A_C_ACCOUNT_CLASS,
								B.RETAIL_PLAN AS REF_RETAIL_PLAN,
								B.RETAIL_PLAN_RESP AS REF_RETAIL_PLAN_RESP,
								B.ACCOUNT_RAP_CODE AS REF_ACCOUNT_RAP_CODE,
								A.SAT_HK_HUB AS SAT_HK_HUB,
								A.SAT_MD_START_DT AS SAT_MD_START_DT,
								A.SAT_MD_HASHDIFF AS SAT_MD_HASHDIFF,
								A.SAT_MD_SRC_SYSTEM AS SAT_MD_SRC_SYSTEM,
								A.SAT_MD_ACTIVE AS SAT_MD_ACTIVE
							FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES B
								JOIN SAT A 
								ON A.SAT_HK_HUB = B.HK_HUB
								WHERE B.HK_HUB != ''''0''''
								)
							SELECT 
								TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AS O_MD_START_DT,
								SAT_MD_HASHDIFF,
								REF_MD_CREATION_AUDIT_ID,
								REF_MD_SOURCE,
								REF_MD_SRC_SYSTEM,
								REF_MD_EXTRACT_DT,
								SAT_MD_ACTIVE,
								REF_RETAIL_PLAN,
								REF_ACCOUNT_RAP_CODE
							FROM REFF
							GROUP BY
								O_MD_START_DT,
								SAT_MD_HASHDIFF,
								REF_MD_CREATION_AUDIT_ID,
								REF_MD_SOURCE,
								REF_MD_SRC_SYSTEM,
								REF_MD_EXTRACT_DT,
								SAT_MD_ACTIVE,
								REF_RETAIL_PLAN,
								REF_ACCOUNT_RAP_CODE,
								REF_MD_CREATION_DT
									 )'';
UPD_QUERY := ''UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_NBIN_AGG
SET
HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#'''') ,''''|'''',COALESCE(TRIM(TO_VARCHAR(RETAIL_PLAN)),''''#NULL#''''), ''''|'''',  COALESCE(TRIM(ACCOUNT_RAP_CODE),''''#NULL#'''')))),
MD_CREATION_DT=SYSTIMESTAMP()
WHERE 1=1'';
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END

';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_INVESTIA_UNIVERIS_SHARED_TO_WT_SATACCOUNTHOLDER_COMPUTE(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;
BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_COMPUTE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''' '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_COMPUTE (HK_HUB,MD_START_DT,MD_CREATION_DT,MD_SOURCE,MD_SRC_SYSTEM,MD_EXTRACT_DT,INCOME_LEVEL_1_SEGMENT,INCOME_LEVEL_1_SEGMENT_ORD,INCOME_LEVEL_2_SEGMENT,INCOME_LEVEL_2_SEGMENT_ORD,AGE_SEGMENT,AGE_SEGMENT_ORD,NEW_CLIENT_IND)
SELECT rdv.HK_HUB
	,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
	,CURRENT_TIMESTAMP
	,rdv.MD_SOURCE
	,rdv.MD_SRC_SYSTEM
	,rdv.MD_EXTRACT_DT
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_CLIENTS_INCOME_SEGMENTATION_006(rdv.SALARY_DESC)[''''o_INCOME_SEGMENT'''']
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_CLIENTS_INCOME_SEGMENTATION_006(rdv.SALARY_DESC)[''''o_INCOME_SEGMENT_ORD'''']
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_CLIENTS_SALARY_SEGMENTATION_007(rdv.SALARY_DESC)[''''o_SALARY_SEGMENT'''']
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_CLIENTS_SALARY_SEGMENTATION_007(rdv.SALARY_DESC)[''''o_SALARY_SEGMENT_ORD'''']
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_CLIENTS_AGE_SEGMENTATION_008(rdv.IVR_PRIM_BDT, rdv.MD_START_DT ,rdv.CORP_CD)[''''o_AGE_SEGMENT'''']
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_CLIENTS_AGE_SEGMENTATION_008(rdv.IVR_PRIM_BDT, rdv.MD_START_DT ,rdv.CORP_CD)[''''o_AGE_SEGMENT_ORD'''']
	,BUSINESS_RULES.UDF_CONV_BR_ALL_CLIENTS_004(rdv.MD_START_DT, rdv.CREATE_DT)
FROM (
	SELECT *
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_INVESTIA_UNIVERIS
	) rdv
	JOIN (
	SELECT *
	FROM (
		SELECT *
			,ROW_NUMBER() OVER (
				PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
				) RN
		FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_INVESTIA_UNIVERIS lv
		WHERE lv.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
        ) SATHUB
	WHERE SATHUB.RN = 1
	) lv ON lv.HK_HUB = rdv.HK_HUB AND lv.MD_START_DT = rdv.MD_START_DT
WHERE rdv.MD_ACTIVE = ''''A'''' 
              '';
INS_UPDATE :=''UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_COMPUTE
SET
MD_HASHDIFF=SHA1(
				CONCAT(	COALESCE(TO_VARCHAR(INCOME_AMT),''''#NULL#''''), ''''|'''',
				COALESCE(INCOME_LEVEL_1_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(INCOME_LEVEL_1_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(INCOME_LEVEL_2_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(INCOME_LEVEL_2_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(AGE_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(AGE_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(NEW_CLIENT_IND,''''#NULL#'''')
				))
Where HK_HUB <> ''''0'''' AND MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS''''
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_INVESTIA_UNIVERIS_SHARE_TO_BDV_WT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_LINK_PARTY_RELATIONSHIP_SHARE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''';  '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_LINK_PARTY_RELATIONSHIP_SHARE
(HK_LINK
,MD_START_DT
,MD_SOURCE
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,A_C_REPRESENTATIVE
,COM_TYPE
,COMMISSIONPCT
,IS_RESHARED
,MASTER_CODE
,PHYSICAL
,TOREPID
)
SELECT 
SAT_LINKCV.HK_LINK
,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
,SAT_LINKCV.MD_SOURCE
,SAT_LINKCV.MD_SRC_SYSTEM
,SAT_LINKCV.MD_EXTRACT_DT
,LINK.FROMREPID
,''''FROM_RR_TO_MAIN''''
,SAT_LINKCV.COMM_RATE*100
,0
,LINK.TOREPID
,1
,LINK.TOREPID
FROM

(SELECT SAT_LINK.* FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR_INVESTIA_UNIVERIS SAT_LINK
JOIN 
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_LINK ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR_INVESTIA_UNIVERIS WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) SAT_LINKCV
ON SAT_LINKCV.HK_LINK = SAT_LINK.HK_LINK AND SAT_LINKCV.MD_START_DT = SAT_LINK.MD_START_DT WHERE SAT_LINK.MD_ACTIVE = ''''A''''
)SAT_LINKCV
JOIN
DB_IAW_''||ENV||''_DWH.SHARED_RDV.LINK_COMMISSION_SHARE_RR LINK
ON SAT_LINKCV.HK_LINK = LINK.HK_LINK
			
              '';
INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_LINK_PARTY_RELATIONSHIP_SHARE
SET
	HK_LINK=SHA1(CONCAT(COALESCE(''''INVESTIA'''',''''#NULL#''''),''''|'''', COALESCE(A_C_REPRESENTATIVE, ''''#NULL#''''), ''''|'''' , COALESCE(TOREPID,''''#NULL#''''))),
	HK_HUB_REGISTERED_REPRESENTATIVE= SHA1(CONCAT(COALESCE(''''INVESTIA'''',''''#NULL#''''),''''|'''', COALESCE(A_C_REPRESENTATIVE, ''''#NULL#''''))),
	HK_HUB_ADVISOR= SHA1(CONCAT(COALESCE(''''INVESTIA'''',''''#NULL#''''),''''|'''', COALESCE(MASTER_CODE, ''''#NULL#''''))),
	MD_HASHDIFF=SHA1(CONCAT(COALESCE(COM_TYPE, ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(COMMISSIONPCT),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(IS_RESHARED),''''#NULL#''''),''''|'''', COALESCE(TO_VARCHAR(PHYSICAL),''''#NULL#''''),''''|'''',COALESCE(TOREPID, ''''#NULL#'''')))
Where MD_SRC_SYSTEM =''''INVESTIA-UNIVERIS'''';
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_INVESTIA_UNIVERIS_SHARE_TO_BDV_WT_LINK_PARTY_RELATIONSHIP_SHARE(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_LINK_PARTY_RELATIONSHIP_SHARE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''';  '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_LINK_PARTY_RELATIONSHIP_SHARE
(HK_LINK
,MD_START_DT
,MD_SOURCE
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,A_C_REPRESENTATIVE
,COM_TYPE
,COMMISSIONPCT
,IS_RESHARED
,MASTER_CODE
,PHYSICAL
,TOREPID
)
SELECT 
SAT_LINKCV.HK_LINK
,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
,SAT_LINKCV.MD_SOURCE
,SAT_LINKCV.MD_SRC_SYSTEM
,SAT_LINKCV.MD_EXTRACT_DT
,LINK.FROMREPID
,''''FROM_RR_TO_MAIN''''
,SAT_LINKCV.COMM_RATE*100
,0
,LINK.TOREPID
,1
,LINK.TOREPID
FROM

(SELECT SAT_LINK.* FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR_INVESTIA_UNIVERIS SAT_LINK
JOIN 
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_LINK ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR_INVESTIA_UNIVERIS WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) SAT_LINKCV
ON SAT_LINKCV.HK_LINK = SAT_LINK.HK_LINK AND SAT_LINKCV.MD_START_DT = SAT_LINK.MD_START_DT WHERE SAT_LINK.MD_ACTIVE = ''''A''''
)SAT_LINKCV
JOIN
DB_IAW_''||ENV||''_DWH.SHARED_RDV.LINK_COMMISSION_SHARE_RR LINK
ON SAT_LINKCV.HK_LINK = LINK.HK_LINK
			
              '';
INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_LINK_PARTY_RELATIONSHIP_SHARE
SET
	HK_LINK=SHA1(CONCAT(COALESCE(''''INVESTIA'''',''''#NULL#''''),''''|'''', COALESCE(A_C_REPRESENTATIVE, ''''#NULL#''''), ''''|'''' , COALESCE(TOREPID,''''#NULL#''''))),
	HK_HUB_REGISTERED_REPRESENTATIVE= SHA1(CONCAT(COALESCE(''''INVESTIA'''',''''#NULL#''''),''''|'''', COALESCE(A_C_REPRESENTATIVE, ''''#NULL#''''))),
	HK_HUB_ADVISOR= SHA1(CONCAT(COALESCE(''''INVESTIA'''',''''#NULL#''''),''''|'''', COALESCE(MASTER_CODE, ''''#NULL#''''))),
	MD_HASHDIFF=SHA1(CONCAT(COALESCE(COM_TYPE, ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(COMMISSIONPCT),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(IS_RESHARED),''''#NULL#''''),''''|'''', COALESCE(TO_VARCHAR(PHYSICAL),''''#NULL#''''),''''|'''',COALESCE(TOREPID, ''''#NULL#'''')))
Where MD_SRC_SYSTEM =''''INVESTIA-UNIVERIS'''';
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_REVENUES_TO_BDV_WT_LINK_REVENUES(""ENV"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
TRUNC_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
TRUNC_QUERY := ''TRUNCATE TABLE DB_IAW_''||ENV||''_DWH.REVENUES_BDV.WT_LINK_REVENUE'';
INS_QUERY := ''INSERT INTO DB_IAW_''||ENV||''_DWH.REVENUES_BDV.WT_LINK_REVENUE(
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
HK_HUB_PARTY_ROLE_ADVISOR,
HK_HUB_CONTRACT,
MD_START_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
CLIENT_ID,
CONTRACT_ID,
ADVISOR_ID,
MASTER_CODE,
PLAN_ID,
MARKETPRODUCT_ID,
PAYMENT_DATE,
REVENUE,
REVENUE_TYPE,
REVENUE_SUBTYP)
(SELECT 
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
HK_HUB_PARTY_ROLE_ADVISOR,
HK_HUB_CONTRACT,
MD_START_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
CLIENT_ID,
CONTRACT_ID,
ADVISOR_ID,
MASTER_CODE,
PLAN_ID,
MARKETPRODUCT_ID,
PAYMENT_DATE,
REVENUE,
REVENUE_TYPE,
EREVENUE_SUBTYPE
FROM DB_IAW_''||ENV||''_DWH.REVENUES_BDV.VW_INITIAL_LOADING_WT_LINK_REVENUE)'';
UPD_QUERY := ''UPDATE REVENUES_BDV.WT_LINK_REVENUE
SET
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''NULL''''), ''''|''''
, ''''NULL'''', ''''|''''
, COALESCE(TRIM(CLIENT_ID), ''''NULL''''), ''''|''''
, COALESCE(TRIM(MASTER_CODE), ''''NULL''''), ''''|''''
, COALESCE(TRIM(PLAN_ID), ''''NULL''''), ''''|''''
, COALESCE(TRIM(MARKETPRODUCT_ID), ''''NULL''''), ''''|''''
, COALESCE(TRIM(CONTRACT_ID), ''''NULL''''), ''''|''''
, ''''NULL'''', ''''|''''
, COALESCE(TRIM(PAYMENT_DATE), ''''NULL''''), ''''|''''
, COALESCE(TRIM(REVENUE_TYPE), ''''NULL''''), ''''|''''
, COALESCE(TRIM(REVENUE_SUBTYPE), ''''NULL'''')
))),
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = COALESCE (HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
HK_HUB_PARTY_ROLE_ADVISOR = COALESCE (HK_HUB_PARTY_ROLE_ADVISOR, ''''0''''),
HK_HUB_REF_INVESTMENT_SAVING_PROGRAM_TYPES = ''''0'''',
HK_HUB_INVESTMENT_PRODUCT_TYPE = ''''0'''' ,
HK_HUB_CONTRACT = COALESCE (HK_HUB_CONTRACT, ''''0''''),
AUA = COALESCE (AUA,0)
WHERE MD_SRC_SYSTEM = ''''IAS-COMMISSION'''';'';
EXECUTE IMMEDIATE :TRUNC_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END

';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_SAT_LINK_INVESTMENT_CONTRACT_RR_TO_BDV_WT_INVESTMENT_CONTRACT_IAS_NBIN(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_INVESTMENT_CONTRACT_IAS_NBIN WHERE MD_SRC_SYSTEM = ''''IAS'''' '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_INVESTMENT_CONTRACT_IAS_NBIN (
HK_HUB_CONTRACT	
,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER		
,HK_HUB_PARTY_ROLE_ADVISOR		
,MD_START_DT		
,MD_HASHDIFF	
,MD_CREATION_DT	 	
,MD_EXTRACT_DT		
,MD_SOURCE		
,MD_SRC_SYSTEM	
,CONTRACT_ID	
,CLIENT_ID		
,MASTER_CD	 	
,ACCOUNT_RAP_CODE		
,RETAIL_PLAN		
,ASC_1_RESP_PLAN_TYPES )
SELECT 
rdv.HK_HUB_CONTRACT	
,rdv.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	
,bdv2.HK_HUB_PARTY_ROLE_ADVISOR	
,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')	
,srdv.MD_HASHDIFF	
,CURRENT_TIMESTAMP	 	
,rdv.MD_EXTRACT_DT	
,rdv.MD_SOURCE	
,rdv.MD_SRC_SYSTEM	
,rdv.CONTRACT_ID	
,rdv.CLIENT_ID	
,bdv2.MASTER_CODE	 	
,bdv0.ACCOUNT_RAP_CODE	
,bdv0.RETAIL_PLAN	
,bdv0.ASC_1_RESP_PLAN_TYPES
	FROM (
	SELECT *
			FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_IAS_NBIN
			)srdv
		JOIN (
        select *
		from (
		SELECT *
			FROM (
				SELECT *
					,ROW_NUMBER() OVER (
						PARTITION BY HK_LINK ORDER BY MD_START_DT DESC
						) RN
				FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_IAS_NBIN
                WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) SATHUB
			WHERE SATHUB.RN = 1
            ) sat_lv where sat_lv.MD_ACTIVE = ''''A''''
			) bdv ON bdv.HK_LINK = srdv.HK_LINK AND bdv.MD_START_DT = srdv.MD_START_DT
		JOIN DB_IAW_''||ENV||''_DWH.SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR rdv ON rdv.HK_LINK = bdv.HK_LINK 
		LEFT JOIN
		(
			SELECT rdv2.HK_HUB, rdv2.ASC_1_RESP_PLAN_TYPES, rdv2.RETAIL_PLAN, rdv2.ACCOUNT_RAP_CODE 
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_IAS_NBIN
				) rdv2
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN1
					FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_IAS_NBIN
                    WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
					) SATHUB1
				WHERE SATHUB1.RN1 = 1 
				) bdvcv ON bdvcv.HK_HUB = rdv2.HK_HUB AND bdvcv.MD_START_DT = rdv2.MD_START_DT 
		)bdv0 ON rdv.HK_HUB_CONTRACT = bdv0.HK_HUB
		LEFT JOIN 
			(
			SELECT sbdv.HK_HUB_REGISTERED_REPRESENTATIVE, sbdv.MASTER_CODE, sbdv.HK_HUB_PARTY_ROLE_ADVISOR
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE
				) sbdv2
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_LINK ORDER BY MD_START_DT DESC
							) RN2
					FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE
                    WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
					) SATHUB2
				WHERE SATHUB2.RN2 = 1 
				) bdvcv1 ON bdvcv1.HK_LINK = sbdv2.HK_LINK AND bdvcv1.MD_START_DT = sbdv2.MD_START_DT 
				JOIN DB_IAW_''||ENV||''_DWH.SHARED_BDV.LINK_PARTY_RELATIONSHIP_SHARE sbdv ON sbdv.HK_LINK = bdvcv1.HK_LINK WHERE sbdv2.MD_ACTIVE = ''''A''''
		)bdv2 ON rdv.HK_HUB_REGISTERED_REPRESENTATIVE = bdv2.HK_HUB_REGISTERED_REPRESENTATIVE

		     '';
			 
INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_INVESTMENT_CONTRACT_IAS_NBIN

SET HK_LINK = SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#'''')
		, ''''|'''' , COALESCE(TRIM(CONTRACT_ID), ''''#NULL#'''') 
		, ''''|'''' , COALESCE(TRIM(CLIENT_ID), ''''#NULL#'''')
		, ''''|'''' , COALESCE(TRIM(MASTER_CD), ''''#NULL#'''')
		, ''''|'''' , COALESCE(TRIM(UNIVERIS_PLAN_ID), ''''#NULL#'''') 
		, ''''|'''' , ''''#NULL#'''' -- PLN_MNEM
		, ''''|'''' , COALESCE(TRIM(ACCOUNT_RAP_CODE), ''''#NULL#'''') 
		, ''''|'''' , COALESCE(TRIM(RETAIL_PLAN),''''#NULL#'''') 
		, ''''|'''' , COALESCE(TRIM(ASC_1_RESP_PLAN_TYPES),''''#NULL#'''')
		)))
		,HK_HUB_CONTRACT = COALESCE (HK_HUB_CONTRACT,''''0'''')
		,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = COALESCE (HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0'''')
		,HK_HUB_PARTY_ROLE_ADVISOR = COALESCE (HK_HUB_PARTY_ROLE_ADVISOR,''''0'''')
		,HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = DECODE(TRUE, ASC_1_RESP_PLAN_TYPES IS NULL AND RETAIL_PLAN IS NULL AND ACCOUNT_RAP_CODE IS NULL ,''''0'''', 
		SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#'''') ,''''|'''', ''''#NULL#'''',''''|'''',COALESCE(TRIM(ACCOUNT_RAP_CODE),''''#NULL#''''), ''''|'''',  COALESCE(TRIM(RETAIL_PLAN),''''#NULL#''''),''''|'''', 
		COALESCE(TRIM(ASC_1_RESP_PLAN_TYPES),''''#NULL#'''')))))
WHERE MD_SRC_SYSTEM = ''''IAS'''';
			'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
 
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_SAT_LINK_INVESTMENT_CONTRACT_RR_TO_BDV_WT_INVESTMENT_CONTRACT_IAS_UNIVERIS(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_INVESTMENT_CONTRACT_IAS_NBIN WHERE MD_SRC_SYSTEM = ''''IAS-UNIVERIS'''' '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_INVESTMENT_CONTRACT_IAS_NBIN (
HK_HUB_CONTRACT	
,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER		
,HK_HUB_PARTY_ROLE_ADVISOR		
,MD_START_DT	
,MD_HASHDIFF	
,MD_CREATION_DT	
,MD_EXTRACT_DT		
,MD_SOURCE		
,MD_SRC_SYSTEM	
,CONTRACT_ID	
,CLIENT_ID	
,MASTER_CD	
,UNIVERIS_PLAN_ID	
,PLN_MNEM )
SELECT 
rdv.HK_HUB_CONTRACT	
,rdv.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	
,bdv3.HK_HUB_PARTY_ROLE_ADVISOR	
,TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') 
,rdv3.MD_HASHDIFF	
,CURRENT_TIMESTAMP
,rdv.MD_EXTRACT_DT	
,rdv.MD_SOURCE	
,rdv.MD_SRC_SYSTEM	
,rdv.CONTRACT_ID
,rdv.CLIENT_ID	
,bdv3.MASTER_CODE	
,rdv.UNIVERIS_PLAN_ID	
,bdv2.PLN_MNEM	
	FROM (
	SELECT *
			FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_IAS_UNIVERIS) rdv3
		JOIN (
		SELECT *
			FROM (
				SELECT *
					,ROW_NUMBER() OVER (
						PARTITION BY HK_LINK ORDER BY MD_START_DT DESC
						) RN
				FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_IAS_UNIVERIS
                WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) SATHUB
			WHERE SATHUB.RN = 1  
			) bdv ON bdv.HK_LINK = rdv3.HK_LINK AND bdv.MD_START_DT = rdv3.MD_START_DT
		JOIN DB_IAW_''||ENV||''_DWH.SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR rdv ON rdv.HK_LINK = bdv.HK_LINK 
		LEFT JOIN
		(	SELECT *
			FROM
		(
			SELECT srdv2.PLN_CD, srdv.PLN_MNEM
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_UNIVERIS
				) srdv2
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN1
					FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_UNIVERIS
                    WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
					) SATHUB1
				WHERE SATHUB1.RN1 = 1  
				) bdvcv ON bdvcv.HK_HUB = srdv2.HK_HUB AND bdvcv.MD_START_DT = srdv2.MD_START_DT
			JOIN DB_IAW_''||ENV||''_DWH.SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES srdv ON bdvcv.HK_HUB = srdv.HK_HUB WHERE srdv2.MD_ACTIVE = ''''A''''
		)bdv0
		LEFT JOIN 
			(
			SELECT rdv2.PLN_CD, rdv2.HK_HUB
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_IAS_UNIVERIS
				) rdv2
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN2
					FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_IAS_UNIVERIS
                    WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
					) SATHUB2
				WHERE SATHUB2.RN2 = 1  
				) bdvcv1 ON bdvcv1.HK_HUB = rdv2.HK_HUB AND bdvcv1.MD_START_DT = rdv2.MD_START_DT WHERE rdv2.MD_ACTIVE = ''''A''''
			)bdv1 ON bdv1.PLN_CD = bdv0.PLN_CD
		)bdv2 ON rdv.HK_HUB_CONTRACT = bdv2.HK_HUB
		LEFT JOIN 
		(
			SELECT sbdv.HK_HUB_REGISTERED_REPRESENTATIVE, sbdv.HK_HUB_PARTY_ROLE_ADVISOR, sbdv.MASTER_CODE
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE
				) sbdv2
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_LINK ORDER BY MD_START_DT DESC
							) RN3
					FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE
                    WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
					) SATHUB3
				WHERE SATHUB3.RN3 = 1  
				) bdvcv2 ON bdvcv2.HK_LINK = sbdv2.HK_LINK AND bdvcv2.MD_START_DT = sbdv2.MD_START_DT  
				JOIN DB_IAW_''||ENV||''_DWH.SHARED_BDV.LINK_PARTY_RELATIONSHIP_SHARE sbdv ON sbdv.HK_LINK = sbdv2.HK_LINK WHERE sbdv2.MD_ACTIVE = ''''A''''
		)bdv3 ON bdv3.HK_HUB_REGISTERED_REPRESENTATIVE = rdv.HK_HUB_REGISTERED_REPRESENTATIVE
		WHERE rdv3.MD_ACTIVE = ''''A''''
		     '';
			 
INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_INVESTMENT_CONTRACT_IAS_NBIN

	SET HK_LINK = SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#'''')
	, ''''|'''' , COALESCE(TRIM(CONTRACT_ID), ''''#NULL#'''') 
	, ''''|'''' , COALESCE(TRIM(CLIENT_ID), ''''#NULL#'''')
	, ''''|'''' , COALESCE(TRIM(MASTER_CD), ''''#NULL#'''')
	, ''''|'''' , COALESCE(TRIM(UNIVERIS_PLAN_ID), ''''#NULL#'''') 
	, ''''|'''' , COALESCE(TRIM(PLN_MNEM),''''#NULL#'''')
	, ''''|'''' , ''''#NULL#'''' -- ACCOUNT_RAP_CODE
	, ''''|'''' , ''''#NULL#'''' -- RETAIL_PLAN
	, ''''|'''' , ''''#NULL#'''' -- ASC_1_RESP_PLAN_TYPES
	)))
	,HK_HUB_CONTRACT = COALESCE (HK_HUB_CONTRACT,''''0'''')
	,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = COALESCE (HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0'''')
	,HK_HUB_PARTY_ROLE_ADVISOR = COALESCE (HK_HUB_PARTY_ROLE_ADVISOR,''''0'''')
	,HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = DECODE(TRUE, PLN_MNEM IS NULL ,''''0'''', SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#'''') ,''''|'''', COALESCE(TRIM(PLN_MNEM),''''#NULL#''''), ''''|'''', ''''#NULL#'''',''''|'''', ''''#NULL#'''',''''|'''', ''''#NULL#'''' ))))
WHERE MD_SRC_SYSTEM = ''''IAS-UNIVERIS'''';
			'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;


END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_SAT_LINK_INVESTMENT_CONTRACT_RR_TO_BDV_WT_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_INVESTMENT_CONTRACT_IAS_NBIN WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''' '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_INVESTMENT_CONTRACT_IAS_NBIN (
HK_HUB_CONTRACT	
,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	
,MD_START_DT		
,HK_HUB_PARTY_ROLE_ADVISOR	
,MD_HASHDIFF /* ANIS : Add MD_HASHDIFF as in Informatica mapping m_LoadBDV_RDV_SAT_LINK_INVESTMENT_CONTRACT_RR_To_BDV_WT_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS */
,MD_CREATION_DT			
,MD_SOURCE		
,MD_SRC_SYSTEM		
,MD_EXTRACT_DT		
,CONTRACT_ID	
,CLIENT_ID		
,MASTER_CD	
,UNIVERIS_PLAN_ID	
,PLN_MNEM		
,ACCOUNT_RAP_CODE	
,RETAIL_PLAN	
,ASC_1_RESP_PLAN_TYPES 
)
SELECT 
rdv.HK_HUB_CONTRACT	
,rdv.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	
,TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') 
,bdv2.HK_HUB_PARTY_ROLE_ADVISOR
,rdv3.MD_HASHDIFF /* ANIS : Add MD_HASHDIFF as in Informatica mapping m_LoadBDV_RDV_SAT_LINK_INVESTMENT_CONTRACT_RR_To_BDV_WT_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS	*/	
,CURRENT_TIMESTAMP		
,rdv.MD_SOURCE	
,rdv.MD_SRC_SYSTEM	
,rdv.MD_EXTRACT_DT	
,rdv.CONTRACT_ID	
,rdv.CLIENT_ID	
,bdv2.MASTER_CODE
,rdv.UNIVERIS_PLAN_ID	
,bdv3.PLN_MNEM_ENG	
,bdv3.ACCOUNT_RAP_CODE	
,bdv3.RETAIL_PLAN	
,bdv3.A_C_ACCOUNT_CLASS	
	FROM (
	SELECT *
			FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS) rdv3
		JOIN (
		SELECT *
			FROM (
				SELECT *
					,ROW_NUMBER() OVER (
						PARTITION BY HK_LINK ORDER BY MD_START_DT DESC
						) RN
				FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS
                WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) SATHUB
			WHERE SATHUB.RN = 1  
			) bdv ON bdv.HK_LINK = rdv3.HK_LINK AND bdv.MD_START_DT = rdv3.MD_START_DT AND rdv3.MD_ACTIVE = ''''A''''
		JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''')rdv ON rdv.HK_LINK = bdv.HK_LINK 
		LEFT JOIN
		(
			SELECT srdv2.PLN_CD, srdv2.HK_HUB
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_INVESTIA_UNIVERIS
				) srdv2
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN1
					FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_INVESTIA_UNIVERIS
                    WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
					) SATHUB1
				WHERE SATHUB1.RN1 = 1  
				) bdvcv ON bdvcv.HK_HUB = srdv2.HK_HUB AND bdvcv.MD_START_DT = srdv2.MD_START_DT
			WHERE srdv2.MD_ACTIVE = ''''A''''
		)bdv0 ON rdv.HK_HUB_CONTRACT = bdv0.HK_HUB
		LEFT JOIN 
		(
			SELECT sbdv.HK_HUB_REGISTERED_REPRESENTATIVE, sbdv.HK_HUB_PARTY_ROLE_ADVISOR, sbdv.MASTER_CODE
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS''''
				) sbdv2
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_LINK ORDER BY MD_START_DT DESC
							) RN2
					FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''' AND MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
					) SATHUB2
				WHERE SATHUB2.RN2 = 1  
				) bdvcv1 ON bdvcv1.HK_LINK = sbdv2.HK_LINK AND bdvcv1.MD_START_DT = sbdv2.MD_START_DT 
			JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.LINK_PARTY_RELATIONSHIP_SHARE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''') sbdv ON sbdv2.HK_LINK = sbdv.HK_LINK WHERE bdvcv1.MD_ACTIVE = ''''A''''
		)bdv2 ON rdv.HK_HUB_REGISTERED_REPRESENTATIVE = bdv2.HK_HUB_REGISTERED_REPRESENTATIVE
		LEFT JOIN 
		(
			SELECT srdv.HK_HUB, rdv2.ACCOUNT_RAP_CODE, rdv2.RETAIL_PLAN, rdv2.A_C_ACCOUNT_CLASS, srdv.PLN_MNEM_ENG, srdv.PLN_CD
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_INVESTIA_UNIVERIS
				) srdv
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN3
					FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_INVESTIA_UNIVERIS
                    WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
					) SATHUB3
				WHERE SATHUB3.RN3 = 1  
				) bdvcv2 ON bdvcv2.HK_HUB = srdv.HK_HUB AND bdvcv2.MD_START_DT = srdv.MD_START_DT
				JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''') rdv2 ON rdv2.HK_HUB = srdv.HK_HUB WHERE srdv.MD_ACTIVE = ''''A''''
		)bdv3 ON bdv0.PLN_CD = bdv3.PLN_CD /*bdv0.HK_HUB = bdv3.HK_HUB*/
		     
		     '';
			 
INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_INVESTMENT_CONTRACT_IAS_NBIN

SET HK_LINK = SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#'''')
		, ''''|'''' , COALESCE(TRIM(CONTRACT_ID), ''''#NULL#'''') 
		, ''''|'''' , COALESCE(TRIM(CLIENT_ID), ''''#NULL#'''')
		, ''''|'''' , COALESCE(TRIM(MASTER_CD), ''''#NULL#'''')
		, ''''|'''' , COALESCE(TRIM(UNIVERIS_PLAN_ID), ''''#NULL#'''') 
		, ''''|'''' , COALESCE(TRIM(PLN_MNEM),''''#NULL#'''')
		, ''''|'''' , ''''#NULL#'''' -- ACCOUNT_RAP_CODE
		, ''''|'''' , ''''#NULL#'''' -- RETAIL_PLAN
		, ''''|'''' , ''''#NULL#'''' -- ASC_1_RESP_PLAN_TYPES
		)))
		,HK_HUB_CONTRACT = COALESCE (HK_HUB_CONTRACT,''''0'''')
		,HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER = COALESCE (HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0'''')
		,HK_HUB_PARTY_ROLE_ADVISOR = COALESCE (HK_HUB_PARTY_ROLE_ADVISOR,''''0'''')
		,HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = DECODE(TRUE, PLN_MNEM IS NULL ,''''0'''', SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#'''') ,''''|'''', COALESCE(TRIM(PLN_MNEM),''''#NULL#''''), ''''|'''', ''''#NULL#'''',''''|'''', ''''#NULL#'''',''''|'''', ''''#NULL#'''' ))))

WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''';
			'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;


END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_SAT_REGISTERED_REPRESENTATIVE_TO_BDV_WT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH WHERE MD_SRC_SYSTEM = ''''IAS''''; '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH
(
HK_HUB
,MD_START_DT
,MD_EXTRACT_DT
,MD_CREATION_DT
,MD_SOURCE
,MD_SRC_SYSTEM
,MASTER_CODE
,COMPANY_CODE
,COMPANY_NAME
,REGULATORY_ORGANIZATION_NAME
,REGULATORY_ORGANIZATION_CODE
,DEALER_NAME
,REGION_VP
,BRANCHCODE
,BRANCHNAME
,TEAM_CODE
,TEAM_NAME
,ADVISOR_FULLNAME
,FIRSTNAME
,LASTNAME
,STATUS
,PROVINCE_CODE
,PROVINCE
,ADVISOR_START_DATE
,NEW_ADVISOR
,DEPARTED_ADVISOR_IND
,PRIMARY_ROLE
,END_DATE
,REASON
,NEW_FIRM
,NEW_FIRM_TYPE
,NEW_FIRM_BACK_OFFICE
,PRESTIGE_STATUS
,TRANSITION_PERIOD_END_DATE
,DEAL_ASSESTS
,EXPECTED_ASSESTS
,PREVIOUS_FIRM
,PREVIOUS_FIRM_TYPE
,AGE_SEGMENT
,AGE_SEGMENT_ORD
,MD_ACTIVE_CERTS
,ADVISOR_AGE
,REP_EMAIL
,CBM
,BRANCH_ADDRESS1
,BRANCH_ADDRESS2
,BRANCH_CITY
,BRANCH_POSTAL_CODE
,BRANCH_NRD
)

SELECT 
HK_HUB_PARTY_ROLE_ADVISOR
,O_MD_START_DT
,O_EXTRACT_DT
,O_MD_CREATION_DT
,O_MD_SOURCE
,O_MD_src_system
,LINK_MASTER_CODE
,O_Company_Code
,O_Company_Name
,O_Regulatory_Organization_Name
,O_Regulatory_Organization_Code
,O_Dealer_Name
,O_Regional_VP
,O_BRANCH_CODE
,O_BRANCH_NAME
,O_TEAM_CODE
,O_Team_Name
,Advisor_fullname
,O_FIRST_NAME
,O_LAST_NAME
,O_Status
,O_province_code
,O_province_name
,MAX(BEGIN_DT)
,MAX(O_NEW_ADVISOR_IND)
,O_departed_advisor_ind
,MAX(O_primary_role)
,END_DATE
,REASON
,NEW_FIRM
,NEW_FIRM_TYPE
,NEW_FIRM_BACK_OFFICE
,PRESTIGE_STATUS
,TRANSITION_PERIOD_END_DATE
,DEAL_ASSESTS
,EXPECTED_ASSESTS
,PREVIOUS_FIRM
,PREVIOUS_FIRM_TYPE
,O_AGE_SEGMENT
,O_AGE_SEGMENT_ORD
,MAX(O_md_active_certs)
,O_ADVISOR_AGE
,REP_EMAIL
,CBM
,BRANCH_ADDRESS1
,BRANCH_ADDRESS2
,BRANCH_CITY
,BRANCH_POSTAL_CODE
,BRANCH_NRD
FROM 
(
SELECT
''''Wealth'''' AS O_COMPANY_CODE
,''''iA Wealth Management'''' AS O_COMPANY_NAME
,''''IIROC'''' AS O_REGULATORY_ORGANIZATION_CODE
,''''Investment Industry Regulatory Organization of Canada'''' AS O_REGULATORY_ORGANIZATION_NAME
,''''iA Securities'''' AS O_DEALER_NAME
,CASE WHEN RDV_BDV.ACTIVEIND IS NULL OR RDV_BDV.ACTIVEIND = 0 THEN ''''Inactive'''' WHEN RDV_BDV.ACTIVEIND = 1 THEN ''''Active'''' END AS O_STATUS
,RDV_BDV.O_RR_CD AS OUTPUT_RR_CD
,CURRENT_TIMESTAMP AS O_MD_CREATION_DT
,''''IAS'''' AS O_MD_SRC_SYSTEM
,COALESCE(HUB_MD_EXTRACT_DT, RDV_BDV.SAT_LINKCV_MD_EXTRACT_DT)  AS O_EXTRACT_DT
,COALESCE(SAT_RR_MD_SOURCE, RDV_BDV.SAT_LINKCV_MD_SOURCE)  AS O_MD_SOURCE
,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') AS O_MD_START_DT
,decode(TRUE,
	trim (coalesce(CERTS_REGION_VP,IAVM_RVP,''''non-affiliated to RVPs''''))=''''Frederic Dayan'''',''''Dayan, Frederic Albert''''
	,trim (coalesce(CERTS_REGION_VP,IAVM_RVP,''''non-affiliated to RVPs''''))=''''Geoff Wilkinson'''',''''Wilkinson, Geoffrey''''
	,trim (coalesce(CERTS_REGION_VP,IAVM_RVP,''''non-affiliated to RVPs''''))=''''Stacie Fisher'''',''''Fisher, Stacie''''
	,trim (coalesce(CERTS_REGION_VP,IAVM_RVP,''''non-affiliated to RVPs''''))=''''Mary Helen Morra'''',''''Morra, Mary Helen''''
	,trim (coalesce(CERTS_REGION_VP,IAVM_RVP,''''non-affiliated to RVPs''''))) AS O_REGIONAL_VP
,CASE WHEN RDV_BDV.TEAMNAME IS NULL THEN (CASE WHEN RDV_BDV.TEAM IS NULL THEN '''''''' ELSE RDV_BDV.TEAM END ) ELSE  RDV_BDV.TEAMNAME END AS O_TEAM_NAME
,coalesce( nullif(CERTS_PROVINCE_CODE, ''''N/A''''), nullif(IAVM_PROVINCE, ''''N/A''''), ''''N/A'''') O_PROVINCE_CODE
,coalesce( nullif(CERTS_PROVINCE_NAME, ''''N/A''''), decode(IAVM_PROVINCE, ''''AB'''', ''''Alberta'''',''''BC'''',''''British Columbia'''',''''MB'''',''''Manitoba'''',''''NB'''',''''New Brunswick'''',''''NF'''',''''Newfoundland and Labrador'''',''''NS'''',''''Nova Scotia'''',''''NT'''',''''Northwest Territories'''',''''NU'''',''''Nunavut'''',''''ON'''',''''Ontario'''',''''PE'''',''''Prince Edward Island'''',''''QC'''',''''Quebec'''',''''SK'''',''''Saskatchewan'''',''''YT'''',''''Yukon Territory'''',''''N/A''''), ''''N/A'''') O_PROVINCE_NAME
,CASE WHEN RDV_BDV.BRANCHCODE IS NOT NULL THEN RDV_BDV.BRANCHCODE WHEN RTrim(LTrim(RDV_BDV.BRN_CD)) IS NOT NULL THEN RTrim(LTrim(RDV_BDV.BRN_CD)) ELSE '''''''' END AS O_BRANCH_CODE
,CASE WHEN RDV_BDV.BRANCHNAME IS NOT NULL THEN RDV_BDV.BRANCHNAME WHEN RTrim(LTrim(RDV_BDV.BRN_NAME)) IS NOT NULL THEN RTrim(LTrim(RDV_BDV.BRN_NAME)) ELSE '''''''' END AS O_BRANCH_NAME
,CASE WHEN RDV_BDV.LASTNAME IS NOT NULL THEN RDV_BDV.LASTNAME WHEN RTrim(LTrim(RDV_BDV.REP_LNAME)) IS NOT NULL THEN RTrim(LTrim(RDV_BDV.REP_LNAME))   END AS O_LAST_NAME
,CASE WHEN RDV_BDV.FIRSTNAME IS NOT NULL THEN RDV_BDV.FIRSTNAME WHEN RTrim(LTrim(RDV_BDV.REP_FNAME)) IS NOT NULL THEN RTrim(LTrim(RDV_BDV.REP_FNAME))   END AS O_FIRST_NAME
,CASE WHEN RDV_BDV.TEAMID IS NULL THEN GROUPID ELSE RDV_BDV.TEAMID END AS  O_TEAM_CODE
,CASE WHEN RDV_BDV.O_MASTER_CODE IS NULL THEN 0 ELSE 1 END AS O_DEPARTED_ADVISOR_IND
,CASE WHEN RDV_BDV.PRIMARY_ROLE = ''''Corporation'''' THEN ''''True'''' ELSE ''''False'''' END AS O_ISCORPORATION
,RDV_BDV.O_HK_HUB_PARTY_ROLE_ADVISOR AS HK_HUB_PARTY_ROLE_ADVISOR
,RDV_BDV.LINK_MASTER_CODE AS LINK_MASTER_CODE
,RDV_BDV.ADVISOR_FULLNAME AS Advisor_fullname
,RDV_BDV.END_DATE AS END_DATE
,RDV_BDV.REASON AS REASON
,RDV_BDV.NEW_FIRM AS NEW_FIRM	
,RDV_BDV.NEW_FIRM_TYPE	AS NEW_FIRM_TYPE
,RDV_BDV.NEW_FIRM_BACK_OFFICE AS NEW_FIRM_BACK_OFFICE	
,RDV_BDV.PRESTIGE_STATUS AS PRESTIGE_STATUS
,RDV_BDV.TRANSITION_PERIOD_END_DATE AS TRANSITION_PERIOD_END_DATE
,RDV_BDV.DEAL_ASSESTS AS DEAL_ASSESTS	
,RDV_BDV.EXPECTED_ASSESTS AS EXPECTED_ASSESTS	
,RDV_BDV.PREVIOUS_FIRM AS PREVIOUS_FIRM	
,RDV_BDV.PREVIOUS_FIRM_TYPE AS PREVIOUS_FIRM_TYPE
,BUSINESS_RULES.UDF_CONV_BR_ALL_ADVISOR_001(RDV_BDV.BEGIN_DT,O_MD_START_DT) AS O_NEW_ADVISOR_IND
,BUSINESS_RULES.UDF_CONV_BR_ALL_ADVISOR_003(RDV_BDV.ADVISOR_BIRTH_DATE,O_MD_START_DT,O_ISCORPORATION)[''''o_AGE_SEGMENT''''] AS O_AGE_SEGMENT
,BUSINESS_RULES.UDF_CONV_BR_ALL_ADVISOR_003(RDV_BDV.ADVISOR_BIRTH_DATE,O_MD_START_DT,O_ISCORPORATION)[''''o_AGE_SEGMENT_ORD''''] AS O_AGE_SEGMENT_ORD
,RDV_BDV.PRIMARY_ROLE AS O_PRIMARY_ROLE
,RDV_BDV.BEGIN_DT AS BEGIN_DT
,RDV_BDV.MD_ACTIVE_CERTS AS O_md_active_certs
,BUSINESS_RULES.UDF_CONV_BR_ALL_ADVISOR_003(RDV_BDV.ADVISOR_BIRTH_DATE,O_MD_START_DT,O_ISCORPORATION)[''''o_AGE''''] AS O_ADVISOR_AGE
,RDV_BDV.REP_EMAIL
,RDV_BDV.CBM
,RDV_BDV.BRANCH_ADDRESS1
,RDV_BDV.BRANCH_ADDRESS2
,RDV_BDV.BRANCH_CITY
,RDV_BDV.BRANCH_POSTAL_CODE
,RDV_BDV.BRANCH_NRD
FROM
( SELECT * FROM  
(
SELECT MAX(SAT_LINKCV.MD_EXTRACT_DT) AS SAT_LINKCV_MD_EXTRACT_DT,MAX(SAT_LINKCV.MD_SOURCE) AS SAT_LINKCV_MD_SOURCE,LINK.HK_HUB_PARTY_ROLE_ADVISOR AS O_HK_HUB_PARTY_ROLE_ADVISOR , LINK.MASTER_CODE AS LINK_MASTER_CODE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.LINK_PARTY_RELATIONSHIP_SHARE LINK
JOIN
(SELECT SAT_LINK.* FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE SAT_LINK
JOIN 
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_LINK ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) SAT_LINKCV
ON SAT_LINKCV.HK_LINK = SAT_LINK.HK_LINK AND SAT_LINKCV.MD_START_DT = SAT_LINK.MD_START_DT WHERE SAT_LINK.MD_ACTIVE = ''''A'''' AND SAT_LINK.MD_SRC_SYSTEM = ''''IAS''''
)SAT_LINKCV
ON LINK.HK_LINK = SAT_LINKCV.HK_LINK

GROUP BY (LINK.MASTER_CODE, LINK.HK_HUB_PARTY_ROLE_ADVISOR)
)BDV1



LEFT JOIN

(
SELECT SAT_REGCV.*,HUB_REG.RR_CD AS O_RR_CD, HUB_REG.MD_EXTRACT_DT AS HUB_MD_EXTRACT_DT, SAT_REGCV.MD_SOURCE AS SAT_RR_MD_SOURCE FROM (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE WHERE (MD_SRC_SYSTEM = ''''IAS-COMMISSION''''  OR  MD_SRC_SYSTEM = ''''IAS_CERTS'''' ))HUB_REG 
JOIN
(SELECT SAT_REG.* FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_COMMISSION SAT_REG
JOIN 
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_COMMISSION WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) SAT_REGCV
ON SAT_REGCV.HK_HUB = SAT_REG.HK_HUB AND SAT_REGCV.MD_START_DT = SAT_REG.MD_START_DT WHERE SAT_REG.MD_ACTIVE = ''''A''''
)SAT_REGCV
ON HUB_REG.HK_HUB = SAT_REGCV.HK_HUB WHERE SAT_REGCV.LASTNAME IS NOT NULL AND SAT_REGCV.FIRSTNAME IS NOT NULL AND SAT_REGCV.ACTIVE = ''''1''''

) RDV1

ON (BDV1.LINK_MASTER_CODE = RDV1.MAINREPCODE AND BDV1.LINK_MASTER_CODE = RDV1.O_RR_CD)


LEFT JOIN


(SELECT VW_PARTY.* FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.VW_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH VW_PARTY
JOIN 
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB_PARTY_ROLE_ADVISOR ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.VW_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) VW_PARTYCV
ON VW_PARTYCV.HK_HUB_PARTY_ROLE_ADVISOR = VW_PARTY.HK_HUB_PARTY_ROLE_ADVISOR AND VW_PARTYCV.MD_START_DT = VW_PARTY.MD_START_DT  WHERE VW_PARTY.MD_ACTIVE = ''''A''''
)BDV2


ON BDV1.LINK_MASTER_CODE = BDV2.MASTER_CODE

LEFT JOIN

(
SELECT SAT_REF_MONCV.*,REF_MON.REPID FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.REF_MONTHLY_MILESTONES REF_MON
JOIN
(SELECT SAT_REF_MON.* FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.SAT_REF_MONTHLY_MILESTONES_IAS SAT_REF_MON
JOIN 
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.SAT_REF_MONTHLY_MILESTONES_IAS WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) SAT_REF_MONCV
ON SAT_REF_MONCV.HK_HUB = SAT_REF_MON.HK_HUB AND SAT_REF_MONCV.MD_START_DT = SAT_REF_MON.MD_START_DT WHERE SAT_REF_MON.MD_ACTIVE = ''''A''''
)SAT_REF_MONCV
ON REF_MON.HK_HUB = SAT_REF_MONCV.HK_HUB
)RDV2_MON

ON BDV1.LINK_MASTER_CODE = RDV2_MON.REPID


LEFT JOIN 


(
SELECT REF_MAN.REPID FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.REF_MONTHLY_MILESTONES REF_MAN
JOIN
(SELECT SAT_REF_MAN.HK_HUB FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.SAT_REF_MONTHLY_MILESTONES_IAS SAT_REF_MAN
JOIN 
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.SAT_REF_MONTHLY_MILESTONES_IAS WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) SAT_REF_MANCV
ON SAT_REF_MANCV.HK_HUB = SAT_REF_MAN.HK_HUB AND SAT_REF_MANCV.MD_START_DT = SAT_REF_MAN.MD_START_DT WHERE SAT_REF_MAN.MD_ACTIVE = ''''A''''
)SAT_REF_MANCV
ON REF_MAN.HK_HUB = SAT_REF_MANCV.HK_HUB
)RDV3_MAN

ON BDV1.LINK_MASTER_CODE = RDV3_MAN.REPID


LEFT JOIN

(
SELECT SAT_REPCV.TEAMID,SAT_REPCV.TEAMNAME,SAT_REPCV.PROVINCE AS IAVM_PROVINCE,SAT_REPCV.RVPNAME AS IAVM_RVP,HUB_REP.RR_CD FROM (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE WHERE MD_SRC_SYSTEM LIKE ''''%IAS%'''')HUB_REP 
JOIN
(SELECT SAT_REP.* FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_IAVM SAT_REP
JOIN 
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_IAVM WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) SAT_REPCV
ON SAT_REPCV.HK_HUB = SAT_REP.HK_HUB AND SAT_REPCV.MD_START_DT = SAT_REP.MD_START_DT 
)SAT_REPCV
ON HUB_REP.HK_HUB = SAT_REPCV.HK_HUB WHERE SAT_REPCV.MD_ACTIVE = ''''A''''

)RDV4

ON BDV1.LINK_MASTER_CODE = RDV4.RR_CD

LEFT JOIN

(
SELECT LINK_SER.MASTER_CODE AS O_MASTER_CODE ,SAT_SERCV.END_DATE,SAT_SERCV.REASON,SAT_SERCV.NEW_FIRM,SAT_SERCV.NEW_FIRM_TYPE,SAT_SERCV.NEW_FIRM_BACK_OFFICE,SAT_SERCV.PRESTIGE_STATUS FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.LINK_SERVICING_CODES LINK_SER
JOIN
(SELECT SAT_SER.* FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.SAT_LINK_SERVICING_CODES SAT_SER
JOIN 
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_LINK ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.SAT_LINK_SERVICING_CODES WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) SAT_SERCV
ON SAT_SERCV.HK_LINK = SAT_SER.HK_LINK AND SAT_SERCV.MD_START_DT = SAT_SER.MD_START_DT WHERE SAT_SER.MD_ACTIVE = ''''A''''
)SAT_SERCV
ON LINK_SER.HK_LINK = SAT_SERCV.HK_LINK

GROUP BY (LINK_SER.MASTER_CODE,SAT_SERCV.END_DATE,SAT_SERCV.REASON,SAT_SERCV.NEW_FIRM,SAT_SERCV.NEW_FIRM_TYPE,SAT_SERCV.NEW_FIRM_BACK_OFFICE,SAT_SERCV.PRESTIGE_STATUS)
)BDV3

ON BDV1.LINK_MASTER_CODE = BDV3.O_MASTER_CODE

LEFT JOIN

(
SELECT LINK_ADV.MASTER_CODE,SAT_ADVCV.ADVISOR_NAME,SAT_ADVCV.TRANSITION_PERIOD_END_DATE,SAT_ADVCV.DEAL_ASSESTS,SAT_ADVCV.EXPECTED_ASSESTS,SAT_ADVCV.PREVIOUS_FIRM,SAT_ADVCV.PREVIOUS_FIRM_TYPE FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.REF_NEW_ADVISOR LINK_ADV
JOIN
(SELECT SAT_ADV.* FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.SAT_REF_NEW_ADVISOR_IAPW SAT_ADV
JOIN 
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.SAT_REF_NEW_ADVISOR_IAPW WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) SAT_ADVCV
ON SAT_ADVCV.HK_HUB = SAT_ADV.HK_HUB AND SAT_ADVCV.MD_START_DT = SAT_ADV.MD_START_DT WHERE SAT_ADV.MD_ACTIVE = ''''A''''
)SAT_ADVCV
ON LINK_ADV.HK_HUB = SAT_ADVCV.HK_HUB

GROUP BY (LINK_ADV.MASTER_CODE,SAT_ADVCV.ADVISOR_NAME,SAT_ADVCV.TRANSITION_PERIOD_END_DATE,SAT_ADVCV.DEAL_ASSESTS,SAT_ADVCV.EXPECTED_ASSESTS,SAT_ADVCV.PREVIOUS_FIRM,SAT_ADVCV.PREVIOUS_FIRM_TYPE)
)RDV5

ON BDV1.LINK_MASTER_CODE = RDV5.MASTER_CODE

)RDV_BDV
)SAT_PARTY
GROUP BY (HK_HUB_PARTY_ROLE_ADVISOR,O_MD_START_DT,O_EXTRACT_DT,O_MD_CREATION_DT,O_MD_SOURCE,O_MD_src_system,LINK_MASTER_CODE,O_Company_Code,O_Company_Name,O_Regulatory_Organization_Name,O_Regulatory_Organization_Code,O_Dealer_Name,O_Regional_VP,O_BRANCH_CODE,O_BRANCH_NAME,O_TEAM_CODE,O_Team_Name,Advisor_fullname,O_FIRST_NAME,O_LAST_NAME,O_Status,O_province_code,O_province_name,O_departed_advisor_ind,END_DATE,REASON,NEW_FIRM,NEW_FIRM_TYPE,NEW_FIRM_BACK_OFFICE,PRESTIGE_STATUS,TRANSITION_PERIOD_END_DATE,DEAL_ASSESTS,EXPECTED_ASSESTS,PREVIOUS_FIRM,PREVIOUS_FIRM_TYPE,O_AGE_SEGMENT,O_AGE_SEGMENT_ORD,O_ADVISOR_AGE,REP_EMAIL,CBM,BRANCH_ADDRESS1,BRANCH_ADDRESS2,BRANCH_CITY,BRANCH_POSTAL_CODE,BRANCH_NRD)
              '';
INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH
SET
MD_HASHDIFF=SHA1(UPPER(CONCAT(COALESCE(TRIM(COMPANY_CODE),''''#NULL#'''') ,''''|'''',COALESCE(TRIM(COMPANY_NAME),''''#NULL#''''), ''''|'''',  COALESCE(TRIM(REGULATORY_ORGANIZATION_NAME),''''#NULL#''''),
''''|'''',COALESCE(TRIM(REGULATORY_ORGANIZATION_CODE),''''#NULL#''''),''''|'''',COALESCE(TRIM(DEALER_CODE),''''#NULL#''''),''''|'''',COALESCE(TRIM(DEALER_NAME),''''#NULL#''''),
''''|'''',COALESCE(TRIM(REGION_CODE),''''#NULL#''''),''''|'''',COALESCE(TRIM(REGION_NAME),''''#NULL#''''),''''|'''',COALESCE(TRIM(REGION_VP),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(BRANCHCODE),''''#NULL#''''),''''|'''',COALESCE(TRIM(BRANCHNAME),''''#NULL#''''),''''|'''',COALESCE(TRIM(to_varchar(TEAM_CODE)),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(TEAM_NAME),''''#NULL#''''),''''|'''',COALESCE(TRIM(ADVISOR_FULLNAME),''''#NULL#''''),''''|'''',COALESCE(TRIM(FIRSTNAME),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(LASTNAME),''''#NULL#''''),''''|'''',COALESCE(TRIM(ADVISOR_CORPORATION_NAME),''''#NULL#''''),''''|'''',COALESCE(TRIM(STATUS),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(GROUP_RSP_INDICATOR),''''#NULL#''''),''''|'''',COALESCE(TRIM(PROVINCE_CODE),''''#NULL#''''),''''|'''',COALESCE(TRIM(PROVINCE),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(to_varchar(ADVISOR_START_DATE)),''''#NULL#''''),''''|'''',COALESCE(TRIM(to_varchar(NEW_ADVISOR)),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(to_varchar(DEPARTED_ADVISOR_IND)),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(PRIMARY_ROLE),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(TO_VARCHAR(END_DATE)),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(REASON),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(NEW_FIRM),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(NEW_FIRM_TYPE),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(NEW_FIRM_BACK_OFFICE),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(PRESTIGE_STATUS),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(to_varchar(TRANSITION_PERIOD_END_DATE)),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(to_varchar(DEAL_ASSESTS)),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(to_varchar(EXPECTED_ASSESTS)),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(PREVIOUS_FIRM),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(PREVIOUS_FIRM_TYPE),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(AGE_SEGMENT),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(AGE_SEGMENT_ORD),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(MD_ACTIVE_CERTS),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(ADVISOR_AGE),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(REP_EMAIL),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(CBM),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(BRANCH_ADDRESS1),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(BRANCH_ADDRESS2),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(BRANCH_CITY),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(BRANCH_POSTAL_CODE),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(BRANCH_NRD),''''#NULL#'''')
)))
Where MD_SRC_SYSTEM = ''''IAS'''';
'';

//return INS_INSERT;    
    
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_SAT_REGISTERED_REPRESENTATIVE_TO_BDV_WT_PARTY_ROLE_ADVISOR_COMPUTE_INVESTIA_UNIVERIS(""ENV"" VARCHAR(1000), ""DATA_START_DATE"" VARCHAR(20))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''''';
INS_QUERY := ''INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH
(MD_START_DT,
MD_EXTRACT_DT,
MD_CREATION_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MASTER_CODE,
COMPANY_CODE,
COMPANY_NAME,
REGULATORY_ORGANIZATION_NAME,
REGULATORY_ORGANIZATION_CODE,
DEALER_CODE,
DEALER_NAME,
REGION_CODE,
REGION_NAME,
REGION_VP,
BRANCHCODE,
BRANCHNAME,
TEAM_CODE,
TEAM_NAME,
ADVISOR_FULLNAME,
FIRSTNAME,
LASTNAME,
ADVISOR_CORPORATION_NAME,
STATUS,
GROUP_RSP_INDICATOR,
PROVINCE_CODE,
PROVINCE,
ADVISOR_START_DATE,
NEW_ADVISOR,
HK_HUB  )
(
WITH
  LV1 AS (
  SELECT
  HK_LINK AS LV1_HK_LINK,
  MAX(MD_START_DT) AS LV1_O_DATA_START_DATE
  FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE
  WHERE MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')
  GROUP BY HK_LINK
  ),
  JNR_LinkShare AS (
  SELECT
  B.COM_TYPE          AS  COM_TYPE,
  B.COMMISSIONPCT       AS  COMMISSIONPCT,
  B.HK_LINK           AS  HK_LINK,
  B.IS_RESHARED         AS  IS_RESHARED,
  B.MD_ACTIVE         AS  MD_ACTIVE,
  B.MD_CREATION_AUDIT_ID    AS  MD_CREATION_AUDIT_ID,
  B.MD_CREATION_DT      AS  MD_CREATION_DT,
  B.MD_EXTRACT_DT       AS  MD_EXTRACT_DT,
  B.MD_HASHDIFF         AS  MD_HASHDIFF,
  B.MD_SOURCE         AS  MD_SOURCE,
  B.MD_SRC_SYSTEM       AS  MD_SRC_SYSTEM,
  B.MD_START_DT         AS  MD_START_DT,
  B.PHYSICAL          AS  PHYSICAL,
  B.TOREPID           AS  TOREPID,
  A.LV1_HK_LINK         AS  LV1_HK_LINK,
  A.LV1_O_DATA_START_DATE   AS  LV1_O_START_DATE,
  D.HK_HUB_PARTY_ROLE_ADVISOR AS  share_HK_HUB_PARTY_ROLE_ADVISOR,
  D.HK_LINK           AS  share_HK_LINK,
  D.MASTER_CODE         AS  share_MASTER_CODE
  FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE B
  JOIN LV1 A 
  ON B.HK_LINK = A.LV1_HK_LINK
  AND B.MD_START_DT = A.LV1_O_DATA_START_DATE
  JOIN
  DB_IAW_''||ENV||''_DWH.SHARED_BDV.LINK_PARTY_RELATIONSHIP_SHARE D
  ON B.HK_LINK = D.HK_LINK
  WHERE 
  B.MD_ACTIVE=''''A'''' AND B.MD_SRC_SYSTEM=''''INVESTIA-UNIVERIS''''
  ),
  AGG_LINK_PARTY_RELATIONSHIP_COMM AS (
  SELECT 
  max(MD_EXTRACT_DT)              AS SAT_SHARE_MD_EXTRACT_DT,
  max(MD_SOURCE)                AS SAT_SHARE_MD_SOURCE,
  SHARE_HK_HUB_PARTY_ROLE_ADVISOR       AS SAT_SHARE_SHARE_HK_HUB_PARTY_ROLE_ADVISOR,
  SHARE_MASTER_CODE               AS SAT_SHARE_SHARE_MASTER_CODE
  FROM JNR_LinkShare
  GROUP BY Sat_share_share_MASTER_CODE, Sat_share_share_HK_HUB_PARTY_ROLE_ADVISOR
  ),
  LV2 AS (
  SELECT
  HK_HUB AS LV2_HK_HUB,
  MAX(MD_START_DT) AS LV2_O_DATA_START_DATE
  FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_INVESTIA_UNIVERIS
  WHERE MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')
  GROUP BY HK_HUB
  ),
  JNR_SAT_MaxRecord_WITH_SAT_All AS (
   SELECT 
  B.BRN_CD          AS  SAT_BRN_CD,
  B.BRN_NAME          AS  SAT_BRN_NAME,
  B.BRN_SYSID         AS  SAT_BRN_SYSID,
  B.COMPANY_CD        AS  SAT_COMPANY_CD,
  B.COMPANY_NAME        AS  SAT_COMPANY_NAME,
  B.CREATE_DT         AS  SAT_CREATE_DT,
  B.DLR_CD          AS  SAT_DLR_CD,
  B.DLR_NAME_ENG        AS  SAT_DLR_NAME_ENG,
  B.DLR_SYSID         AS  SAT_DLR_SYSID,
  B.HK_HUB          AS  SAT_HK_HUB,
  B.MD_ACTIVE         AS  SAT_MD_ACTIVE,
  B.MD_CREATION_AUDIT_ID    AS  SAT_MD_CREATION_AUDIT_ID,
  B.MD_CREATION_DT      AS  SAT_MD_CREATION_DT,
  B.MD_EXTRACT_DT       AS  SAT_MD_EXTRACT_DT,
  B.MD_HASHDIFF         AS  SAT_MD_HASHDIFF,
  B.MD_SOURCE         AS  SAT_MD_SOURCE,
  B.MD_SRC_SYSTEM       AS  SAT_MD_SRC_SYSTEM,
  B.MD_START_DT         AS  SAT_MD_START_DT,
  B.PROV_CD           AS  SAT_PROV_CD,
  B.REGULATORY_ORG_CD     AS  SAT_REGULATORY_ORG_CD,
  B.REGULATORY_ORG_NAME     AS  SAT_REGULATORY_ORG_NAME,
  B.REP_CORP_NAME       AS  SAT_REP_CORP_NAME,
  B.REP_FNAME         AS  SAT_REP_FNAME,
  B.REP_GRP_RSP         AS  SAT_REP_GRP_RSP,
  B.REP_LNAME         AS  SAT_REP_LNAME,
  B.REP_ST_NAME         AS  SAT_REP_ST_NAME,
  B.REP_SYSID         AS  SAT_REP_SYSID,
  B.REP_TEAM_CD         AS  SAT_REP_TEAM_CD,
  B.REP_TEAM_NAME       AS  SAT_REP_TEAM_NAME,
  B.REP_TITLE_DESC      AS  SAT_REP_TITLE_DESC,
  B.RGN_CD          AS  SAT_RGN_CD,
  B.RGN_MGR           AS  SAT_RGN_MGR,
  B.RGN_NAME          AS  SAT_RGN_NAME,
  B.RGN_SYSID         AS  SAT_RGN_SYSID,
  B.TERMINATE_DT        AS  SAT_TERMINATE_DT,
  A.LV2_HK_HUB        AS  SAT_LV2_HK_HUB,
  A.LV2_O_DATA_START_DATE   AS  SAT_LV2_O_DATA_START_DATE
  FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_INVESTIA_UNIVERIS B
  JOIN LV2 A
  ON B.HK_HUB = A.LV2_HK_HUB
  AND B.MD_START_DT = A.LV2_O_DATA_START_DATE
  WHERE B.MD_ACTIVE = ''''A''''
   ),
   JNR_HubWithSat AS (
   SELECT
  A.SAT_BRN_CD          AS  SAT_BRN_CD,
  A.SAT_BRN_NAME          AS  SAT_BRN_NAME,
  A.SAT_BRN_SYSID         AS  SAT_BRN_SYSID,
  A.SAT_COMPANY_CD        AS  SAT_COMPANY_CD,
  A.SAT_COMPANY_NAME        AS  SAT_COMPANY_NAME,
  A.SAT_CREATE_DT         AS  SAT_CREATE_DT,
  A.SAT_DLR_CD          AS  SAT_DLR_CD,
  A.SAT_DLR_NAME_ENG        AS  SAT_DLR_NAME_ENG,
  A.SAT_DLR_SYSID         AS  SAT_DLR_SYSID,
  A.SAT_HK_HUB          AS  SAT_HK_HUB,
  A.SAT_LV2_HK_HUB        AS  SAT_LV2_HK_HUB,
  A.SAT_MD_ACTIVE         AS  SAT_MD_ACTIVE,
  A.SAT_MD_CREATION_AUDIT_ID    AS  SAT_MD_CREATION_AUDIT_ID,
  A.SAT_MD_CREATION_DT      AS  SAT_MD_CREATION_DT,
  A.SAT_MD_EXTRACT_DT       AS  SAT_MD_EXTRACT_DT,
  A.SAT_MD_HASHDIFF         AS  SAT_MD_HASHDIFF,
  A.SAT_MD_SOURCE         AS  SAT_MD_SOURCE,
  A.SAT_MD_SRC_SYSTEM       AS  SAT_MD_SRC_SYSTEM,
  A.SAT_MD_START_DT         AS  SAT_MD_START_DT,
  A.SAT_LV2_O_DATA_START_DATE   AS  SAT_LV2_O_DATA_START_DATE,
  A.SAT_PROV_CD           AS  SAT_PROV_CD,
  A.SAT_REGULATORY_ORG_CD     AS  SAT_REGULATORY_ORG_CD,
  A.SAT_REGULATORY_ORG_NAME     AS  SAT_REGULATORY_ORG_NAME,
  A.SAT_REP_CORP_NAME       AS  SAT_REP_CORP_NAME,
  A.SAT_REP_FNAME         AS  SAT_REP_FNAME,
  A.SAT_REP_GRP_RSP         AS  SAT_REP_GRP_RSP,
  A.SAT_REP_LNAME         AS  SAT_REP_LNAME,
  A.SAT_REP_ST_NAME         AS  SAT_REP_ST_NAME,
  A.SAT_REP_SYSID         AS  SAT_REP_SYSID,
  A.SAT_REP_TEAM_CD         AS  SAT_REP_TEAM_CD,
  A.SAT_REP_TEAM_NAME       AS  SAT_REP_TEAM_NAME,
  A.SAT_REP_TITLE_DESC      AS  SAT_REP_TITLE_DESC,
  A.SAT_RGN_CD          AS  SAT_RGN_CD,
  A.SAT_RGN_MGR           AS  SAT_RGN_MGR,
  A.SAT_RGN_NAME          AS  SAT_RGN_NAME,
  A.SAT_RGN_SYSID         AS  SAT_RGN_SYSID,
  A.SAT_TERMINATE_DT        AS  SAT_TERMINATE_DT,
  B.HK_HUB            AS  HUB_HK_HUB,
  B.MD_CREATION_AUDIT_ID      AS  HUB_MD_CREATION_AUDIT_ID,
  B.MD_CREATION_DT        AS  HUB_MD_CREATION_DT,
  B.MD_EXTRACT_DT         AS  HUB_MD_EXTRACT_DT,
  B.MD_SOURCE           AS  HUB_MD_SOURCE,
  B.MD_SRC_SYSTEM         AS  HUB_MD_SRC_SYSTEM,
  B.RR_CD             AS  HUB_RR_CD
  FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE B
  JOIN JNR_SAT_MAXRECORD_WITH_SAT_ALL A
  ON B.HK_HUB = A.SAT_HK_HUB
  WHERE B.MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS''''
  AND A.sat_REP_LNAME IS NOT NULL
  AND A.sat_REP_FNAME IS NOT NULL
  AND A.sat_MD_ACTIVE = ''''A''''
   ),
   JNR_LINKPARTYWITHRR AS (
   SELECT
  B.HUB_HK_HUB              AS  HUB_HK_HUB,
  B.HUB_MD_CREATION_AUDIT_ID AS   HUB_MD_CREATION_AUDIT_ID,
  B.HUB_MD_CREATION_DT AS   HUB_MD_CREATION_DT,
  B.HUB_MD_EXTRACT_DT AS  HUB_MD_EXTRACT_DT,
  B.HUB_MD_SOURCE AS  HUB_MD_SOURCE,
  B.HUB_MD_SRC_SYSTEM AS  HUB_MD_SRC_SYSTEM,
  B.HUB_RR_CD AS  HUB_RR_CD,
  B.SAT_BRN_CD AS   SAT_BRN_CD,
  B.SAT_BRN_NAME AS   SAT_BRN_NAME,
  B.SAT_BRN_SYSID AS  SAT_BRN_SYSID,
  B.SAT_COMPANY_CD AS   SAT_COMPANY_CD,
  B.SAT_COMPANY_NAME AS   SAT_COMPANY_NAME,
  B.SAT_CREATE_DT AS  SAT_CREATE_DT,
  B.SAT_DLR_CD AS   SAT_DLR_CD,
  B.SAT_DLR_NAME_ENG AS   SAT_DLR_NAME_ENG,
  B.SAT_DLR_SYSID AS  SAT_DLR_SYSID,
  B.SAT_HK_HUB AS   SAT_HK_HUB,
  B.SAT_LV2_HK_HUB AS   SAT_LV2_HK_HUB,
  B.SAT_MD_ACTIVE AS  SAT_MD_ACTIVE,
  B.SAT_MD_CREATION_AUDIT_ID AS   SAT_MD_CREATION_AUDIT_ID,
  B.SAT_MD_CREATION_DT AS   SAT_MD_CREATION_DT,
  B.SAT_MD_EXTRACT_DT AS  SAT_MD_EXTRACT_DT,
  B.SAT_MD_HASHDIFF AS  SAT_MD_HASHDIFF,
  B.SAT_MD_SOURCE AS  SAT_MD_SOURCE,
  B.SAT_MD_SRC_SYSTEM AS  SAT_MD_SRC_SYSTEM,
  B.SAT_MD_START_DT AS  SAT_MD_START_DT,
  B.SAT_LV2_O_DATA_START_DATE AS  SAT_LV2_O_DATA_START_DATE,
  B.SAT_PROV_CD AS  SAT_PROV_CD,
  B.SAT_REGULATORY_ORG_CD AS  SAT_REGULATORY_ORG_CD,
  B.SAT_REGULATORY_ORG_NAME AS  SAT_REGULATORY_ORG_NAME,
  B.SAT_REP_CORP_NAME AS  SAT_REP_CORP_NAME,
  B.SAT_REP_FNAME AS  SAT_REP_FNAME,
  B.SAT_REP_GRP_RSP AS  SAT_REP_GRP_RSP,
  B.SAT_REP_LNAME AS  SAT_REP_LNAME,
  B.SAT_REP_ST_NAME AS  SAT_REP_ST_NAME,
  B.SAT_REP_SYSID AS  SAT_REP_SYSID,
  B.SAT_REP_TEAM_CD AS  SAT_REP_TEAM_CD,
  B.SAT_REP_TEAM_NAME AS  SAT_REP_TEAM_NAME,
  B.SAT_REP_TITLE_DESC AS   SAT_REP_TITLE_DESC,
  B.SAT_RGN_CD AS   SAT_RGN_CD,
  B.SAT_RGN_MGR AS  SAT_RGN_MGR,
  B.SAT_RGN_NAME AS   SAT_RGN_NAME,
  B.SAT_RGN_SYSID                 AS  SAT_RGN_SYSID,
  B.SAT_TERMINATE_DT                  AS  SAT_TERMINATE_DT,
  A.SAT_SHARE_MD_EXTRACT_DT               AS  SAT_SHARE_MD_EXTRACT_DT,
  A.SAT_SHARE_MD_SOURCE                 AS  SAT_SHARE_MD_SOURCE,
  A.SAT_SHARE_SHARE_HK_HUB_PARTY_ROLE_ADVISOR     AS  SAT_SHARE_SHARE_HK_HUB_PARTY_ROLE_ADVISOR,
  A.SAT_SHARE_SHARE_MASTER_CODE             AS  SAT_SHARE_SHARE_MASTER_CODE
  FROM JNR_HubWithSat B
  RIGHT OUTER JOIN AGG_LINK_PARTY_RELATIONSHIP_COMM A
  ON A.SAT_SHARE_SHARE_MASTER_CODE = B.HUB_RR_CD
   ),
   LV3 AS (
  SELECT
  HK_HUB AS LV3_HK_HUB,
  MAX(MD_START_DT) AS LV3_O_PROV_MAX_START_DT
  FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REF_PROVINCE
  WHERE MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')
  GROUP BY HK_HUB
  ),
  JNR_SATPROVREGWITHDATEEXTRACT AS (
  SELECT
  B.HK_HUB AS sat_HK_HUB,
  B.MD_ACTIVE AS sat_MD_ACTIVE,
  B.MD_CREATION_AUDIT_ID AS sat_MD_CREATION_AUDIT_ID,
  B.MD_CREATION_DT AS sat_MD_CREATION_DT,
  B.MD_EXTRACT_DT AS sat_MD_EXTRACT_DT,
  B.MD_HASHDIFF AS sat_MD_HASHDIFF,
  B.MD_SOURCE AS sat_MD_SOURCE,
  B.MD_SRC_SYSTEM AS sat_MD_SRC_SYSTEM,
  B.MD_START_DT AS sat_MD_START_DT,
  B.PROV_DESC AS sat_PROV_DESC,
  A.LV3_HK_HUB AS LV3_HK_HUB,
  A.LV3_O_PROV_MAX_START_DT  AS LV3_O_PROV_MAX_START_DT
  FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REF_PROVINCE B
  JOIN LV3 A
  ON B.MD_START_DT = A.LV3_O_PROV_MAX_START_DT
  AND B.HK_HUB = A.LV3_HK_HUB
  ),
  JNR_HUBWITHSATFORPROVINCE AS (
  SELECT 
  LV3_HK_HUB AS SATPRV_HK_HUB,
  LV3_O_PROV_MAX_START_DT AS satprv_o_PROV_MAX_START_DT,
  SAT_HK_HUB AS SATPRV_SAT_HK_HUB,
  SAT_MD_ACTIVE AS SATPRV_SAT_MD_ACTIVE,
  SAT_MD_CREATION_AUDIT_ID AS SATPRV_SAT_MD_CREATION_AUDIT_ID,
  SAT_MD_CREATION_DT AS SATPRV_SAT_MD_CREATION_DT,
  SAT_MD_EXTRACT_DT AS SATPRV_SAT_MD_EXTRACT_DT,
  SAT_MD_HASHDIFF AS SATPRV_SAT_MD_HASHDIFF,
  SAT_MD_SOURCE AS SATPRV_SAT_MD_SOURCE,
  SAT_MD_SRC_SYSTEM AS SATPRV_SAT_MD_SRC_SYSTEM,
  SAT_MD_START_DT AS SATPRV_SAT_MD_START_DT,
  SAT_PROV_DESC AS SATPRV_SAT_PROV_DESC,
  HK_HUB AS HUBPRV_HK_HUB,
  PROV_CD AS HUBPRV_PROV_CD
  FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.REF_PROVINCE B
  JOIN JNR_SATPROVREGWITHDATEEXTRACT A 
  ON B.HK_HUB = A.LV3_HK_HUB
  ),
  JNR_PRV_WITH_MAINLINE AS (
   SELECT 
  TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AS O_MD_START_DT,
  TO_DATE(TO_CHAR(SAT_SHARE_MD_EXTRACT_DT,''''YYYY-MM-DD''''),''''YYYY-MM-DD'''')  AS o_MD_EXTRACT_DT,
  CURRENT_TIMESTAMP AS o_MD_CREATION_DT,
  B.SAT_SHARE_MD_SOURCE AS O_MAX_MD_SOURCE,
  ''''INVESTIA-UNIVERIS'''' as o_MD_SRC_SYSTEM,
  B.SAT_SHARE_SHARE_MASTER_CODE AS SAT_SHARE_SHARE_MASTER_CODE,
  B.SAT_COMPANY_CD AS SAT_COMPANY_CD,
  B.SAT_REGULATORY_ORG_NAME AS SAT_REGULATORY_ORG_NAME,
  B.SAT_REGULATORY_ORG_CD AS SAT_REGULATORY_ORG_CD,
  B.SAT_DLR_CD AS SAT_DLR_CD,
  B.SAT_DLR_NAME_ENG AS SAT_DLR_NAME_ENG,
  B.SAT_RGN_CD AS SAT_RGN_CD,
  B.SAT_RGN_NAME AS SAT_RGN_NAME,
  CASE WHEN B.SAT_RGN_MGR IS NULL THEN ''''Non affiliated to RVPs'''' ELSE B.SAT_RGN_MGR END AS o_RVP,
  B.SAT_BRN_CD AS SAT_BRN_CD,
  B.SAT_BRN_NAME AS SAT_BRN_NAME,
  B.SAT_REP_TEAM_CD AS SAT_REP_TEAM_CD,
  B.SAT_REP_TEAM_NAME AS SAT_REP_TEAM_NAME,
  CONCAT(CASE WHEN B.SAT_REP_LNAME IS NULL THEN '''''''' ELSE B.SAT_REP_LNAME END , '''','''',CASE WHEN B.SAT_REP_FNAME IS NULL THEN '''''''' ELSE B.SAT_REP_FNAME END, ''''('''',B.SAT_SHARE_SHARE_MASTER_CODE, '''')'''') AS ADVISORFULLNAME,
  B.SAT_REP_FNAME AS SAT_REP_FNAME,
  B.SAT_REP_LNAME AS SAT_REP_LNAME,
  B.SAT_COMPANY_NAME AS SAT_COMPANY_NAME,
  B.SAT_REP_ST_NAME AS SAT_REP_ST_NAME,
  B.SAT_REP_GRP_RSP AS SAT_REP_GRP_RSP,
  CASE WHEN B.SAT_PROV_CD IS NULL THEN ''''N/A'''' ELSE CASE WHEN B.SAT_PROV_CD = ''''#N/A'''' THEN ''''N/A'''' ELSE B.SAT_PROV_CD END END AS O_PROVINCE_CODE,
  A.SATPRV_SAT_PROV_DESC AS SATPRV_SAT_PROV_DESC,
  TO_DATE(TO_CHAR(B.sat_CREATE_DT,''''YYYY-MM-DD''''),''''YYYY-MM-DD'''') AS O_CREATE_DT,
  B.SAT_SHARE_SHARE_HK_HUB_PARTY_ROLE_ADVISOR AS HK_HUB
  FROM JNR_LINKPARTYWITHRR B 
  LEFT JOIN JNR_HUBWITHSATFORPROVINCE A
  ON B.SAT_PROV_CD = A.HUBPRV_PROV_CD
  )
  SELECT
  O_MD_START_DT               AS  MD_START_DT,
  O_MD_EXTRACT_DT             AS  MD_EXTRACT_DT,
  O_MD_CREATION_DT            AS  MD_CREATION_DT,
  O_MAX_MD_SOURCE             AS  MD_SOURCE,
  O_MD_SRC_SYSTEM             AS  MD_SRC_SYSTEM,
  SAT_SHARE_SHARE_MASTER_CODE       AS  MASTER_CODE,
  SAT_COMPANY_CD              AS  COMPANY_CODE,
  SAT_COMPANY_NAME            AS  COMPANY_NAME,
  SAT_REGULATORY_ORG_NAME         AS  REGULATORY_ORGANIZATION_NAME,
  SAT_REGULATORY_ORG_CD           AS  REGULATORY_ORGANIZATION_CODE,
  SAT_DLR_CD                AS  DEALER_CODE,
  SAT_DLR_NAME_ENG            AS  DEALER_NAME,
  SAT_RGN_CD                AS  REGION_CODE,
  SAT_RGN_NAME              AS  REGION_NAME,
  O_RVP                   AS  REGION_VP,
  SAT_BRN_CD                AS  BRANCHCODE,
  SAT_BRN_NAME              AS  BRANCHNAME,
  SAT_REP_TEAM_CD             AS  TEAM_CODE,
  SAT_REP_TEAM_NAME             AS  TEAM_NAME,
  ADVISORFULLNAME             AS  ADVISOR_FULLNAME,
  SAT_REP_FNAME               AS  FIRSTNAME,
  SAT_REP_LNAME               AS  LASTNAME,
  SAT_COMPANY_NAME            AS  ADVISOR_CORPORATION_NAME,
  SAT_REP_ST_NAME             AS  STATUS,
  SAT_REP_GRP_RSP             AS  GROUP_RSP_INDICATOR,
  O_PROVINCE_CODE             AS  PROVINCE_CODE,
  SATPRV_SAT_PROV_DESC          AS  PROVINCE,
  O_CREATE_DT               AS  CADVISOR_START_DATE,
  BUSINESS_RULES.UDF_CONV_BR_ALL_ADVISOR_001(o_CREATE_DT,O_MD_START_DT) AS NEW_ADVISOR_IND,
  HK_HUB
  FROM JNR_PRV_WITH_MAINLINE)'';
UPD_QUERY := ''UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH
SET
MD_HASHDIFF=SHA1(UPPER(CONCAT(COALESCE(TRIM(COMPANY_CODE),''''#NULL#'''') ,''''|'''',COALESCE(TRIM(COMPANY_NAME),''''#NULL#''''), ''''|'''',  COALESCE(TRIM(REGULATORY_ORGANIZATION_NAME),''''#NULL#''''),
''''|'''',  COALESCE(TRIM(REGULATORY_ORGANIZATION_CODE),''''#NULL#''''),''''|'''',COALESCE(TRIM(DEALER_CODE),''''#NULL#''''),''''|'''',COALESCE(TRIM(DEALER_NAME),''''#NULL#''''),
''''|'''',COALESCE(TRIM(REGION_CODE),''''#NULL#''''),''''|'''',COALESCE(TRIM(REGION_NAME),''''#NULL#''''),''''|'''',COALESCE(TRIM(REGION_VP),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(BRANCHCODE),''''#NULL#''''),''''|'''',COALESCE(TRIM(BRANCHNAME),''''#NULL#''''),''''|'''',COALESCE(TRIM(to_varchar(TEAM_CODE)),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(TEAM_NAME),''''#NULL#''''),''''|'''',COALESCE(TRIM(ADVISOR_FULLNAME),''''#NULL#''''),''''|'''',COALESCE(TRIM(FIRSTNAME),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(LASTNAME),''''#NULL#''''),''''|'''',COALESCE(TRIM(ADVISOR_CORPORATION_NAME),''''#NULL#''''),''''|'''',COALESCE(TRIM(STATUS),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(GROUP_RSP_INDICATOR),''''#NULL#''''),''''|'''',COALESCE(TRIM(PROVINCE_CODE),''''#NULL#''''),''''|'''',COALESCE(TRIM(PROVINCE),''''#NULL#'''')
,''''|'''',COALESCE(TRIM(to_varchar(ADVISOR_START_DATE)),''''#NULL#''''),''''|'''',COALESCE(TRIM(to_varchar(NEW_ADVISOR)),''''#NULL#'''')
)))
Where MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''''';
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END

';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_SHARED_TO_WT_IAS_NBIN_SATPLAN_COMPUTE(""ENV"" VARCHAR(1000), ""DATA_START_DATE"" VARCHAR(20))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE
WHERE MD_SRC_SYSTEM = ''''IAS'''''';
INS_QUERY :=''INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE(
MD_START_DT,
MD_CREATION_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
RETAIL_PLAN,
ACCOUNT_RAP_CODE,
PLAN_CODE,
PLAN_LABEL,
ACCOUNT_TYPE,
GROUP_TYPE_CODE,
ACCUMULATION_TYPE,
ASC_1_RESP_PLAN_TYPES
)
(
WITH
  LV AS (
  SELECT
	HK_HUB,
	MD_START_DT AS O_MAX_DATE_LV,
	MD_HASHDIFF,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	MD_ACTIVE
	FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_NBIN_AGG
	WHERE MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')
	QUALIFY ROW_NUMBER() OVER (PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) = 1
  ),
  SAT AS (
      SELECT
		B.HK_HUB AS SAT_HK_HUB,
		B.MD_ACTIVE AS SAT_MD_ACTIVE,
		B.MD_EXTRACT_DT AS SAT_MD_EXTRACT_DT,
		B.MD_HASHDIFF AS SAT_MD_HASHDIFF,
		B.MD_SOURCE AS SAT_MD_SOURCE,
		B.MD_SRC_SYSTEM AS SAT_MD_SRC_SYSTEM,
		B.MD_START_DT AS SAT_MD_START_DT
		FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_NBIN_AGG B
		JOIN LV A
        ON A.HK_HUB = B.HK_HUB
		AND A.O_MAX_DATE_LV = B.MD_START_DT
		WHERE B.MD_ACTIVE = ''''A'''' AND B.HK_HUB != ''''0''''
  ),
  JNR_REFF_P AS (
	SELECT
		NULL AS REF_A_C_ACCOUNT_CLASS,
		B.ACCOUNT_RAP_CODE AS REF_ACCOUNT_RAP_CODE,
		B.HK_HUB AS REF_HK_HUB,
		NULL AS REF_PLN_CD,
		B.RETAIL_PLAN AS REF_RETAIL_PLAN,
		NULL AS REF_RETAIL_PLAN_RESP,
		A.SAT_HK_HUB AS SAT_HK_HUB,
		A.SAT_MD_ACTIVE AS SAT_MD_ACTIVE,
		A.SAT_MD_EXTRACT_DT AS SAT_MD_EXTRACT_DT,
		A.SAT_MD_HASHDIFF AS SAT_MD_HASHDIFF,
		A.SAT_MD_SOURCE AS SAT_MD_SOURCE,
		A.SAT_MD_SRC_SYSTEM AS SAT_MD_SRC_SYSTEM,
		A.SAT_MD_START_DT AS SAT_MD_START_DT
		FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES_AGG B
		JOIN SAT A 
		ON A.SAT_HK_HUB = B.HK_HUB
		WHERE B.ACCOUNT_RAP_CODE = ''''P''''
  ),
  JNR_REFF_NOT_P AS (
  SELECT
	NULL AS REF_A_C_ACCOUNT_CLASS,
	B.ACCOUNT_RAP_CODE AS REF_ACCOUNT_RAP_CODE,
	B.HK_HUB AS REF_HK_HUB,
	NULL AS REF_PLN_CD,
	B.RETAIL_PLAN AS REF_RETAIL_PLAN,
	NULL AS REF_RETAIL_PLAN_RESP,
	A.SAT_HK_HUB AS SAT_HK_HUB,
	A.SAT_MD_ACTIVE AS SAT_MD_ACTIVE,
	A.SAT_MD_EXTRACT_DT AS SAT_MD_EXTRACT_DT,
	A.SAT_MD_HASHDIFF AS SAT_MD_HASHDIFF,
	A.SAT_MD_SOURCE AS SAT_MD_SOURCE,
	A.SAT_MD_SRC_SYSTEM AS SAT_MD_SRC_SYSTEM,
	A.SAT_MD_START_DT AS SAT_MD_START_DT
	FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES_AGG B
	JOIN SAT A 
	ON A.SAT_HK_HUB = B.HK_HUB
	WHERE B.ACCOUNT_RAP_CODE != ''''P'''' OR B.ACCOUNT_RAP_CODE IS NULL
  ),
  LV2 AS (
  SELECT
  HK_HUB,
  MD_START_DT AS O_MAX_DATE_LV2,
  MD_HASHDIFF,
  MD_CREATION_DT,
  MD_CREATION_AUDIT_ID,
  MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  MD_ACTIVE,
  PLAN_LABEL,
  ACCOUNT_TYPE,
  GROUP_TYPE_CODE,
  ACCUMULATION_TYPE
  FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.SAT_REF_RAPCODE_PLAN_IAS
  WHERE MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')
  QUALIFY ROW_NUMBER() OVER (PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) = 1
  ),
  SAT2 AS (
  SELECT 
  B.ACCOUNT_TYPE AS SAT_RAP_CODE_ACCOUNT_TYPE,
  B.ACCUMULATION_TYPE AS SAT_RAP_CODE_ACCUMULATION_TYPE,
  B.GROUP_TYPE_CODE AS SAT_RAP_CODE_GROUP_TYPE_CODE,
  B.HK_HUB AS SAT_RAP_CODE_HK_HUB,
  B.MD_ACTIVE AS SAT_RAP_CODE_MD_ACTIVE,
  B.MD_CREATION_AUDIT_ID AS SAT_RAP_CODE_MD_CREATION_AUDIT_ID,
  B.MD_CREATION_DT AS SAT_RAP_CODE_MD_CREATION_DT,
  B.MD_EXTRACT_DT AS SAT_RAP_CODE_MD_EXTRACT_DT,
  B.MD_HASHDIFF AS SAT_RAP_CODE_MD_HASHDIFF,
  B.MD_SOURCE AS SAT_RAP_CODE_MD_SOURCE,
  B.MD_SRC_SYSTEM AS SAT_RAP_CODE_MD_SRC_SYSTEM,
  B.MD_START_DT AS SAT_RAP_CODE_MD_START_DT,
  B.PLAN_LABEL AS SAT_RAP_CODE_PLAN_LABEL
  FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.SAT_REF_RAPCODE_PLAN_IAS B
  JOIN LV2 A
  ON A.HK_HUB = B.HK_HUB
  AND A.O_MAX_DATE_LV2 = B.MD_START_DT
  WHERE B.MD_ACTIVE = ''''A'''' AND B.HK_HUB != ''''0''''
  ),
  JNR_REFF_P2 AS (
  SELECT
  NULL AS REF_RAP_CODE_A_C_ACCOUNT_CLASS,
  B.ACCOUNT_RAP_CODE AS REF_RAP_CODE_ACCOUNT_RAP_CODE,
  B.ASC_1_RESP_PLAN_TYPES AS REF_RAP_CODE_ASC_1_RESP_PLAN_TYPES,
  B.HK_HUB AS REF_RAP_CODE_HK_HUB,
  NULL AS REF_RAP_CODE_PLN_CD,
  B.RETAIL_PLAN AS REF_RAP_CODE_RETAIL_PLAN,
  NULL AS REF_RAP_CODE_RETAIL_PLAN_RESP,
  A.SAT_RAP_CODE_ACCOUNT_TYPE AS SAT_RAP_CODE_ACCOUNT_TYPE,
  A.SAT_RAP_CODE_ACCUMULATION_TYPE AS SAT_RAP_CODE_ACCUMULATION_TYPE,
  A.SAT_RAP_CODE_GROUP_TYPE_CODE AS SAT_RAP_CODE_GROUP_TYPE_CODE,
  A.SAT_RAP_CODE_HK_HUB AS SAT_RAP_CODE_HK_HUB,
  A.SAT_RAP_CODE_MD_ACTIVE AS SAT_RAP_CODE_MD_ACTIVE,
  A.SAT_RAP_CODE_PLAN_LABEL AS SAT_RAP_CODE_PLAN_LABEL
  FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.REF_RAPCODE_PLAN B
  JOIN SAT2 A
  ON A.SAT_RAP_CODE_HK_HUB = B.HK_HUB
  WHERE 
  B.ACCOUNT_RAP_CODE =''''P''''
  ), 
  JNR_REFF_NOT_P2 AS (
  SELECT
  NULL AS REF_RAP_CODE_A_C_ACCOUNT_CLASS,
  B.ACCOUNT_RAP_CODE AS REF_RAP_CODE_ACCOUNT_RAP_CODE,
  B.ASC_1_RESP_PLAN_TYPES AS REF_RAP_CODE_ASC_1_RESP_PLAN_TYPES,
  B.HK_HUB AS REF_RAP_CODE_HK_HUB,
  NULL AS REF_RAP_CODE_PLN_CD,
  B.RETAIL_PLAN AS REF_RAP_CODE_RETAIL_PLAN,
  NULL AS REF_RAP_CODE_RETAIL_PLAN_RESP,
  A.SAT_RAP_CODE_ACCOUNT_TYPE AS SAT_RAP_CODE_ACCOUNT_TYPE,
  A.SAT_RAP_CODE_ACCUMULATION_TYPE AS SAT_RAP_CODE_ACCUMULATION_TYPE,
  A.SAT_RAP_CODE_GROUP_TYPE_CODE AS SAT_RAP_CODE_GROUP_TYPE_CODE,
  A.SAT_RAP_CODE_HK_HUB AS SAT_RAP_CODE_HK_HUB,
  A.SAT_RAP_CODE_MD_ACTIVE AS SAT_RAP_CODE_MD_ACTIVE,
  A.SAT_RAP_CODE_PLAN_LABEL AS SAT_RAP_CODE_PLAN_LABEL
  FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.REF_RAPCODE_PLAN B
  JOIN SAT2 A
  ON A.SAT_RAP_CODE_HK_HUB = B.HK_HUB
  WHERE 
  B.ACCOUNT_RAP_CODE !=''''P'''' OR B.ACCOUNT_RAP_CODE IS NULL
  ),
  JNR_P_P2 AS (
  SELECT
	B.REF_A_C_ACCOUNT_CLASS AS REF_A_C_ACCOUNT_CLASS,
	B.REF_ACCOUNT_RAP_CODE AS REF_ACCOUNT_RAP_CODE,
	B.REF_HK_HUB AS REF_HK_HUB,
	B.REF_PLN_CD AS REF_PLN_CD,
	B.REF_RETAIL_PLAN AS REF_RETAIL_PLAN,
	B.REF_RETAIL_PLAN_RESP AS REF_RETAIL_PLAN_RESP,
	B.SAT_HK_HUB AS SAT_HK_HUB,
	B.SAT_MD_ACTIVE AS SAT_MD_ACTIVE,
	B.SAT_MD_EXTRACT_DT AS SAT_MD_EXTRACT_DT,
	B.SAT_MD_HASHDIFF AS SAT_MD_HASHDIFF,
	B.SAT_MD_SOURCE AS SAT_MD_SOURCE,
	B.SAT_MD_SRC_SYSTEM AS SAT_MD_SRC_SYSTEM,
	B.SAT_MD_START_DT AS SAT_MD_START_DT,
	A.REF_RAP_CODE_A_C_ACCOUNT_CLASS AS REF_RAP_CODE_A_C_ACCOUNT_CLASS,
	A.REF_RAP_CODE_ACCOUNT_RAP_CODE AS REF_RAP_CODE_ACCOUNT_RAP_CODE,
	A.REF_RAP_CODE_ASC_1_RESP_PLAN_TYPES AS REF_RAP_CODE_ASC_1_RESP_PLAN_TYPES,
	A.REF_RAP_CODE_HK_HUB AS REF_RAP_CODE_HK_HUB,
	A.REF_RAP_CODE_PLN_CD AS REF_RAP_CODE_PLN_CD,
	A.REF_RAP_CODE_RETAIL_PLAN AS REF_RAP_CODE_RETAIL_PLAN,
	A.REF_RAP_CODE_RETAIL_PLAN_RESP AS REF_RAP_CODE_RETAIL_PLAN_RESP,
	A.SAT_RAP_CODE_ACCOUNT_TYPE AS SAT_RAP_CODE_ACCOUNT_TYPE,
	A.SAT_RAP_CODE_ACCUMULATION_TYPE AS SAT_RAP_CODE_ACCUMULATION_TYPE,
	A.SAT_RAP_CODE_GROUP_TYPE_CODE AS SAT_RAP_CODE_GROUP_TYPE_CODE,
	A.SAT_RAP_CODE_HK_HUB AS SAT_RAP_CODE_HK_HUB,
	A.SAT_RAP_CODE_MD_ACTIVE AS SAT_RAP_CODE_MD_ACTIVE,
	A.SAT_RAP_CODE_PLAN_LABEL AS SAT_RAP_CODE_PLAN_LABEL
	FROM JNR_REFF_P B
	LEFT JOIN JNR_REFF_P2 A
	ON B.REF_RETAIL_PLAN = A.REF_RAP_CODE_RETAIL_PLAN
  ),
  JNR_NOT_P_P2 AS (
  SELECT
	B.REF_A_C_ACCOUNT_CLASS AS REF_A_C_ACCOUNT_CLASS,
	B.REF_ACCOUNT_RAP_CODE AS REF_ACCOUNT_RAP_CODE,
	B.REF_HK_HUB AS REF_HK_HUB,
	B.REF_PLN_CD AS REF_PLN_CD,
	B.REF_RETAIL_PLAN AS REF_RETAIL_PLAN,
	B.REF_RETAIL_PLAN_RESP AS REF_RETAIL_PLAN_RESP,
	B.SAT_HK_HUB AS SAT_HK_HUB,
	B.SAT_MD_ACTIVE AS SAT_MD_ACTIVE,
	B.SAT_MD_EXTRACT_DT AS SAT_MD_EXTRACT_DT,
	B.SAT_MD_HASHDIFF AS SAT_MD_HASHDIFF,
	B.SAT_MD_SOURCE AS SAT_MD_SOURCE,
	B.SAT_MD_SRC_SYSTEM AS SAT_MD_SRC_SYSTEM,
	B.SAT_MD_START_DT AS SAT_MD_START_DT,
	A.REF_RAP_CODE_A_C_ACCOUNT_CLASS AS REF_RAP_CODE_A_C_ACCOUNT_CLASS,
	A.REF_RAP_CODE_ACCOUNT_RAP_CODE AS REF_RAP_CODE_ACCOUNT_RAP_CODE,
	A.REF_RAP_CODE_ASC_1_RESP_PLAN_TYPES AS REF_RAP_CODE_ASC_1_RESP_PLAN_TYPES,
	A.REF_RAP_CODE_HK_HUB AS REF_RAP_CODE_HK_HUB,
	A.REF_RAP_CODE_PLN_CD AS REF_RAP_CODE_PLN_CD,
	A.REF_RAP_CODE_RETAIL_PLAN AS REF_RAP_CODE_RETAIL_PLAN,
	A.REF_RAP_CODE_RETAIL_PLAN_RESP AS REF_RAP_CODE_RETAIL_PLAN_RESP,
	A.SAT_RAP_CODE_ACCOUNT_TYPE AS SAT_RAP_CODE_ACCOUNT_TYPE,
	A.SAT_RAP_CODE_ACCUMULATION_TYPE AS SAT_RAP_CODE_ACCUMULATION_TYPE,
	A.SAT_RAP_CODE_GROUP_TYPE_CODE AS SAT_RAP_CODE_GROUP_TYPE_CODE,
	A.SAT_RAP_CODE_HK_HUB AS SAT_RAP_CODE_HK_HUB,
	A.SAT_RAP_CODE_MD_ACTIVE AS SAT_RAP_CODE_MD_ACTIVE,
	A.SAT_RAP_CODE_PLAN_LABEL AS SAT_RAP_CODE_PLAN_LABEL
	FROM JNR_REFF_NOT_P B
	LEFT JOIN JNR_REFF_NOT_P2 A
	ON B.REF_ACCOUNT_RAP_CODE = A.REF_RAP_CODE_ACCOUNT_RAP_CODE
  ),
  UN_PLANS AS (
  SELECT * FROM JNR_P_P2
  UNION ALL
  SELECT * FROM JNR_NOT_P_P2
  )
  SELECT 
  TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AS MD_START_DT,
  CURRENT_TIMESTAMP AS MD_CREATION_DT,
  SAT_MD_SOURCE AS MD_SOURCE,
  ''''IAS'''' AS MD_SRC_SYSTEM,
  SAT_MD_EXTRACT_DT AS MD_EXTRACT_DT,
  REF_RETAIL_PLAN AS RETAIL_PLAN,
  REF_ACCOUNT_RAP_CODE AS ACCOUNT_RAP_CODE,
  LTRIM(RTRIM(CASE WHEN REF_ACCOUNT_RAP_CODE = ''''Z'''' AND REF_RAP_CODE_ASC_1_RESP_PLAN_TYPES IS NULL THEN CONCAT(CASE WHEN REF_ACCOUNT_RAP_CODE IS NULL THEN '''' '''' ELSE REF_ACCOUNT_RAP_CODE END,''''_'''',(CASE WHEN REF_RETAIL_PLAN IS NULL THEN '''' '''' ELSE REF_RETAIL_PLAN END),''''_'''',''''0'''') ELSE CASE WHEN REF_ACCOUNT_RAP_CODE=''''Z'''' AND REF_RAP_CODE_ASC_1_RESP_PLAN_TYPES IS NOT NULL THEN CONCAT((CASE WHEN REF_ACCOUNT_RAP_CODE IS NULL THEN '''' '''' ELSE REF_ACCOUNT_RAP_CODE END),''''_'''',(CASE WHEN REF_RETAIL_PLAN IS NULL THEN '''' '''' ELSE REF_RETAIL_PLAN END),''''_'''',(CASE WHEN REF_RAP_CODE_ASC_1_RESP_PLAN_TYPES IS NULL THEN '''' '''' ELSE REF_RAP_CODE_ASC_1_RESP_PLAN_TYPES END)) ELSE CONCAT((CASE WHEN REF_ACCOUNT_RAP_CODE IS NULL THEN '''' '''' ELSE REF_ACCOUNT_RAP_CODE END),''''_'''',(CASE WHEN REF_RETAIL_PLAN IS NULL THEN '''' '''' ELSE REF_RETAIL_PLAN END)) END END)) AS PLN_CD,
  CASE WHEN SAT_RAP_CODE_PLAN_LABEL IS NULL THEN ''''N/A'''' ELSE SAT_RAP_CODE_PLAN_LABEL END AS PLAN_LABEL,
  CASE WHEN SAT_RAP_CODE_ACCOUNT_TYPE IS NULL THEN ''''N/A'''' ELSE CASE WHEN SAT_RAP_CODE_ACCOUNT_TYPE = ''''Non-Registered'''' THEN ''''Non Registered'''' ELSE SAT_RAP_CODE_ACCOUNT_TYPE END END AS ACCOUNT_TYPE,
  CASE WHEN SAT_RAP_CODE_GROUP_TYPE_CODE IS NULL THEN ''''N/A'''' ELSE SAT_RAP_CODE_GROUP_TYPE_CODE END AS GROUP_TYPE_CODE,
  SAT_RAP_CODE_ACCUMULATION_TYPE AS ACCUMULATION_TYPE,
  REF_RAP_CODE_ASC_1_RESP_PLAN_TYPES AS ASC_1_RESP_PLAN_TYPES
  FROM UN_PLANS)'';


UPD_QUERY := ''UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE
SET
HK_HUB=SHA1(UPPER(CONCAT(
                       COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#'''') ,''''|'''',
					   ''''#NULL#'''',''''|'''',
                       COALESCE(TRIM(ACCOUNT_RAP_CODE),''''#NULL#''''), ''''|'''',
                       COALESCE(TRIM(RETAIL_PLAN),''''#NULL#''''),''''|'''',
					   COALESCE(TRIM(ASC_1_RESP_PLAN_TYPES),''''#NULL#'''')
						 ))),
MD_HASHDIFF=SHA1(
				CONCAT(
				COALESCE(PLAN_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(PLAN_LABEL,''''#NULL#''''), ''''|'''',
				COALESCE(ACCOUNT_TYPE,''''#NULL#''''), ''''|'''',
				COALESCE(GROUP_TYPE_CODE,''''#NULL#'''')	,''''|'''',
                COALESCE(ACCUMULATION_TYPE,''''#NULL#'''') 				
				))
Where COALESCE (HK_HUB,'''''''') <>''''0''''
and MD_SRC_SYSTEM =''''IAS'''''';
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END


';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_SHARED_TO_WT_IAS_UNIVERIS_SATPLAN_COMPUTE(""ENV"" VARCHAR(1000), ""DATA_START_DATE"" VARCHAR(20))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE
WHERE MD_SRC_SYSTEM = ''''IAS-UNIVERIS'''''';

INS_QUERY:= ''INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE
(
MD_START_DT,
MD_CREATION_DT,
MD_CREATION_AUDIT_ID,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
RETAIL_PLAN,
ACCOUNT_RAP_CODE,
PLAN_CODE,
PLAN_LABEL,
ACCOUNT_TYPE,
GROUP_TYPE_CODE,
ACCUMULATION_TYPE)
(
WITH
  FLT_IAS_UniverisPlanNotInInvestia AS (
  SELECT
	B.HK_HUB AS HUB_LNV_HK_HUB,
	B.MD_SRC_SYSTEM AS HUB_LNV_MD_SRC_SYSTEM,
	B.PLN_MNEM AS HUB_LNV_PLN_MNEM,
	A.HK_HUB AS HUB_HK_HUB,
	A.MD_CREATION_DT AS HUB_MD_CREATION_DT,
	A.MD_CREATION_AUDIT_ID AS HUB_MD_CREATION_AUDIT_ID,
	A.MD_SOURCE AS HUB_MD_SOURCE,
	A.MD_SRC_SYSTEM AS HUB_MD_SRC_SYSTEM,
	A.MD_EXTRACT_DT AS HUB_MD_EXTRACT_DT,
	A.PLN_MNEM AS HUB_PLN_MNEM,
	A.A_C_ACCOUNT_CLASS AS HUB_A_C_ACCOUNT_CLASS,
	A.RETAIL_PLAN AS HUB_RETAIL_PLAN,
	A.RETAIL_PLAN_RESP AS HUB_RETAIL_PLAN_RESP,
	A.ACCOUNT_RAP_CODE AS HUB_ACCOUNT_RAP_CODE
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES B
	RIGHT JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES WHERE MD_SRC_SYSTEM =''''IAS-UNIVERIS'''') A
	ON B.PLN_MNEM = A.PLN_MNEM AND B.MD_SRC_SYSTEM =''''INVESTIA-UNIVERIS''''
	WHERE B.PLN_MNEM IS NULL
  ),
  AGG_MaxDataSartDate AS (
  SELECT
	HK_HUB as LV_HK_HUB,
	MAX(MD_START_DT) AS O_DATA_START_DATE
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_UNIVERIS
	WHERE MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')
	GROUP BY HK_HUB
  ),
  FLT_ACTIVE AS (
  SELECT
	A.LV_HK_HUB AS LV_HK_HUB,
	A.O_DATA_START_DATE AS O_DATA_START_DATE,
	B.HK_HUB AS RDV_SAT_HK_HUB,
	B.MD_START_DT AS RDV_SAT_MD_START_DT,
	B.MD_HASHDIFF AS RDV_SAT_MD_HASHDIFF,
	B.MD_CREATION_DT AS RDV_SAT_MD_CREATION_DT,
	B.MD_CREATION_AUDIT_ID AS  RDV_SAT_MD_CREATION_AUDIT_ID,
	B.MD_SOURCE AS RDV_SAT_MD_SOURCE,
	B.MD_SRC_SYSTEM AS RDV_SAT_MD_SRC_SYSTEM,
	B.MD_EXTRACT_DT AS RDV_SAT_MD_EXTRACT_DT,
	B.MD_ACTIVE AS RDV_SAT_MD_ACTIVE,
	B.PLN_REG AS RDV_SAT_PLN_REG,
	B.PLN_CD AS RDV_SAT_PLN_CD,
	B.PLN_DESC AS RDV_SAT_PLN_DESC,
	B.PLN_MNEM_F AS RDV_SAT_PLN_MNEM_F,
	B.PLN_DESC_F AS RDV_SAT_PLN_DESC_F,
	B.PLN_MNEM_ENG AS RDV_SAT_PLN_MNEM_ENG,
	B.PLN_DESC_ENG AS RDV_SAT_PLN_DESC_ENG,
	B.PLN_SHORT_DESC_ENG AS RDV_SAT_PLN_SHORT_DESC_ENG,
	B.PLN_MNEM_FRE AS RDV_SAT_PLN_MNEM_FRE,
	B.PLN_DESC_FRE AS RDV_SAT_PLN_DESC_FRE,
	B.PLN_SHORT_DESC_FRE AS RDV_SAT_PLN_SHORT_DESC_FRE,
	B.STMT_GROUP_MNEM AS RDV_SAT_STMT_GROUP_MNEM
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_UNIVERIS B
	JOIN AGG_MaxDataSartDate A 
	ON B.HK_HUB = A.LV_HK_HUB
	AND B.MD_START_DT = A.O_DATA_START_DATE
	WHERE RDV_SAT_MD_ACTIVE=''''A'''' and RDV_SAT_HK_HUB<>''''0''''
  ),
  JNR_hub_sat AS (
  SELECT 
	B.HUB_LNV_HK_HUB,
	B.HUB_LNV_MD_SRC_SYSTEM,
	B.HUB_LNV_PLN_MNEM,
	B.HUB_HK_HUB,
	B.HUB_MD_CREATION_DT,
	B.HUB_MD_CREATION_AUDIT_ID,
	B.HUB_MD_SOURCE,
	B.HUB_MD_SRC_SYSTEM,
	B.HUB_MD_EXTRACT_DT,
	B.HUB_PLN_MNEM,
	B.HUB_A_C_ACCOUNT_CLASS,
	B.HUB_RETAIL_PLAN,
	B.HUB_RETAIL_PLAN_RESP,
	B.HUB_ACCOUNT_RAP_CODE,
	A.RDV_SAT_HK_HUB,
	A.RDV_SAT_MD_START_DT,
	A.RDV_SAT_MD_HASHDIFF,
	A.RDV_SAT_MD_CREATION_DT,
	A.RDV_SAT_MD_CREATION_AUDIT_ID,
	A.RDV_SAT_MD_SOURCE,
	A.RDV_SAT_MD_SRC_SYSTEM,
	A.RDV_SAT_MD_EXTRACT_DT,
	A.RDV_SAT_MD_ACTIVE,
	A.RDV_SAT_PLN_REG,
	A.RDV_SAT_PLN_CD,
	A.RDV_SAT_PLN_DESC,
	A.RDV_SAT_PLN_MNEM_F,
	A.RDV_SAT_PLN_DESC_F,
	A.RDV_SAT_PLN_MNEM_ENG,
	A.RDV_SAT_PLN_DESC_ENG,
	A.RDV_SAT_PLN_SHORT_DESC_ENG,
	A.RDV_SAT_PLN_MNEM_FRE,
	A.RDV_SAT_PLN_DESC_FRE,
	A.RDV_SAT_PLN_SHORT_DESC_FRE,
	A.RDV_SAT_STMT_GROUP_MNEM
	FROM FLT_IAS_UniverisPlanNotInInvestia B
	JOIN FLT_ACTIVE A 
	ON B.HUB_HK_HUB = A.RDV_SAT_HK_HUB
  )
  SELECT 
  TO_DATE(''||DATA_START_DATE||'', ''''YYYY-MM-DD'''') AS MD_START_DT,
  CURRENT_TIMESTAMP AS MD_CREATION_DT,
  hub_MD_CREATION_AUDIT_ID,
  hub_MD_SOURCE,
  hub_MD_SRC_SYSTEM,
  hub_MD_EXTRACT_DT,
  hub_RETAIL_PLAN,
  hub_ACCOUNT_RAP_CODE,
  hub_PLN_MNEM,
  rdv_sat_PLN_DESC,
  CASE WHEN RDV_SAT_PLN_REG = 0 THEN ''''Non registered'''' else ''''Registered'''' end as ACCOUNT_TYPE,
  rdv_sat_STMT_GROUP_MNEM,
  ''''N/A'''' AS ACCUMULATION_TYPE
  FROM JNR_hub_sat)'';
  
  
UPD_QUERY := ''UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE
SET
HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#'''') ,''''|'''',
                        COALESCE(TRIM(PLAN_CODE),''''#NULL#''''), ''''|'''',
                       ''''#NULL#'''', ''''|'''',
                         ''''#NULL#'''',''''|'''',
						 ''''#NULL#''''
						 ))),
MD_HASHDIFF=SHA1(
				CONCAT(
				COALESCE(PLAN_LABEL,''''#NULL#''''), ''''|'''',
				COALESCE(ACCOUNT_TYPE,''''#NULL#''''), ''''|'''',
				COALESCE(GROUP_TYPE_CODE,''''#NULL#''''),''''|'''',
                COALESCE(ACCUMULATION_TYPE,''''#NULL#'''') 	
				))
Where COALESCE (HK_HUB,'''''''') <>''''0''''
and MD_SRC_SYSTEM =''''IAS-UNIVERIS'''''';
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END


';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_SHARED_TO_WT_INVESTIA_UNIVERIS_SATPLAN_COMPUTE(""ENV"" VARCHAR(1000), ""DATA_START_DATE"" VARCHAR(20))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE
WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''''';
INS_QUERY :=''INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE(
MD_START_DT,
MD_CREATION_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
RETAIL_PLAN,
ACCOUNT_RAP_CODE,
PLAN_CODE,
PLAN_LABEL,
ACCOUNT_TYPE,
GROUP_TYPE_CODE,
ACCUMULATION_TYPE
)
(
WITH
  LV AS (
  SELECT
	HK_HUB,
	MD_START_DT AS O_MAX_DATE_LV,
	MD_HASHDIFF,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	MD_ACTIVE
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_INVESTIA_UNIVERIS
	WHERE MD_START_DT <= TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''')
	QUALIFY ROW_NUMBER() OVER (PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) = 1
  ),
  SAT AS (
      SELECT
		B.HK_HUB AS SAT_HK_HUB,
		B.MD_ACTIVE AS SAT_MD_ACTIVE,
		B.MD_EXTRACT_DT AS SAT_MD_EXTRACT_DT,
		B.MD_HASHDIFF AS SAT_MD_HASHDIFF,
		B.MD_SOURCE AS SAT_MD_SOURCE,
		B.MD_SRC_SYSTEM AS SAT_MD_SRC_SYSTEM,
		B.MD_START_DT AS SAT_MD_START_DT,
		B.PLN_DESC AS PLAN_LABEL,
		CASE WHEN B.PLN_REG = 0 THEN ''''Non registered'''' ELSE ''''Registered'''' END AS ACCOUNT_TYPE,
		B.STMT_GROUP_MNEM AS GROUP_TYPE_CODE,
		''''N/A'''' AS ACCUMULATION_TYPE
		FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_INVESTIA_UNIVERIS B
		JOIN LV A
        ON A.HK_HUB = B.HK_HUB
		AND A.O_MAX_DATE_LV = B.MD_START_DT
		WHERE B.MD_ACTIVE = ''''A'''' AND B.HK_HUB != ''''0''''
  ),
  JNR_REF AS (
	SELECT
		B.RETAIL_PLAN AS REF_RETAIL_PLAN,
		B.ACCOUNT_RAP_CODE AS REF_ACCOUNT_RAP_CODE,
		B.PLN_MNEM AS PLAN_CODE,
		A.PLAN_LABEL,
		A.ACCOUNT_TYPE,
		A.GROUP_TYPE_CODE,
		A.ACCUMULATION_TYPE,
		B.HK_HUB AS REF_HK_HUB,
		A.SAT_MD_EXTRACT_DT AS SAT_MD_EXTRACT_DT,
		A.SAT_MD_SOURCE AS SAT_MD_SOURCE,
		A.SAT_MD_SRC_SYSTEM AS SAT_MD_SRC_SYSTEM
		FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES B
		JOIN SAT A 
		ON A.SAT_HK_HUB = B.HK_HUB
  )
  SELECT 
  TO_DATE(''||DATA_START_DATE||'',''''YYYY-MM-DD'''') AS MD_START_DT,
  CURRENT_TIMESTAMP AS MD_CREATION_DT,
  SAT_MD_SOURCE AS MD_SOURCE,
  SAT_MD_SRC_SYSTEM AS MD_SRC_SYSTEM,
  SAT_MD_EXTRACT_DT AS MD_EXTRACT_DT,
  REF_RETAIL_PLAN AS RETAIL_PLAN,
  REF_ACCOUNT_RAP_CODE AS ACCOUNT_RAP_CODE,
  PLAN_CODE,
  PLAN_LABEL,
  ACCOUNT_TYPE,
  GROUP_TYPE_CODE,
  ACCUMULATION_TYPE
  FROM JNR_REF)'';


UPD_QUERY := ''UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE
SET 
   HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#'''') ,''''|'''',COALESCE(TRIM(PLAN_CODE),''''#NULL#''''), ''''|'''',  ''''#NULL#'''', ''''|'''',  ''''#NULL#'''',''''|'''',	 ''''#NULL#'''' ))),
MD_HASHDIFF=SHA1(
				CONCAT(
				COALESCE(PLAN_LABEL,''''#NULL#''''), ''''|'''',
				COALESCE(ACCOUNT_TYPE,''''#NULL#''''), ''''|'''',
				COALESCE(GROUP_TYPE_CODE,''''#NULL#''''),''''|'''',
                COALESCE(ACCUMULATION_TYPE,''''#NULL#'''') 	
				))
Where COALESCE (HK_HUB,'''''''') <>''''0'''' 
and MD_SRC_SYSTEM =''''INVESTIA-UNIVERIS'''';
'';
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END


';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_SHARED_TO_WT_SATACCOUNTHOLDER_COMPUTE(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;
BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_COMPUTE WHERE MD_SRC_SYSTEM = ''''IAS'''' OR MD_SRC_SYSTEM= ''''NA'''' '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_COMPUTE (HK_HUB,MD_START_DT,MD_CREATION_DT,MD_SOURCE,MD_SRC_SYSTEM,MD_EXTRACT_DT,INCOME_AMT,INCOME_LEVEL_1_SEGMENT,INCOME_LEVEL_1_SEGMENT_ORD,INCOME_LEVEL_2_SEGMENT,INCOME_LEVEL_2_SEGMENT_ORD,AGE_SEGMENT,AGE_SEGMENT_ORD,NEW_CLIENT_IND,CLIENT_START_DT,CLIENT_INV_KNOWLEDGE_LVL,CLIENT_NAME,CLIENT_AGE)
SELECT rdv.HK_HUB
	,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
	,CURRENT_TIMESTAMP
	,rdv.MD_SOURCE
	,rdv.MD_SRC_SYSTEM
	,rdv.MD_EXTRACT_DT
	,clean.CLIENT_ANNUAL_GROSS_INC_CLEAN
	,BUSINESS_RULES.UDF_CONV_BR_ALL_CLIENTS_002(clean.CLIENT_ANNUAL_GROSS_INC_CLEAN)[''''o_INCOME_LEVEL_1_SEGMENT'''']
	,BUSINESS_RULES.UDF_CONV_BR_ALL_CLIENTS_002(clean.CLIENT_ANNUAL_GROSS_INC_CLEAN)[''''o_INCOME_LEVEL_1_SEGMENT_ORD'''']
	,BUSINESS_RULES.UDF_CONV_BR_ALL_CLIENTS_001(clean.CLIENT_ANNUAL_GROSS_INC_CLEAN)[''''o_INCOME_LEVEL_2_SEGMENT'''']
	,BUSINESS_RULES.UDF_CONV_BR_ALL_CLIENTS_001(clean.CLIENT_ANNUAL_GROSS_INC_CLEAN)[''''o_INCOME_LEVEL_2_SEGMENT_ORD'''']
	,BUSINESS_RULES.UDF_CONV_BR_ALL_CLIENTS_003(rdv.CLIENT_BIRTH_DATE, rdv.MD_START_DT,(CASE WHEN rdv.CLIENT_TAX_RECIP_TYPE IN (''''0'''',''''3'''',''''4'''',''''5'''') THEN ''''True'''' ELSE ''''False'''' END))[''''o_AGE_SEGMENT'''']
	,BUSINESS_RULES.UDF_CONV_BR_ALL_CLIENTS_003(rdv.CLIENT_BIRTH_DATE, rdv.MD_START_DT,(CASE WHEN rdv.CLIENT_TAX_RECIP_TYPE IN (''''0'''',''''3'''',''''4'''',''''5'''') THEN ''''True'''' ELSE ''''False'''' END))[''''o_AGE_SEGMENT_ORD'''']
	,BUSINESS_RULES.UDF_CONV_BR_ALL_CLIENTS_004(rdv.MD_START_DT, rdv.CLIENT_INIT_CONTRACT_DATE)
	, o_client_start_date  
	,clean.CLIENT_INV_KNOWLEDGE_LVL
	,clean.CLIENT_NAME
	,clean.CLIENT_AGE
	FROM (
		SELECT *
		FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_IAS_NBIN
		) rdv
		JOIN (
		SELECT *
		FROM (
			SELECT *
				,ROW_NUMBER() OVER (
					PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
					) RN
			FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_IAS_NBIN lv
            WHERE lv.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
			) SATHUB
		WHERE SATHUB.RN = 1
		) lv ON lv.HK_HUB = rdv.HK_HUB AND lv.MD_START_DT = rdv.MD_START_DT AND rdv.MD_ACTIVE=''''A'''' 
	JOIN DB_IAW_''||ENV||''_DWH.SHARED_RDV.HUB_PARTY_ROLE_ACCOUNT_HOLDER lv1 ON lv1.HK_HUB = rdv.HK_HUB
	LEFT JOIN DB_IAW_''||ENV||''_DWH.SHARED_BDV.VW_PARTY_ROLE_ACCOUNT_HOLDER_CLEAN clean ON clean.HK_HUB = rdv.HK_HUB AND clean.MD_START_DT = rdv.MD_START_DT AND clean.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
	LEFT JOIN (
		SELECT A_C_CLIENT,  MIN(A_C_OPEN_DATE) o_client_start_date
        FROM (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_IAS_NBIN S INNER JOIN
       (SELECT hk_hub, MAX(MD_START_DT) o_MAX_START_DATE FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_IAS_NBIN  
       WHERE  MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
        GROUP BY hk_hub) LV ON LV.HK_HUB = S.HK_HUB and o_MAX_START_DATE = S.MD_START_DT
	    WHERE MD_ACTIVE = ''''A'''' )
       GROUP BY  A_C_CLIENT
		) lv3 ON lv3.A_C_CLIENT = lv1.CLIENT_ID	
              '';
INS_UPDATE :=''UPDATE SHARED_BDV.WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_COMPUTE
SET
	MD_HASHDIFF=SHA1(
				CONCAT(
				COALESCE(TO_VARCHAR(INCOME_AMT),''''#NULL#''''), ''''|'''', 
				COALESCE(INCOME_LEVEL_1_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(INCOME_LEVEL_1_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(INCOME_LEVEL_2_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(INCOME_LEVEL_2_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
								COALESCE(AGE_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(AGE_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(NEW_CLIENT_IND,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(CLIENT_START_DT),''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(CLIENT_NAME),''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(CLIENT_AGE),''''#NULL#'''')
				))
Where HK_HUB <> ''''0'''' AND MD_SRC_SYSTEM = ''''IAS''''
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_SHARED_TO_WT_SAT_INVESTMENTPRODUCTTYPE(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''TRUNCATE TABLE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_INVESTMENT_PRODUCT_TYPE  '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_INVESTMENT_PRODUCT_TYPE(
HK_HUB
,MD_START_DT
,MD_HASHDIFF
,MD_CREATION_DT
,MD_CREATION_AUDIT_ID
,MD_SOURCE
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,SYMBOL
,NAME
,ASSET_CATEGORY
,CATEGORY
,PRODUCT_GROUP
,ISSUER_COMPANY_CODE
,ISSUER_COMPANY_NAME
)
SELECT 
UNI.HK_HUB
,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
,UNI.MD_HASHDIFF
,CURRENT_TIMESTAMP
,UNI.MD_CREATION_AUDIT_ID
,UNI.MD_SOURCE
,UNI.MD_SRC_SYSTEM
,UNI.MD_EXTRACT_DT
,UNI.SYMBOL
,UNI.IVT_NAME_ENG
,UNI.ASSET_CTGY_DESC_ENG
,CASE WHEN (UNI.CTGY_DESC_ENG = ''''Mutual Funds'''' OR UNI.CTGY_DESC_ENG= ''''Mutual Fund'''') THEN   ''''Mutual Funds'''' ELSE UNI.CTGY_DESC_ENG END
,UNI.GROUP_DESC_ENG
,UNI.MGT_CD
,UNI.MGT_NAME_ENG
FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_UNIVERIS UNI 
JOIN 
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_UNIVERIS WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) UNICV ON UNI.HK_HUB = UNICV.HK_HUB AND UNI.MD_START_DT = UNICV.MD_START_DT
JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.HUB_INVESTMENT_PRODUCT_TYPE WHERE HK_HUB <> ''''0'''' AND MD_SRC_SYSTEM = ''''IAS-UNIVERIS'''') HUB_IAS ON UNI.HK_HUB = HUB_IAS.HK_HUB
WHERE UNI.MD_ACTIVE = ''''A'''' AND UNI.HK_HUB <> ''''0''''
UNION
SELECT 
INV.HK_HUB
,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
,INV.MD_HASHDIFF
,CURRENT_TIMESTAMP
,INV.MD_CREATION_AUDIT_ID
,INV.MD_SOURCE
,INV.MD_SRC_SYSTEM
,INV.MD_EXTRACT_DT
,INV.SYMBOL
,INV.IVT_NAME_ENG
,INV.ASSET_CTGY_DESC_ENG
,CASE WHEN (INV.CTGY_DESC_ENG = ''''Mutual Funds'''' OR INV.CTGY_DESC_ENG= ''''Mutual Fund'''') THEN   ''''Mutual Funds'''' ELSE INV.CTGY_DESC_ENG END
,INV.GROUP_DESC_ENG
,INV.MGT_CD
,INV.MGT_NAME_ENG
FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_INVESTIA_UNIVERIS INV 
JOIN 
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_INVESTIA_UNIVERIS WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) INVCV ON INV.HK_HUB = INVCV.HK_HUB AND INV.MD_START_DT = INVCV.MD_START_DT
JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.HUB_INVESTMENT_PRODUCT_TYPE WHERE HK_HUB <> ''''0'''' AND MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''') HUB_INV ON INV.HK_HUB = HUB_INV.HK_HUB
WHERE INV.MD_ACTIVE = ''''A'''' AND INV.HK_HUB <> ''''0''''
UNION
SELECT 
RDV1.HK_HUB
,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
,RDV1.MD_HASHDIFF
,CURRENT_TIMESTAMP
,RDV1.MD_CREATION_AUDIT_ID
,RDV1.MD_SOURCE
,RDV1.MD_SRC_SYSTEM
,RDV1.MD_EXTRACT_DT
,RDV1.TI_SYMBOL
,RDV1.ENGLISH_DESCRIPTION
,RDV3.ASSET_CATEGORY
,CASE WHEN (RDV2.DESCRIPTIONEN= ''''Mutual Funds'''' OR RDV2.DESCRIPTIONEN = ''''Mutual Fund'''') THEN ''''Mutual Funds'''' WHEN RDV2.DESCRIPTIONEN = ''''Fixed Income Securities'''' THEN ''''Fixed Income'''' WHEN (RDV3.ASSET_CATEGORY = ''''Bonds'''' OR RDV3.ASSET_CATEGORY  = ''''Conv. Marginable Security'''' OR RDV3.ASSET_CATEGORY  =  ''''Strip/Bonds'''' OR RDV3.ASSET_CATEGORY  = ''''Strip/Coupons'''') THEN  ''''Fixed Income'''' WHEN (RDV3.ASSET_CATEGORY  = ''''Call - Stock Option'''' OR RDV3.ASSET_CATEGORY  = ''''Option Eligible'''') THEN ''''Options'''' WHEN (RDV3.ASSET_CATEGORY  = ''''Common Stock'''' OR RDV3.ASSET_CATEGORY  = ''''Unit without Debt'''') THEN  ''''Equities'''' WHEN RDV3.ASSET_CATEGORY  = ''''Mutual Funds'''' THEN ''''Mutual Funds'''' ELSE RDV2.DESCRIPTIONEN END
,RDV2.DESCRIPTIONEN
,NULL
,NULL
FROM
(SELECT RDV_IAS.* FROM  DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_NBIN RDV_IAS 
JOIN 
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_NBIN WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) RDV_IASCV ON RDV_IAS.HK_HUB = RDV_IASCV.HK_HUB AND RDV_IAS.MD_START_DT = RDV_IASCV.MD_START_DT
JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.HUB_INVESTMENT_PRODUCT_TYPE WHERE HK_HUB <> ''''0'''' AND MD_SRC_SYSTEM = ''''IAS'''') HUB_IAS ON RDV_IAS.HK_HUB = HUB_IAS.HK_HUB
WHERE RDV_IAS.MD_ACTIVE = ''''A'''' AND RDV_IAS.HK_HUB <> ''''0'''') RDV1
LEFT JOIN 
(SELECT HUB_REF.TI_ALTERNATE_TI_TYPE,HUB_REF.TI_ALTERNATE_TI_CLASS,RDV_REF.* FROM  DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REF_MAPPING_PRODUCT_TYPE_IAS_IAVM RDV_REF 
JOIN 
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REF_MAPPING_PRODUCT_TYPE_IAS_IAVM WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) RDV_REFCV ON RDV_REF.HK_HUB = RDV_REFCV.HK_HUB AND RDV_REF.MD_START_DT = RDV_REFCV.MD_START_DT
JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.REF_MAPPING_PRODUCT_TYPE WHERE HK_HUB <> ''''0'''') HUB_REF ON RDV_REF.HK_HUB = HUB_REF.HK_HUB
WHERE RDV_REF.MD_ACTIVE = ''''A'''' AND RDV_REF.HK_HUB <> ''''0'''') RDV2
ON RDV1.TI_ALTERNATE_TI_TYPE = RDV2.TI_ALTERNATE_TI_TYPE AND RDV1.TI_ALTERNATE_TI_CLASS = RDV2.TI_ALTERNATE_TI_CLASS
LEFT JOIN
(SELECT HUB_PRO.TI_ALTERNATE_TI_TYPE,RDV_PRO.* FROM  DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.SAT_REF_PRODUCT_ASSET_CATEGORY_IAS RDV_PRO 
JOIN 
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.SAT_REF_PRODUCT_ASSET_CATEGORY_IAS WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) RDV_PROCV ON RDV_PRO.HK_HUB = RDV_PROCV.HK_HUB AND RDV_PRO.MD_START_DT = RDV_PROCV.MD_START_DT
JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.REF_PRODUCT_ASSET_CATEGORY WHERE HK_HUB <> ''''0'''') HUB_PRO ON RDV_PRO.HK_HUB = HUB_PRO.HK_HUB
WHERE RDV_PRO .MD_ACTIVE = ''''A'''' AND RDV_PRO .HK_HUB <> ''''0'''' ) RDV3 
ON RDV1.TI_ALTERNATE_TI_TYPE = RDV3.TI_ALTERNATE_TI_TYPE
              '';
			  
INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE
SET
	MD_HASHDIFF=
SHA1(CONCAT(COALESCE(SYMBOL, ''''#NULL#''''), ''''|'''',COALESCE(""NAME"", ''''#NULL#''''), ''''|'''' , COALESCE(ASSET_CATEGORY, ''''#NULL#''''), ''''|'''' , COALESCE(CATEGORY, ''''#NULL#''''), ''''|'''' , COALESCE(PRODUCT_GROUP,''''#NULL#''''), ''''|'''', COALESCE(ISSUER_COMPANY_CODE,''''#NULL#''''), ''''|'''', COALESCE(ISSUER_COMPANY_NAME,''''#NULL#'''') ))	
Where HK_HUB <> ''''0'''';
'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_SHARED_TO_WT_SAT_INVESTMENTPRODUCTTYPE_COMPUTE(""ENV"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN

INS_PRE_DEL := ''TRUNCATE TABLE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE  '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE
(HK_HUB
,MD_START_DT
,MD_CREATION_DT
,MD_SOURCE
,MD_CREATION_AUDIT_ID
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,SYMBOL
,NAME
,ASSET_CATEGORY
,CATEGORY
,PRODUCT_GROUP
,ISSUER_COMPANY_CODE
,ISSUER_COMPANY_NAME)
SELECT
HK_HUB
,MD_START_DT
,MD_CREATION_DT
,MD_SOURCE
,MD_CREATION_AUDIT_ID
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,SYMBOL
,PRODUCT_NAME
,ASSET_CATEGORY
,CATEGORY
,PRODUCT_GROUP
,ISSUER_COMPANY_CODE
,ISSUER_COMPANY_NAME
FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.VW_INVESTMENT_PRODUCT_TYPE_COMPUTE
              '';
			  
INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE
SET
	MD_HASHDIFF=
SHA1(CONCAT(COALESCE(SYMBOL, ''''#NULL#''''), ''''|'''',COALESCE(NAME, ''''#NULL#''''), ''''|'''' , COALESCE(ASSET_CATEGORY, ''''#NULL#''''), ''''|'''' , COALESCE(CATEGORY, ''''#NULL#''''), ''''|'''' , COALESCE(PRODUCT_GROUP,''''#NULL#''''), ''''|'''', COALESCE(ISSUER_COMPANY_CODE,''''#NULL#''''), ''''|'''', COALESCE(ISSUER_COMPANY_NAME,''''#NULL#'''') ))	
Where HK_HUB <> ''''0'''';
'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_SHARED_TO_WT_SAT_INVESTMENTPRODUCTTYPE_MERGE(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''TRUNCATE TABLE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_INVESTMENT_PRODUCT_TYPE_MERGE  '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_INVESTMENT_PRODUCT_TYPE_MERGE
(
HK_HUB
,MD_START_DT
,MD_CREATION_DT
,MD_CREATION_AUDIT_ID
,MD_SOURCE
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,SYMBOL
,NAME
,ISSUER_COMPANY_NAME
)
SELECT 
O_HK_HUB
,O_MD_START_DT
,O_MD_CREATION_DT
,O_MD_CREATION_AUDIT_ID
,O_MD_SOURCE
,O_MD_SRC_SYSTEM
,O_MD_EXTRACT_DT
,VW_SYMBOL
,O_PRODUCT_NAME
,O_ISSUER_NAME
FROM
( SELECT 
CASE WHEN RDV1.FUNDDESCEN IS NOT NULL THEN RDV1.FUNDDESCEN WHEN RDV2.IVT_NAME_ENG IS NOT NULL THEN RDV2.IVT_NAME_ENG WHEN RDV3.IVT_NAME_ENG IS NOT NULL THEN RDV3.IVT_NAME_ENG ELSE RDV4.ENGLISH_DESCRIPTION END AS O_PRODUCT_NAME
,CASE WHEN RDV1.GROUPNAMEEN IS NOT NULL THEN RDV1.GROUPNAMEEN WHEN RDV2.MGT_NAME_ENG IS NOT NULL THEN RDV2.MGT_NAME_ENG WHEN RDV3.MGT_NAME_ENG IS NOT NULL THEN RDV3.MGT_NAME_ENG END AS O_ISSUER_NAME
,CASE WHEN RDV1.HK_HUB IS NOT NULL THEN RDV1.HK_HUB WHEN RDV2.HK_HUB IS NOT NULL THEN RDV2.HK_HUB WHEN RDV3.HK_HUB IS NOT NULL THEN RDV3.HK_HUB ELSE RDV4.HK_HUB END AS O_HK_HUB
,CASE WHEN RDV1.MD_CREATION_DT IS NOT NULL THEN RDV1.MD_CREATION_DT WHEN RDV2.MD_CREATION_DT IS NOT NULL THEN RDV2.MD_CREATION_DT WHEN RDV3.MD_CREATION_DT IS NOT NULL THEN RDV3.MD_CREATION_DT ELSE RDV4.MD_CREATION_DT END AS O_MD_CREATION_DT
,CASE WHEN RDV1.MD_CREATION_AUDIT_ID IS NOT NULL THEN RDV1.MD_CREATION_AUDIT_ID WHEN RDV2.MD_CREATION_AUDIT_ID IS NOT NULL THEN RDV2.MD_CREATION_AUDIT_ID WHEN RDV3.MD_CREATION_AUDIT_ID IS NOT NULL THEN RDV3.MD_CREATION_AUDIT_ID ELSE RDV4.MD_CREATION_AUDIT_ID END AS O_MD_CREATION_AUDIT_ID
,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''') AS O_MD_START_DT
,CASE WHEN RDV1.MD_SOURCE IS NOT NULL THEN RDV1.MD_SOURCE WHEN RDV2.MD_SOURCE IS NOT NULL THEN RDV2.MD_SOURCE WHEN RDV3.MD_SOURCE IS NOT NULL THEN RDV3.MD_SOURCE ELSE RDV4.MD_SOURCE END AS O_MD_SOURCE
,CASE WHEN RDV2.MD_SRC_SYSTEM IS NOT NULL THEN RDV2.MD_SRC_SYSTEM WHEN RDV3.MD_SRC_SYSTEM IS NOT NULL THEN RDV3.MD_SRC_SYSTEM ELSE RDV4.MD_SRC_SYSTEM END AS O_MD_SRC_SYSTEM
,CASE WHEN RDV1.MD_EXTRACT_DT IS NOT NULL THEN RDV1.MD_EXTRACT_DT WHEN RDV2.MD_EXTRACT_DT IS NOT NULL THEN RDV2.MD_EXTRACT_DT WHEN RDV3.MD_EXTRACT_DT IS NOT NULL THEN RDV3.MD_EXTRACT_DT ELSE RDV4.MD_EXTRACT_DT END AS O_MD_EXTRACT_DT
,VW.SYMBOL AS VW_SYMBOL

FROM

(SELECT *
				,ROW_NUMBER() OVER (
					PARTITION BY SYMBOL ORDER BY MD_START_DT DESC
					) RN
			FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.VW_INVESTMENT_PRODUCT_SYMBOLS WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) VW
		
LEFT JOIN 			
			
(SELECT HUB_FUND.*,RDV_FUND.FUNDDESCEN,RDV_FUND.GROUPNAMEEN FROM  DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REF_FUND_IAS_FUNDATA RDV_FUND 
JOIN 
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REF_FUND_IAS_FUNDATA WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) RDV_FUNDCV ON RDV_FUND.HK_HUB = RDV_FUNDCV.HK_HUB AND RDV_FUND.MD_START_DT = RDV_FUNDCV.MD_START_DT
JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.REF_FUND WHERE HK_HUB <> ''''0'''') HUB_FUND ON RDV_FUND.HK_HUB = HUB_FUND.HK_HUB
WHERE RDV_FUND.MD_ACTIVE = ''''A'''' AND RDV_FUND.HK_HUB <> ''''0'''') RDV1

ON VW.SYMBOL = 	RDV1.FUNDSERVID

LEFT JOIN 

(SELECT INV.* FROM  DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_INVESTIA_UNIVERIS INV 
JOIN 
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_INVESTIA_UNIVERIS WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) INVCV ON INV.HK_HUB = INVCV.HK_HUB AND INV.MD_START_DT = INVCV.MD_START_DT
WHERE INV.MD_ACTIVE = ''''A'''' AND INV.HK_HUB <> ''''0'''') RDV2

ON VW.SYMBOL = RDV2.SYMBOL

LEFT JOIN

(SELECT UNI.* FROM  DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_UNIVERIS UNI 
JOIN 
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_UNIVERIS WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) UNICV ON UNI.HK_HUB = UNICV.HK_HUB AND UNI.MD_START_DT = UNICV.MD_START_DT
JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.HUB_INVESTMENT_PRODUCT_TYPE WHERE HK_HUB <> ''''0'''') HUB_UNI ON UNI.HK_HUB = HUB_UNI.HK_HUB
WHERE UNI.MD_ACTIVE = ''''A'''' AND UNI.HK_HUB <> ''''0'''') RDV3

ON VW.SYMBOL = RDV3.SYMBOL

LEFT JOIN 

(SELECT IAS.* FROM  DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_NBIN IAS 
JOIN 
(SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_NBIN WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')) CV WHERE CV.RN = 1) IASCV ON IAS.HK_HUB = IASCV.HK_HUB AND IAS.MD_START_DT = IASCV.MD_START_DT
JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.HUB_INVESTMENT_PRODUCT_TYPE WHERE HK_HUB <> ''''0'''') HUB_IAS ON IAS.HK_HUB = HUB_IAS.HK_HUB
WHERE IAS.MD_ACTIVE = ''''A'''' AND IAS.HK_HUB <> ''''0'''') RDV4

ON VW.SYMBOL = RDV4.TI_SYMBOL

) RDV GROUP BY (O_HK_HUB ,O_MD_START_DT ,O_MD_CREATION_DT ,O_MD_CREATION_AUDIT_ID ,O_MD_SOURCE ,O_MD_SRC_SYSTEM ,O_MD_EXTRACT_DT ,VW_SYMBOL ,O_PRODUCT_NAME ,O_ISSUER_NAME )
              '';
			  
INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_INVESTMENT_PRODUCT_TYPE_COMPUTE
SET
	MD_HASHDIFF=
SHA1(CONCAT(COALESCE(SYMBOL, ''''#NULL#''''), ''''|'''',COALESCE(""NAME"", ''''#NULL#''''), ''''|'''' , COALESCE(ASSET_CATEGORY, ''''#NULL#''''), ''''|'''' , COALESCE(CATEGORY, ''''#NULL#''''), ''''|'''' , COALESCE(PRODUCT_GROUP,''''#NULL#''''), ''''|'''', COALESCE(ISSUER_COMPANY_CODE,''''#NULL#''''), ''''|'''', COALESCE(ISSUER_COMPANY_NAME,''''#NULL#'''') ))	
Where HK_HUB <> ''''0'''';
'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_SHARE_IAS_COMMISSION_TO_BDV_LINK_SHARE(""ENV"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_QUERY STRING;

BEGIN

INS_QUERY := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE
(HK_LINK, HK_HUB_REGISTERED_REPRESENTATIVE, HK_HUB_PARTY_ROLE_ADVISOR, MD_CREATION_DT, MD_CREATION_AUDIT_ID, MD_SOURCE, MD_SRC_SYSTEM, MD_EXTRACT_DT, A_C_REPRESENTATIVE, MASTER_CODE)
SELECT DISTINCT
HK_LINK,
HK_HUB_REGISTERED_REPRESENTATIVE,
HK_HUB_PARTY_ROLE_ADVISOR,
CURRENT_TIMESTAMP AS MD_CREATION_DT,
''''tf_INITIAL_LOADING_LoadBDV_40_Share_Share-Manual'''' AS MD_CREATION_AUDIT_ID,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
A_C_REPRESENTATIVE,
MASTER_CODE
FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.VW_INITIAL_LOADING_WT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE
              '';
			  
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_SHARE_TO_BDV_SAT_LINK_SHARE_MULTI_IMAGE(""ENV"" VARCHAR(1000), ""I_AUDIT_ID"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_INSERT STRING;

BEGIN
I_AUDIT_ID :=CHAR(39)||I_AUDIT_ID||CHAR(39);
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE (
HK_LINK
,MD_START_DT
,MD_HASHDIFF
,MD_CREATION_DT
,MD_CREATION_AUDIT_ID
,MD_SOURCE
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,MD_ACTIVE
,COM_TYPE
,COMMISSIONPCT
,IS_RESHARED
,PHYSICAL
,TOREPID
)

SELECT 
STG.HK_LINK
,STG.MD_START_DT
,STG.MD_HASHDIFF
,CURRENT_TIMESTAMP
,''||I_AUDIT_ID||''
,STG.MD_SOURCE
,STG.MD_SRC_SYSTEM
,STG.MD_EXTRACT_DT
,STG.MD_ACTIVE
,STG.COM_TYPE
,STG.COMMISSIONPCT
,STG.IS_RESHARED
,STG.PHYSICAL
,STG.TOREPID
FROM
DB_IAW_''||ENV||''_DWH.SHARED_BDV.VW_INITIAL_LOADING_SAT_LINK_COMMISSION_SHARE_MULTIIMAGE SAT
LEFT JOIN
DB_IAW_''||ENV||''_DWH.SHARED_BDV.VW_INITIAL_LOADING_WT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE  STG
ON
STG.HK_LINK = STG.HK_LINK AND STG.MD_START_DT = STG.MD_START_DT AND STG.MD_HASHDIFF = STG.MD_HASHDIFF AND STG.MD_ACTIVE = STG.MD_ACTIVE
WHERE SAT.ROW_SRC = ''''STG''''

			
              '';

EXECUTE IMMEDIATE :INS_INSERT;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_UNIVERIS_HOLDINGS_TO_BDV_WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_AUA_SEG_COMPUTE(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_AUA_SEG_COMPUTE WHERE MD_SRC_SYSTEM = ''''IAS-UNIVERIS'''' '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_AUA_SEG_COMPUTE (
HK_HUB	
,MD_START_DT		 	
,MD_CREATION_DT	
,MD_CREATION_AUDIT_ID
,MD_SOURCE	
,MD_SRC_SYSTEM	
,MD_EXTRACT_DT	
,CLIENT_AUA_SEGMENT	
,CLIENT_AUA_SEGMENT_ORDER )
SELECT 
	bdv.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	
	,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')	
	,CURRENT_TIMESTAMP
	,CURRENT_TIMESTAMP
	,MAX(bdv2.MD_SOURCE)
	,MAX(bdv2.MD_SRC_SYSTEM)
	,MAX(bdv2.MD_EXTRACT_DT)
	,BUSINESS_RULES.UDF_CONV_BR_ALL_CLIENT_AUA_SEGMENTATION_002(SUM(bdv2.AUA))[''''o_CLIENT_AUA_SEGMENT''''] 
	,BUSINESS_RULES.UDF_CONV_BR_ALL_CLIENT_AUA_SEGMENTATION_002(SUM(bdv2.AUA))[''''o_CLIENT_AUA_SEGMENT_ORDER'''']
	FROM (
	SELECT *
			FROM DB_IAW_''||ENV||''_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT
			)bdv2
		JOIN (
		SELECT *
			FROM (
				SELECT *
					,ROW_NUMBER() OVER (
						PARTITION BY HK_LINK ORDER BY MD_START_DT DESC
						) RN
				FROM DB_IAW_''||ENV||''_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT
                WHERE MD_START_DT = TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) SATHUB
			WHERE SATHUB.RN = 1 
			) rdv ON rdv.HK_LINK = bdv2.HK_LINK AND rdv.MD_START_DT = bdv2.MD_START_DT
		JOIN DB_IAW_''||ENV||''_DWH.HOLDINGS_BDV.LINK_INVESTMENT bdv ON bdv.HK_LINK = bdv2.HK_LINK
		WHERE bdv2.MD_ACTIVE = ''''A'''' AND bdv2.MD_SRC_SYSTEM = ''''IAS-UNIVERIS''''
		GROUP BY bdv.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
              '';
INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_AUA_SEG_COMPUTE
SET
	MD_HASHDIFF=
	SHA1(CONCAT(COALESCE(CLIENT_AUA_SEGMENT, ''''#NULL#''''), ''''|'''',COALESCE(TO_VARCHAR(CLIENT_AUA_SEGMENT_ORDER), ''''#NULL#'''')))
Where HK_HUB <> ''''0'''' AND MD_SRC_SYSTEM = ''''IAS-UNIVERIS'''';
'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_RDV_UNIVERIS_SHARED_TO_WT_SATACCOUNTHOLDER_COMPUTE(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;
BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_COMPUTE WHERE MD_SRC_SYSTEM = ''''IAS-UNIVERIS'''' '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_COMPUTE (HK_HUB,MD_START_DT,MD_CREATION_DT,MD_SOURCE,MD_SRC_SYSTEM,MD_EXTRACT_DT,INCOME_LEVEL_1_SEGMENT,INCOME_LEVEL_1_SEGMENT_ORD,INCOME_LEVEL_2_SEGMENT,INCOME_LEVEL_2_SEGMENT_ORD,AGE_SEGMENT,AGE_SEGMENT_ORD,NEW_CLIENT_IND)
SELECT rdv.HK_HUB
	,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
	,CURRENT_TIMESTAMP
	,rdv.MD_SOURCE
	,rdv.MD_SRC_SYSTEM
	,rdv.MD_EXTRACT_DT
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_CLIENTS_INCOME_SEGMENTATION_006(rdv.SALARY_DESC)[''''o_INCOME_SEGMENT'''']
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_CLIENTS_INCOME_SEGMENTATION_006(rdv.SALARY_DESC)[''''o_INCOME_SEGMENT_ORD'''']
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_CLIENTS_SALARY_SEGMENTATION_007(rdv.SALARY_DESC)[''''o_SALARY_SEGMENT'''']
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_CLIENTS_SALARY_SEGMENTATION_007(rdv.SALARY_DESC)[''''o_SALARY_SEGMENT_ORD'''']
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_CLIENTS_AGE_SEGMENTATION_008(rdv.IVR_PRIM_BDT, rdv.MD_START_DT, rdv.CORP_CD)[''''o_AGE_SEGMENT'''']
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_CLIENTS_AGE_SEGMENTATION_008(rdv.IVR_PRIM_BDT, rdv.MD_START_DT, rdv.CORP_CD)[''''o_AGE_SEGMENT_ORD'''']
	,BUSINESS_RULES.UDF_CONV_BR_ALL_CLIENTS_004(rdv.MD_START_DT, rdv.CREATE_DT)
FROM (
	SELECT *
	FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_IAS_UNIVERIS
	) rdv
	JOIN (
	SELECT *
	FROM (
		SELECT *
			,ROW_NUMBER() OVER (
				PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
				) RN
		FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_IAS_UNIVERIS lv
        WHERE lv.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
		) SATHUB
	WHERE SATHUB.RN = 1
	) lv ON lv.HK_HUB = rdv.HK_HUB AND lv.MD_START_DT=rdv.MD_START_DT
WHERE rdv.MD_ACTIVE = ''''A'''' 
              '';
INS_UPDATE :=''UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_PARTY_ROLE_ACCOUNT_HOLDER_COMPUTE
SET
MD_HASHDIFF=SHA1(
				CONCAT(	COALESCE(TO_VARCHAR(INCOME_AMT),''''#NULL#''''), ''''|'''',
				COALESCE(INCOME_LEVEL_1_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(INCOME_LEVEL_1_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(INCOME_LEVEL_2_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(INCOME_LEVEL_2_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(AGE_SEGMENT,''''#NULL#''''), ''''|'''',
				COALESCE(TO_VARCHAR(AGE_SEGMENT_ORD),''''#NULL#''''), ''''|'''',
				COALESCE(NEW_CLIENT_IND,''''#NULL#'''')
				))
Where HK_HUB <> ''''0'''' AND MD_SRC_SYSTEM = ''''IAS-UNIVERIS''''
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_VIEW_SHARE_TO_BDV_WT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||I_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_LINK_PARTY_RELATIONSHIP_SHARE WHERE MD_SRC_SYSTEM = ''''IAS'''';  '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_LINK_PARTY_RELATIONSHIP_SHARE
(
MD_START_DT, 
MD_SOURCE, 
MD_CREATION_DT, 
MD_SRC_SYSTEM, 
MD_EXTRACT_DT, 
A_C_REPRESENTATIVE, 
COM_TYPE,
COMMISSIONPCT, 
IS_RESHARED, 
MASTER_CODE, 
PHYSICAL, 
TOREPID, 
COMMISSIONPCT_ADVISOR, 
COMMISSIONPCT_FINANCIAL
)
SELECT
TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''')
,IFF ( V_SHR.MD_EXTRACT_DT IS NULL, V_SHR.OGE_MD_SOURCE,
IFF (
        
      V_SHR.LAST_START_DATE IS NULL, SHR_MD_SOURCE,
	       
		   IFF ( NOT V_SHR.LAST_START_DATE IS NULL AND NOT V_SHR.LAST_END_DATE IS NULL
		         AND 
				 (
				 TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') > V_SHR.LAST_START_DATE
		         AND 
				 TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') > V_SHR.LAST_END_DATE
				 )
				 OR
				 (
				 TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') < V_SHR.LAST_START_DATE
		         AND 
				 TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') < V_SHR.LAST_END_DATE
				 ),
				 V_SHR.SHR_MD_SOURCE,
					
					IFF ( 
						NOT V_SHR.LAST_START_DATE IS NULL AND NOT V_SHR.LAST_END_DATE IS NULL
						AND 
						(
						TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') >= V_SHR.LAST_START_DATE
						AND 
						TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') <= V_SHR.LAST_END_DATE
						)
						AND
						(
						TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') >= V_SHR.START_DATE
						AND 
						TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') <= V_SHR.END_DATE
						),
						V_SHR.OGE_MD_SOURCE, V_SHR.SHR_MD_SOURCE
					    ) 
		    ) 
	)  
 ) 
,CURRENT_TIMESTAMP
,V_SHR.MD_SRC_SYSTEM
,V_SHR.MD_EXTRACT_DT
,V_SHR.A_C_REPRESENTATIVE
,V_SHR.COM_TYPE
,IFF ( V_SHR.MD_EXTRACT_DT IS NULL, V_SHR.OGE_SHR_COMM_PCT,
IFF ( 
      V_SHR.LAST_START_DATE IS NULL, V_SHR.COMMISIONPCT,
		   IFF ( NOT V_SHR.LAST_START_DATE IS NULL AND NOT V_SHR.LAST_END_DATE IS NULL
		         AND 
				 (
				 TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') > V_SHR.LAST_START_DATE
		         AND 
				 TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') > V_SHR.LAST_END_DATE
				 )
				 OR
				 (
				 TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') < V_SHR.LAST_START_DATE
		         AND 
				 TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') < V_SHR.LAST_END_DATE
				 ),
				 COMMISIONPCT,
					
					IFF ( 
						NOT V_SHR.LAST_START_DATE IS NULL AND NOT V_SHR.LAST_END_DATE IS NULL
						AND 
						(
						TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') >= V_SHR.LAST_START_DATE
						AND 
						TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') <= V_SHR.LAST_END_DATE
						)
						AND
						(
						TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') >= V_SHR.START_DATE
						AND 
						TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') <= V_SHR.END_DATE
						),
						V_SHR.OGE_SHR_COMM_PCT, 0
					    )
		    )
	)
 )
,V_SHR.IS_RESHARED
,V_SHR.MASTER_CODE
,V_SHR.PHYSICAL
,V_SHR.TOREPID
,IFF ( V_SHR.MD_EXTRACT_DT IS NULL, V_SHR.OGE_SHR_COMM_PCT,
IFF (
        
      V_SHR.LAST_START_DATE IS NULL, V_SHR.COMMISSIONPCT_ADVISOR,
	       
		   IFF ( NOT V_SHR.LAST_START_DATE IS NULL AND NOT V_SHR.LAST_END_DATE IS NULL
		         AND 
				 (
				 TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') > V_SHR.LAST_START_DATE
		         AND 
				 TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') > V_SHR.LAST_END_DATE
				 )
				 OR
				 (
				 TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') < V_SHR.LAST_START_DATE
		         AND 
				 TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') < V_SHR.LAST_END_DATE
				 ),
				 V_SHR.COMMISSIONPCT_ADVISOR,
					
					IFF ( 
						NOT V_SHR.LAST_START_DATE IS NULL AND NOT V_SHR.LAST_END_DATE IS NULL
						AND 
						(
						TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') >= V_SHR.LAST_START_DATE
						AND 
						TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') <= V_SHR.LAST_END_DATE
						)
						AND
						(
						TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') >= V_SHR.START_DATE
						AND 
						TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') <= V_SHR.END_DATE
						),
						V_SHR.OGE_SHR_COMM_PCT, 0
					    ) 
		    ) 
	)  
 )
 ,IFF ( V_SHR.MD_EXTRACT_DT IS NULL, V_SHR.OGE_SHR_COMM_PCT,
IFF (
        
      V_SHR.LAST_START_DATE IS NULL, V_SHR.COMMISSIONPCT_FINANCIAL,
	       
		   IFF ( NOT V_SHR.LAST_START_DATE IS NULL AND NOT V_SHR.LAST_END_DATE IS NULL
		         AND 
				 (
				 TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') > V_SHR.LAST_START_DATE
		         AND 
				 TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') > V_SHR.LAST_END_DATE
				 )
				 OR
				 (
				 TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') < V_SHR.LAST_START_DATE
		         AND 
				 TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') < V_SHR.LAST_END_DATE
				 ),
				 V_SHR.COMMISSIONPCT_FINANCIAL,
					
					IFF ( 
						NOT V_SHR.LAST_START_DATE IS NULL AND NOT V_SHR.LAST_END_DATE IS NULL
						AND 
						(
						TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') >= V_SHR.LAST_START_DATE
						AND 
						TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') <= V_SHR.LAST_END_DATE
						)
						AND
						(
						TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') >= V_SHR.START_DATE
						AND 
						TO_DATE(''||I_DATA_START_DATE||'',''''YYYY-MM-DD'''') <= V_SHR.END_DATE
						),
						V_SHR.OGE_SHR_COMM_PCT, 0
					    ) 
		    ) 
	)  
 )
 FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.VW_ORGANIC_GROWTH_EXCEPTION_SHR V_SHR

			
              '';
INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_LINK_PARTY_RELATIONSHIP_SHARE
SET
	HK_LINK=SHA1(CONCAT(COALESCE(MD_SRC_SYSTEM,''''#NULL#''''),''''|'''', COALESCE(A_C_REPRESENTATIVE, ''''#NULL#''''), ''''|'''' , COALESCE(TOREPID,''''#NULL#''''))),
	HK_HUB_REGISTERED_REPRESENTATIVE= SHA1(CONCAT(COALESCE(MD_SRC_SYSTEM,''''#NULL#''''),''''|'''', COALESCE(A_C_REPRESENTATIVE, ''''#NULL#''''))),
	HK_HUB_ADVISOR= SHA1(CONCAT(COALESCE(MD_SRC_SYSTEM,''''#NULL#''''),''''|'''', COALESCE(MASTER_CODE, ''''#NULL#''''))),
	MD_HASHDIFF=SHA1(CONCAT(COALESCE(COM_TYPE, ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(COMMISSIONPCT),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(IS_RESHARED),''''#NULL#''''),''''|'''', COALESCE(TO_VARCHAR(PHYSICAL),''''#NULL#''''),''''|'''',COALESCE(TOREPID, ''''#NULL#''''),''''|'''',COALESCE(TO_VARCHAR(COMMISSIONPCT_ADVISOR), ''''#NULL#'''')))
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADBDV_VW_SAT_CONTRACT_TO_WT_SATCONTRACT_COMPUTE(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;
BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_CONTRACT_COMPUTE WHERE 1=1'';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_CONTRACT_COMPUTE (
HK_HUB
,MD_START_DT
,MD_CREATION_DT
,MD_SOURCE
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,MD_ACTIVE
,PLAN_CODE
,PLAN_LABEL
,ACCOUNT_TYPE
,GROUP_TYPE_CODE
,ACCUMULATION_TYPE
,ACCOUNT_IND
,CASH_EQLT_PROFILE_PCT
,INCOME_PROFILE_PCT
,GROWTH_PROFILE_PCT
,SPECULATION_PROFILE_PCT
,UNKNOWN_PROFILE_PCT
,LOW_RISK_PCT
,MEDIUM_RISK_PCT
,HIGH_RISK_PCT
,UNKNOWN_RISK_PCT
,NBIN_CLIENT_ID
)
SELECT
SRC.HK_HUB
,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
,CURRENT_TIMESTAMP
,SRC.MD_SOURCE
,SRC.MD_SRC_SYSTEM
,SRC.MD_EXTRACT_DT
,SRC.MD_ACTIVE
,SRC.PLAN_CODE
,SRC.PLAN_LABEL
,SRC.ACCOUNT_TYPE
,SRC.GROUP_TYPE_CODE
,SRC.ACCUMULATION_TYPE
,SRC.ACCOUNT_IND
,SRC.CASH_EQLT_PROFILE_PCT
,SRC.INCOME_PROFILE_PCT
,SRC.GROWTH_PROFILE_PCT
,SRC.SPECULATION_PROFILE_PCT
,SRC.UNKNOWN_PROFILE_PCT
,SRC.LOW_RISK_PCT
,SRC.MEDIUM_RISK_PCT
,SRC.HIGH_RISK_PCT
,SRC.UNKNOWN_RISK_PCT
,SRC.NBIN_CLIENT_ID
FROM (
	SELECT *
	FROM (
		SELECT *
			,ROW_NUMBER() OVER (
				PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
				) RN
		FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.VW_SAT_CONTRACT_COMPUTE lv
		WHERE lv.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
		) SATHUB
	WHERE SATHUB.RN = 1 
	) lv
	JOIN
	(
SELECT *
  FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.VW_SAT_CONTRACT_COMPUTE
    ) SRC ON lv.HK_HUB = SRC.HK_HUB AND LV.MD_START_DT=SRC.MD_START_DT
WHERE SRC.MD_ACTIVE = ''''A''''
'';
INS_UPDATE :=''UPDATE DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_CONTRACT_COMPUTE
SET
	MD_HASHDIFF=SHA1(
				CONCAT(
				COALESCE(PLAN_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(PLAN_LABEL,''''#NULL#''''), ''''|'''',
				COALESCE(ACCOUNT_TYPE,''''#NULL#''''), ''''|'''',
				COALESCE(GROUP_TYPE_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(ACCUMULATION_TYPE,''''#NULL#''''), ''''|'''',
                COALESCE(TO_VARCHAR(ACCOUNT_IND),''''#NULL#''''),''''|'''',
				COALESCE(CASH_EQLT_PROFILE_PCT,''''#NULL#''''), ''''|'''',
				COALESCE(INCOME_PROFILE_PCT,''''#NULL#''''), ''''|'''',
				COALESCE(GROWTH_PROFILE_PCT,''''#NULL#''''), ''''|'''',
				COALESCE(SPECULATION_PROFILE_PCT,''''#NULL#''''), ''''|'''',
				COALESCE(UNKNOWN_PROFILE_PCT,''''#NULL#''''), ''''|'''',
				COALESCE(LOW_RISK_PCT,''''#NULL#''''), ''''|'''',
				COALESCE(MEDIUM_RISK_PCT,''''#NULL#''''), ''''|'''',
				COALESCE(HIGH_RISK_PCT,''''#NULL#''''), ''''|'''',
				COALESCE(UNKNOWN_RISK_PCT,''''#NULL#''''), ''''|'''',
				COALESCE(NBIN_CLIENT_ID,''''#NULL#'''')
				)
				)
Where HK_HUB <> ''''0''''
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADDM_IAPW_STG_TO_DM_MASTER_KPI_DATA_IAPW(""ENV"" VARCHAR(1000), ""DATA_START_DATE"" VARCHAR(20), ""JOB_NAME"" VARCHAR(16777216), ""JOB_AUDIT_ID"" VARCHAR(16777216), ""RUN_ID"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
BEGIN
DATA_START_DATE :=CHAR(39)||DATA_START_DATE||CHAR(39);
DEL_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_DM.EXTERNAL_KPI.MASTER_KPI_DATA_IAPW WHERE MD_START_DT IN (SELECT MD_START_DT FROM DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_IAPW GROUP BY MD_START_DT HAVING COUNT(1)>=1)'';
INS_QUERY := ''
INSERT INTO DB_IAW_''||ENV||''_DM.EXTERNAL_KPI.MASTER_KPI_DATA_IAPW(
HK_HUB	
,MD_START_DT	
,MD_HASHDIFF	
,MD_CREATION_DT		
,MD_CREATION_AUDIT_ID		
,MD_SOURCE	
,MD_SRC_SYSTEM		
,MD_EXTRACT_DT		
,KPI_DATE		
,NO_OF_ACTIVE_CLIENTS		
,NO_OF_ACTIVE_ACCOUNTS	
,FTE		
,ACCOUNTS_FTE	
,ACCOUNTS_FTE_TARGET		
,APPWAY_REGISTRATION	
,APPWAY_REGISTRATION_TARGET	
,NO_OF_CLIENT_ID_REGISTERED		
,PORTAL_REGISTRATION	
,PORTAL_REGISTRATION_TARGET		
,MYPORTFOLIO_TO_NEW_CLIENT		
,E_DELIVERY_PORTFOLIO_STATEMENTS	
,E_DELIVERY_TAX_SLIPS		
,E_DELIVERY_CONFIRMS		
,AVG_E_DELIVERY_REGISTRATION	
,E_DELIVERY_REGISTRATION_TARGET	
,RETAIL_YTD_EXPENSES		
,RETAIL_YTD_REVENUES		
,RETAIL_FINANCIAL_EFFICIENCY_RATIO		
,RETAIL_YTD_EXPENSES_TARGET		
,RETAIL_YTD_REVENUES_TARGET		
,RETAIL_EFFICIENCY_RATIO_TARGET		
,CAP_MRKTS_YTD_EXPENSES		
,CAP_MKTS_YTD_REVENUES		
,CAP_MRKTS_EFFICIENCY_RATIO		
,CAP_MRKTS_YTD_EXPENSES_TARGET		
,CAP_MRKTS_YTD_REVENUES_TARGET	
,CAP_MRKTS_EFFICIENCY_RATIO_TARGET		
,TOTAL_ASSETS		
,NET_TOTAL_REVENUE		
,NET_TOTAL_REVENUE_TARGET		
,NET_BOND_DESK_REVENUE		
,NET_BOND_DESK_REVENUE_TARGET		
,CAPITAL_MKTS_REVENUE		
,CAPITAL_MKTS_REVENUE_TARGET		
,NET_RETAIL_REVENUE		
,NET_RETAIL_REVENUE_TARGET		
,RETAIL_REVENUE_GROWTH	
,EBIT		
,SMA_ADOPTION		
,INSURANCE_REVENUE		
,AUA_TARGET	
,DEPARTED_ADVISORS		
,RECRUITING		
,TERMINATED_ADVISORS)
	(src.HK_HUB	
	,src.MD_START_DT	
	,src.MD_HASHDIFF	
	,CURRENT_TIMESTAMP	
	,CONCAT(''||CHAR(39)||JOB_AUDIT_ID||CHAR(39)||'',''''#'''',''||CHAR(39)||JOB_NAME||CHAR(39)||'',''''-'''',''||CHAR(39)||RUN_ID||CHAR(39)||'')
	,src.MD_SOURCE	
	,src.MD_SRC_SYSTEM	
	,src.MD_EXTRACT_DT	
	,src.KPI_DATE	
	,src.NO_OF_ACTIVE_CLIENTS	
	,src.NO_OF_ACTIVE_ACCOUNTS	
	,src.FTE	
	,src.ACCOUNTS_FTE
	,src.ACCOUNTS_FTE_TARGET	
	,src.APPWAY_REGISTRATION	
	,src.APPWAY_REGISTRATION_TARGET	
	,src.NO_OF_CLIENT_ID_REGISTERED	
	,src.PORTAL_REGISTRATION	
	,src.PORTAL_REGISTRATION_TARGET	
	,src.MYPORTFOLIO_TO_NEW_CLIENT	
	,src.E_DELIVERY_PORTFOLIO_STATEMENTS	
	,src.E_DELIVERY_TAX_SLIPS	
	,src.E_DELIVERY_CONFIRMS	
	,src.AVG_E_DELIVERY_REGISTRATION	
	,src.E_DELIVERY_REGISTRATION_TARGET
	,src.RETAIL_YTD_EXPENSES	
	,src.RETAIL_YTD_REVENUES	
	,src.RETAIL_FINANCIAL_EFFICIENCY_RATIO	
	,src.RETAIL_YTD_EXPENSES_TARGET	
	,src.RETAIL_YTD_REVENUES_TARGET	
	,src.RETAIL_EFFICIENCY_RATIO_TARGET	
	,src.CAP_MRKTS_YTD_EXPENSES	
	,src.CAP_MKTS_YTD_REVENUES	
	,src.CAP_MRKTS_EFFICIENCY_RATIO	
	,src.CAP_MRKTS_YTD_EXPENSES_TARGET	
	,src.CAP_MRKTS_YTD_REVENUES_TARGET
	,src.CAP_MRKTS_EFFICIENCY_RATIO_TARGET	
	,src.TOTAL_ASSETS	
	,src.NET_TOTAL_REVENUE	
	,src.NET_TOTAL_REVENUE_TARGET	
	,src.NET_BOND_DESK_REVENUE	
	,src.NET_BOND_DESK_REVENUE_TARGET	
	,src.CAPITAL_MKTS_REVENUE	
	,src.CAPITAL_MKTS_REVENUE_TARGET	
	,src.NET_RETAIL_REVENUE	
	,src.NET_RETAIL_REVENUE_TARGET	
	,src.RETAIL_REVENUE_GROWTH
	,src.EBIT	
	,src.SMA_ADOPTION	
	,src.INSURANCE_REVENUE	
	,src.AUA_TARGET	
	,src.DEPARTED_ADVISORS	
	,src.RECRUITING	
	,src.TERMINATED_ADVISORS
	FROM DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_IAPW src)'';
EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_LOADDM_IAS_NBIN_TO_DM_WTPLAN(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;
BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_PLANS WHERE MD_SRC_SYSTEM = ''''IAS'''' '';
INS_INSERT := ''
INSERT INTO DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_PLANS (HK_HUB,MD_HASH_NAT_KEYS,MD_SOURCE,MD_SRC_SYSTEM,MD_EXTRACT_DT,PLAN_CODE,PLAN_LABEL,ACCOUNT_TYPE,GROUP_TYPE_CODE,ACCUMULATION_TYPE,MD_CREATION_DT,MD_START_DT)
SELECT RDV.HK_HUB,
	RDV.HK_HUB,
	RDV.MD_SOURCE,
	RDV.MD_SRC_SYSTEM,
	RDV.MD_EXTRACT_DT,
	RDV.PLAN_CODE,
	RDV.PLAN_LABEL,
	RDV.ACCOUNT_TYPE,
	RDV.GROUP_TYPE_CODE,
	RDV.ACCUMULATION_TYPE,
	CURRENT_TIMESTAMP,
	TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
FROM (
	SELECT *
	FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE
	) rdv
	JOIN (
	SELECT *
	FROM (
		SELECT *
			,ROW_NUMBER() OVER (
				PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
				) RN
		FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_COMPUTE lv
		WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
		) SATHUB
	WHERE SATHUB.RN = 1
	) lv ON lv.HK_HUB = rdv.HK_HUB AND lv.MD_START_DT = rdv.MD_START_DT
WHERE rdv.MD_ACTIVE = ''''A''''  AND rdv.MD_SRC_SYSTEM = ''''IAS''''
              '';
INS_UPDATE :=''
UPDATE DB_IAWT_''||ENV||''_DM.SHARED.WT_DIM_PLANS
SET
	MD_HASHDIFF_TYPE2=SHA1(
				CONCAT(
				COALESCE(PLAN_LABEL,''''#NULL#''''), ''''|'''',
				COALESCE(ACCOUNT_TYPE,''''#NULL#''''), ''''|'''',
				COALESCE(GROUP_TYPE_CODE,''''#NULL#''''), ''''|'''',
				COALESCE(ACCUMULATION_TYPE,''''#NULL#''''), ''''|''''
				))
Where HK_HUB <> ''''0''''
AND MD_SRC_SYSTEM = ''''IAS''''
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_BDV.SP_CONV_M_LOADBDV_RDV_HOLDINGS_TO_BDV_WT_SAT_CONTRACT_AUA_SEG_COMPUTE(""ENV"" VARCHAR(1000), ""DATA_START_DATE"" VARCHAR(20))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
	DEL_QUERY STRING;
	INS_QUERY STRING;
	UPD_QUERY STRING;
BEGIN
	DATA_START_DATE := CHAR(39)||DATA_START_DATE||CHAR(39);
	DEL_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_CONTRACT_AUA_SEG_COMPUTE WHERE 1=1;'';
	INS_QUERY := ''
	insert into	DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_CONTRACT_AUA_SEG_COMPUTE( HK_HUB,
	MD_START_DT,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	ACCOUNT_AUA_SEGMENT,
	ACCOUNT_AUA_SEGMENT_ORDER) ( with LV as (
	select
		HK_LINK as LV_HK_LINK,
		MAX(MD_START_DT) as O_MAX_DATE_LV
	from
		DB_IAW_''||ENV||''_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT SLI
	where
		MD_START_DT = TO_DATE(''||DATA_START_DATE||'',
		''''YYYY-MM-DD'''')
	group by
		HK_LINK ),
	JNR_SatLink_Investment_SelfJoin as (
	select
		A.LV_HK_LINK,
		A.O_MAX_DATE_LV,
		B.ACCOUNT_PROGRAM_TYPE,
		B.ADMINISTRATORY_TYPE,
		B.AUA,
		B.AUM,
		B.AUM_CLARINGTON,
		B.AUM_IA,
		B.BALANCE_DATE,
		B.CASH_POSITION,
		B.HK_LINK,
		B.HOLDING_VALUE,
		B.MD_ACTIVE,
		B.MD_CREATION_AUDIT_ID,
		B.MD_CREATION_DT,
		B.MD_EXTRACT_DT,
		B.MD_HASHDIFF,
		B.MD_SOURCE,
		B.MD_SRC_SYSTEM,
		B.MD_START_DT,
		B.PLN_SYSID,
		B.PROGRAM_TYPE,
		B.RR_CD
	from
		DB_IAW_''||ENV||''_DWH.HOLDINGS_BDV.SAT_LINK_INVESTMENT B
	inner join LV A on
		A.LV_HK_LINK = B.HK_LINK
		and A.O_MAX_DATE_LV = B.MD_START_DT
	where
		B.MD_ACTIVE = ''''A'''' ),
	JNR_SatLink_Investment_InnerJoin_Link_Investment as (
	select
		A.HK_HUB_CONTRACT as LINK_INVESTMENT_HK_HUB_CONTRACT,
		A.HK_LINK as LINK_INVESTMENT_HK_LINK,
		A.MASTER_CODE as LINK_INVESTMENT_MASTER_CODE,
		B.LV_HK_LINK as LV_HK_LINK,
		B.O_MAX_DATE_LV as O_MAX_DATE_LV,
		B.ACCOUNT_PROGRAM_TYPE as SAT_LINK_INVESTMENT_ACCOUNT_PROGRAM_TYPE,
		B.ADMINISTRATORY_TYPE as SAT_LINK_INVESTMENT_ADMINISTRATORY_TYPE,
		B.AUA as SAT_LINK_INVESTMENT_AUA,
		B.AUM as SAT_LINK_INVESTMENT_AUM,
		B.AUM_CLARINGTON as SAT_LINK_INVESTMENT_AUM_CLARINGTON,
		B.AUM_IA as SAT_LINK_INVESTMENT_AUM_IA,
		B.BALANCE_DATE as SAT_LINK_INVESTMENT_BALANCE_DATE,
		B.CASH_POSITION as SAT_LINK_INVESTMENT_CASH_POSITION,
		B.HK_LINK as SAT_LINK_INVESTMENT_HK_LINK,
		B.HOLDING_VALUE as SAT_LINK_INVESTMENT_HOLDING_VALUE,
		B.MD_ACTIVE as SAT_LINK_INVESTMENT_MD_ACTIVE,
		B.MD_CREATION_AUDIT_ID as SAT_LINK_INVESTMENT_MD_CREATION_AUDIT_ID,
		B.MD_CREATION_DT as SAT_LINK_INVESTMENT_MD_CREATION_DT,
		B.MD_EXTRACT_DT as SAT_LINK_INVESTMENT_MD_EXTRACT_DT,
		B.MD_HASHDIFF as SAT_LINK_INVESTMENT_MD_HASHDIFF,
		B.MD_SOURCE as SAT_LINK_INVESTMENT_MD_SOURCE,
		B.MD_SRC_SYSTEM as SAT_LINK_INVESTMENT_MD_SRC_SYSTEM,
		B.MD_START_DT as SAT_LINK_INVESTMENT_MD_START_DT,
		B.PLN_SYSID as SAT_LINK_INVESTMENT_PLN_SYSID,
		B.PROGRAM_TYPE as SAT_LINK_INVESTMENT_PROGRAM_TYPE,
		B.RR_CD as SAT_LINK_INVESTMENT_RR_CD
	from
		JNR_SatLink_Investment_SelfJoin B
	inner join DB_IAW_''||ENV||''_DWH.HOLDINGS_BDV.LINK_INVESTMENT A on
		B.HK_LINK = A.HK_LINK ),
	SAT_CONTRACT_COMPUTE_LV as (
	select
		HK_HUB as SLV_HK_HUB,
		MAX(MD_START_DT) as SLV_O_MAX_MD_START_DT
	from
		DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_CONTRACT_COMPUTE
	where
		MD_START_DT = TO_DATE(''||DATA_START_DATE||'',
		''''YYYY-MM-DD'''')
	group by
		HK_HUB ),
	JNR_SatLink_Investment_SelfJoin1 as (
	select
		A.SLV_HK_HUB as SLV_HK_HUB,
		A.SLV_O_MAX_MD_START_DT SLV_O_MAX_MD_START_DT,
		B.ACCOUNT_IND as SAT_CONTRACT_COMPUTE_ACCOUNT_IND,
		B.ACCOUNT_TYPE as SAT_CONTRACT_COMPUTE_ACCOUNT_TYPE,
		B.ACCUMULATION_TYPE as SAT_CONTRACT_COMPUTE_ACCUMULATION_TYPE,
		B.GROUP_TYPE_CODE as SAT_CONTRACT_COMPUTE_GROUP_TYPE_CODE,
		B.HK_HUB as SAT_CONTRACT_COMPUTE_HK_HUB,
		B.MD_ACTIVE as SAT_CONTRACT_COMPUTE_MD_ACTIVE,
		B.MD_CREATION_AUDIT_ID as SAT_CONTRACT_COMPUTE_MD_CREATION_AUDIT_ID,
		B.MD_CREATION_DT as SAT_CONTRACT_COMPUTE_MD_CREATION_DT,
		B.MD_EXTRACT_DT as SAT_CONTRACT_COMPUTE_MD_EXTRACT_DT,
		B.MD_HASHDIFF as SAT_CONTRACT_COMPUTE_MD_HASHDIFF,
		B.MD_SOURCE as SAT_CONTRACT_COMPUTE_MD_SOURCE,
		B.MD_SRC_SYSTEM as SAT_CONTRACT_COMPUTE_MD_SRC_SYSTEM,
		B.MD_START_DT as SAT_CONTRACT_COMPUTE_MD_START_DT,
		B.PLAN_CODE as SAT_CONTRACT_COMPUTE_PLAN_CODE,
		B.PLAN_LABEL as SAT_CONTRACT_COMPUTE_PLAN_LABEL
	from
		DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_CONTRACT_COMPUTE B
	inner join SAT_CONTRACT_COMPUTE_LV A on
		A.SLV_HK_HUB = B.HK_HUB
		and A.SLV_O_MAX_MD_START_DT = B.MD_START_DT
	where
		B.MD_ACTIVE = ''''A'''' ),
	EXP_METADATA as (
	select
		LINK_INVESTMENT_HK_HUB_CONTRACT,
		TO_DATE(''||DATA_START_DATE||'',
		''''YYYY-MM-DD'''') as o_DATA_START_DATE,
		CURRENT_TIMESTAMP as o_MD_CREATION_DATE,
		''''-1'''' as o_MD_CREATION_AUDIT_ID,
		MAX(SAT_LINK_INVESTMENT_MD_SOURCE) as o_MAX_MD_SOURCE,
		MAX(SAT_LINK_INVESTMENT_MD_SRC_SYSTEM) as o_MAX_MD_SRC_SYSTEM,
		MAX(Sat_Link_Investment_MD_EXTRACT_DT) as o_MAX_MD_EXTRACT_DT,
		SUM(case when SAT_LINK_INVESTMENT_AUA is null then ''''0'''' else SAT_LINK_INVESTMENT_AUA end) as o_Account_SUM_AUA
	from
		JNR_SatLink_Investment_InnerJoin_Link_Investment B
	LEFT join JNR_SatLink_Investment_SelfJoin1 A on
		B.LINK_INVESTMENT_HK_HUB_CONTRACT = A.SAT_CONTRACT_COMPUTE_HK_HUB
	group by
		LINK_INVESTMENT_HK_HUB_CONTRACT )
	select
		LINK_INVESTMENT_HK_HUB_CONTRACT,
		o_DATA_START_DATE,
		o_MD_CREATION_DATE,
		o_MD_CREATION_AUDIT_ID,
		o_MAX_MD_SOURCE,
		o_MAX_MD_SRC_SYSTEM,
		o_MAX_MD_EXTRACT_DT,
		SHARED_BDV.SP_CONV_BR_ALL_ACCOUNT_AUA_SEGMENTATION_002(o_Account_SUM_AUA)[''''o_ACCOUNT_AUA_SEGMENT''''],
		SHARED_BDV.SP_CONV_BR_ALL_ACCOUNT_AUA_SEGMENTATION_002(o_Account_SUM_AUA)[''''o_ACCOUNT_AUA_SEGMENT_ORDER'''']
	from
		EXP_METADATA);''
	;
	UPD_QUERY := 
	''UPDATE
	DB_IAW_''||ENV||''_DWH.SHARED_BDV.WT_SAT_CONTRACT_AUA_SEG_COMPUTE
	SET
	MD_HASHDIFF = SHA1(CONCAT(COALESCE(ACCOUNT_AUA_SEGMENT, ''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(ACCOUNT_AUA_SEGMENT_ORDER), ''''#NULL#'''')))
	WHERE
	HK_HUB <> ''''0'''';''
	;
		EXECUTE IMMEDIATE :DEL_QUERY;
		EXECUTE IMMEDIATE :INS_QUERY;
		EXECUTE IMMEDIATE :UPD_QUERY;
		RETURN ''OK!'';
END
';
create or replace schema DB_IAW_PROD_DWH.SHARED_RDV;

create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.HUB_ADVISOR_IAS_CERTS (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CID VARCHAR(500) COMMENT 'Source Account ID exp: #100002',
	RR_CD VARCHAR(2000) COMMENT 'Registered represtntative code'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.HUB_CONTRACT (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	UNIVERIS_CLIENT_ID NUMBER(38,0) COMMENT 'Univeris Client ID'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.HUB_INVESTMENT_PRODUCT_TYPE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product ID'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.HUB_PARTY_ROLE_ACCOUNT_HOLDER (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CLIENT_ID VARCHAR(100) COMMENT 'Client ID',
	SOURCE_SYSTEM VARCHAR(100) COMMENT 'Source system'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	RR_CD VARCHAR(2000) COMMENT 'registered representative code'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.LINK_COMMISSION_SHARE_RR (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Hub',
	HK_HUB_FROM VARCHAR(40) COMMENT 'Hash key for the Hub',
	HK_HUB_TO VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	FROMREPID VARCHAR(50) COMMENT 'RR code',
	TOREPID VARCHAR(50) COMMENT 'Master code',
	SHARETYPE VARCHAR(50) COMMENT 'Sharing Type (codeSet)',
	SOURCECODE VARCHAR(50) COMMENT 'Source Code / TRANSACTION_TYPE',
	PRODUCTCODE VARCHAR(50) COMMENT 'Product Code / SECURITY_GROUP_CODE'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for HUB_PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for HUB_REGISTERED_REPRESENTATIVE',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	CONTRACT_ID VARCHAR(18) COMMENT 'Account ID',
	CLIENT_ID VARCHAR(100) COMMENT 'Client ID',
	RR_CD VARCHAR(50) COMMENT 'REGITERED REPRESENTATIVE CODE',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'RR code'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.REF_FUND (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	FUNDSERVID VARCHAR(1000) COMMENT 'FUND SERV ID'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.REF_HOLIDAYS_IAS_IAVM (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Reference',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	HOLIDAY_DATE DATE COMMENT 'Date of the holiday'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	PLN_MNEM VARCHAR(8000) COMMENT 'Plan code',
	A_C_ACCOUNT_CLASS VARCHAR(50) COMMENT 'Account class : 038, 040, ...',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	RETAIL_PLAN_RESP VARCHAR(10) COMMENT 'To be defined',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.REF_MAPPING_PRODUCT_TYPE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
	TI_ALTERNATE_TI_CLASS VARCHAR(50) COMMENT 'Financial product  class'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.REF_PROVINCE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	PROV_CD VARCHAR(10) COMMENT 'Province code : QC'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_ADVISOR_IAS_CERTS (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	FIRST_NAME VARCHAR(500) COMMENT 'Fist Name of the advisor',
	LAST_NAME VARCHAR(500) COMMENT 'Last Name of the advisor',
	FULL_NAME VARCHAR(1000) COMMENT 'Full Name of the advisor',
	PRIMARY_ROLE VARCHAR(500) COMMENT 'Primary role of the advisor',
	RVP VARCHAR(500) COMMENT 'Regional VP of the advisor',
	BRANCH_NRD VARCHAR(500) COMMENT 'Branch code of the advisor',
	BRANCH_NAME VARCHAR(500) COMMENT 'Branch Name of the advisor',
	PROVINCE VARCHAR(500) COMMENT 'Province of the advisor',
	IS_ACTIVE NUMBER(1,0) COMMENT 'Indicator to check the advisor is active or not',
	TRADE_NAME VARCHAR(2000) COMMENT 'Trade name ',
	PORTAL_IDS VARCHAR(2000) COMMENT 'Portal identifier exp: PortalIds_#118048',
	BEGIN_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor begin date',
	END_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor end date',
	ADVISOR_BIRTH_DATE DATE COMMENT 'Advisor month and year of birth',
	REP_EMAIL VARCHAR(1000) COMMENT 'Advisor repemail',
	CBM VARCHAR(1000) COMMENT 'Advisor cbm',
	BRANCH_ADDRESS1 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS1',
	BRANCH_ADDRESS2 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS2',
	BRANCH_CITY VARCHAR(1000) COMMENT 'Advisor branch city',
	BRANCH_POSTAL_CODE VARCHAR(1000) COMMENT 'Advisor branch postal code'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_CONTRACT_IAS_NBIN (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	A_C_CLIENT VARCHAR(20) COMMENT 'Client ID',
	A_C_REPRESENTATIVE VARCHAR(4) COMMENT 'Advisor RR code',
	ADMINISTRATOR_TYPE VARCHAR(100) COMMENT 'Nominee, Client name, ...',
	A_C_OPEN_DATE DATE COMMENT 'Account opening date',
	A_C_CLOSING_DATE DATE COMMENT 'Account closing date',
	A_C_ACCOUNT_CLASS VARCHAR(3) COMMENT 'Account class : 038, 040, ...',
	RETAIL_PLAN VARCHAR(4) COMMENT 'Retail plan code : RS, LF, ...',
	RETAIL_PLAN_RESP VARCHAR(1) COMMENT 'To be defined',
	ACCOUNT_RAP_CODE VARCHAR(1) COMMENT 'To be defined : Last letter of an account ID',
	ASC_3_MANAGED_TYPE VARCHAR(1) COMMENT 'To be defined : J, L, ...',
	A_C_SPECIAL_TAG VARCHAR(20) COMMENT 'Used to indicate relationship if multiple client names : JTWROS, JTIC, Trust, ...',
	ASC_1_RESP_PLAN_TYPES VARCHAR(1) COMMENT 'subtype of the RESP plans',
	A_C_CURRENCY VARCHAR(10) COMMENT 'Account Currency',
	IVT_OBJ_CDE VARCHAR(15) COMMENT 'Accounts Risk Profile (Cash, Income, Growth, Speculations - PCT)',
	RISK_TOLERANCE VARCHAR(15) COMMENT 'Accounts Risk Tolerance'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_CONTRACT_IAS_UNIVERIS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""\""A\""\"" row exists in the source, \""\""D\""\"" row does not exist in the source',
	PLN_CD VARCHAR(8000) COMMENT 'Univeris plan code : 01, 02,...',
	PLN_STATUS VARCHAR(8000) COMMENT 'Plan status : Active, inactive, closed,...',
	PLN_ADM_CD VARCHAR(8000) COMMENT 'Plan administrator code',
	SETUP_DT TIMESTAMP_NTZ(9) COMMENT 'Plan set up date',
	CLOSE_DT TIMESTAMP_NTZ(9) COMMENT 'Plan close date',
	PEN_JUR_CD VARCHAR(8000),
	FEE_EXMP_IND NUMBER(38,0) COMMENT 'Trustee Fee Exemption Indicator. (Values 1 = ON, 0 = OFF)',
	ADMINISTRATOR_TYPE VARCHAR(8000) COMMENT 'Administrator type (Client Name, Nominee, Intermediary)',
	REP_SYSID NUMBER(38,0) COMMENT 'RR code',
	REP_CD VARCHAR(50) COMMENT 'RR code'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_CONTRACT_INVESTIA_UNIVERIS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PLN_CD VARCHAR(8000) COMMENT 'Univeris plan code : 01, 02,...',
	PLN_STATUS VARCHAR(8000) COMMENT 'Plan status : Active, inactive, closed,...',
	PLN_ADM_CD VARCHAR(8000) COMMENT 'Plan administrator code',
	SETUP_DT TIMESTAMP_NTZ(9) COMMENT 'Plan set up date',
	CLOSE_DT TIMESTAMP_NTZ(9) COMMENT 'Plan close date',
	PEN_JUR_CD VARCHAR(8000),
	FEE_EXMP_IND NUMBER(38,0) COMMENT 'Trustee Fee Exemption Indicator. (Values 1 = ON, 0 = OFF)',
	ADMINISTRATOR_TYPE VARCHAR(8000) COMMENT 'Administrator type (Client Name, Nominee, Intermediary)',
	REP_SYSID NUMBER(38,0) COMMENT 'RR code',
	REP_CD VARCHAR(50) COMMENT 'RR code'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_NBIN (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
	TI_TYPE VARCHAR(10) COMMENT 'Financial product type',
	TI_ALTERNATE_TI_CLASS VARCHAR(50) COMMENT 'Financial product class ID',
	TI_CLASS VARCHAR(50) COMMENT 'Financial product class',
	TI_ALTERNATE_SHORT_DESC VARCHAR(100) COMMENT 'Financial product short decsription',
	ENGLISH_DESCRIPTION VARCHAR(512) COMMENT 'Financial product description',
	TI_SYMBOL VARCHAR(512) COMMENT 'TI Symbol'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_UNIVERIS (
	HK_HUB VARCHAR(100) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(100) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	CURRENCY_CD VARCHAR(3) COMMENT 'Currency iso code',
	SYMBOL VARCHAR(100) COMMENT 'Standard code in the industry of mutual funds',
	IVD_ST_DESC_ENG VARCHAR(100) COMMENT 'Product detail status description English (Red/Transfer/Switch,Inactive,Active,Soft Cap,etc.)',
	IVD_ST_DESC_FRE VARCHAR(100) COMMENT 'Product detail status description French (Rachat/Transfert/Échange,Inactif,Actif,FRE:Soft Cap,etc.)',
	IVD_LOAD_DESC_ENG VARCHAR(100) COMMENT 'Product load description (Deferred Sales Charge,No Load,Initial Sales Charge,etc)',
	IVD_LOAD_DESC_FRE VARCHAR(100) COMMENT 'Product load description (Frais de ventes reportés,Sans frais d acquisition,Frais prélevés à l acquisition,etc)',
	IVT_NAME_ENG VARCHAR(100) COMMENT 'Product name in English',
	IVT_NAME_FRE VARCHAR(100) COMMENT 'Product name in French',
	IVT_CD_DESC_ENG VARCHAR(100) COMMENT 'Fund type English (regular, asset allocation)',
	IVT_CD_DESC_FRE VARCHAR(100) COMMENT 'Fund type French (régulier, affectation de l actif)',
	IVT_ST_DESC_ENG VARCHAR(100) COMMENT 'Product status description English (Red/Transfer/Switch,Inactive,Active,Soft Cap,etc.)',
	IVT_ST_DESC_FRE VARCHAR(100) COMMENT 'Product status description French (Rachat/Transfert/Échange,Inactif,Actif,FRE:Soft Cap,etc.)',
	ASSET_CLASS_DESC_ENG VARCHAR(100) COMMENT 'Asset class description English (Canadian Equity, U.S. Money Market, etc)',
	ASSET_CLASS_DESC_FRE VARCHAR(100) COMMENT 'Asset class description French(Actions canadiennes, Marché monétaire américain, etc)',
	ASSET_CTGY_DESC_ENG VARCHAR(100) COMMENT 'Asset category description English(Canadian Fixed Income, US Equity, etc)',
	ASSET_CTGY_DESC_FRE VARCHAR(100) COMMENT 'Asset category description French(Revenu fixe canadien, Actions américaines, etc)',
	IVT_TYPE_DESC_ENG VARCHAR(100) COMMENT 'Product type description English(Mutual Fund, Hedge Fund, etc)',
	IVT_TYPE_DESC_FRE VARCHAR(100) COMMENT 'Product type description French (Fonds communs de placement, Fonds spéculatif, etc)',
	CTGY_DESC_ENG VARCHAR(100) COMMENT 'Product category description English(Mutual Fund, Hedge Fund, etc)',
	CTGY_DESC_FRE VARCHAR(100) COMMENT 'Product category description French (Fonds communs de placement, Fonds spéculatif, etc)',
	GROUP_DESC_ENG VARCHAR(100) COMMENT 'Product group description English(Funds, Bond, etc)',
	GROUP_DESC_FRE VARCHAR(100) COMMENT 'Product group description French(Fonds, Obligations, etc)',
	MGT_CD VARCHAR(100) COMMENT 'Management company code',
	MGT_NAME_ENG VARCHAR(100) COMMENT 'Management company name English',
	MGT_NAME_FRE VARCHAR(100) COMMENT 'Management company name French'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_INVESTIA_UNIVERIS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	CURRENCY_CD VARCHAR(3) COMMENT 'Currency iso code',
	SYMBOL VARCHAR(20) COMMENT 'Standard code in the industry of mutual funds',
	IVD_ST_DESC_ENG VARCHAR(40) COMMENT 'Product detail status description English (Red/Transfer/Switch,Inactive,Active,Soft Cap,etc.)',
	IVD_ST_DESC_FRE VARCHAR(40) COMMENT 'Product detail status description French (Rachat/Transfert/Échange,Inactif,Actif,FRE:Soft Cap,etc.)',
	IVD_LOAD_DESC_ENG VARCHAR(50) COMMENT 'Product load description (Deferred Sales Charge,No Load,Initial Sales Charge,etc)',
	IVD_LOAD_DESC_FRE VARCHAR(50) COMMENT 'Product load description (Frais de ventes reportés,Sans frais d acquisition,Frais prélevés à l acquisition,etc)',
	IVT_NAME_ENG VARCHAR(60) COMMENT 'Product name in English',
	IVT_NAME_FRE VARCHAR(60) COMMENT 'Product name in French',
	IVT_CD_DESC_ENG VARCHAR(50) COMMENT 'Fund type English (regular, asset allocation)',
	IVT_CD_DESC_FRE VARCHAR(50) COMMENT 'Fund type French (régulier, affectation de l actif)',
	IVT_ST_DESC_ENG VARCHAR(40) COMMENT 'Product status description English (Red/Transfer/Switch,Inactive,Active,Soft Cap,etc.)',
	IVT_ST_DESC_FRE VARCHAR(40) COMMENT 'Product status description French (Rachat/Transfert/Échange,Inactif,Actif,FRE:Soft Cap,etc.)',
	ASSET_CLASS_DESC_ENG VARCHAR(80) COMMENT 'Asset class description English (Canadian Equity, U.S. Money Market, etc)',
	ASSET_CLASS_DESC_FRE VARCHAR(80) COMMENT 'Asset class description French(Actions canadiennes, Marché monétaire américain, etc)',
	ASSET_CTGY_DESC_ENG VARCHAR(80) COMMENT 'Asset category description English(Canadian Fixed Income, US Equity, etc)',
	ASSET_CTGY_DESC_FRE VARCHAR(80) COMMENT 'Asset category description French(Revenu fixe canadien, Actions américaines, etc)',
	IVT_TYPE_DESC_ENG VARCHAR(40) COMMENT 'Product type description English(Mutual Fund, Hedge Fund, etc)',
	IVT_TYPE_DESC_FRE VARCHAR(40) COMMENT 'Product type description French (Fonds communs de placement, Fonds spéculatif, etc)',
	CTGY_DESC_ENG VARCHAR(50) COMMENT 'Product category description English(Mutual Fund, Hedge Fund, etc)',
	CTGY_DESC_FRE VARCHAR(50) COMMENT 'Product category description French (Fonds communs de placement, Fonds spéculatif, etc)',
	GROUP_DESC_ENG VARCHAR(20) COMMENT 'Product group description English(Funds, Bond, etc)',
	GROUP_DESC_FRE VARCHAR(20) COMMENT 'Product group description French(Fonds, Obligations, etc)',
	MGT_CD VARCHAR(4) COMMENT 'Management company code',
	MGT_NAME_ENG VARCHAR(60) COMMENT 'Management company name English',
	MGT_NAME_FRE VARCHAR(60) COMMENT 'Management company name French'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR (
	HK_LINK VARCHAR(64) COMMENT 'Hash of the business keys',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	REVENUEPCT NUMBER(6,3) COMMENT 'Dispatch of revenues (percentage)',
	COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
	NETCOMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Percentage',
	FEEPCT NUMBER(6,3) COMMENT 'Fee Sharing Percentage',
	REVNO NUMBER(38,0) COMMENT 'Revision number',
	STAMP TIMESTAMP_NTZ(9) COMMENT 'Source row timestamp',
	START_DT TIMESTAMP_NTZ(9) COMMENT 'Start date of the share',
	END_DT TIMESTAMP_NTZ(9) COMMENT 'End date of the share'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(64) COMMENT 'Hash of the business keys',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	REP_SYSID NUMBER(38,0) COMMENT 'Registered Representative ID',
	BEN_SYSID NUMBER(38,0) COMMENT 'Dealer ID',
	COMM_RATE NUMBER(29,12) COMMENT 'Commission Rate',
	BRN_SYSID NUMBER(38,0) COMMENT 'Branch ID',
	BRN_CD VARCHAR(10) COMMENT 'Branch code'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_IAS_NBIN (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_IAS_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""\""A\""\"" row exists in the source, \""\""D\""\"" row does not exist in the source'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_IAS_NBIN (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	SIN_HASH VARCHAR(64) COMMENT 'SIN Hash',
	CLIENT_BIRTH_DATE DATE COMMENT 'Client birth date',
	CLIENT_TAX_RECIP_TYPE VARCHAR(10) COMMENT 'Tax recipient type : 1 - Individual, 2 - Joint, 3 - Corporation, ...',
	CLIENT_RESIDENCE VARCHAR(50) COMMENT 'Client residence country',
	CLIENT_RESIDENCE_REGION VARCHAR(50) COMMENT 'Client residence province',
	CLIENT_ANNUAL_GROSS_INC VARCHAR(10) COMMENT 'Annual gross income',
	CLIENT_INIT_CONTRACT_DATE DATE COMMENT 'Initial contrat date',
	CLIENT_INV_KNOWLEDGE_LVL VARCHAR(1) COMMENT 'Clients Investment Knowledge Level',
	A_C_NAME VARCHAR(1000) COMMENT 'A_C_NAME',
	A_C_FIRST_NAME VARCHAR(1000) COMMENT 'A_C_FIRST_NAME',
	A_C_MIDDLE_NAME VARCHAR(1000) COMMENT 'A_C_MIDDLE_NAME',
	A_C_LAST_NAME VARCHAR(1000) COMMENT 'A_C_LAST_NAME',
	CLIENT_FIRST_NAME VARCHAR(1000) COMMENT 'CLIENT_FIRST_NAME',
	CLIENT_LAST_NAME VARCHAR(1000) COMMENT 'CLIENT_LAST_NAME'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_IAS_UNIVERIS (
	HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""\""A\""\"" row exists in the source, \""\""D\""\"" row does not exist in the source',
	REP_SYSID NUMBER(38,0) COMMENT 'Rep SYSID, to reference with the Advisor data',
	RECIPIENT_DESC_ENG VARCHAR(30) COMMENT 'Investor type description English(Individual, Joint WROS, etc)',
	RECIPIENT_DESC_FRE VARCHAR(50) COMMENT 'Investor type description French(Individuel, CADDS, etc)',
	CORP_CD VARCHAR(30) COMMENT 'Wether it is corporate',
	IVR_ST_NAME_ENG VARCHAR(40) COMMENT 'Investor status description English(Active, Closed, etc)',
	IVR_ST_NAME_FRE VARCHAR(40) COMMENT 'Investor status description French (Actif, Fermé, etc)',
	IVR_REG_2 VARCHAR(80) COMMENT 'Investor Other/Corporate name',
	LANG_CD VARCHAR(1) COMMENT 'Investor language code for English or French reference on S_LANG',
	IVR_RES_CD VARCHAR(18) COMMENT 'Investor residence code—if Canadian name of the province',
	IVR_SETUP_DT TIMESTAMP_NTZ(9) COMMENT 'Date on which this record was set up',
	IVR_STOP_DT TIMESTAMP_NTZ(9) COMMENT 'Date of closing the account',
	IVR_FRGN_CTNT BOOLEAN COMMENT 'Check for foreign content',
	IVR_HOLD_MAIL BOOLEAN COMMENT 'Check for holding mail',
	IVR_INC_ADR BOOLEAN COMMENT 'Check for incomplete address',
	IVR_STMT_FREQ VARCHAR(1) COMMENT 'Statement frequency reference on S_FRENQUENCY',
	IVR_STMT_TYPE VARCHAR(2) COMMENT 'Statement type',
	IVR_STMT_DT TIMESTAMP_NTZ(9) COMMENT 'Statement date',
	IVR_OLD_DLR VARCHAR(5) COMMENT 'Previous dealer',
	SALARY_DESC VARCHAR(40) COMMENT 'Client income segment',
	IVR_KYC_DT TIMESTAMP_NTZ(9) COMMENT 'Date KYC information keyed in',
	IVR_PRIM_BDT DATE COMMENT 'Date of birth is not corporate',
	CREATE_DT DATE COMMENT 'Create Date'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_INVESTIA_UNIVERIS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	REP_SYSID NUMBER(38,0) COMMENT 'Rep SYSID, to reference with the Advisor data',
	RECIPIENT_DESC_ENG VARCHAR(30) COMMENT 'Investor type description English(Individual, Joint WROS, etc)',
	RECIPIENT_DESC_FRE VARCHAR(50) COMMENT 'Investor type description French(Individuel, CADDS, etc)',
	CORP_CD VARCHAR(30) COMMENT 'Wether it is corporate',
	IVR_ST_NAME_ENG VARCHAR(40) COMMENT 'Investor status description English(Active, Closed, etc)',
	IVR_ST_NAME_FRE VARCHAR(40) COMMENT 'Investor status description French (Actif, Fermé, etc)',
	IVR_REG_2 VARCHAR(80) COMMENT 'Investor Other/Corporate name',
	LANG_CD VARCHAR(1) COMMENT 'Investor language code for English or French reference on S_LANG',
	IVR_RES_CD VARCHAR(18) COMMENT 'Investor residence code—if Canadian name of the province',
	IVR_SETUP_DT TIMESTAMP_NTZ(9) COMMENT 'Date on which this record was set up',
	IVR_STOP_DT TIMESTAMP_NTZ(9) COMMENT 'Date of closing the account',
	IVR_FRGN_CTNT BOOLEAN COMMENT 'Check for foreign content',
	IVR_HOLD_MAIL BOOLEAN COMMENT 'Check for holding mail',
	IVR_INC_ADR BOOLEAN COMMENT 'Check for incomplete address',
	IVR_STMT_FREQ VARCHAR(1) COMMENT 'Statement frequency reference on S_FRENQUENCY',
	IVR_STMT_TYPE VARCHAR(2) COMMENT 'Statement type',
	IVR_STMT_DT TIMESTAMP_NTZ(9) COMMENT 'Statement date',
	IVR_OLD_DLR VARCHAR(5) COMMENT 'Previous dealer',
	SALARY_DESC VARCHAR(40) COMMENT 'Client income segment',
	IVR_KYC_DT TIMESTAMP_NTZ(9) COMMENT 'Date KYC information keyed in',
	IVR_PRIM_BDT DATE COMMENT 'Date of birth is not corporate',
	CREATE_DT DATE COMMENT 'Create Date'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_REF_FUND_IAS_FUNDATA (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	FUNDID VARCHAR(1000) COMMENT 'FUND Id',
	FUNDDESCFR VARCHAR(1000) COMMENT 'Fund description in French',
	FUNDDESCEN VARCHAR(1000) COMMENT 'Fund description in English',
	FUNDTYPE VARCHAR(1000) COMMENT 'Fund Type',
	GROUPNAMEFR VARCHAR(1000) COMMENT 'Manager Name in French',
	GROUPNAMEEN VARCHAR(1000) COMMENT 'Manager Name in English',
	RRSPELIGIBLE VARCHAR(1000) COMMENT 'RRSP Eligible indicator',
	FUNDDESCLONGFR VARCHAR(1000) COMMENT 'Fund long description in French',
	FUNDDESCLONGEN VARCHAR(1000) COMMENT 'Fund long description in English',
	LEGALNAMEEN VARCHAR(1000) COMMENT 'Legal name in French',
	LEGALNAMEFR VARCHAR(1000) COMMENT 'Legal name in English',
	STAMP VARCHAR(1000) COMMENT 'Last modification TimeStamp'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_REF_HOLIDAYS_IAS_IAVM (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Reference',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	DESCRIPTION VARCHAR(512) COMMENT 'Description of the holiday'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_NBIN (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_UNIVERIS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PLN_REG NUMBER(38,0) COMMENT 'Plan registration',
	PLN_CD VARCHAR(8000) COMMENT 'Plan mnemonic code',
	PLN_DESC VARCHAR(8000) COMMENT 'Plan mnemonic description',
	PLN_MNEM_F VARCHAR(8000) COMMENT 'plan mnemonic code FR',
	PLN_DESC_F VARCHAR(8000) COMMENT 'Plan mnemonic description FR',
	PLN_MNEM_ENG VARCHAR(8000) COMMENT 'Plan mnemonic code 2 EN',
	PLN_DESC_ENG VARCHAR(8000) COMMENT 'Plan mnemonic description 2 EN',
	PLN_SHORT_DESC_ENG VARCHAR(8000) COMMENT 'Plan short description EN',
	PLN_MNEM_FRE VARCHAR(8000) COMMENT 'Plan mnemonic code 2 FR',
	PLN_DESC_FRE VARCHAR(8000) COMMENT 'Plan mnemonic description 2 FR',
	PLN_SHORT_DESC_FRE VARCHAR(8000) COMMENT 'plan short description 2 FR',
	STMT_GROUP_MNEM VARCHAR(8000) COMMENT 'mnemonic code grouping'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_INVESTIA_UNIVERIS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PLN_REG NUMBER(38,0) COMMENT 'Plan registration',
	PLN_CD VARCHAR(255) COMMENT 'Plan mnemonic code',
	PLN_DESC VARCHAR(255) COMMENT 'Plan mnemonic description',
	PLN_MNEM_F VARCHAR(255) COMMENT 'plan mnemonic code FR',
	PLN_DESC_F VARCHAR(255) COMMENT 'Plan mnemonic description FR',
	PLN_MNEM_ENG VARCHAR(255) COMMENT 'Plan mnemonic code 2 EN',
	PLN_DESC_ENG VARCHAR(255) COMMENT 'Plan mnemonic description 2 EN',
	PLN_SHORT_DESC_ENG VARCHAR(255) COMMENT 'Plan short description EN',
	PLN_MNEM_FRE VARCHAR(255) COMMENT 'Plan mnemonic code 2 FR',
	PLN_DESC_FRE VARCHAR(255) COMMENT 'Plan mnemonic description 2 FR',
	PLN_SHORT_DESC_FRE VARCHAR(255) COMMENT 'plan short description 2 FR',
	STMT_GROUP_MNEM VARCHAR(255) COMMENT 'mnemonic code grouping'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_REF_MAPPING_PRODUCT_TYPE_IAS_IAVM (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	DESCRIPTIONEN VARCHAR(512) COMMENT 'Description in English',
	DESCRIPTIONFR VARCHAR(512) COMMENT 'Description in French',
	PRODUCTTYPE VARCHAR(100) COMMENT 'Type of Product'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_REF_PROVINCE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PROV_DESC VARCHAR(50) COMMENT 'Province code : QC'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_COMMISSION (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	HK_SAT VARCHAR(40) COMMENT 'Hash of the Satellite for the multi-active keys',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	REPNAME VARCHAR(512) COMMENT 'Representative name',
	FIRSTNAME VARCHAR(512) COMMENT 'Representative first name',
	LASTNAME VARCHAR(512) COMMENT 'Representative last name',
	BRANCHCODE VARCHAR(50) COMMENT 'Code of the representative branch code',
	BRANCHNAME VARCHAR(512) COMMENT 'Name of the representative branch',
	GROUPID NUMBER(38,0) COMMENT 'Representant Group ID',
	GROUPDESCRIPTION VARCHAR(512) COMMENT 'Advisor group description',
	FIXEDFEEIND NUMBER(38,0) COMMENT 'Fixed fees indicator',
	MANAGEDIND NUMBER(38,0) COMMENT 'Managed indicator',
	REFIND NUMBER(38,0) COMMENT 'Holding value currency',
	ACTIVEIND NUMBER(38,0) COMMENT 'Active RR code indicator',
	SEGFUNDIND NUMBER(38,0) COMMENT 'Segregated funds indicator',
	REVNO NUMBER(38,0) COMMENT 'Revision number',
	STAMP TIMESTAMP_NTZ(9) COMMENT 'Source row timestamp',
	USERID VARCHAR(512) COMMENT 'User id',
	ACTIVE NUMBER(38,0) COMMENT 'Active user indicator',
	ADVISOR_ID VARCHAR(512) COMMENT 'Advisor id',
	COMMRATEPCT NUMBER(6,3) COMMENT 'Default Commission Rate Percentage',
	SHAREGROSSCOMMIND NUMBER(38,0) COMMENT 'Indicator of share of gross commission',
	STARTDATE DATE COMMENT 'the starting date of the advisor',
	MAINREPCODE VARCHAR(50) COMMENT 'Main RR code',
	ADVISOR_ROLE VARCHAR(500) COMMENT 'Advisor role (e.g. isAdvisor, isAssistant and isBranchManager)'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_CERTS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	HK_SAT VARCHAR(40) COMMENT 'Hash of the Satellite for the multi-active keys',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	CID VARCHAR(500) COMMENT 'Source Account ID exp: #100002',
	FIRST_NAME VARCHAR(500) COMMENT 'First Name of the advisor',
	LAST_NAME VARCHAR(500) COMMENT 'last Name of the advisor',
	FULL_NAME VARCHAR(1000) COMMENT 'Full Name of the advisor',
	PRIMARY_ROLE VARCHAR(500) COMMENT 'Primary role of the advisor',
	RVP VARCHAR(500) COMMENT 'Regional RVP',
	BRANCH_NRD VARCHAR(500) COMMENT 'Branch code',
	BRANCH_NAME VARCHAR(500) COMMENT 'Name of the Branch of the advisor',
	PROVINCE VARCHAR(500) COMMENT 'Province of the advisor',
	IS_ACTIVE NUMBER(1,0) COMMENT 'Flag to identify the active advisor or not',
	TRADE_NAME VARCHAR(2000) COMMENT 'Trade name',
	PORTAL_IDS VARCHAR(2000) COMMENT 'Portal identifier exp: PortalIds_#118048',
	BEGIN_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor begin date',
	END_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor end date',
	ADVISOR_BIRTH_DATE DATE COMMENT 'Advisor month and year of birth',
	REP_EMAIL VARCHAR(1000) COMMENT 'Advisor repemail',
	CBM VARCHAR(1000) COMMENT 'Advisor cbm',
	BRANCH_ADDRESS1 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS1',
	BRANCH_ADDRESS2 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS2',
	BRANCH_CITY VARCHAR(1000) COMMENT 'Advisor branch city',
	BRANCH_POSTAL_CODE VARCHAR(1000) COMMENT 'Advisor branch postal code'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_IAVM (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	MEMBER VARCHAR(250) COMMENT 'Member: JSMITH',
	TEAMTYPE VARCHAR(7) COMMENT 'The type of team - Default constant',
	ACTIVE VARCHAR(12) COMMENT 'Active',
	USERTYPE VARCHAR(12) COMMENT 'Type of User : IA',
	TEAMID NUMBER(38,0) COMMENT 'The advisor team code',
	TEAMNAME VARCHAR(256) COMMENT 'The advisor team name: IA HOUSE',
	RVPID NUMBER(38,0) COMMENT 'VP Rep ID',
	RVPNAME VARCHAR(256) COMMENT 'VP Name',
	REPNAME VARCHAR(250) COMMENT 'Representative Name: SMITH JOHN',
	PROVINCE VARCHAR(12) COMMENT 'Province Code : ON'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_UNIVERIS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	COMPANY_CD VARCHAR(50) COMMENT 'Company code : Wealth',
	COMPANY_NAME VARCHAR(512) COMMENT 'Company name : iA Wealth Management',
	REGULATORY_ORG_CD VARCHAR(50) COMMENT 'Regulatory organisation code : MFDA or IIROC',
	REGULATORY_ORG_NAME VARCHAR(512) COMMENT 'Regulatory organisation name : Mutual Fund Dealers Association',
	DLR_SYSID NUMBER(38,0) COMMENT 'Univeris ID of the dealer',
	DLR_CD VARCHAR(50) COMMENT 'Dealer code : Univeris code for the dealer',
	DLR_NAME_ENG VARCHAR(512) COMMENT 'Dealer name in english : Fundex Investments inc.',
	RGN_SYSID NUMBER(38,0) COMMENT 'Univeris ID for the advisor region',
	RGN_CD VARCHAR(50) COMMENT 'Univeris code for the advisor region',
	RGN_NAME VARCHAR(512) COMMENT 'The advisor region name',
	RGN_MGR VARCHAR(512) COMMENT 'The name of the regional VP',
	BRN_SYSID NUMBER(38,0) COMMENT 'Univeris ID of the advisors branch',
	BRN_CD VARCHAR(50) COMMENT 'Univeris Code for the advisors branch',
	BRN_NAME VARCHAR(512) COMMENT 'The advisor branch name',
	REP_TEAM_CD VARCHAR(50) COMMENT 'The advisor team code',
	REP_TEAM_NAME VARCHAR(512) COMMENT 'The advisor team name',
	REP_SYSID NUMBER(38,0) COMMENT 'Univeris ID of the advisor rep code',
	NK_REP_CORP_NAME VARCHAR(512) COMMENT 'Corporation name of the advisor',
	REP_LNAME VARCHAR(512) COMMENT 'Advisor last name',
	REP_FNAME VARCHAR(512) COMMENT 'Advisor first name',
	REP_ST_NAME VARCHAR(512) COMMENT 'Advisor status : Active, Terminated,...',
	REP_GRP_RSP VARCHAR(512) COMMENT 'Advisor GRP RSP : 0,...'
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_INVESTIA_UNIVERIS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	COMPANY_CD VARCHAR(50) COMMENT 'Company code : Wealth',
	COMPANY_NAME VARCHAR(512) COMMENT 'Company name : iA Wealth Management',
	REGULATORY_ORG_CD VARCHAR(50) COMMENT 'Regulatory organisation code : MFDA or IIROC',
	REGULATORY_ORG_NAME VARCHAR(512) COMMENT 'Regulatory organisation name : Mutual Fund Dealers Association',
	DLR_SYSID NUMBER(38,0) COMMENT 'Univeris ID of the dealer',
	DLR_CD VARCHAR(50) COMMENT 'Dealer code : Univeris code for the dealer',
	DLR_NAME_ENG VARCHAR(512) COMMENT 'Dealer name in english : Fundex Investments inc.',
	RGN_SYSID NUMBER(38,0) COMMENT 'Univeris ID for the advisor region',
	RGN_CD VARCHAR(50) COMMENT 'Univeris code for the advisor region',
	RGN_NAME VARCHAR(512) COMMENT 'The advisor region name',
	RGN_MGR VARCHAR(512) COMMENT 'The name of the regional VP',
	BRN_SYSID NUMBER(38,0) COMMENT 'Univeris ID of the advisors branch',
	BRN_CD VARCHAR(50) COMMENT 'Univeris Code for the advisors branch',
	BRN_NAME VARCHAR(512) COMMENT 'The advisor branch name',
	REP_TEAM_CD VARCHAR(50) COMMENT 'The advisor team code',
	REP_TEAM_NAME VARCHAR(512) COMMENT 'The advisor team name',
	REP_SYSID NUMBER(38,0) COMMENT 'Univeris ID of the advisor rep code',
	REP_CORP_NAME VARCHAR(512) COMMENT 'Corporation name of the advisor',
	REP_LNAME VARCHAR(512) COMMENT 'Advisor last name',
	REP_FNAME VARCHAR(512) COMMENT 'Advisor first name',
	REP_ST_NAME VARCHAR(512) COMMENT 'Advisor status : Active, Terminated,...',
	REP_GRP_RSP VARCHAR(512) COMMENT 'Group RSP indicator',
	PROV_CD VARCHAR(10) COMMENT 'Province Code : In Univeris ',
	REP_TITLE_DESC VARCHAR(100) COMMENT 'Representative title : Title description In Univeris ',
	TERMINATE_DT TIMESTAMP_NTZ(9) COMMENT 'Representative terminated date : In Univeris ',
	CREATE_DT TIMESTAMP_NTZ(9) COMMENT 'Representative Start date : In Univeris '
);
create or replace TABLE DB_IAW_PROD_DWH.SHARED_RDV.TRANSLINK_EXCHANGE_RATE (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	EXCHANGE_DATE DATE COMMENT 'Exchange rate date',
	EXCHANGERATE NUMBER(38,8) COMMENT 'Conversion rate from USD to CAD',
	REVNO NUMBER(38,0) COMMENT 'Modification version number'
);
create or replace view DB_IAW_PROD_DWH.SHARED_RDV.VW_ADVISOR_IAS_CERTS(
	HK_HUB,
	MD_START_DT,
	MD_HASHDIFF,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	CID,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
	PRIMARY_ROLE,
	RVP,
	BRANCH_NRD,
	BRANCH_NAME,
	PROVINCE,
	IS_ACTIVE,
	RR_CD,
	TRADE_NAME,
	PORTAL_IDS,
	BEGIN_DT,
	END_DT,
	ADVISOR_BIRTH_DATE,
	REP_EMAIL,
	CBM,
	BRANCH_ADDRESS1,
	BRANCH_ADDRESS2,
	BRANCH_CITY,
	BRANCH_POSTAL_CODE
) as
SELECT 
SHA1(UPPER(CONCAT( COALESCE(TRIM(CID), '#NULL#'), '|', COALESCE(TRIM(RR_CD), '#NULL#')))) AS HK_HUB,
MD_START_DT,
MD_HASHDIFF,  
MD_SOURCE, 
MD_SRC_SYSTEM, 
MD_EXTRACT_DT, 
CID, 
FIRST_NAME, 
LAST_NAME, 
FULL_NAME, 
PRIMARY_ROLE, 
RVP, 
BRANCH_NRD, 
BRANCH_NAME, 
PROVINCE, 
IS_ACTIVE,
RR_CD,
TRADE_NAME,
PORTAL_IDS,
BEGIN_DT,
END_DT,
ADVISOR_BIRTH_DATE,
REP_EMAIL,	 
CBM,	 
BRANCH_ADDRESS1,
BRANCH_ADDRESS2,
BRANCH_CITY,
BRANCH_POSTAL_CODE
FROM DB_IAW_PROD_STG.IAS_CERTS.REGISTERED_REPRESENTATIVE;
create or replace view DB_IAW_PROD_DWH.SHARED_RDV.VW_HUB_REGISTERED_REPRESENTAVIVE_IAS_CERTS(
	HK_HUB,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	RR_CD
) as 
SELECT DISTINCT HK_HUB,MD_SOURCE ,MD_SRC_SYSTEM ,MD_EXTRACT_DT ,RR_CD
FROM DB_IAW_PROD_STG.IAS_CERTS.REGISTERED_REPRESENTATIVE
WHERE RR_CD IS NOT NULL;
create or replace view DB_IAW_PROD_DWH.SHARED_RDV.VW_IAS_GET_CLIENT_START_DATE(
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	MD_START_DT,
	CLIENT_ID,
	CLIENT_START_DT,
	MD_ACTIVE
) as
WITH
ACCOUNT_START_DT_DATASET AS (
		-- Get the Client, Clients Hash and Earliest Clients Open Date --
		SELECT hub.HK_HUB, sat.A_C_CLIENT , sat.A_C_OPEN_DATE
			FROM  SHARED_RDV.SAT_CONTRACT_IAS_NBIN sat
			INNER JOIN SHARED_RDV.HUB_CONTRACT hub 
			ON sat.HK_HUB = hub.HK_HUB
		WHERE sat.MD_SRC_SYSTEM = 'IAS' 
		-- Earliest Date for a Client
		QUALIFY  ROW_NUMBER() OVER (PARTITION BY sat.A_C_CLIENT ORDER BY sat.MD_START_DT ) = 1
)
	  -- Get Client and associated Hashes for Links to ACCOUNT_START_DT query. --
SELECT hub.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, sat.MD_START_DT, hub.CLIENT_ID, ASDT.A_C_OPEN_DATE AS CLIENT_START_DT, sat.MD_ACTIVE
FROM   SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR hub
INNER JOIN SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_IAS_NBIN sat
ON hub.HK_LINK = sat.HK_LINK 
AND sat.MD_SRC_SYSTEM = 'IAS'
LEFT JOIN ACCOUNT_START_DT_DATASET ASDT
ON ASDT.A_C_CLIENT = hub.CLIENT_ID;
create or replace view DB_IAW_PROD_DWH.SHARED_RDV.VW_INVESTMENT_PRODUCT_SYMBOLS(
	SYMBOL,
	MD_START_DT
) as 
SELECT DISTINCT F.FUNDSERVID AS SYMBOL,S.MD_START_DT 
FROM SHARED_RDV.REF_FUND f
INNER JOIN SHARED_RDV.SAT_REF_FUND_IAS_FUNDATA S
ON F.HK_HUB =S.HK_HUB 
WHERE S.HK_HUB <>'0'   
UNION 
SELECT DISTINCT  IAS.TI_SYMBOL AS SYMBOL ,IAS.MD_START_DT 
FROM SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_NBIN IAS
WHERE IAS.HK_HUB <>'0'  
--AND IAS.MD_START_DT ='2000-01-01 00:00:00'
--AND TI_SYMBOL IS NULL
UNION 
SELECT DISTINCT UNI.SYMBOL ,UNI.MD_START_DT 
FROM SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_UNIVERIS UNI
WHERE UNI.HK_HUB <>'0';
create or replace view DB_IAW_PROD_DWH.SHARED_RDV.VW_REGISTERED_REPRESENTATIVE_NOTNULL(
	HK_HUB,
	HK_SAT,
	MD_START_DT,
	MD_HASHDIFF,
	MD_CREATION_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	CID,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
	PRIMARY_ROLE,
	RVP,
	BRANCH_NRD,
	BRANCH_NAME,
	PROVINCE,
	IS_ACTIVE,
	RR_CD,
	TRADE_NAME,
	PORTAL_IDS,
	BEGIN_DT,
	END_DT,
	ADVISOR_BIRTH_DATE,
	REP_EMAIL,
	CBM,
	BRANCH_ADDRESS1,
	BRANCH_ADDRESS2,
	BRANCH_CITY,
	BRANCH_POSTAL_CODE
) as 
SELECT HK_HUB,
	HK_SAT,
	MD_START_DT,
	MD_HASHDIFF,
	MD_CREATION_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	CID,
	FIRST_NAME,
	LAST_NAME,
	FULL_NAME,
	PRIMARY_ROLE,
	RVP,
	BRANCH_NRD,
	BRANCH_NAME,
	PROVINCE,
	IS_ACTIVE,
	RR_CD,
	TRADE_NAME,
	PORTAL_IDS,
	BEGIN_DT,
	END_DT,
	ADVISOR_BIRTH_DATE,
    REP_EMAIL,	 
	CBM,	 
	BRANCH_ADDRESS1,
	BRANCH_ADDRESS2,
	BRANCH_CITY,
	BRANCH_POSTAL_CODE
FROM DB_IAW_PROD_STG.IAS_CERTS.REGISTERED_REPRESENTATIVE 
WHERE RR_CD IS NOT NULL;
create or replace view DB_IAW_PROD_DWH.SHARED_RDV.VW_SAT_LINK_COMMISSION_SHARE_RR_MULTIIMAGE(
	HK_LINK,
	MD_START_DT,
	MD_HASHDIFF,
	PREVIOUS_HASHDIFF,
	ROW_SRC
) as
WITH STG AS 
(
	SELECT DISTINCT r.HK_LINK, r.MD_START_DT, r.MD_HASHDIFF, 'STG' AS ROW_SRC
	FROM DB_IAW_PROD_STG.IAS_COMMISSION.VW_SHARE_AUD r	
),
SAT AS
(
	SELECT 	DISTINCT r.HK_LINK, 
			LAST_VALUE(r.MD_START_DT) over (partition by r.HK_LINK order by r.MD_START_DT asc) AS MD_START_DT,
			LAST_VALUE(r.MD_HASHDIFF) over (partition by r.HK_LINK order by r.MD_START_DT asc) AS MD_HASHDIFF,
			'SAT' AS ROW_SRC
	FROM SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR r
	WHERE MD_SRC_SYSTEM = 'IAS'
),
SRC AS
(
	SELECT 	r.HK_LINK, 
			r.MD_START_DT, 
			r.MD_HASHDIFF, 
			lag(r.MD_HASHDIFF, 1, '0') over (partition by r.HK_LINK order by r.MD_START_DT asc) AS PREVIOUS_HASHDIFF,
			r.ROW_SRC
	FROM 
	(
		SELECT * FROM SAT
		UNION  
		SELECT * FROM STG
	) AS r
),
RSLT AS
(
  SELECT * 
  FROM SRC r
  WHERE r.MD_HASHDIFF <> r.PREVIOUS_HASHDIFF 
)
SELECT RSLT.* 
FROM RSLT
LEFT JOIN SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR S ON RSLT.HK_LINK = S.HK_LINK AND RSLT.MD_START_DT = S.MD_START_DT
WHERE S.HK_LINK IS NULL;
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.SHARED_RDV.SP_CONV_LOADRDV_IAS_COMISSION_TO_SAT_LINK_SHARE_RR_DELETE(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_QUERY STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_QUERY := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR
WITH share_hist AS (
SELECT
    HK_LINK,
    MD_START_DT,
    MD_HASHDIFF,
    MD_CREATION_DT,
    MD_CREATION_AUDIT_ID,
    MD_SOURCE,
    MD_SRC_SYSTEM,
    MD_EXTRACT_DT,
    MD_ACTIVE,
    REVENUEPCT,
    COMMISSIONPCT,
    NETCOMMISSIONPCT,
    FEEPCT,
    REVNO,
    STAMP,
    START_DT,
    END_DT,
    LEAD(START_DT) over (partition by hk_link order by start_dt)  
FROM SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR
)
SELECT
    HK_LINK,
TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD''''),
    MD_HASHDIFF,
    SYSTIMESTAMP() 
    MD_CREATION_AUDIT_ID,
    MD_SOURCE,
    MD_SRC_SYSTEM,
    MD_EXTRACT_DT,
    ''''D'''' ,
    REVENUEPCT,
    COMMISSIONPCT,
    NETCOMMISSIONPCT,
    FEEPCT,
    REVNO,
    STAMP,
    START_DT,
    END_DT
FROM share_hist
WHERE END_DT <> COALESCE(next_start_dt,''''9999-12-31'''')
UNION
SELECT
    HK_LINK,
TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD''''),
    MD_HASHDIFF,
    SYSTIMESTAMP(),
    MD_CREATION_AUDIT_ID,
    MD_SOURCE,
    MD_SRC_SYSTEM,
    MD_EXTRACT_DT,
    ''''D'''' ,
    REVENUEPCT,
    COMMISSIONPCT,
    NETCOMMISSIONPCT,
    FEEPCT,
    REVNO,
    STAMP,
    START_DT,
    END_DT
FROM share_hist
WHERE END_DT <> ''''9999-12-31''''
AND MD_ACTIVE = ''''A''''

'';
EXECUTE IMMEDIATE :INS_QUERY;
END
';
create or replace schema DB_IAW_PROD_DWH.STEWARDSHIP_BDV;

create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_BDV.LINK_SERVICING_CODES (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash of the business keys of party role advisor',
	HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash of the business keys of servicing advisor',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MASTER_CODE VARCHAR(50) COMMENT 'Advisor code',
	REP_CODE VARCHAR(50) COMMENT 'SERVICING CODE'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_BDV.SAT_LINK_SERVICING_CODES (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ADVISOR_NAME VARCHAR(100) COMMENT 'Advisor name',
	END_DATE TIMESTAMP_NTZ(9) COMMENT 'Departure date of the advisor (TBD)',
	REASON VARCHAR(1000) COMMENT 'Reason of departure',
	NEW_FIRM VARCHAR(1000) COMMENT 'Departure destination',
	NEW_FIRM_TYPE VARCHAR(1000) COMMENT 'Departure destination Type',
	NEW_FIRM_BACK_OFFICE VARCHAR(1000) COMMENT 'Departure destination Back-Office',
	PRESTIGE_STATUS VARCHAR(100) COMMENT 'Prestige Status',
	REP_ROW_NUM NUMBER(38,0) COMMENT 'The rownumber of METADATA$FILE_ROW_NUMBER when loading using INFORMATICA'
);
create or replace TRANSIENT TABLE DB_IAW_PROD_DWH.STEWARDSHIP_BDV.WT_SERVICING_CODES (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash of the business keys of party role advisor',
	HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash of the business keys of servicing advisor',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MASTER_CODE VARCHAR(50) COMMENT 'Advisor code',
	REP_CODE VARCHAR(50) COMMENT 'SERVICING CODE',
	ADVISOR_NAME VARCHAR(100) COMMENT 'Advisor name',
	END_DATE TIMESTAMP_NTZ(9) COMMENT 'Departure date of the advisor (TBD)',
	REASON VARCHAR(1000) COMMENT 'Reason of departure',
	NEW_FIRM VARCHAR(1000) COMMENT 'Departure destination',
	NEW_FIRM_TYPE VARCHAR(1000) COMMENT 'Departure destination Type',
	NEW_FIRM_BACK_OFFICE VARCHAR(1000) COMMENT 'Departure destination Back-Office',
	PRESTIGE_STATUS VARCHAR(100) COMMENT 'Prestige Status',
	REP_ROW_NUM NUMBER(38,0) COMMENT 'The rownumber of METADATA$FILE_ROW_NUMBER when loading using INFORMATICA'
);
create or replace view DB_IAW_PROD_DWH.STEWARDSHIP_BDV.VW_IAS_MAPPING_OPER_TYPE(
	HK_HUB,
	MD_SRC_SYSTEM,
	IBMSOURCE,
	LEVEL,
	MD_START_DT,
	MD_HASHDIFF,
	DESCRIPTION_EN,
	DESCRIPTION_SHORT_EN,
	DESCRIPTION_FR,
	DESCRIPTION_SHORT_FR,
	OPERATION_TYPE,
	DISPLAY,
	CASHFLOW_SUMMARY,
	ISCASHFLOW
) as
SELECT 

R.HK_HUB, 
R.MD_SRC_SYSTEM, 
R.IBMSOURCE, 
R.""LEVEL"",
S.MD_START_DT,
S.MD_HASHDIFF, 
S.DESCRIPTION_EN, 
S.DESCRIPTION_SHORT_EN, 
S.DESCRIPTION_FR, 
S.DESCRIPTION_SHORT_FR, 
S.OPERATION_TYPE, 
S.DISPLAY, 
S.CASHFLOW_SUMMARY, 
S.ISCASHFLOW
FROM STEWARDSHIP_RDV.REF_MAPPING_OPER_TYPE R
INNER JOIN STEWARDSHIP_RDV.SAT_REF_MAPPING_OPER_TYPE_IAS S
ON R.HK_HUB=S.HK_HUB
INNER JOIN (SELECT HK_HUB,MAX(MD_START_DT) AS MAX_MD_START_DT FROM STEWARDSHIP_RDV.SAT_REF_MAPPING_OPER_TYPE_IAS GROUP BY HK_HUB)LVS
ON S.HK_HUB=LVS.HK_HUB AND S.MD_START_DT=LVS.MAX_MD_START_DT
WHERE S.MD_ACTIVE='A';
create or replace view DB_IAW_PROD_DWH.STEWARDSHIP_BDV.VW_SERVICING_CODES_SPLIT(
	HK_HUB,
	MD_SEQ,
	MD_START_DT,
	MD_EXTRACT_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MASTER_CODE,
	REP_CODE,
	ADVISOR_NAME,
	END_DATE,
	REASON,
	NEW_FIRM,
	NEW_FIRM_TYPE,
	NEW_FIRM_BACK_OFFICE,
	PRESTIGE_STATUS,
	MD_ACTIVE,
	REP_ROW_NUM
) as
SELECT a.*, case when a.rep_code is null then 1 else (row_number() OVER (PARTITION BY a.REP_CODE ORDER BY a.MD_SEQ)) END AS REP_ROW_NUM FROM (
SELECT 
s.HK_HUB,
s.MD_SEQ,
S.MD_START_DT,
S.MD_EXTRACT_DT,
S.MD_SOURCE,
S.MD_SRC_SYSTEM,
R.MASTER_CODE,
TRIM(c.value::STRING) AS REP_CODE,
S.ADVISOR_NAME,
S.END_DATE,
S.REASON,
S.NEW_FIRM,
S.NEW_FIRM_TYPE,
S.NEW_FIRM_BACK_OFFICE,
S.PRESTIGE_STATUS,
S.MD_ACTIVE
FROM DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_SERVICING_CODES_IAPW S
INNER JOIN DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_SERVICING_CODES R ON S.HK_HUB = R.HK_HUB,
lateral flatten(input=>split(TRIM(UPPER(SERVICING_CODE)), ','),OUTER => TRUE) c) a;
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.STEWARDSHIP_BDV.""DB_IAW_PROD_DWH.STEWARDSHIP_BDV.SP_CONV_LOADBDV_RDV_STEWARDSHIP_IAPW_TO_WT_SERVICING_CODES""(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;
BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.WT_SERVICING_CODES WHERE 1=1'';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.WT_SERVICING_CODES 
(	HK_LINK,
	MD_START_DT,
	MD_CREATION_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	MASTER_CODE,
	REP_CODE,
	ADVISOR_NAME,
	END_DATE,
	REASON,
	NEW_FIRM,
	NEW_FIRM_TYPE,
	NEW_FIRM_BACK_OFFICE,
	PRESTIGE_STATUS
)
SELECT
	src.HK_HUB,
	src.MD_START_DT,
	CURRENT_TIMESTAMP,
	src.MD_SOURCE,
	src.MD_SRC_SYSTEM,
	src.MD_EXTRACT_DT,
	src.MASTER_CODE,
	src.REP_CODE,
	src.ADVISOR_NAME,
	src.END_DATE,
	src.REASON,
	src.NEW_FIRM,
	src.NEW_FIRM_TYPE,
	src.NEW_FIRM_BACK_OFFICE,
	src.PRESTIGE_STATUS

FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.VW_SERVICING_CODES_SPLIT src
JOIN 
(SELECT * FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM VW_SERVICING_CODES_SPLIT) srcHUB WHERE srcHUB.RN = 1 AND srcHUB.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')) sat
ON sat.HK_HUB = src.HK_HUB AND sat.MD_START_DT = TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
WHERE sat.MD_ACTIVE=''''A'''' and sat.HK_HUB<>''''0''''
              '';
INS_UPDATE :=''
UPDATE DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.WT_SERVICING_CODES
SET
	HK_LINK =
	SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REP_CODE), ''''#NULL#'''')))),
	HK_HUB_PARTY_ROLE_ADVISOR = SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MASTER_CODE), ''''#NULL#'''')))),
	HK_HUB_REGISTERED_REPRESENTATIVE = SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REP_CODE), ''''#NULL#'''')))),
	MD_HASHDIFF=
	SHA1(CONCAT(
	   COALESCE(ADVISOR_NAME , ''''#NULL#''''), ''''|''''
	,  COALESCE(TO_VARCHAR(END_DATE) , ''''#NULL#''''), ''''|''''
	,  COALESCE(REASON , ''''#NULL#''''), ''''|''''
	,  COALESCE(NEW_FIRM , ''''#NULL#''''), ''''|''''
	,  COALESCE(NEW_FIRM_TYPE, ''''#NULL#''''), ''''|''''
	,  COALESCE(NEW_FIRM_BACK_OFFICE , ''''#NULL#''''), ''''|''''
	,  COALESCE(PRESTIGE_STATUS , ''''#NULL#'''')
	))
	Where 1=1;
		'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.STEWARDSHIP_BDV.SP_CONV_LOADBDV_RDV_STEWARDSHIP_IAPW_TO_WT_SERVICING_CODES(""ENV"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.WT_SERVICING_CODES WHERE 1=1'';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.WT_SERVICING_CODES 
(	HK_LINK,
	MD_START_DT,
	MD_CREATION_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	MASTER_CODE,
	REP_CODE,
	ADVISOR_NAME,
	END_DATE,
	REASON,
	NEW_FIRM,
	NEW_FIRM_TYPE,
	NEW_FIRM_BACK_OFFICE,
	PRESTIGE_STATUS
)
SELECT
	src.HK_HUB,
	src.MD_START_DT,
	CURRENT_TIMESTAMP,
	src.MD_SOURCE,
	src.MD_SRC_SYSTEM,
	src.MD_EXTRACT_DT,
	src.MASTER_CODE,
	src.REP_CODE,
	src.ADVISOR_NAME,
	src.END_DATE,
	src.REASON,
	src.NEW_FIRM,
	src.NEW_FIRM_TYPE,
	src.NEW_FIRM_BACK_OFFICE,
	src.PRESTIGE_STATUS

FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.VW_SERVICING_CODES_SPLIT src
LEFT JOIN 
(SELECT * FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM VW_SERVICING_CODES_SPLIT) srcHUB WHERE srcHUB.RN = 1 AND (MD_START_DT <= TO_DATE(''''2021-11-15''''))) sat
ON sat.HK_HUB = src.HK_HUB AND sat.MD_START_DT = ''''2021-11-15''''
WHERE sat.MD_ACTIVE=''''A'''' and sat.HK_HUB<>''''0''''
              '';
INS_UPDATE :=''
UPDATE DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.WT_SERVICING_CODES
SET
	HK_LINK =
	SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REP_CODE), ''''#NULL#'''')))),
	HK_HUB_PARTY_ROLE_ADVISOR = SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MASTER_CODE), ''''#NULL#'''')))),
	HK_HUB_REGISTERED_REPRESENTATIVE = SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REP_CODE), ''''#NULL#'''')))),
	MD_HASHDIFF=
	SHA1(CONCAT(
	   COALESCE(ADVISOR_NAME , ''''#NULL#''''), ''''|''''
	,  COALESCE(TO_VARCHAR(END_DATE) , ''''#NULL#''''), ''''|''''
	,  COALESCE(REASON , ''''#NULL#''''), ''''|''''
	,  COALESCE(NEW_FIRM , ''''#NULL#''''), ''''|''''
	,  COALESCE(NEW_FIRM_TYPE, ''''#NULL#''''), ''''|''''
	,  COALESCE(NEW_FIRM_BACK_OFFICE , ''''#NULL#''''), ''''|''''
	,  COALESCE(PRESTIGE_STATUS , ''''#NULL#'''')
	))
	Where 1=1;
		'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.STEWARDSHIP_BDV.SP_CONV_LOADBDV_RDV_STEWARDSHIP_IAPW_TO_WT_SERVICING_CODES(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;
BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.WT_SERVICING_CODES WHERE 1=1'';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.WT_SERVICING_CODES 
(	HK_LINK,
	MD_START_DT,
	MD_CREATION_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	MASTER_CODE,
	REP_CODE,
	ADVISOR_NAME,
	END_DATE,
	REASON,
	NEW_FIRM,
	NEW_FIRM_TYPE,
	NEW_FIRM_BACK_OFFICE,
	PRESTIGE_STATUS
)
SELECT
	src.HK_HUB,
	src.MD_START_DT,
	CURRENT_TIMESTAMP,
	src.MD_SOURCE,
	src.MD_SRC_SYSTEM,
	src.MD_EXTRACT_DT,
	src.MASTER_CODE,
	src.REP_CODE,
	src.ADVISOR_NAME,
	src.END_DATE,
	src.REASON,
	src.NEW_FIRM,
	src.NEW_FIRM_TYPE,
	src.NEW_FIRM_BACK_OFFICE,
	src.PRESTIGE_STATUS

FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.VW_SERVICING_CODES_SPLIT src
JOIN 
(SELECT * FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM VW_SERVICING_CODES_SPLIT) srcHUB WHERE srcHUB.RN = 1 AND srcHUB.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')) sat
ON sat.HK_HUB = src.HK_HUB AND sat.MD_START_DT = src.MD_START_DT
WHERE sat.MD_ACTIVE=''''A'''' and sat.HK_HUB<>''''0''''
              '';
INS_UPDATE :=''
UPDATE DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.WT_SERVICING_CODES
SET
	HK_LINK =
	SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REP_CODE), ''''#NULL#'''')))),
	HK_HUB_PARTY_ROLE_ADVISOR = SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MASTER_CODE), ''''#NULL#'''')))),
	HK_HUB_REGISTERED_REPRESENTATIVE = SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REP_CODE), ''''#NULL#'''')))),
	MD_HASHDIFF=
	SHA1(CONCAT(
	   COALESCE(ADVISOR_NAME , ''''#NULL#''''), ''''|''''
	,  COALESCE(TO_VARCHAR(END_DATE) , ''''#NULL#''''), ''''|''''
	,  COALESCE(REASON , ''''#NULL#''''), ''''|''''
	,  COALESCE(NEW_FIRM , ''''#NULL#''''), ''''|''''
	,  COALESCE(NEW_FIRM_TYPE, ''''#NULL#''''), ''''|''''
	,  COALESCE(NEW_FIRM_BACK_OFFICE , ''''#NULL#''''), ''''|''''
	,  COALESCE(PRESTIGE_STATUS , ''''#NULL#'''')
	))
	Where 1=1;
		'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
create or replace schema DB_IAW_PROD_DWH.STEWARDSHIP_RDV;

create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_DATE (
	DATE DATE NOT NULL COMMENT 'Date ex: 2021-04-08',
	FULL_DATE_DESC VARCHAR(64) NOT NULL COMMENT 'Full date description ex: Thursday, Apr 08, 2021',
	DAY_NUM_IN_WEEK NUMBER(1,0) NOT NULL COMMENT 'Day number in a week (Monday=1, Sunday=7)',
	DAY_NUM_IN_MONTH NUMBER(2,0) NOT NULL COMMENT 'Day number in a month (1 to 31)',
	DAY_NUM_IN_YEAR NUMBER(3,0) NOT NULL COMMENT 'Day number in a year (1 to 366)',
	DAY_NAME VARCHAR(10) NOT NULL COMMENT 'Day name ex: Thursday',
	DAY_ABBREV VARCHAR(3) NOT NULL COMMENT 'Day abreviation ex: Thu',
	WEEKDAY_IND VARCHAR(64) NOT NULL COMMENT 'Weekday indicator (Weekday, Not a weekday)',
	US_HOLIDAY_IND VARCHAR(64) COMMENT 'United State holiday Indicator',
	_HOLIDAY_IND VARCHAR(64) COMMENT 'holiday indicator',
	MONTH_END_IND VARCHAR(64) NOT NULL COMMENT 'Month end indicator (Not-Month-end, Month-end)',
	WEEK_BEGIN_DATE_NKEY NUMBER(9,0) NOT NULL COMMENT 'Week begin date nkey ex: 20210405',
	WEEK_BEGIN_DATE DATE NOT NULL COMMENT 'Week begin date ex: 2021-04-05',
	WEEK_END_DATE_NKEY NUMBER(9,0) NOT NULL COMMENT 'Week end date nkey ex: 20210411',
	WEEK_END_DATE DATE NOT NULL COMMENT 'Week end date ex: 2021-04-11',
	WEEK_NUM_IN_YEAR NUMBER(9,0) NOT NULL COMMENT 'Week number in a year (1 to 53)',
	MONTH_NAME VARCHAR(10) NOT NULL COMMENT 'Month name ex: April',
	MONTH_ABBREV VARCHAR(3) NOT NULL COMMENT 'Month abreviation ex: Apr',
	MONTH_NUM_IN_YEAR NUMBER(2,0) NOT NULL COMMENT 'Month number in a year (1 to 12)',
	YEARMONTH VARCHAR(10) NOT NULL COMMENT 'Year and month ex: 2021-04',
	QUARTER NUMBER(1,0) NOT NULL COMMENT 'Quarter number (1 to 4)',
	YEARQUARTER VARCHAR(10) NOT NULL COMMENT 'Year and Quarter ex: 2021-02',
	YEAR NUMBER(5,0) NOT NULL COMMENT 'Year ex: 2021',
	FISCAL_WEEK_NUM NUMBER(2,0) NOT NULL COMMENT 'Fiscal week number (1 to 53)',
	FISCAL_MONTH_NUM NUMBER(2,0) NOT NULL COMMENT 'Fiscal month number (1 to 12)',
	FISCAL_YEARMONTH VARCHAR(10) NOT NULL COMMENT 'Fiscal year and month ex: 2021-04',
	FISCAL_QUARTER NUMBER(1,0) NOT NULL COMMENT 'Fiscal quarter number (1 to 4)',
	FISCAL_YEARQUARTER VARCHAR(10) NOT NULL COMMENT 'Fiscal year and quarter ex: 2021-02',
	FISCAL_HALFYEAR NUMBER(1,0) NOT NULL COMMENT 'Fiscal half year  (1 or 2)',
	FISCAL_YEAR NUMBER(5,0) NOT NULL COMMENT 'Fiscal year ex: 2021',
	SQL_TIMESTAMP TIMESTAMP_NTZ(9) COMMENT 'Day timestamp ex: 2021-04-08 00:00:00',
	CURRENT_ROW_IND VARCHAR(1) DEFAULT 'Y' COMMENT 'BI indicator, is it a current row or not (Y,N)',
	EFFECTIVE_DATE DATE DEFAULT CAST(CURRENT_TIMESTAMP() AS DATE) COMMENT 'BI date, day of creation ex: 2021-04-06',
	EXPIRATION_DATE DATE DEFAULT CAST('9999-12-31' AS DATE) COMMENT 'BI date, day of expiration, by default the vaue is: 9999-12-31',
	MONTH_NAME_YEAR VARCHAR(100) COMMENT 'Month name and year ex: April 2021',
	MONTH_NAME_YEAR_ORD NUMBER(38,0) COMMENT 'Month name and year order ex:202104'
)COMMENT='Type 0 Dimension Table Housing Calendar and Fiscal Year Date Attributes'
;
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_KPI_TARGET_FIRM (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	KPI_DATE DATE COMMENT 'The end of every months date for the set target',
	METRIC_NAME VARCHAR(512) COMMENT 'KPI metric name'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_KPI_TARGET_RVP (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation date time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution id',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT DATE COMMENT 'Source extraction date',
	KPI_DATE DATE COMMENT 'The end of every month''s date for the set target',
	METRIC_NAME VARCHAR(512) COMMENT 'The metric name description',
	RVP_ID NUMBER(2,0) COMMENT 'The regional vice president''s id'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_MANUAL_ADVISOR_RVP_IAS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	REPID VARCHAR(512) COMMENT 'Representative ID'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_MAPPING_OPER_TYPE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	IBMSOURCE VARCHAR(12) COMMENT 'IBM Source',
	LEVEL NUMBER(11,0) COMMENT 'Level number'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_MONTHLY_MILESTONES (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	REPID VARCHAR(512) COMMENT 'Representative ID'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_NEW_ADVISOR (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MASTER_CODE VARCHAR(50) COMMENT 'Advisor code'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_ORGANIC_GROWTH_EXCEPTIONS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	SOURCE_MASTER_CODE VARCHAR(50) COMMENT 'Advisor code',
	DESTINATION_MASTER_CODE VARCHAR(50) COMMENT 'Advisor code',
	START_DATE TIMESTAMP_NTZ(9) COMMENT 'Start Date range when exclusion stays in'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_PRODUCT_ASSET_CATEGORY (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_RAPCODE_PLAN (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'Account RAP Code',
	RETAIL_PLAN VARCHAR(100) COMMENT 'Retail Plan exp: LR, LF, PR, etc...',
	ASC_1_RESP_PLAN_TYPES VARCHAR(100) COMMENT 'If Account rap code is the same, ASC_1_RESP_PLAN_TYPES is used to identify the plan'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_SERVICING_CODES (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MASTER_CODE VARCHAR(50) COMMENT 'Advisor code'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_KPI_TARGET_FIRM (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Reference',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, A row exists in the source, D row does not exist in the source',
	TARGET NUMBER(38,2) COMMENT 'The target metric value'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_KPI_TARGET_RVP (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the satellite',
	MD_START_DT DATE COMMENT 'Start date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation date time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution id',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT DATE COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	RVP_NAME VARCHAR(100) COMMENT 'The regional vice president''s name',
	TARGET NUMBER(36,2) COMMENT 'The target metric value'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_MANUAL_ADVISOR_RVP_IAS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Reference',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ADVISOR VARCHAR(512) COMMENT 'Advisor code',
	TEAM VARCHAR(512) COMMENT 'Team name',
	RVP VARCHAR(512) COMMENT 'RVP ID',
	PROVINCE VARCHAR(512) COMMENT 'Province code (QC, ON, ...)',
	IND_EXCLUDE BOOLEAN COMMENT 'Exclusion flag, 1 is excluded, 0 is not excluded'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_MAPPING_OPER_TYPE_IAS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	DESCRIPTION_EN VARCHAR(60) COMMENT 'Description in English',
	DESCRIPTION_SHORT_EN VARCHAR(30) COMMENT 'Sort description in english',
	DESCRIPTION_FR VARCHAR(60) COMMENT 'Description in French',
	DESCRIPTION_SHORT_FR VARCHAR(30) COMMENT 'Sort Description in french',
	OPERATION_TYPE VARCHAR(3) COMMENT 'Type of Operation',
	DISPLAY NUMBER(11,0) COMMENT 'Display Number',
	CASHFLOW_SUMMARY VARCHAR(4) COMMENT 'Cashflow Summary',
	ISCASHFLOW NUMBER(11,0) COMMENT 'Flag to determine it is a cahsflow or not e.g 0/1'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_MONTHLY_MILESTONES_IAS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ADVISOR VARCHAR(512) COMMENT 'Advisor code',
	TEAM VARCHAR(512) COMMENT 'Team code',
	RVP VARCHAR(512) COMMENT 'RVP code',
	PROVINCE VARCHAR(512) COMMENT 'Province name',
	AUA_DEC NUMBER(34,4) COMMENT 'AUA for dec',
	AUA_JAN NUMBER(34,4) COMMENT 'AUA for Jan',
	AUA_FEB NUMBER(34,4) COMMENT 'AUA for Feb'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_NEW_ADVISOR_IAPW (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Reference',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ADVISOR_NAME VARCHAR(100) COMMENT 'Name of the Advisor',
	TRANSITION_PERIOD_END_DATE TIMESTAMP_NTZ(9) COMMENT 'Advisor transition end date',
	DEAL_ASSESTS NUMBER(11,0) COMMENT 'Deal assets',
	EXPECTED_ASSESTS NUMBER(11,0) COMMENT 'Expected assets',
	PREVIOUS_FIRM VARCHAR(100) COMMENT 'Previous Firm of the Advisor',
	PREVIOUS_FIRM_TYPE VARCHAR(100) COMMENT 'Previous Firm type of the Advisor'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_ORGANIC_GROWTH_EXCEPTIONS_IAPW (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Reference',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	SHARE_PCT NUMBER(3,0) COMMENT '% for distrubution of Amounts',
	END_DATE TIMESTAMP_NTZ(9) COMMENT 'End Date when exclusion expires'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_PRODUCT_ASSET_CATEGORY_IAS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ASSET_CATEGORY VARCHAR(512) COMMENT 'Asset category exp: Treasury Bills, Debentures, Common Stock, etc...'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_RAPCODE_PLAN_IAS (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	PLAN_LABEL VARCHAR(512) COMMENT 'Plan label',
	ACCOUNT_TYPE VARCHAR(512) COMMENT 'Type of account',
	GROUP_TYPE_CODE VARCHAR(100) COMMENT 'Type of Group code',
	ACCUMULATION_TYPE VARCHAR(100) COMMENT 'Accumulation Type'
);
create or replace TABLE DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_SERVICING_CODES_IAPW (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Reference',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	ADVISOR_NAME VARCHAR(100) COMMENT 'Advisor name',
	END_DATE TIMESTAMP_NTZ(9) COMMENT 'Departure date of the advisor (TBD)',
	REASON VARCHAR(1000) COMMENT 'Reason of departure',
	NEW_FIRM VARCHAR(1000) COMMENT 'Departure destination',
	NEW_FIRM_TYPE VARCHAR(1000) COMMENT 'Departure destination Type',
	NEW_FIRM_BACK_OFFICE VARCHAR(1000) COMMENT 'Departure destination Back-Office',
	SERVICING_CODE VARCHAR(1000) COMMENT 'Servicing Code',
	PRESTIGE_STATUS VARCHAR(100) COMMENT 'Prestige Status',
	MD_SEQ NUMBER(38,0) COMMENT 'The value of METADATA$FILE_ROW_NUMBER when loading using INFORMATICA'
);
create or replace view DB_IAW_PROD_DWH.STEWARDSHIP_RDV.VW_NEW_ADVISOR(
	HK_HUB,
	MD_START_DT,
	MD_HASHDIFF,
	MD_CREATION_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	ADVISOR_NAME,
	MASTER_CODE,
	TRANSITION_PERIOD_END_DATE,
	DEAL_ASSESTS,
	EXPECTED_ASSESTS,
	PREVIOUS_FIRM,
	PREVIOUS_FIRM_TYPE
) as
SELECT 
HK_HUB
,MD_START_DT
,MD_HASHDIFF
,MD_CREATION_DT
,MD_SOURCE
,MD_SRC_SYSTEM
,MD_EXTRACT_DT
,ADVISOR_NAME
,MASTER_CODE
,TRANSITION_PERIOD_END_DATE
,DEAL_ASSESTS
,EXPECTED_ASSESTS
,PREVIOUS_FIRM
,PREVIOUS_FIRM_TYPE
FROM DB_IAW_PROD_STG.STEWARDSHIP.REF_NEW_ADVISOR
QUALIFY ROW_NUMBER() OVER (PARTITION BY HK_HUB ORDER BY HK_HUB ) = 1;
create or replace view DB_IAW_PROD_DWH.STEWARDSHIP_RDV.VW_ORGANIC_GROWTH_EXCEPTIONS_IAPW(
	HK_HUB,
	MD_START_DT,
	MD_SOURCE,
	SOURCE_MASTER_CODE,
	DESTINATION_MASTER_CODE,
	START_DATE,
	END_DATE,
	SHARE_PCT,
	MD_ACTIVE
) as
SELECT
	*
FROM
	(
	SELECT
		h.HK_HUB,
		s.MD_START_DT,
		s.MD_SOURCE,
		h.SOURCE_MASTER_CODE,
		h.DESTINATION_MASTER_CODE,
		h.START_DATE,
		s.END_DATE,
		s.SHARE_PCT,
		s.MD_ACTIVE
	FROM
		DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_ORGANIC_GROWTH_EXCEPTIONS h
	INNER JOIN DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_ORGANIC_GROWTH_EXCEPTIONS_IAPW s 
ON
		s.HK_HUB = h.HK_HUB
	WHERE
		s.MD_SRC_SYSTEM = 'STEWARDSHIP'
QUALIFY ROW_NUMBER() OVER (PARTITION BY s.HK_HUB
	ORDER BY
		s.MD_START_DT DESC ) = 1
)
WHERE
	MD_ACTIVE = 'A'
ORDER BY SOURCE_MASTER_CODE;
create or replace view DB_IAW_PROD_DWH.STEWARDSHIP_RDV.VW_ORGANIC_GROWTH_EXCLUSIONS_IAPW(
	HK_HUB,
	OG_MD_START_DT,
	OG_MD_SOURCE,
	SOURCE_MASTER_CODE,
	DESTINATION_MASTER_CODE,
	START_DATE,
	END_DATE,
	SHARE_PCT,
	MD_ACTIVE
) as
SELECT a.HK_HUB,a.MD_START_DT as og_MD_START_DT,a.MD_SOURCE as og_MD_SOURCE,a.SOURCE_MASTER_CODE,a.DESTINATION_MASTER_CODE,a.START_DATE,a.END_DATE,a.SHARE_PCT,a.MD_ACTIVE
FROM DB_IAW_PROD_DWH.STEWARDSHIP_RDV.VW_ORGANIC_GROWTH_EXCEPTIONS_IAPW A FULL OUTER JOIN 
DB_IAW_PROD_DWH.SHARED_BDV.VW_IAS_RRCODE_MASTERCODE_TRANS b 
ON A.SOURCE_MASTER_CODE =b.A_C_REPRESENTATIVE AND A.DESTINATION_MASTER_CODE =b.TOREPID 
WHERE b.A_C_REPRESENTATIVE IS NULL AND b.TOREPID IS NULL;
create or replace view DB_IAW_PROD_DWH.STEWARDSHIP_RDV.VW_SERVICING_CODES(
	HK_HUB,
	MD_SEQ,
	MD_START_DT,
	MD_HASHDIFF,
	MD_CREATION_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	ADVISOR_NAME,
	MASTER_CODE,
	END_DATE,
	REASON,
	NEW_FIRM,
	NEW_FIRM_TYPE,
	NEW_FIRM_BACK_OFFICE,
	SERVICING_CODE,
	PRESTIGE_STATUS
) as
SELECT 
HK_HUB,
MD_SEQ, 
MD_START_DT, 
MD_HASHDIFF, 
MD_CREATION_DT, 
MD_SOURCE, 
MD_SRC_SYSTEM, 
MD_EXTRACT_DT, 
ADVISOR_NAME, 
MASTER_CODE,
END_DATE,
REASON,
NEW_FIRM,
NEW_FIRM_TYPE,
NEW_FIRM_BACK_OFFICE,
SERVICING_CODE,
PRESTIGE_STATUS
FROM DB_IAW_PROD_STG.STEWARDSHIP.REF_SERVICING_CODES
QUALIFY ROW_NUMBER() OVER (PARTITION BY HK_HUB ORDER BY HK_HUB ) = 1;
create or replace schema DB_IAW_PROD_DWH.TOOLS;

create or replace TABLE DB_IAW_PROD_DWH.TOOLS.AUDIT_JOBS_DEPENDENCIES (
	DEPENDENT_JOB_NAME VARCHAR(1000) COMMENT 'Dpenedant Taskflow name',
	DEPENDENT_DATA_START_DT DATE COMMENT 'Functional start Load date',
	DEPENDENT_DATA_NEXT_START_DT DATE COMMENT 'Functional next start Load date',
	PRINCIPAL_JOB_NAME_PATTERN VARCHAR(1000) COMMENT 'Principal Taskflow name LIKE pattern is supported',
	PRINCIPAL_DATA_START_DT DATE COMMENT 'Functional start Load date',
	PRINCIPAL_DATA_NEXT_START_DT DATE COMMENT 'Functional end Load date',
	DEPENDENCY_TYPE VARCHAR(100) COMMENT 'PREREQUISITE, CONCURRENT, ...'
);
create or replace TABLE DB_IAW_PROD_DWH.TOOLS.AUDIT_JOBS_EXECUTIONS (
	JOB_NAME VARCHAR(1000) COMMENT 'Taskflow name',
	DATA_START_DT DATE COMMENT 'Functional start Load date',
	DATA_NEXT_START_DT DATE COMMENT 'Functional next start Load date',
	UPDATE_JOB_AUDIT_ID VARCHAR(1000) COMMENT 'Taskflow job ID that updated this record',
	JOB_STATUS VARCHAR(100) COMMENT 'IN PROGRESS, SUCCESS, ERROR',
	JOB_STATUS_DESC VARCHAR(16777216) COMMENT 'Description for the current status',
	JOB_ACTION_RESULT VARCHAR(100) COMMENT 'Last start or end job result',
	JOB_DATA_START_DT_RESULT DATE COMMENT 'start Load date returned from an action on the audit. Example : Start next date',
	JOB_ROW_COUNT NUMBER(38,0)
);
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_AUDIT_JOB(""SRC_OBJ"" VARCHAR(16777216), ""TGT_OBJ"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var RUN_QUERY = ""INSERT INTO `+TGT-OBJ+` SELECT * FROM `+SRC_OBJ+` WHERE 1>2""

var sql_statement = snowflake.createStatement(
          {
          sqlText: RUN_QUERY
          }
       );
var result_scan = sql_statement.execute();  
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_AUDIT_STARTJOB_NEXTDATE(""ENV"" VARCHAR(16777216), ""JOB_NAME"" VARCHAR(16777216), ""AUDIT_ID"" VARCHAR(16777216), ""IO_RESULT"" VARCHAR(16777216), ""IO_DATASTARTDATE"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
 var CALL_PROCEDURE = ""DB_IAW_"" + ENV + ""_DWH.tools.USP_AUDIT_START_JOB_NEXT_DATE"";
 var CALL_STMT_COMMAND =  ""CALL "" + CALL_PROCEDURE  + ""(:1,:2 )"";
 var CALL_STMT = snowflake.createStatement( {sqlText: CALL_STMT_COMMAND,binds:[JOB_NAME,AUDIT_ID]} );
 var tbl_obj = ""DB_IAW_"" + ENV + ""_dwh.tools.audit_jobs_executions"";
 var res = CALL_STMT.execute();
 var UPDATE_STMT_COMMAND = ""update "" + tbl_obj + "" set job_action_result = greatest(?,DECODE(TRUE, JOB_STATUS is not null AND JOB_ACTION_RESULT=''SUCCESS'',''SUCCESS'',''ERROR'')),""
                          + ""job_data_start_dt_result = greatest(to_date(?,''MM/DD/YYYY''),decode(TRUE,DECODE(TRUE, JOB_STATUS is not null AND JOB_ACTION_RESULT=''SUCCESS'',''SUCCESS'',''ERROR'') = ''SUCCESS'',data_start_dt,to_date(''2000-01-01'',''YYYY-MM-DD'')))""
+ "" where job_status = ''IN PROGRESS'' AND UPPER(JOB_NAME) = UPPER(REPLACE(?,''CHAR(39)'',''''))"";
CALL_STMT = snowflake.createStatement( {sqlText: UPDATE_STMT_COMMAND,binds:[IO_RESULT,IO_DATASTARTDATE,JOB_NAME]} );
res = CALL_STMT.execute();
var sle_query = ""select job_action_result ,to_varchar(job_data_start_dt_result,''YYYY-MM-DD'') from "" + tbl_obj + "" where job_status = ''IN PROGRESS'' AND UPPER(JOB_NAME) = UPPER(REPLACE(?,''CHAR(39)'',''''))"";
   CALL_STMT = snowflake.createStatement( {sqlText: sle_query,binds:[JOB_NAME]} );
 res = CALL_STMT.execute();
 res.next();
 
 return res.getColumnValue(1) + '','' + res.getColumnValue(2);
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_AUDIT_STARTJOB_NEXTDATE(""ENV"" VARCHAR(16777216), ""JOB_NAME"" VARCHAR(16777216), ""AUDIT_ID"" VARCHAR(16777216), ""IO_RESULT"" VARCHAR(16777216), ""IO_DATASTARTDATE"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
 var CALL_PROCEDURE = ""DB_IAW_"" + ENV + ""_DWH.tools.USP_AUDIT_START_JOB_NEXT_DATE"";
 var CALL_STMT_COMMAND =  ""CALL "" + CALL_PROCEDURE  + ""(:1,:2 )"";
 var CALL_STMT = snowflake.createStatement( {sqlText: CALL_STMT_COMMAND,binds:[JOB_NAME,AUDIT_ID]} );
 var tbl_obj = ""DB_IAW_"" + ENV + ""_dwh.tools.audit_jobs_executions"";
 var res = CALL_STMT.execute();
 var UPDATE_STMT_COMMAND = ""update "" + tbl_obj + "" set job_action_result = greatest(?,DECODE(TRUE, JOB_STATUS is not null AND JOB_ACTION_RESULT=''SUCCESS'',''SUCCESS'',''ERROR'')),""
                          + ""job_data_start_dt_result = greatest(to_date(?,''MM/DD/YYYY''),decode(TRUE,DECODE(TRUE, JOB_STATUS is not null AND JOB_ACTION_RESULT=''SUCCESS'',''SUCCESS'',''ERROR'') = ''SUCCESS'',data_start_dt,to_date(''2000-01-01'',''YYYY-MM-DD'')))""
+ "" where job_status = ''IN PROGRESS'' AND UPPER(JOB_NAME) = UPPER(REPLACE(?,''CHAR(39)'',''''))"";
CALL_STMT = snowflake.createStatement( {sqlText: UPDATE_STMT_COMMAND,binds:[IO_RESULT,IO_DATASTARTDATE,JOB_NAME]} );
res = CALL_STMT.execute();
var sle_query = ""select job_action_result ,to_varchar(job_data_start_dt_result,''YYYY-MM-DD'') from "" + tbl_obj + "" where job_status = ''IN PROGRESS'' AND UPPER(JOB_NAME) = UPPER(REPLACE(?,''CHAR(39)'',''''))"";
   CALL_STMT = snowflake.createStatement( {sqlText: sle_query,binds:[JOB_NAME]} );
 res = CALL_STMT.execute();
 res.next();
 
 return res.getColumnValue(1) + '','' + res.getColumnValue(2);
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_DATAVAULT_LOADHUB_AUDIT_ID(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""TRUNC_TBL"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var INS_QUERY = ""INSERT INTO ""+ TGT_TBL + ""("" + INSERT_COLS + "") SELECT DISTINCT "" + SELECT_COLS + "" FROM (SELECT DISTINCT * FROM "" + SRC_TBL + "" ) STG LEFT JOIN ""+ TGT_TBL +"" HUB ON STG.HK_HUB = HUB.HK_HUB  WHERE HUB.HK_HUB IS NULL ORDER BY STG.HK_HUB;""
var TRUN_QUERY = ""TRUNCATE TABLE "" + TGT_TBL +"";""


if (TRUNC_TBL == ''Y'')
    {
    
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
	}
	

   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();		


';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_DATAVAULT_LOADLINK_AUDIT_ID_RK(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""TRUNC_TBL"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var INS_QUERY = ""INSERT INTO ""+ TGT_TBL + ""("" + INSERT_COLS + "") SELECT DISTINCT "" + SELECT_COLS + "" FROM (SELECT * FROM "" + SRC_TBL + "" ) STG LEFT JOIN ""+ TGT_TBL +"" LNK ON STG.HK_LINK = LNK.HK_LINK  WHERE LNK.HK_LINK IS NULL;""

   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();		
   

';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_DATAVAULT_LOADLINK_AUDIT_ID_SC(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""TRUNC_TBL"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var INS_QUERY = ""INSERT INTO ""+ TGT_TBL + ""("" + INSERT_COLS + "") SELECT DISTINCT "" + SELECT_COLS + "" FROM "" + SRC_TBL + "" SRC LEFT JOIN ""+ TGT_TBL +"" LINK ON SRC.HK_LINK = LINK.HK_LINK  WHERE LINK.HK_LINK IS NULL;""

   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();   
   
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_DATAVAULT_LOADLINK_AUDIT_ID_SC_JITHU(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""TRUNC_TBL"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var INS_QUERY = ""INSERT INTO ""+ TGT_TBL + ""("" + INSERT_COLS + "") SELECT DISTINCT "" + SELECT_COLS + "" FROM "" + SRC_TBL + "" SRC LEFT JOIN ""+ TGT_TBL +"" LINK ON SRC.HK_LINK = LINK.HK_LINK  WHERE LINK.HK_LINK IS NULL;""
var TRUN_QUERY = ""TRUNCATE TABLE "" + TGT_TBL +"";""


if (TRUNC_TBL = ''Y'')
    {
    
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
  }
  

   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();   
   

';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_DATAVAULT_LOADLINK_MULTIIMAGE_AUDIT_ID(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""TRUNC_TBL"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var INS_QUERY = ""INSERT INTO ""+ TGT_TBL + ""("" + INSERT_COLS + "") SELECT "" +  SELECT_COLS + "" FROM (SELECT DISTINCT * FROM "" + SRC_TBL + "" ) STG LEFT JOIN   ( (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_LINK ORDER BY MD_START_DT ASC) RN FROM ""  + TGT_TBL + "" ) SAT WHERE SAT.RN = 1) LINK ON SRC.HK_LINK = LINK .HK_LINK   WHERE LINK .HK_LINK  IS NULL ORDER BY STG.HK_LINK;""
var TRUN_QUERY = ""TRUNCATE TABLE "" + TGT_TBL +"";"";
if (TRUNC_TBL == ''Y'')
    {
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
	}
   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();		
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_DATAVAULT_LOADSATELLITE_DELETE_AUDIT_ID(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""TRUNC_TBL"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var INS_QUERY = ""INSERT INTO ""+ TGT_TBL + ""("" + INSERT_COLS + "") SELECT "" +  SELECT_COLS + "" FROM (SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM ""  + TGT_TBL + ""  SAT) SATHUB WHERE SATHUB.RN = 1) SAT LEFT JOIN (SELECT DISTINCT * FROM "" + SRC_TBL + "") STG ON SAT.HK_HUB = STG.HK_HUB WHERE STG.HK_HUB  IS NULL AND SAT.MD_ACTIVE != ''D'' AND SAT.HK_HUB !=''0'';"";
var TRUN_QUERY = ""TRUNCATE TABLE "" + TGT_TBL +"";"";

if (TRUNC_TBL == ''Y'')
    {
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
	}
   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();		
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_DATAVAULT_LOADSATELLITE_INSERT_AUDIT_ID(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""TRUNC_TBL"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var INS_QUERY = ""INSERT INTO ""+ TGT_TBL + ""("" + INSERT_COLS + "") SELECT "" +  SELECT_COLS + "" FROM (SELECT DISTINCT * FROM "" + SRC_TBL + "" ) STG LEFT JOIN (SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM ""  + TGT_TBL + ""  SAT) SATHUB WHERE SATHUB.RN = 1 AND SATHUB.MD_ACTIVE =''A'') SAT ON SAT.HK_HUB = STG.HK_HUB AND  SAT.MD_HASHDIFF  = STG.MD_HASHDIFF WHERE SAT.HK_HUB  IS NULL;"";
var TRUN_QUERY = ""TRUNCATE TABLE "" + TGT_TBL +"";"";

if (TRUNC_TBL == ''Y'')
    {
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
	}
   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();		
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_DATAVAULT_LOADSATELLITE_MULTIACTIVE_DELETE_AUDIT_ID(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""TRUNC_TBL"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var INS_QUERY = ""INSERT INTO ""+ TGT_TBL + ""("" + INSERT_COLS + "") SELECT "" +  SELECT_COLS + "" FROM ( SELECT SAT_HUB.* FROM ( SELECT    HK_HUB AS HK_HUB_LV, HK_SAT AS HK_SAT_LV, (MAX(MD_START_DT)) MAX_MD_START_DT FROM    ""  + TGT_TBL + "" GROUP BY HK_HUB, HK_SAT) SAT_HUB_LV INNER JOIN ""  + TGT_TBL + "" SAT_HUB ON ((SAT_HUB.HK_HUB = SAT_HUB_LV.HK_HUB_LV AND SAT_HUB.HK_SAT = SAT_HUB_LV.HK_SAT_LV) AND (SAT_HUB.MD_START_DT = SAT_HUB_LV.MAX_MD_START_DT)) ) SAT LEFT JOIN (SELECT DISTINCT * FROM "" + SRC_TBL + "") STG ON SAT.HK_HUB = STG.HK_HUB AND SAT.HK_SAT = STG.HK_SAT WHERE (STG.HK_HUB IS NULL OR STG.HK_SAT IS NULL) AND SAT.MD_ACTIVE != ''D'' AND SAT.HK_HUB !=''0'';"";
var TRUN_QUERY = ""TRUNCATE TABLE "" + TGT_TBL +"";"";

 

if (TRUNC_TBL == ''Y'')
    {
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
    }
   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_DATAVAULT_LOADSATELLITE_MULTIACTIVE_INSERT_AUDIT_ID(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""TRUNC_TBL"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var INS_QUERY = ""INSERT INTO ""+ TGT_TBL + ""("" + INSERT_COLS + "") SELECT "" +  SELECT_COLS + "" FROM (SELECT DISTINCT * FROM "" + SRC_TBL + "" ) STG LEFT JOIN ( SELECT SAT_HUB.* FROM ( SELECT    HK_HUB AS HK_HUB_LV, HK_SAT AS HK_SAT_LV, (MAX(MD_START_DT)) MAX_MD_START_DT FROM    ""  + TGT_TBL + "" GROUP BY HK_HUB, HK_SAT) SAT_HUB_LV INNER JOIN ""  + TGT_TBL + "" SAT_HUB ON ((SAT_HUB.HK_HUB = SAT_HUB_LV.HK_HUB_LV AND SAT_HUB.HK_SAT = SAT_HUB_LV.HK_SAT_LV) AND (SAT_HUB.MD_START_DT = SAT_HUB_LV.MAX_MD_START_DT)) ) SAT ON SAT.HK_HUB = STG.HK_HUB AND SAT.HK_SAT = STG.HK_SAT AND  ((SAT.MD_HASHDIFF  = STG.MD_HASHDIFF) OR (SAT.MD_HASHDIFF IS NULL AND STG.MD_HASHDIFF IS NULL)) WHERE SAT.HK_HUB IS NULL;"";

var TRUN_QUERY = ""TRUNCATE TABLE "" + TGT_TBL +"";"";

if (TRUNC_TBL == ''Y'')
    {
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
    }
   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();        
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_DATAVAULT_LOADSATLINK_DELETE_AUDIT_ID(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""TRUNC_TBL"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var INS_QUERY = ""INSERT INTO ""+ TGT_TBL + ""("" + INSERT_COLS + "") SELECT DISTINCT "" +  SELECT_COLS + "" FROM "" + SRC_TBL + "" STG RIGHT JOIN (SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_LINK ORDER BY MD_START_DT DESC) RN FROM ""  + TGT_TBL + ""  SAT) SATLINK WHERE SATLINK.RN = 1) SAT ON SAT.HK_LINK = STG.HK_LINK WHERE STG.HK_LINK  IS NULL AND SAT.MD_ACTIVE != ''D'' ;"";
var TRUN_QUERY = ""TRUNCATE TABLE "" + TGT_TBL +"";"";

if (TRUNC_TBL == ''Y'')
    {
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
  }
   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();   
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_DATAVAULT_LOADSATLINK_INSERT_AUDIT_ID(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""TRUNC_TBL"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var INS_QUERY = ""INSERT INTO ""+ TGT_TBL + ""("" + INSERT_COLS + "") SELECT "" +  SELECT_COLS + "" FROM (SELECT DISTINCT * FROM "" + SRC_TBL + "" ) SRC LEFT JOIN ( SELECT SAT_LINK.* FROM ( SELECT	HK_LINK AS HK_LINK_LV, (MAX(MD_START_DT)) MAX_MD_START_DT FROM	""  + TGT_TBL + "" GROUP BY HK_LINK) SAT_LINK_LV INNER JOIN ""  + TGT_TBL + "" SAT_LINK ON ((SAT_LINK.HK_LINK = SAT_LINK_LV.HK_LINK_LV) AND (SAT_LINK.MD_START_DT = SAT_LINK_LV.MAX_MD_START_DT)) ) SAT ON SAT.HK_LINK = SRC.HK_LINK AND  ((SAT.MD_HASHDIFF  = SRC.MD_HASHDIFF) OR (SAT.MD_HASHDIFF IS NULL AND SRC.MD_HASHDIFF IS NULL)) WHERE SAT.HK_LINK  IS NULL;"";
var TRUN_QUERY = ""TRUNCATE TABLE "" + TGT_TBL +"";"";

   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();		
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_LOADBDV_RDV_STEWARDSHIP_IAPW_TO_WT_SERVICING_CODES(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;
BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.WT_SERVICING_CODES WHERE 1=1'';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.WT_SERVICING_CODES 
(	HK_LINK,
	MD_START_DT,
	MD_CREATION_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	MASTER_CODE,
	REP_CODE,
	ADVISOR_NAME,
	END_DATE,
	REASON,
	NEW_FIRM,
	NEW_FIRM_TYPE,
	NEW_FIRM_BACK_OFFICE,
	PRESTIGE_STATUS,
	REP_ROW_NUM	
)
SELECT
	src.HK_HUB,
	src.MD_START_DT,
	CURRENT_TIMESTAMP,
	src.MD_SOURCE,
	src.MD_SRC_SYSTEM,
	src.MD_EXTRACT_DT,
	src.MASTER_CODE,
	src.REP_CODE,
	src.ADVISOR_NAME,
	src.END_DATE,
	src.REASON,
	src.NEW_FIRM,
	src.NEW_FIRM_TYPE,
	src.NEW_FIRM_BACK_OFFICE,
	src.PRESTIGE_STATUS,
	src.REP_ROW_NUM
FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.VW_SERVICING_CODES_SPLIT src
JOIN 
(SELECT * FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.VW_SERVICING_CODES_SPLIT WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'',	''''YYYY-MM-DD'''')) srcHUB WHERE srcHUB.RN = 1 ) sat
ON sat.HK_HUB = src.HK_HUB AND sat.MD_START_DT = src.MD_START_DT
WHERE sat.MD_ACTIVE=''''A'''' and sat.HK_HUB<>''''0''''
              '';
INS_UPDATE :=''
UPDATE DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.WT_SERVICING_CODES
SET
	HK_LINK =
	SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REP_CODE), ''''#NULL#'''')))),
	HK_HUB_PARTY_ROLE_ADVISOR = SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MASTER_CODE), ''''#NULL#'''')))),
	HK_HUB_REGISTERED_REPRESENTATIVE = SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REP_CODE), ''''#NULL#'''')))),
	MD_HASHDIFF=
	SHA1(CONCAT(
	   COALESCE(ADVISOR_NAME , ''''#NULL#''''), ''''|''''
	,  COALESCE(TO_VARCHAR(END_DATE) , ''''#NULL#''''), ''''|''''
	,  COALESCE(REASON , ''''#NULL#''''), ''''|''''
	,  COALESCE(NEW_FIRM , ''''#NULL#''''), ''''|''''
	,  COALESCE(NEW_FIRM_TYPE, ''''#NULL#''''), ''''|''''
	,  COALESCE(NEW_FIRM_BACK_OFFICE , ''''#NULL#''''), ''''|''''
	,  COALESCE(PRESTIGE_STATUS , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(REP_ROW_NUM) , ''''#NULL#'''')
	))
	Where 1=1;
		'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_LOADBDV_RDV_TRANSACTIONS_IAS_UNIVERIS_TO_BDV_WT_LINK_TRANSACTIONS_IAS_UNIVERIS(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_UNIVERIS WHERE 1=1'';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_UNIVERIS (
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
,HK_HUB_PARTY_ROLE_ADVISOR	
,HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES		
,HK_HUB_INVESTMENT_PRODUCT_TYPE	
,HK_HUB_CONTRACT	
,MD_START_DT	
,MD_CREATION_DT	
,MD_SOURCE		
,MD_SRC_SYSTEM		
,MD_EXTRACT_DT	
,TRANSACTION_ID		
,UNIVERIS_CLIENT_ID	
,MASTER_CODE	
,UNIVERIS_PLAN_ID	
,INVESTMENT_PRODUCT_ID		
,PLN_MNEM		
,TRADE_DATE	
,GROSS_AMOUNT	
,TRANSACTION_TYPE	
,ORD_TRANSACTION_TYPE	
,CASH_FLOW	
,CASH_FLOW_TYPE		
,ADMINISTRATORY_TYPE	
,DEPARTED_ADVISOR_IND		
,DEPARTED_ADVISOR_MASTER_CODE )
SELECT
	bdv0.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	
	,bdv02.HK_HUB_PARTY_ROLE_ADVISOR	
	,bdv2.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES	
	,rdv.HK_HUB_INVESTMENT_PRODUCT_TYPE	
	,rdv.HK_HUB_CONTRACT	
	,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
	,CURRENT_TIMESTAMP	
	,trdv.MD_SOURCE	
	,rdv.MD_SRC_SYSTEM	
	,trdv.MD_EXTRACT_DT	
	,rdv.TRANSACTION_ID	
	,rdv.UNIVERIS_CLIENT_ID	
	,bdv02.MASTER_CODE	
	,rdv.UNIVERIS_PLAN_ID
	,rdv.INVESTMENT_PRODUCT_ID	
	,bdv2.PLN_MNEM	
	,trdv.TRADE_DT	
	,trdv.TRX_GROSS* (CASE WHEN bdv02.COMMISSIONPCT IS NULL THEN 1 ELSE bdv02.COMMISSIONPCT/100 END)
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_TRANSACTION_TYPE_001(trdv.SPR_CTGY,trdv.TRX_MNEM_ENG)[''''o_TRANSACTION_TYPE'''']
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_TRANSACTION_TYPE_001(trdv.SPR_CTGY,trdv.TRX_MNEM_ENG)[''''o_ORD_TRANSACTION_TYPE'''']
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_CASH_FLOW_002(trdv.TRX_MNEM_ENG)
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_CASH_FLOW_003((trdv.TRX_MNEM_ENG),(trdv.TRX_GROSS*1))
	,bdv04.ADMINISTRATOR_TYPE	
	,CASE WHEN bdv07.REP_CODE IS NULL THEN 1 ELSE 0 END
	,bdv07.MASTER_CODE
	FROM (
		SELECT *
			FROM DB_IAW_''||ENV||''_DWH.TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_UNIVERIS WHERE MD_START_DT = TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD''''))trdv
		JOIN DB_IAW_''||ENV||''_DWH.TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR rdv ON rdv.HK_LINK = trdv.HK_LINK
		LEFT JOIN
		(
			SELECT *
			FROM (
				SELECT rdv2.HK_HUB_CONTRACT,rdv2.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
				FROM (DB_IAW_''||ENV||''_DWH.SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR) rdv2
				JOIN DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_IAS_UNIVERIS srdv4 ON srdv4.HK_LINK = rdv2.HK_LINK
			JOIN ( 
				SELECT *
				FROM (
					SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB_CONTRACT ORDER BY MD_START_DT DESC) RN 
						FROM (SELECT * from DB_IAW_''||ENV||''_DWH.SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR rdv2 
							JOIN DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_IAS_UNIVERIS srdv4 
				ON srdv4.HK_LINK = rdv2.HK_LINK)) SATHUB WHERE SATHUB.RN = 1 AND SATHUB.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				)SATHUB0 ON rdv2.HK_HUB_CONTRACT = SATHUB0.HK_HUB_CONTRACT AND srdv4.MD_START_DT = SATHUB0.MD_START_DT)
		)bdv0 ON bdv0.HK_HUB_CONTRACT = rdv.HK_HUB_CONTRACT  
		LEFT JOIN
		(
			SELECT srdv5.RR_CD, srdv5.HK_HUB,srdv3.MD_ACTIVE
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_UNIVERIS) srdv3
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN1
					FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_UNIVERIS) SATHUB1
				WHERE SATHUB1.RN1 = 1 AND SATHUB1.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) rdv2lv ON rdv2lv.HK_HUB = srdv3.HK_HUB
			JOIN DB_IAW_''||ENV||''_DWH.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE srdv5 ON srdv5.HK_HUB = srdv3.HK_HUB
			WHERE REGEXP_INSTR( srdv5.MD_SRC_SYSTEM, ''''IAS'''' )= TRUE
		)bdv01 ON trdv.REP_CD = bdv01.RR_CD
		LEFT JOIN
		(
			SELECT bdv.HK_HUB_REGISTERED_REPRESENTATIVE, bdv.HK_HUB_PARTY_ROLE_ADVISOR, bdv.MASTER_CODE, bdv3.COMMISSIONPCT
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE
				) bdv3
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_LINK ORDER BY MD_START_DT DESC
							) RN2
					FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE
					) SATHUB2
				WHERE SATHUB2.RN2 = 1 AND SATHUB2.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) ssbdv4 ON ssbdv4.HK_LINK = bdv3.HK_LINK
			JOIN DB_IAW_''||ENV||''_DWH.SHARED_BDV.LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE bdv ON bdv.HK_LINK =bdv3.HK_LINK WHERE ssbdv4.MD_ACTIVE = ''''A'''' AND ssbdv4.MD_SRC_SYSTEM = ''''IAS''''
		)bdv02	ON bdv01.HK_HUB = bdv02.HK_HUB_REGISTERED_REPRESENTATIVE
		LEFT JOIN
		(
			SELECT srdv.ADMINISTRATOR_TYPE,srdv.HK_HUB,srdv.MD_ACTIVE
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_IAS_UNIVERIS) srdv
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN3
					FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_IAS_UNIVERIS
					) SATHUB3
				WHERE SATHUB3.RN3 = 1 AND SATHUB3.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) ssbdv5 ON ssbdv5.HK_HUB = srdv.HK_HUB WHERE ssbdv5.MD_ACTIVE = ''''A''''
		)bdv04 ON rdv.HK_HUB_CONTRACT = bdv04.HK_HUB
		LEFT JOIN
		(
			SELECT rdv3.*
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_UNIVERIS
				) rdv3
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN4
					FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_UNIVERIS
					) SATHUB4
				WHERE SATHUB4.RN4 = 1 AND SATHUB4.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) ssbdv6 ON ssbdv6.HK_HUB = rdv3.HK_HUB WHERE ssbdv6.MD_ACTIVE = ''''A'''' 
		)bdv06 ON rdv.HK_HUB_INVESTMENT_PRODUCT_TYPE = bdv06.HK_HUB
		LEFT JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.LINK_INVESTMENT_CONTRACT) bdv2 ON bdv2.HK_HUB_CONTRACT = bdv0.HK_HUB_CONTRACT AND bdv02.HK_HUB_PARTY_ROLE_ADVISOR = bdv2.HK_HUB_PARTY_ROLE_ADVISOR
		LEFT JOIN
		(
			SELECT sbdv.REP_CODE, sbdv.MASTER_CODE
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.SAT_LINK_SERVICING_CODES
				) sbdv2
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_LINK ORDER BY MD_START_DT DESC
							) RN5
					FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.SAT_LINK_SERVICING_CODES
					) SATHUB5
				WHERE SATHUB5.RN5 = 1 AND SATHUB5.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
				) ssbdv7 ON ssbdv7.HK_LINK = sbdv2.HK_LINK
			JOIN DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.LINK_SERVICING_CODES sbdv ON sbdv.HK_LINK = sbdv2.HK_LINK
			WHERE sbdv2.MD_ACTIVE = ''''A'''' AND sbdv2.REP_ROW_NUM = 1
			GROUP BY 1,2
		)bdv07 ON bdv01.RR_CD = bdv07.REP_CODE
		WHERE trdv.SPR_CTGY IN (''''PUR'''', ''''PAC'''', ''''RED'''', ''''AWD'''', ''''SWI'''', ''''SWO'''', ''''TIN'''', ''''TOT'''', ''''XIN'''', ''''XOT'''') AND bdv06.SYMBOL NOT IN (''''MRC001'''', ''''IAAFCCA'''', ''''INVCCA'''')	
		AND
		bdv01.MD_ACTIVE = ''''A''''
             '';
INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_UNIVERIS
SET
	HK_LINK=
	SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , 
	COALESCE(TRIM(TRANSACTION_ID), ''''#NULL#''''), ''''|'''' , 
	COALESCE(TRIM(UNIVERIS_CLIENT_ID), ''''#NULL#''''), ''''|'''' , 
	COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' , 
	''''#NULL#'''', ''''|'''',  -- CONTRACT_ID
	COALESCE(TRIM(UNIVERIS_PLAN_ID), ''''#NULL#''''), ''''|'''',
	COALESCE(TRIM(INVESTMENT_PRODUCT_ID), ''''#NULL#''''), ''''|'''' ,  
	COALESCE(TRIM(PLN_MNEM),''''#NULL#''''), ''''|'''' , 
	''''#NULL#'''', ''''|'''', -- ACCOUNT_RAP_CODE
	''''#NULL#'''', ''''|'''' , -- RETAIL_PLAN
	''''#NULL#'''' -- ASC_1_RESP_PLAN_TYPES
	))),
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = COALESCE(HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,''''0''''),
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER= COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
	HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''''0''''),
	HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''''0''''),
	HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''''0'''')
Where 1=1;
'';
--EXECUTE IMMEDIATE :INS_PRE_DEL;
--EXECUTE IMMEDIATE :INS_INSERT;
--EXECUTE IMMEDIATE :INS_UPDATE;

RETURN INS_INSERT;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_LOADBDV_TOOLS_AUDIT_TO_SHARED_WT_BDV_WT_CAMPAIGN(""ENV"" VARCHAR(16777216), ""JOB_NAME"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS ' 
INS_QUERY = ""INSERT INTO DB_AC_<env>_DWH.SHARED_WT_BDV.WT_CAMPAIGN(MD_START_DT) SELECT TO_DATE(MAX(DATA_START_DT)) as MD_START_DT "" +
""FROM DB_AC_<env>_DWH.TOOLS.AUDIT_JOBS_EXECUTIONS "" +
""WHERE JOB_STATUS IS NOT NULL AND JOB_NAME = ''tf_LoadBDV_RDV_to_SHARED_BDV_ENROLLMENT_COMPUTE'' "" +
""GROUP BY JOB_NAME""
var INS_QUERY_ENV = INS_QUERY.replaceAll(""_<env>_"",""_""+ ENV + ""_"");
var sql_statement2 = snowflake.createStatement({
  sqlText: INS_QUERY_ENV
});
 var result2_scan = sql_statement2.execute(); 
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_LOADBDV_TOOLS_AUDIT_TO_SHARED_WT_BDV_WT_CAMPAIGN(""ENV"" VARCHAR(16777216), ""JOB_NAME"" VARCHAR(16777216), ""DATA_START_DT"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS ' 
INS_QUERY = ""INSERT INTO DB_AC_<env>_DWH.SHARED_WT_BDV.WT_CAMPAIGN(MD_START_DT) SELECT TO_DATE(MAX(DATA_START_DT)) as MD_START_DT "" +
""FROM DB_AC_<env>_DWH.TOOLS.AUDIT_JOBS_EXECUTIONS "" +
""WHERE JOB_STATUS IS NOT NULL AND JOB_NAME = ''tf_LoadBDV_RDV_to_SHARED_BDV_ENROLLMENT_COMPUTE'' "" +
""GROUP BY JOB_NAME""
var INS_QUERY_ENV = INS_QUERY.replaceAll(""_<env>_"",""_""+ ENV + ""_"");
var sql_statement2 = snowflake.createStatement({
  sqlText: INS_QUERY_ENV
});
 var result2_scan = sql_statement2.execute(); 
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_LOADSATLINK_MULTIIMAGE_AUDIT_ID(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""TRUNC_TBL"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var INS_QUERY = ""INSERT INTO ""+ TGT_TBL + ""("" + INSERT_COLS + "") SELECT "" + SELECT_COLS + "" FROM (SELECT DISTINCT * FROM "" + SRC_TBL + "" ) SATLINK LEFT JOIN ""+ TGT_TBL +""STG ON SATLINK.HK_LINK =STG.HK_LINK AND SATLINK.MD_STARTDT =STG.MD_STARTDT AND SATLINK.MD_HASHDIFF =STG.MD_HASHDIFF WHERE ROW_SRC=''''STG'''';""
var TRUN_QUERY = ""TRUNCATE TABLE "" + TGT_TBL +"";""


if (TRUNC_TBL == ''Y'')
    {
    
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
	}
	

   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();		
   

';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_LOADSTG_IAS_TO_STG_REF_PRODUCT_ASSET_CATEGORY(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_PRODUCT_ASSET_CATEGORY WHERE 1=1; '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_PRODUCT_ASSET_CATEGORY(
MD_START_DT,
MD_SOURCE,
TI_ALTERNATE_TI_TYPE,
ASSET_CATEGORY,
MD_EXTRACT_DT,
MD_SRC_SYSTEM 
) 
SELECT 
	TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD''''),
	''''DB_IAW_''||ENV||''_STG.STEWARDSHIP.PRODUCTION_SHARE_TEST_PRODUCT_ASSET_CATEGORY'''',
	TI_ALTERNATE_TI_TYPE, 
	ASSET_CATEGORY,
	CURRENT_TIMESTAMP,
	''''STEWARDSHIP''''
	FROM DB_IAW_''||ENV||''_STG.STEWARDSHIP.PRODUCTION_SHARE_TEST_PRODUCT_ASSET_CATEGORY;
			 '';

INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_PRODUCT_ASSET_CATEGORY

SET 
	HK_HUB=
	SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_TI_TYPE), ''''#NULL#'''')))),

	MD_HASHDIFF=
	SHA1(CONCAT(COALESCE(ASSET_CATEGORY, ''''#NULL#'''') )),	
	MD_CREATION_DT=systimestamp()

WHERE 1=1;
			'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_STG_COUNT(""ENV"" VARCHAR(16777216), ""TBL_SCHEMA"" VARCHAR(16777216), ""TABLE_NAME"" VARCHAR(16777216))
RETURNS VARCHAR(10000)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var cmd =  ""SELECT COUNT(*) ROW_CNT FROM DB_IAW_""+ENV+""_STG.""+TBL_SCHEMA+"".""+TABLE_NAME+ "" WHERE MD_EXTRACT_DT  IS NOT NULL"";
var st = snowflake.createStatement( { sqlText: cmd } );
var res = st.execute();
var op=''''
while (res.next())  {
 op= res.getColumnValue(1);
 return op
}
;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_CONV_STG_COUNT(""JOB_NAME"" VARCHAR(16777216), ""DATA_START_DT"" VARCHAR(16777216), ""ENV"" VARCHAR(16777216), ""TBL_SCHEMA"" VARCHAR(16777216), ""TABLE_NAME"" VARCHAR(16777216))
RETURNS VARCHAR(10000)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var cmd =  ""SELECT COUNT(*) ROW_CNT FROM DB_IAW_""+ENV+""_STG.""+TBL_SCHEMA+"".""+TABLE_NAME+ "" WHERE MD_EXTRACT_DT  IS NOT NULL"";
var st = snowflake.createStatement( { sqlText: cmd } );
var res = st.execute();
var op=''''
while (res.next())  {
 op= res.getColumnValue(1);
 var cmd_upd = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET JOB_ROW_COUNT ="" + op + "" WHERE JOB_NAME = ''"" + JOB_NAME + ""'' AND DATA_START_DT = ''"" + DATA_START_DT + ""''"";
   var st_upd = snowflake.createStatement( { sqlText: cmd_upd } );
   st_upd.execute();
 return op
}
;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_DATAVAULT_LOADHUB_AUDIT_ID(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""TRUNC_TBL"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var INS_QUERY = ""INSERT INTO ""+ TGT_TBL + ""("" + INSERT_COLS + "") SELECT DISTINCT "" + SELECT_COLS + "" FROM "" + SRC_TBL + "" STG LEFT JOIN ""+ TGT_TBL +"" HUB ON STG.HK_HUB = HUB.HK_HUB  WHERE HUB.HK_HUB IS NULL ORDER BY STG.HK_HUB;""
var TRUN_QUERY = ""TRUNCATE TABLE "" + TGT_TBL +"";""


if (TRUNC_TBL = ''Y'')
    {
    
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
  }
  

   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();   
   

';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_DATAVAULT_LOADLINK_AUDIT_ID(""SRC_MASTER_OBJECT"" VARCHAR(255), ""SRC_DTLS_OBJECT"" VARCHAR(255), ""TGT_OBJECT"" VARCHAR(255), ""I_LINK_HK_LINK"" VARCHAR(251), ""I_SRC_HK_LINK"" VARCHAR(251), ""TGT_MAPPING"" VARCHAR(1000), ""I_AUDIT_ID"" VARCHAR(255))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var src_app_tgt_mapping = """";
var tgt = TGT_MAPPING;
tgt.split("","").forEach(element => 
{
if (element !== ""MD_CREATION_DT"" && element !== ""MD_CREATION_AUDIT_ID"") 

 src_app_tgt_mapping = src_app_tgt_mapping + ""SRC."" + element + "","";
 
});

var INS_QUERY = `INSERT INTO `+TGT_OBJECT+`(`+TGT_MAPPING+`)
SELECT `+src_app_tgt_mapping+`  
        CURRENT_TIMESTAMP,
        ''`+I_AUDIT_ID+`''
FROM (select distinct * from `+SRC_MASTER_OBJECT+`) SRC LEFT outer JOIN  `+SRC_DTLS_OBJECT+` LNK ON `+I_SRC_HK_LINK+` = `+I_LINK_HK_LINK+`
WHERE `+I_LINK_HK_LINK+` IS NULL`;
var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();	   

';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_DATAVAULT_LOADLINK_AUDIT_ID_RK(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""TRUNC_TBL"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var INS_QUERY = ""INSERT INTO ""+ TGT_TBL + ""("" + INSERT_COLS + "") SELECT DISTINCT "" + SELECT_COLS + "" FROM "" + SRC_TBL + "" STG LEFT JOIN ""+ TGT_TBL +"" LNK ON STG.HK_LINK = LNK.HK_LINK  WHERE LNK.HK_LINK IS NULL;""
var TRUN_QUERY = ""TRUNCATE TABLE "" + TGT_TBL +"";""


if (TRUNC_TBL = ''Y'')
    {
    
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
  }
  

   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();   
   

';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_DATAVAULT_LOADLINK_AUDIT_ID_TST(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""TRUNC_TBL"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var INS_QUERY = ""INSERT INTO ""+ TGT_TBL + ""("" + INSERT_COLS + "") SELECT DISTINCT "" + SELECT_COLS + "" FROM "" + SRC_TBL + "" STG LEFT JOIN ""+ TGT_TBL +"" HUB ON STG.HK_HUB = HUB.HK_HUB  WHERE HUB.HK_HUB IS NULL;""
var TRUN_QUERY = ""TRUNCATE TABLE "" + TGT_TBL +"";""

return INS_QUERY;


';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_DATAVAULT_LOADSATELLITE_DELETE_AUDIT_ID(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""TRUNC_TBL"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var INS_QUERY = ""INSERT INTO ""+ TGT_TBL + ""("" + INSERT_COLS + "") SELECT "" +  SELECT_COLS + "" FROM "" + SRC_TBL + "" STG LEFT JOIN (SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM ""  + TGT_TBL + ""  SAT) SATHUB WHERE SATHUB.RN = 1) SAT ON SAT.HK_HUB = STG.HK_HUB WHERE SAT.HK_HUB  IS NULL AND SAT.MD_ACTIVE != ''D'' AND SAT.HK_HUB !=''0'';"";
var TRUN_QUERY = ""TRUNCATE TABLE "" + TGT_TBL +"";"";

if (TRUNC_TBL == ''Y'')
    {
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
	}
   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();		
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_DATAVAULT_LOADSATELLITE_INSERT_AUDIT_ID(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""TRUNC_TBL"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var INS_QUERY = ""INSERT INTO ""+ TGT_TBL + ""("" + INSERT_COLS + "") SELECT DISTINCT "" +  SELECT_COLS + "" FROM "" + SRC_TBL + "" STG LEFT JOIN (SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM ""  + TGT_TBL + ""  SAT) SATHUB WHERE SATHUB.RN = 1 AND SATHUB.MD_ACTIVE =''A'') SAT ON SAT.HK_HUB = STG.HK_HUB AND  SAT.MD_HASHDIFF  = STG.MD_HASHDIFF WHERE SAT.HK_HUB  IS NULL;"";
var TRUN_QUERY = ""TRUNCATE TABLE "" + TGT_TBL +"";"";

if (TRUNC_TBL == ''Y'')
    {
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
  }
   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();   
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_DATAVAULT_LOADSATLINK_DELETE_AUDIT_ID(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""TRUNC_TBL"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var INS_QUERY = ""INSERT INTO ""+ TGT_TBL + ""("" + INSERT_COLS + "") SELECT "" +  SELECT_COLS + "" FROM "" + SRC_TBL + "" STG LEFT JOIN (SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_LINK ORDER BY MD_START_DT DESC) RN FROM ""  + TGT_TBL + ""  SAT) SATLINK WHERE SATLINK.RN = 1) SAT ON SAT.HK_LINK = STG.HK_LINK WHERE SAT.HK_LINK  IS NULL AND SAT.MD_ACTIVE != ''D'' ;"";
var TRUN_QUERY = ""TRUNCATE TABLE "" + TGT_TBL +"";"";

if (TRUNC_TBL == ''Y'')
    {
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
	}
   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();		
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_DATAVAULT_LOADSATLINK_INSERT_AUDIT_ID(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""TRUNC_TBL"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var INS_QUERY = ""INSERT INTO ""+ TGT_TBL + ""("" + INSERT_COLS + "") SELECT DISTINCT "" +  SELECT_COLS + "" FROM "" + SRC_TBL + "" SRC LEFT JOIN (SELECT * FROM  (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_LINK ORDER BY MD_START_DT DESC) RN FROM ""  + TGT_TBL + ""  SAT) SATLINK WHERE SATLINK.RN = 1 AND SATLINK.MD_ACTIVE =''A'') SAT ON SAT.HK_LINK = SRC.HK_LINK AND  SAT.MD_HASHDIFF  = SRC.MD_HASHDIFF WHERE SAT.HK_LINK  IS NULL;"";
var TRUN_QUERY = ""TRUNCATE TABLE "" + TGT_TBL +"";"";

if (TRUNC_TBL == ''Y'')
    {
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
  }
   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
   var result_scan = sql_statement.execute();   
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_LOADSTG_IAS_UNIVERIS_TO_STG_COM_PRODUCTION(""ENV"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var truncate_query = ""TRUNCATE TABLE DB_IAW_"" + ENV + ""_stg.IAS_UNIVERIS.S_COM_PRODUCTION""; 

var sql_statement = snowflake.createStatement(
          {
          sqlText: truncate_query
          }
       );
var result_scan = sql_statement.execute();	
 var ins_query = ""INSERT INTO DB_IAW_"" + ENV + ""_stg.IAS_UNIVERIS.S_COM_PRODUCTION("" 
                + ""MD_START_DT,MD_SOURCE,COM_PRODUCTION_CD,COM_PRODUCTION_MNEM,COM_PRODUCTION_DESC,COM_PRODUCTION_LONG_DESC,COM_PRODUCTION_MNEM_ENG,COM_PRODUCTION_MNEM_FRE,COM_PRODUCTION_DESC_ENG,""
                + ""COM_PRODUCTION_DESC_FRE,COM_PRODUCTION_LONG_DESC_ENG,COM_PRODUCTION_LONG_DESC_FRE,CRC_TRND_RPT_CAT,COMMISSION_LEVEL,CAC_TYPE_CD,ACC_REPORT_IND,MD_SRC_SYSTEM,MD_EXTRACT_DT) "" 
               + ""SELECT ''2019-01-01'',''DB_IAW_PROD_STAGING_POCIA.IAS_UNIVERIS.S_COM_PRODUCTION'',COM_PROD_CD,COM_PROD_MNEM,COM_PROD_DESC,COM_PROD_LONG_DESC,COM_PROD_MNEM_ENG,COM_PROD_MNEM_FRE,COM_PROD_DESC_ENG,""
                + ""COM_PROD_DESC_FRE,COM_PROD_LONG_DESC_ENG,COM_PROD_LONG_DESC_FRE,CRC_TRND_RPT_CAT,COMMISSION_LEVEL,CAC_TYPE_CD,ACC_REPORT_IND,''IAS-UNIVERIS'',TO_DATE(SYSTIMESTAMP())""
                + "" FROM  DB_IAW_"" + ENV + ""_stg_pocia.IAS_UNIVERIS_POCIA.S_COM_PROD"";
   
sql_statement = snowflake.createStatement(
          {
          sqlText: ins_query
          });
 result_scan = sql_statement.execute();	

';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_RECONCILIATION(""ENV"" VARCHAR(16777216), ""AUDIT_ID"" VARCHAR(16777216), ""IO_DATA_START_DATE"" VARCHAR(16777216), ""IO_NAME"" VARCHAR(255), ""IO_PATTERN"" VARCHAR(255))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var del_stmt = ""DELETE FROM DB_IAW_""+ ENV + 
      ""_DM.RECONCILIATION.RECONCILE_RESULTS WHERE MD_START_DT = TO_DATE("" + IO_DATA_START_DATE +
      "") AND NAME LIKE COALESCE(''%"" + IO_PATTERN
      + ""%'', ''"" + IO_NAME + ""'')"" ;
  var sql_statement = snowflake.createStatement(
          {
          sqlText: del_stmt
          }
       );
   var result_scan = sql_statement.execute();   
   var call_stmt = ""CALL DB_IAW_"" + ENV + 
      ""_DM.RECONCILIATION.USP_RECONCILE_CHECK(''""+
      IO_NAME + ""'',"" + IO_DATA_START_DATE +"","" + AUDIT_ID + "",''"" + IO_PATTERN + ""'')"";
   var sql_statement = snowflake.createStatement(
          {
          sqlText: call_stmt
          }
       );
     result_scan = sql_statement.execute(); 
     
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_STG_COUNT(""ENV"" VARCHAR(16777216), ""TBL_SCHEMA"" VARCHAR(16777216), ""TABLE_NAME"" VARCHAR(16777216))
RETURNS VARCHAR(10000)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var cmd =  ""SELECT COUNT(*) ROW_CNT FROM DB_IAW_""+ENV+""_STG.""+TBL_SCHEMA+"".""+TABLE_NAME+ "" WHERE MD_EXTRACT_DT  IS NOT NULL"";
var st = snowflake.createStatement( { sqlText: cmd } );
var res = st.execute();
var op=''''
while (res.next())  {
 op= res.getColumnValue(1);
 return op
}
;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.SP_STG_COUNT(""JOB_NAME"" VARCHAR(16777216), ""DATA_START_DT"" VARCHAR(16777216), ""ENV"" VARCHAR(16777216), ""TBL_SCHEMA"" VARCHAR(16777216), ""TABLE_NAME"" VARCHAR(16777216))
RETURNS VARCHAR(10000)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var cmd =  ""SELECT COUNT(*) ROW_CNT FROM DB_IAW_""+ENV+""_STG.""+TBL_SCHEMA+"".""+TABLE_NAME+ "" WHERE MD_EXTRACT_DT  IS NOT NULL"";
var st = snowflake.createStatement( { sqlText: cmd } );
var res = st.execute();
var op=''''
while (res.next())  {
 op= res.getColumnValue(1);
 var cmd_upd = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET JOB_ROW_COUNT ="" + op + "" WHERE JOB_NAME = ''"" + JOB_NAME + ""'' AND DATA_START_DT = ''"" + DATA_START_DT + ""''"";
   var st_upd = snowflake.createStatement( { sqlText: cmd_upd } );
   st_upd.execute();
 return op
}
;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.USP_AUDIT_CHECK_DEPENDENT_JOBS(""JOB_NAME"" VARCHAR(16777216), ""PRINCIPAL_DATA_START_DT"" VARCHAR(10))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

//remove cotes
JOB_NAME= JOB_NAME.replace(""''"", """");
PRINCIPAL_DATA_START_DT= PRINCIPAL_DATA_START_DT.replace(""''"", """");


// Check last execution of each dependent job if there are any
var cmd = ""SELECT * FROM (SELECT D.DEPENDENT_JOB_NAME, E.JOB_NAME, COALESCE(E.JOB_STATUS,''NOT RUNNING'') AS JOB_STATUS FROM TOOLS.AUDIT_JOBS_DEPENDENCIES D INNER JOIN TOOLS.AUDIT_JOBS_EXECUTIONS E  ON E.JOB_NAME LIKE  D.PRINCIPAL_JOB_NAME_PATTERN AND DEPENDENCY_TYPE=''PREREQUISITE'' AND E.DATA_START_DT = ''"" +PRINCIPAL_DATA_START_DT+ ""'' WHERE D.DEPENDENT_JOB_NAME= ''"" + JOB_NAME + ""'' QUALIFY ROW_NUMBER() OVER (PARTITION BY E.JOB_NAME ORDER BY E.DATA_START_DT DESC)=1) WHERE JOB_STATUS<>''SUCCESS''"";

var st = snowflake.createStatement( { sqlText: cmd } );
var res = st.execute();

// A non successful execution is found
var msg = """";

while (res.next()) {

	var subJobName= res.getColumnValue(2);
	var status=res.getColumnValue(3);
	
	if(status==""NOT RUNNING"")
	{
		msg += "" ""+ subJobName + "" must run before."";
	}
	else
	{
		msg += "" ""+ subJobName + "" status is ""+res.getColumnValue(3)+""."";
	}
}

if(msg !=""""){

	return ""The job ""+JOB_NAME+"" failed because: "" + msg;
}

else{
	return ""1"";
}
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.USP_AUDIT_DEPENDENCIES_INSERT_EXEC(""DEPENDENT_JOB_NAME"" VARCHAR(2000), ""DEPENDENT_DATA_START_DT"" VARCHAR(100), ""PRINCIPAL_JOB_NAME_PATTERN"" VARCHAR(1000), ""DEPENDENCY_TYPE"" VARCHAR(100), ""NB"" FLOAT, ""INTERVAL_UNIT"" VARCHAR(100), ""INTERVAL_NB"" FLOAT)
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
// Insert command
var cmdInsert = ""INSERT INTO TOOLS.AUDIT_JOBS_DEPENDENCIES (DEPENDENT_JOB_NAME,DEPENDENT_DATA_START_DT,DEPENDENT_DATA_NEXT_START_DT,PRINCIPAL_JOB_NAME_PATTERN,PRINCIPAL_DATA_START_DT,PRINCIPAL_DATA_NEXT_START_DT,DEPENDENCY_TYPE) VALUES "";
var cmd = """";
var nb_i = 1;
while(nb_i <= NB) {
	cmd += ""(''""+DEPENDENT_JOB_NAME+""'',DATEADD(''""+INTERVAL_UNIT+""'',""+INTERVAL_NB*(nb_i-1)+"",''""+DEPENDENT_DATA_START_DT+""''::DATETIME),DATEADD(''""+INTERVAL_UNIT+""'',""+INTERVAL_NB*(nb_i)+"",''""+DEPENDENT_DATA_START_DT+""''::DATETIME),''"" + PRINCIPAL_JOB_NAME_PATTERN + ""'', DATEADD(''""+INTERVAL_UNIT+""'',""+INTERVAL_NB*(nb_i-1)+"",''""+DEPENDENT_DATA_START_DT+""''::DATETIME), DATEADD(''""+INTERVAL_UNIT+""'',""+INTERVAL_NB*(nb_i)+"",''"" + DEPENDENT_DATA_START_DT+""''::DATETIME) ,''"" + DEPENDENCY_TYPE + ""'' ),"";                          
  	nb_i += 1;   
}
// Execute Insert command  
cmd = cmdInsert + cmd.slice(0,-1);
try {
		var st = snowflake.createStatement( { sqlText: cmd } );
		var res = st.execute();
	}
catch(err) {
		var result =  ""Failed: Code: "" + err.code + ""\\n  State: "" + err.state;
		result += ""\\n  Message: "" + err.message;
		result += ""\\nStack Trace:\\n"" + err.stackTraceTxt;
		result += ""\\nCommand:\\n"" + cmd;
		return result;
	}

return ""OK"";
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.USP_AUDIT_END_JOB(""JOB_NAME"" VARCHAR(16777216), ""DATA_START_DT"" VARCHAR(16777216), ""JOB_AUDIT_ID"" VARCHAR(16777216), ""JOB_END_STATUS"" VARCHAR(16777216), ""JOB_END_DESC"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
// Update status command
var cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET UPDATE_JOB_AUDIT_ID=''""+JOB_AUDIT_ID+""'', JOB_STATUS="";
var cmdUpdStatusWhereClause = "" WHERE JOB_NAME =''"" + JOB_NAME + ""'' AND DATA_START_DT = ''""+DATA_START_DT+""''"";
// Check last execution
var cmd = ""SELECT TOP 1 aje.DATA_START_DT::VARCHAR, aje.JOB_STATUS FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''"" + JOB_NAME + ""'' AND aje.DATA_START_DT = ''""+DATA_START_DT+""'' ORDER BY aje.DATA_START_DT DESC"";
var st = snowflake.createStatement( { sqlText: cmd } );
var res = st.execute();

var stUpdStatus;
var resUpdStatus;

try 
{	
	// A previous execution is found
	if (res.next())
	{
		var dtLastJobStart = res.getColumnValue(1);
		var strLastJobStatus = res.getColumnValue(2);

		//var cmdDG = ""INSERT INTO TOOLS.DEBUG_LOG VALUES (''""+ dtLastJobStart +""'')"";
		//var stDG = snowflake.createStatement( { sqlText: cmdDG } );
		//var resDG = stDG.execute();

		// Job is in progress 
		// => end it  
		if (strLastJobStatus == ""IN PROGRESS"")
		{
			cmdUpdStatus += ""''""+JOB_END_STATUS+""'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''"" + JOB_AUDIT_ID + ""<'' || CURRENT_TIMESTAMP() || ''> END_JOB : ""+JOB_END_DESC+"" ''"" + cmdUpdStatusWhereClause;	
			stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
			resUpdStatus = stUpdStatus.execute();
			return JOB_END_STATUS;
		}
		// Ending a job that is not in progress
		else
		{
			cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> END_JOB ERROR_01 : trying to end a job that is not in progress. ''"" + cmdUpdStatusWhereClause;
			stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
			resUpdStatus = stUpdStatus.execute();
			return ""ERROR_01"";		
		}	
	}
	// Job to be ended not found
	else
	{
		return ""ERROR_02"";
	}
}
// Technical error
catch(er)
{
	return ""ERROR_FATAL : "" + er;	
}

return ""ERROR_03"";	

';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.USP_AUDIT_INSERT_EXEC(""JOB_NAME"" VARCHAR(2000), ""JOB_DATA_START_DT"" VARCHAR(100), ""NB"" FLOAT, ""INTERVAL_UNIT"" VARCHAR(100), ""INTERVAL_NB"" FLOAT)
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
// Insert command
var cmdInsert = ""INSERT INTO TOOLS.AUDIT_JOBS_EXECUTIONS (JOB_NAME, DATA_START_DT, DATA_NEXT_START_DT) VALUES "";
var cmd = """";
var nb_i = 1;
while(nb_i <= NB) {
	cmd += ""(''""+JOB_NAME+""'',DATEADD(''""+INTERVAL_UNIT+""'',""+INTERVAL_NB*(nb_i-1)+"",''""+JOB_DATA_START_DT+""''::DATETIME),DATEADD(''""+INTERVAL_UNIT+""'',""+INTERVAL_NB*(nb_i)+"",''""+JOB_DATA_START_DT+""''::DATETIME)),"";                                   
	nb_i += 1; 
}
// Execute Insert command  
cmd = cmdInsert + cmd.slice(0,-1);
try {
		var st = snowflake.createStatement( { sqlText: cmd } );
		var res = st.execute();
	}
catch(err) {
		var result =  ""Failed: Code: "" + err.code + ""\\n  State: "" + err.state;
		result += ""\\n  Message: "" + err.message;
		result += ""\\nStack Trace:\\n"" + err.stackTraceTxt;
		result += ""\\nCommand:\\n"" + cmd;
		return result;
	}

return ""OK"";
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.USP_AUDIT_START_JOB(""JOB_NAME"" VARCHAR(16777216), ""DATA_START_DT"" VARCHAR(10), ""JOB_AUDIT_ID"" VARCHAR(16777216))
RETURNS VARCHAR(100)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
// Update status command
var cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET UPDATE_JOB_AUDIT_ID=''""+JOB_AUDIT_ID+""'', JOB_STATUS="";
var cmdUpdStatusWhereClause = "" WHERE JOB_NAME =''"" + JOB_NAME + ""'' AND DATA_START_DT = ''""+DATA_START_DT+""''"";
// Check last execution
var cmd = ""SELECT TOP 1 aje.DATA_START_DT::VARCHAR, aje.JOB_STATUS, aje.DATA_NEXT_START_DT::VARCHAR FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''"" + JOB_NAME + ""'' AND aje.JOB_STATUS IS NOT NULL AND aje.JOB_STATUS<>'''' AND aje.DATA_START_DT <= ''""+DATA_START_DT+""'' ORDER BY aje.DATA_START_DT DESC"";
var st = snowflake.createStatement( { sqlText: cmd } );
var res = st.execute();
var stUpdStatus;
var resUpdStatus;
var InsCmd = ""SELECT DISTINCT JOB_NAME FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''"" + JOB_NAME + ""'' AND aje.DATA_START_DT = ''"" + DATA_START_DT +""''"";
var InsSt = snowflake.createStatement( { sqlText: InsCmd } );
var InsRes = InsSt.execute();

try
{   
if (InsRes.next())
{
    // A previous execution is found
    if (res.next())
    {
        var dtLastJobStart = res.getColumnValue(1);
        var strLastJobStatus = res.getColumnValue(2);
        var dtLastJobNextStart = res.getColumnValue(3);
        // Job is executed before for the same date but without success 
        // => It is correct to re-execute it  
        if (dtLastJobStart == DATA_START_DT && strLastJobStatus != ""SUCCESS"" && strLastJobStatus != ""IN PROGRESS"")
        {
            cmdUpdStatus += ""''IN PROGRESS'', JOB_ACTION_RESULT=''SUCCESS'',  JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''"" + JOB_AUDIT_ID + ""('' || CURRENT_TIMESTAMP() || '') : Job restart. ''"" + cmdUpdStatusWhereClause; 
            stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
            resUpdStatus = stUpdStatus.execute();
            return ""IN PROGRESS"";
        }
        else
        {
            // Job is not executed before with the same date
            if (dtLastJobStart < DATA_START_DT) 
            {
                //Check if the execution next start date is not skipped
                if (dtLastJobNextStart != DATA_START_DT)
                {
                    cmdUpdStatus += ""'''', JOB_ACTION_RESULT=''ERROR_06'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> ERROR_06 : The execution of ""+dtLastJobNextStart +"" image was skipped. ''"" + cmdUpdStatusWhereClause;
                    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
                    resUpdStatus = stUpdStatus.execute();
                    return ""ERROR_06"";
                }
                // The last execution was successful
                // => Execute for current date
                else if (strLastJobStatus == ""SUCCESS"")
                {
                    cmdUpdStatus += ""''IN PROGRESS'', JOB_ACTION_RESULT=''SUCCESS'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> : Job start. ''"" + cmdUpdStatusWhereClause;
                    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
                    resUpdStatus = stUpdStatus.execute();
                    return ""IN PROGRESS"";
                }
                // The last execution is not successful or not done
                // => Error
                else
                {
                    cmdUpdStatus += ""'''', JOB_ACTION_RESULT=''ERROR_01'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> ERROR_01 : The previous execution is not done or not successful. ''"" + cmdUpdStatusWhereClause;
                    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
                    resUpdStatus = stUpdStatus.execute();
                    return ""ERROR_01"";
                }
            }
            // Already successfully executed or executing for this date
            // => Error
            else
            {
                // Already successfully executed
                if (strLastJobStatus == ""SUCCESS"")
                {
                    cmdUpdStatus += ""''SUCCESS'', JOB_ACTION_RESULT=''ERROR_02'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> ERROR_02 : Trying to re-execute a successfully executed job. ''"" + cmdUpdStatusWhereClause;
                    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
                    resUpdStatus = stUpdStatus.execute();
                    return ""ERROR_02"";
                }
                // Already executing for this date (IN PROGRESS)
                else
                {
                    cmdUpdStatus += ""''""+strLastJobStatus+""'', JOB_ACTION_RESULT=''ERROR_03'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> ERROR_03 : Trying to execute a running Job. ''""+ cmdUpdStatusWhereClause;
                    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
                    resUpdStatus = stUpdStatus.execute();
                    return ""ERROR_03"";
                }   
            }   
        }   
    }
    // First execution of the job : no previous job
    else
    {
        cmdUpdStatus += ""''IN PROGRESS'', JOB_ACTION_RESULT=''SUCCESS'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> : Job first start. ''"" + cmdUpdStatusWhereClause;
        stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
        resUpdStatus = stUpdStatus.execute();
        return ""IN PROGRESS"";
    }
}
else
{
	return ""ERROR_07"";
}
}
// Technical error
catch(er)
{
    cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET UPDATE_JOB_AUDIT_ID=''""+JOB_AUDIT_ID+""'', JOB_STATUS="";
    cmdUpdStatus += ""''ERROR'', JOB_ACTION_RESULT=''ERROR_04'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> ERROR_04 : technical error :""+er+"". ''""+ cmdUpdStatusWhereClause;
    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
    resUpdStatus = stUpdStatus.execute();
    return ""ERROR_04"";  
return er;
}
cmdUpdStatus += ""''ERROR'', JOB_ACTION_RESULT=''ERROR_05'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''>ERROR_05 : Unknown error. ''""+ cmdUpdStatusWhereClause;
stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
resUpdStatus = stUpdStatus.execute();
return ""ERROR_05"";  
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.USP_AUDIT_START_JOB_NEXT_DATE(""JOB_NAME"" VARCHAR(16777216), ""JOB_AUDIT_ID"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
//remove cotes
JOB_NAME= JOB_NAME.replace(""''"", """");
JOB_AUDIT_ID= JOB_AUDIT_ID.replace(""''"", """");

// Update status command
var cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET UPDATE_JOB_AUDIT_ID=''""+JOB_AUDIT_ID+""'', JOB_STATUS="";
var cmdUpdStatusWhereClause = "" WHERE JOB_NAME =''"" + JOB_NAME + ""''"";

// Check last execution
var cmd = ""SELECT TOP 1 aje.DATA_START_DT::VARCHAR, aje.JOB_STATUS FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''"" + JOB_NAME + ""'' AND aje.JOB_STATUS IS NOT NULL AND aje.JOB_STATUS<>'''' ORDER BY aje.DATA_START_DT DESC"";
var st = snowflake.createStatement( { sqlText: cmd } );
var res = st.execute();


var stUpdStatus;
var resUpdStatus;


// A previous execution is found
if (res.next())
{
	var dtLastJobStart = res.getColumnValue(1);
	var strLastJobStatus = res.getColumnValue(2);

	//var cmdDG = ""INSERT INTO TOOLS.DEBUG_LOG VALUES (''""+ dtLastJobStart +""'')"";
	//var stDG = snowflake.createStatement( { sqlText: cmdDG } );
	//var resDG = stDG.execute();

	// Job is executed before for the same date but without success 
	// => It is correct to re-execute it  
	if (strLastJobStatus != ""SUCCESS"" && strLastJobStatus != ""IN PROGRESS"")
	{
		// Check last execution
		var cmdNext = ""SELECT TOP 1 aje.DATA_START_DT::VARCHAR, aje.JOB_STATUS FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''"" + JOB_NAME + ""'' AND DATA_START_DT=''""+res.getColumnValue(1)+""'' ORDER BY aje.DATA_START_DT ASC"";
		var stNext = snowflake.createStatement( { sqlText: cmdNext } );
		var resNext = stNext.execute();
		if (resNext.next())
		{
			//Check dependent jobs execution, if there are any
			var statementDep = snowflake.createStatement( { sqlText: ""CALL TOOLS.USP_AUDIT_CHECK_DEPENDENT_JOBS(''"" + JOB_NAME + ""'',''"" + resNext.getColumnValue(1) + ""'')"" } );
			var dependencyRslt = statementDep.execute();
			dependencyRslt.next();
			var dependencyMsg = dependencyRslt.getColumnValue(1);
			if(dependencyMsg != ""1"")
			{
			//throw dependencyMsg;
	        cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET JOB_STATUS=''ERROR'' , JOB_ACTION_RESULT=''ERROR_04'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> START_JOB ERROR_04 : ""+ dependencyMsg +"" ''""+ cmdUpdStatusWhereClause + "" AND DATA_START_DT=''""+resNext.getColumnValue(1)+""''"";	
			stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
			resUpdStatus = stUpdStatus.execute();
			return ""0000-00-00"";
			}

			cmdUpdStatus += ""''IN PROGRESS'',  JOB_ACTION_RESULT=''SUCCESS'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''"" + JOB_AUDIT_ID + ""('' || CURRENT_TIMESTAMP() || '') START_JOB : Job restart. ''"" + cmdUpdStatusWhereClause + "" AND DATA_START_DT=''""+res.getColumnValue(1)+""''"";	
			stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
			resUpdStatus = stUpdStatus.execute();
			return res.getColumnValue(1);
		}
	}
	else
	{
		// The last execution was successful
		// => Execute for next date
		if (strLastJobStatus == ""SUCCESS"")
		{
			// Check last execution
			var cmdNext = ""SELECT TOP 1 aje.DATA_START_DT::VARCHAR, aje.JOB_STATUS FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''"" + JOB_NAME + ""'' AND DATA_START_DT>''""+res.getColumnValue(1)+""'' ORDER BY aje.DATA_START_DT ASC"";
			var stNext = snowflake.createStatement( { sqlText: cmdNext } );
			var resNext = stNext.execute();
			if (resNext.next())
			{


				//Check dependent jobs execution, if there are any
				var statementDep = snowflake.createStatement( { sqlText: ""CALL TOOLS.USP_AUDIT_CHECK_DEPENDENT_JOBS(''"" + JOB_NAME + ""'',''"" + resNext.getColumnValue(1) + ""'')"" } );
				var dependencyRslt = statementDep.execute();
				dependencyRslt.next();
				var dependencyMsg = dependencyRslt.getColumnValue(1);
				if(dependencyMsg != ""1"")
				{
				//throw dependencyMsg;
                
                cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET JOB_STATUS=''ERROR'' , JOB_ACTION_RESULT=''ERROR_04'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> START_JOB ERROR_04 : ""+ dependencyMsg +"" ''""+ cmdUpdStatusWhereClause + "" AND DATA_START_DT=''""+resNext.getColumnValue(1)+""''"";	
				stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
				resUpdStatus = stUpdStatus.execute();
				return ""0000-00-00"";
				}


				cmdUpdStatus += ""''IN PROGRESS'',  JOB_ACTION_RESULT=''SUCCESS'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> START_JOB : Job start. ''"" + cmdUpdStatusWhereClause + "" AND DATA_START_DT=''""+resNext.getColumnValue(1)+""''"";	;
				stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
				resUpdStatus = stUpdStatus.execute();
				return resNext.getColumnValue(1);
			}
		}
		// Already executing for this date (IN PROGRESS)
		// Error
		else
		{
			cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET JOB_ACTION_RESULT=''ERROR_03'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> START_JOB ERROR_03 : Trying to execute a running Job. ''""+ cmdUpdStatusWhereClause + "" AND DATA_START_DT=''""+res.getColumnValue(1)+""''"";	
			stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
			resUpdStatus = stUpdStatus.execute();
			return ""0000-00-00"";
		}	
	}	
}
// First execution of the job : no previous job
else
{
	// Check last execution
	var cmdFirst = ""SELECT TOP 1 aje.DATA_START_DT::VARCHAR, aje.JOB_STATUS FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''"" + JOB_NAME + ""'' ORDER BY aje.DATA_START_DT ASC"";
	var stFirst = snowflake.createStatement( { sqlText: cmdFirst } );
	var resFirst = stFirst.execute();
	
	if (resFirst.next())
	{

                //Check dependent jobs execution, if there are any
				var statementDep = snowflake.createStatement( { sqlText: ""CALL TOOLS.USP_AUDIT_CHECK_DEPENDENT_JOBS(''"" + JOB_NAME + ""'',''"" + resFirst.getColumnValue(1) + ""'')"" } );
				var dependencyRslt = statementDep.execute();
				dependencyRslt.next();
				var dependencyMsg = dependencyRslt.getColumnValue(1);
				if(dependencyMsg != ""1"")
				{

				//throw dependencyMsg;

                cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET JOB_STATUS=''ERROR'' ,JOB_ACTION_RESULT=''ERROR_04'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> START_JOB ERROR_04 : ""+ dependencyMsg +"" ''""+ cmdUpdStatusWhereClause + "" AND DATA_START_DT=''""+resFirst.getColumnValue(1)+""''"";	
				stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
				resUpdStatus = stUpdStatus.execute();
				return ""0000-00-00"";
				}

		cmdUpdStatus += ""''IN PROGRESS'',  JOB_ACTION_RESULT=''SUCCESS'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> START_JOB : Job first start. ''"" + cmdUpdStatusWhereClause + "" AND DATA_START_DT=''""+resFirst.getColumnValue(1)+""''"";
		stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
		resUpdStatus = stUpdStatus.execute();
		return resFirst.getColumnValue(1);
	}
	else 
	{
		return ""0000-00-00""
	}
}


return ""0000-00-00"";

';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.USP_AUDIT_START_JOB_VARIABLE_SET(""JOB_NAME"" VARCHAR(16777216), ""DATA_START_DT"" VARCHAR(10))
RETURNS VARCHAR(10000)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var cmd = ""SELECT CASE WHEN JOB_STATUS IS NOT NULL AND JOB_ACTION_RESULT = ''SUCCESS'' THEN ''SUCCESS'' ELSE ''ERROR'' END AS tmp_result FROM TOOLS.AUDIT_JOBS_EXECUTIONS WHERE JOB_STATUS=''IN PROGRESS'' AND  JOB_NAME=  Replace(''""+JOB_NAME+""'', CHR(39), '''')  AND DATA_START_DT =  TO_DATE(Replace(replace(''""+DATA_START_DT+""'',''0000-00-00'',''1900-01-01''), CHR(39), ''''),''YYYY-MM-DD'')"";
var st = snowflake.createStatement( { sqlText: cmd } );
var res = st.execute();
var op=''''
while (res.next())  {
 op= res.getColumnValue(1);
 
}
return op;
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.USP_AUDIT_START_ONDEMAND_JOB(""JOB_NAME"" VARCHAR(16777216), ""DATA_START_DT"" VARCHAR(10), ""JOB_AUDIT_ID"" VARCHAR(16777216))
RETURNS VARCHAR(100)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
// Update status command
var cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET UPDATE_JOB_AUDIT_ID=''""+JOB_AUDIT_ID+""'', JOB_STATUS="";
var cmdUpdStatusWhereClause = "" WHERE JOB_NAME =''"" + JOB_NAME + ""'' AND DATA_START_DT = ''""+DATA_START_DT+""''"";
// Check last execution
var cmd = ""SELECT TOP 1 aje.DATA_START_DT::VARCHAR, aje.JOB_STATUS, aje.DATA_NEXT_START_DT::VARCHAR FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''"" + JOB_NAME + ""'' AND aje.JOB_STATUS IS NOT NULL AND aje.JOB_STATUS<>'''' AND aje.DATA_START_DT = ''""+DATA_START_DT+""'' ORDER BY aje.DATA_START_DT DESC"";
var st = snowflake.createStatement( { sqlText: cmd } );
var res = st.execute();
var stUpdStatus;
var resUpdStatus;
var InsCmd = ""SELECT DISTINCT JOB_NAME FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''"" + JOB_NAME + ""'' AND aje.DATA_START_DT = ''"" + DATA_START_DT +""''"";
var InsSt = snowflake.createStatement( { sqlText: InsCmd } );
var InsRes = InsSt.execute();
//Insert new record if the record does not exist
var InsNewCmd = ""INSERT INTO TOOLS.AUDIT_JOBS_EXECUTIONS (JOB_NAME,DATA_START_DT,JOB_STATUS,JOB_ACTION_RESULT) VALUES(''"" + JOB_NAME + ""'',''"" + DATA_START_DT + ""'',''IN PROGRESS'',''SUCCESS'')"";
var InsNewSt; 
var InsNewRes;

try
{   
if (InsRes.next())
{
    // A previous execution is found
    if (res.next())
    {
        // Job is executed before for the same date but without success 
        // => It is correct to re-execute it  
            cmdUpdStatus += ""''IN PROGRESS'', JOB_ACTION_RESULT=''SUCCESS'',  JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''"" + JOB_AUDIT_ID + ""('' || CURRENT_TIMESTAMP() || '') : Job restart. ''"" + cmdUpdStatusWhereClause; 
            stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
            resUpdStatus = stUpdStatus.execute();
            return ""IN PROGRESS"";
           
    }
    // First execution of the job : no previous job
    else
    {
	InsNewSt = snowflake.createStatement( { sqlText: InsNewCmd } );
	InsNewRes = InsNewSt.execute();
	return ""IN PROGRESS"";
    }
}
else
{
	//return ""ERROR_07"";
	InsNewSt = snowflake.createStatement( { sqlText: InsNewCmd } );
	InsNewRes = InsNewSt.execute();
	return ""IN PROGRESS"";
}
}
// Technical error
catch(er)
{
   cmdUpdStatus = ""UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET UPDATE_JOB_AUDIT_ID=''""+JOB_AUDIT_ID+""'', JOB_STATUS="";
    cmdUpdStatus += ""''ERROR'', JOB_ACTION_RESULT=''ERROR_04'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''> ERROR_04 : technical error :""+er+"". ''""+ cmdUpdStatusWhereClause;
    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
    resUpdStatus = stUpdStatus.execute();
    return ""ERROR_04"";  
return er;
}
cmdUpdStatus += ""''ERROR'', JOB_ACTION_RESULT=''ERROR_05'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''""+JOB_AUDIT_ID+""<'' || CURRENT_TIMESTAMP() || ''>ERROR_05 : Unknown error. ''""+ cmdUpdStatusWhereClause;
stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
resUpdStatus = stUpdStatus.execute();
return ""ERROR_05"";  
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.USP_CONV_M_FACT_INSERT(""INSERT_COLS"" VARCHAR(16777216), ""SELECT_COLS"" VARCHAR(16777216), ""SRC_TBL"" VARCHAR(16777216), ""TGT_TBL"" VARCHAR(16777216), ""JOB_NAME"" VARCHAR(16777216), ""JOB_AUDIT_ID"" VARCHAR(16777216), ""RUN_ID"" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_QUERY STRING;
BEGIN
INS_QUERY := ''INSERT INTO ''||TGT_TBL||''(''||INSERT_COLS||'',MD_START_DT, MD_CREATION_AUDIT_ID)
(
SELECT 
''||SELECT_COLS||'',
CONCAT(''||char(39)||JOB_AUDIT_ID||char(39)||'',''''#'''',''||char(39)||JOB_NAME||char(39)||'',''||char(39)||RUN_ID||char(39)||'')
FROM ''||SRC_TBL||'' M
LEFT OUTER JOIN ''||TGT_TBL||'' D
ON M.HK_LINK = D.HK_LINK
WHERE D.HK_LINK IS NULL)'';
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.USP_IAW_CHECK_INTEGRITY(""DATABASE_NAME"" VARCHAR(50))
RETURNS VARCHAR(1)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '  
		// throw an error if checking integrity is not applicable (wrong database name)
		if (!(DATABASE_NAME.endsWith(""_DM"")) && !(DATABASE_NAME.endsWith(""_DWH"")))
		{
			var error = ''Checking Referential Integerity for '' + DATABASE_NAME  + '' is not applicable.'';
			throw error;
		}
		var i;
		var ERROR_MSG = '''';
		// Put your queries here and respect the same template ( FROM TABLE ... in the second line).
		var queries_dm = [

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.HOLDINGS.FACT_HOLDINGS F
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_ACCOUNTS D1
			ON F.SK_DIM_ACCOUNTS = D1.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_FINANCIAL_INSTRUMENTS D2
			ON F.SK_DIM_MARKETPRODUCTS = D2.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_ADVISOR D3
			ON F.SK_DIM_ADVISORS = D3.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_CLIENTS D4
			ON F.SK_DIM_CLIENTS = D4.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_PLANS D5
			ON F.SK_DIM_PLANS = D5.ID
		WHERE D1.ID IS NULL OR D2.ID IS NULL OR D3.ID IS NULL OR D4.ID IS NULL OR D5.ID IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.REVENUES.FACT_REVENUE F
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_ACCOUNTS D1
			ON F.SK_DIM_ACCOUNTS = D1.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_FINANCIAL_INSTRUMENTS D2
			ON F.SK_DIM_MARKETPRODUCTS = D2.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_ADVISOR D3
			ON F.SK_DIM_ADVISORS = D3.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_CLIENTS D4
			ON F.SK_DIM_CLIENTS = D4.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_PLANS D5
			ON F.SK_DIM_PLANS = D5.ID
		WHERE D1.ID IS NULL OR D2.ID IS NULL OR D3.ID IS NULL OR D4.ID IS NULL OR D5.ID IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.TRANSACTIONS.FACT_TRANSACTIONS F
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_FINANCIAL_INSTRUMENTS D1
			ON F.SK_DIM_MARKETPRODUCTS = D1.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_ADVISOR D2
			ON F.SK_DIM_ADVISORS = D2.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_CLIENTS D3
			ON F.SK_DIM_CLIENTS = D3.ID
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED.DIM_PLANS D4
			ON F.SK_DIM_PLANS = D4.ID
		WHERE D1.ID IS NULL OR D2.ID IS NULL OR D3.ID IS NULL OR D4.ID IS NULL`
	
		];

    	var queries_dv = [

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE H 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_COMMISSION S1
			ON S1.HK_HUB = H.HK_HUB
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_CERTS S2
			ON S2.HK_HUB = H.HK_HUB 
		WHERE S1.HK_HUB IS NULL AND S2.HK_HUB IS NULL`,
		
		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES H 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_NBIN S1
			ON S1.HK_HUB = H.HK_HUB
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_UNIVERIS S2
			ON S2.HK_HUB = H.HK_HUB 
		WHERE S1.HK_HUB IS NULL AND S2.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.HUB_CONTRACT H 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.SAT_CONTRACT_IAS_NBIN S1
			ON S1.HK_HUB = H.HK_HUB
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.SAT_CONTRACT_IAS_UNIVERIS S2
			ON S2.HK_HUB = H.HK_HUB 
		WHERE S1.HK_HUB IS NULL AND S2.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_CERTS S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_COMMISSION S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_REF_MAPPING_PRODUCT_TYPE_IAS_IAVM S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.REF_MAPPING_PRODUCT_TYPE H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_NBIN S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_REF_INVESTMENT_SAVING_PROGRAM_TYPES_IAS_UNIVERIS S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_REF_HOLIDAYS_IAS_IAVM S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.REF_HOLIDAYS_IAS_IAVM H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_REF_FUND_IAS_FUNDATA S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.REF_FUND H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_PARTY_ROLE_ACCOUNT_HOLDER_IAS_NBIN S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_PARTY_ROLE_ACCOUNT_HOLDER H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_IAS_NBIN S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR L
			ON S.HK_LINK = L.HK_LINK 
		WHERE L.HK_LINK  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_LINK_COMMISSION_SHARE_RR S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.LINK_COMMISSION_SHARE_RR L
			ON S.HK_LINK = L.HK_LINK
		WHERE L.HK_LINK IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_NBIN S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_INVESTMENT_PRODUCT_TYPE H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_CONTRACT_IAS_UNIVERIS S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_CONTRACT H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_CONTRACT_IAS_NBIN S
			LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_CONTRACT H
		ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.SAT_ADVISOR_IAS_CERTS S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_ADVISOR_IAS_CERTS H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_BDV.SAT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_BDV.HUB_PARTY_ROLE_ADVISOR H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_BDV.LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE L
			ON S.HK_LINK = L.HK_LINK 
		WHERE L.HK_LINK IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_BDV.SAT_LINK_INVESTMENT_CONTRACT S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_BDV.LINK_INVESTMENT_CONTRACT L
			ON S.HK_LINK = L.HK_LINK 
		WHERE L.HK_LINK IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_NBIN_CMSDT S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR L
			ON S.HK_LINK = L.HK_LINK 
		WHERE L.HK_LINK IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_NBIN_IAVMBK S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR L
			ON S.HK_LINK = L.HK_LINK 
		WHERE L.HK_LINK IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_UNIVERIS S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR L
			ON S.HK_LINK = L.HK_LINK 
		WHERE L.HK_LINK IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.STEWARDSHIP_RDV.SAT_REF_MANUAL_ADVISOR_RVP_IAS S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.STEWARDSHIP_RDV.REF_MANUAL_ADVISOR_RVP_IAS H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.STEWARDSHIP_RDV.SAT_REF_MAPPING_OPER_TYPE_IAS S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.STEWARDSHIP_RDV.REF_MAPPING_OPER_TYPE H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.STEWARDSHIP_RDV.SAT_REF_PRODUCT_ASSET_CATEGORY_IAS S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.STEWARDSHIP_RDV.REF_PRODUCT_ASSET_CATEGORY H
			ON S.HK_HUB = H.HK_HUB 
		WHERE H.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.HOLDINGS_RDV.SAT_LINK_INVESTMENT_CASH_RR_IAS_NBIN S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN L
			ON S.HK_LINK = L.HK_LINK 
		WHERE L.HK_LINK IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_IAS_NBIN S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN L
			ON S.HK_LINK = L.HK_LINK 
		WHERE L.HK_LINK IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.HOLDINGS_BDV.SAT_LINK_INVESTMENT S
		LEFT OUTER JOIN ` + DATABASE_NAME + `.HOLDINGS_BDV.LINK_INVESTMENT L
			ON S.HK_LINK = L.HK_LINK 
		WHERE L.HK_LINK IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR L
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_CONTRACT H1 ON H1.HK_HUB = L.HK_HUB_CONTRACT 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_PARTY_ROLE_ACCOUNT_HOLDER H2 ON H2.HK_HUB = L.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE H3 ON H3.HK_HUB = L.HK_HUB_REGISTERED_REPRESENTATIVE 
		WHERE 
			H1.HK_HUB  IS NULL
			OR H2.HK_HUB  IS NULL
			OR H3.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_RDV.LINK_COMMISSION_SHARE_RR L
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE H1 ON H1.HK_HUB = L.HK_HUB_FROM 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE H2 ON H2.HK_HUB = L.HK_HUB_TO 
		WHERE 
			H1.HK_HUB  IS NULL
			OR H2.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_BDV.LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE L
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE H1 ON H1.HK_HUB = L.HK_HUB_REGISTERED_REPRESENTATIVE 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_BDV.HUB_PARTY_ROLE_ADVISOR H2 ON H2.HK_HUB = L.HK_HUB_PARTY_ROLE_ADVISOR 
		WHERE 
			H1.HK_HUB  IS NULL
			OR H2.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.SHARED_BDV.LINK_INVESTMENT_CONTRACT L
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_CONTRACT H1 ON H1.HK_HUB = L.HK_HUB_CONTRACT 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_PARTY_ROLE_ACCOUNT_HOLDER H2 ON H2.HK_HUB = L.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_BDV.HUB_PARTY_ROLE_ADVISOR H3 ON H3.HK_HUB = L.HK_HUB_PARTY_ROLE_ADVISOR 
		WHERE 
			H1.HK_HUB  IS NULL
			OR H2.HK_HUB  IS NULL
			OR H3.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR L
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_CONTRACT H1 ON H1.HK_HUB = L.HK_HUB_CONTRACT 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE H2 ON H2.HK_HUB = L.HK_HUB_REGISTERED_REPRESENTATIVE 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_INVESTMENT_PRODUCT_TYPE H3 ON H3.HK_HUB = L.HK_HUB_INVESTMENT_PRODUCT_TYPE
		WHERE 
			H1.HK_HUB  IS NULL
			OR H2.HK_HUB  IS NULL
			OR H3.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN L
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_CONTRACT H1 ON H1.HK_HUB = L.HK_HUB_CONTRACT 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE H2 ON H2.HK_HUB = L.HK_HUB_REGISTERED_REPRESENTATIVE 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_INVESTMENT_PRODUCT_TYPE H3 ON H3.HK_HUB = L.HK_HUB_INVESTMENT_PRODUCT_TYPE
		WHERE 
			H1.HK_HUB  IS NULL
			OR H2.HK_HUB  IS NULL
			OR H3.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.HOLDINGS_BDV.LINK_INVESTMENT L
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_CONTRACT H1 ON H1.HK_HUB = L.HK_HUB_CONTRACT 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_INVESTMENT_PRODUCT_TYPE H2 ON H2.HK_HUB = L.HK_HUB_INVESTMENT_PRODUCT_TYPE
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_BDV.HUB_PARTY_ROLE_ADVISOR H3 ON H3.HK_HUB = L.HK_HUB_PARTY_ROLE_ADVISOR 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.HUB_PARTY_ROLE_ACCOUNT_HOLDER H4 ON H4.HK_HUB = L.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.SHARED_RDV.REF_INVESTMENT_SAVING_PROGRAM_TYPES H5 ON H5.HK_HUB = L.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 
		WHERE 
			H1.HK_HUB  IS NULL
			OR H2.HK_HUB  IS NULL
			OR H3.HK_HUB  IS NULL
			OR H4.HK_HUB  IS NULL
			OR H5.HK_HUB  IS NULL`,

		`SELECT COUNT (0) AS RI_ISSUES
		FROM ` + DATABASE_NAME + `.HOLDINGS_RDV.LINK_INVESTMENT_RR_IAS_NBIN L
		LEFT OUTER JOIN ` + DATABASE_NAME + `.HOLDINGS_RDV.SAT_LINK_INVESTMENT_CASH_RR_IAS_NBIN S1 ON L.HK_LINK = S1.HK_LINK 
		LEFT OUTER JOIN ` + DATABASE_NAME + `.HOLDINGS_RDV.SAT_LINK_INVESTMENT_RR_IAS_NBIN S2 ON L.HK_LINK = S2.HK_LINK 
		WHERE S1.HK_LINK IS NULL
		AND S2.HK_LINK IS NULL` 
		];
		
		if (DATABASE_NAME.endsWith(""_DWH"")) {
			for (i = 0; i < queries_dv.length; i++) {
	  			var RESULT_RI_ISSUES = snowflake.createStatement( {sqlText: queries_dv[i] } );
				var FINAL_RESULT = RESULT_RI_ISSUES.execute();
				FINAL_RESULT.next();
				var RI_ISSUES = FINAL_RESULT.getColumnValue(1);
				if (RI_ISSUES != 0){
					ERROR_MSG += ''\\n'' + RI_ISSUES + '' NOT MATCHED ROW(s) IN '' + (queries_dv[i].split(''\\n'')[1]).replace(''FROM '','''') + '' \\n'';
				}
			}
		}
		else if (DATABASE_NAME.endsWith(""_DM"")) {
			for (i = 0; i < queries_dm.length; i++) {
	  			var RESULT_RI_ISSUES = snowflake.createStatement( {sqlText: queries_dm[i] } );
				var FINAL_RESULT = RESULT_RI_ISSUES.execute();
				FINAL_RESULT.next();
				var RI_ISSUES = FINAL_RESULT.getColumnValue(1);
				if (RI_ISSUES != 0){
					ERROR_MSG += ''\\n'' + RI_ISSUES + '' NOT MATCHED ROW(s) IN '' + (queries_dm[i].split(''\\n'')[1]).replace(''FROM '','''') + '' \\n'';
				}
			}
		}
		
		if (ERROR_MSG != '''') {
			throw ERROR_MSG;
		}
 
	return 1;
  ';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TOOLS.USP_IAW_INSERT_GHOST_MEMBERS(""DATABASE_NAME"" VARCHAR(50))
RETURNS VARCHAR(1)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '  
		// throw an error if checking integrity is not applicable (wrong database name)
		if (!(DATABASE_NAME.endsWith(""_DM"")) && !(DATABASE_NAME.endsWith(""_DWH"")))
		{
			var error = ''Inserting ghost members for '' + DATABASE_NAME  + '' is not applicable.'';
			throw error;
		}
    	var get_tables = ""SELECT table_schema, table_name FROM "" + DATABASE_NAME + "".information_schema.tables WHERE (table_name <> ''REF_DATE'' AND table_type = ''BASE TABLE'' AND table_schema NOT IN (''INFORMATION_SCHEMA'',''PUBLIC'',''TOOLS'') AND (table_name LIKE ''SAT_%'' AND table_name NOT LIKE ''SAT_LINK%'' OR table_name LIKE ''HUB_%'' OR table_name LIKE ''REF_%'' )) OR ( table_name NOT IN (''DIM_DATE'',''DIM_USER'') AND table_type = ''BASE TABLE'' AND table_schema NOT IN (''INFORMATION_SCHEMA'',''PUBLIC'',''TOOLS'') AND table_name LIKE ''DIM_%'' AND table_schema NOT LIKE ''%_BKP%'')"";
		var result_tables = snowflake.createStatement( {sqlText: get_tables} );
    	var tables = result_tables.execute();
    	// Loop through all tables, processing one table at a time... 
    	while (tables.next())  {
			try {
				var schema_name = tables.getColumnValue(1);
       			var table_name = tables.getColumnValue(2);
				var sql_command_insert_hubs_and_refs =  "" INSERT INTO "" + DATABASE_NAME + ""."" + schema_name + ""."" + table_name + "" (HK_HUB, MD_EXTRACT_DT, MD_CREATION_AUDIT_ID, MD_CREATION_DT, MD_SOURCE, MD_SRC_SYSTEM) SELECT ''0'', ''2000-01-01'',''0'',SYSTIMESTAMP(),''NA'',''NA'' WHERE NOT EXISTS (SELECT 1 FROM "" + DATABASE_NAME + ""."" + schema_name + ""."" + table_name + "" WHERE HK_HUB = ''0'')"";	 
 				var sql_command_insert_sats =  "" INSERT INTO ""+ DATABASE_NAME + ""."" + schema_name + ""."" + table_name + "" (HK_HUB, MD_START_DT, MD_EXTRACT_DT, MD_CREATION_AUDIT_ID, MD_CREATION_DT, MD_SOURCE, MD_SRC_SYSTEM, MD_ACTIVE,MD_HASHDIFF) SELECT ''0'', ''2000-01-01'', ''2000-01-01'',''0'',SYSTIMESTAMP(),''NA'',''NA'', ''A'',''0'' WHERE NOT EXISTS (SELECT 1 FROM "" + DATABASE_NAME + ""."" + schema_name + ""."" + table_name + "" WHERE HK_HUB = ''0'')"";	 
 				var sql_command_insert_dims =  "" INSERT INTO ""+ DATABASE_NAME + ""."" + schema_name + ""."" + table_name + "" (ID, HK_HUB , MD_START_DT , MD_CREATION_DT , MD_CREATION_AUDIT_ID, MD_MODIFY_DT,MD_MODIFY_AUDIT_ID, MD_SOURCE,MD_SRC_SYSTEM,MD_EXTRACT_DT,MD_HASH_NAT_KEYS,MD_HASHDIFF_TYPE1,MD_HASHDIFF_TYPE2)  SELECT -1 ,''0'', ''2000-01-01'',SYSTIMESTAMP(),''0'',SYSTIMESTAMP(),''0'',''NA'',''NA'',''2000-01-01'', ''0'', ''0'', ''0'' WHERE NOT EXISTS (SELECT 1 FROM "" + DATABASE_NAME + ""."" + schema_name + ""."" + table_name + "" WHERE HK_HUB = ''0'')"";	 
				var result_hubs_and_refs = snowflake.createStatement({ sqlText: sql_command_insert_hubs_and_refs });
				var result_sats = snowflake.createStatement({ sqlText: sql_command_insert_sats });
				var result_dims = snowflake.createStatement({ sqlText: sql_command_insert_dims });
				if (table_name.startsWith(""HUB_"") || (table_name.startsWith(""REF_""))) {
        			result_hubs_and_refs.execute();
        		}
				else if (table_name.startsWith(""SAT_"")) {
        			result_sats.execute();
        		}
				else if (table_name.startsWith(""DIM_"")) {
        			result_dims.execute();
        		}
    		}
			catch (err)  {
        		var error = ''Failed when loading '' + schema_name + ""."" + table_name + '' -> '' +  err
        		throw error;
    		}
		}
	return 1;
  ';
create or replace schema DB_IAW_PROD_DWH.TRANSACTIONS_BDV;

create or replace TABLE DB_IAW_PROD_DWH.TRANSACTIONS_BDV.TRANSLINK_FINANCIAL_TRANSACTION (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for the REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for the HUB_CONTRACT',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	TRANSACTION_ID VARCHAR(100) COMMENT 'The ID of the transaction',
	CLIENT_ID VARCHAR(100) COMMENT 'The ID of the client',
	MASTER_CODE VARCHAR(50) COMMENT 'Advisor ID',
	CONTRACT_ID VARCHAR(100) COMMENT 'Contract ID',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product ID',
	PLN_MNEM VARCHAR(512) COMMENT 'Plan code',
	ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID',
	RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
	ASC_1_RESP_PLAN_TYPES VARCHAR(10) COMMENT 'subtype of the RESP plans',
	TRADE_DATE TIMESTAMP_NTZ(9) COMMENT 'The trading date of the transaction',
	GROSS_AMOUNT NUMBER(38,12) COMMENT 'Transaction gross amount',
	TRANSACTION_TYPE VARCHAR(21) COMMENT 'Transaction type',
	ORD_TRANSACTION_TYPE NUMBER(1,0) COMMENT 'Transaction type order',
	CASH_FLOW VARCHAR(8000) COMMENT 'Transaction CASH FLOW',
	CASH_FLOW_TYPE VARCHAR(8) COMMENT 'Transaction CASH FLOW TYPE',
	ADMINISTRATORY_TYPE VARCHAR(8000) COMMENT 'Transaction ADMINISTRATORY TYPE',
	DEPARTED_ADVISOR_IND NUMBER(1,0) COMMENT 'DEPARTED ADVISOR INDICATOR',
	DAYS_LAST_PRICED NUMBER(4,0),
	DEPARTED_ADVISOR_MASTER_CODE VARCHAR(50),
	A_C_REPRESENTATIVE VARCHAR(50),
	DEPARTED_ADVISOR_12M_IND NUMBER(1,0) COMMENT 'Departed advisor''s indicator for the last 12 months'
);
create or replace TABLE DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for the REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for the HUB_CONTRACT',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	TRANSACTION_ID VARCHAR(100) COMMENT 'The ID of the transaction',
	UNIVERIS_CLIENT_ID VARCHAR(100) COMMENT 'Univeris Client ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Advisor ID',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product ID',
	PLN_MNEM VARCHAR(100) COMMENT 'Plan ID',
	TRADE_DATE TIMESTAMP_NTZ(9) COMMENT 'Transaction Trading Date',
	GROSS_AMOUNT NUMBER(38,12) COMMENT 'Transaction Gross amount',
	TRANSACTION_TYPE VARCHAR(21) COMMENT 'Transaction type',
	ORD_TRANSACTION_TYPE NUMBER(1,0) COMMENT 'Transaction type order',
	CASH_FLOW VARCHAR(16777216) COMMENT 'Transaction CASH FLOW',
	CASH_FLOW_TYPE VARCHAR(8) COMMENT 'Transaction CASH FLOW TYPE',
	ADMINISTRATORY_TYPE VARCHAR(8000) COMMENT 'Transaction ADMINISTRATORY TYPE',
	A_C_REPRESENTATIVE VARCHAR(50)
);
create or replace TABLE DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for the REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for the HUB_CONTRACT',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	TRANSACTION_ID VARCHAR(100) COMMENT 'The ID of the transaction',
	UNIVERIS_CLIENT_ID VARCHAR(100) COMMENT 'Univeris Client ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Advisor ID',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'Product ID',
	PLN_MNEM VARCHAR(100) COMMENT 'Plan ID',
	TRADE_DATE TIMESTAMP_NTZ(9) COMMENT 'Transaction Trading Date',
	GROSS_AMOUNT NUMBER(38,12) COMMENT 'Transaction Gross amount',
	TRANSACTION_TYPE VARCHAR(21) COMMENT 'Transaction type',
	ORD_TRANSACTION_TYPE NUMBER(1,0) COMMENT 'Transaction type order',
	CASH_FLOW VARCHAR(8000) COMMENT 'Transaction CASH FLOW',
	CASH_FLOW_TYPE VARCHAR(8) COMMENT 'Transaction CASH FLOW TYPE',
	ADMINISTRATORY_TYPE VARCHAR(8000) COMMENT 'Transaction ADMINISTRATORY TYPE',
	DEPARTED_ADVISOR_IND NUMBER(1,0) COMMENT 'DEPARTED ADVISOR INDICATOR',
	DEPARTED_ADVISOR_MASTER_CODE VARCHAR(50),
	A_C_REPRESENTATIVE VARCHAR(50)
);
create or replace TABLE DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_REF_MAPPING_OPER_TYPE (
	HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	IBMSOURCE VARCHAR(12) COMMENT 'IBM Source',
	LEVEL NUMBER(11,0) COMMENT 'Level Code',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	DESCRIPTION_EN VARCHAR(60) COMMENT 'Description in English',
	DESCRIPTION_SHORT_EN VARCHAR(30) COMMENT 'Short Description in English',
	DESCRIPTION_FR VARCHAR(60) COMMENT 'Description in French',
	DESCRIPTION_SHORT_FR VARCHAR(30) COMMENT 'Sort Description in french',
	OPERATION_TYPE VARCHAR(3) COMMENT 'Operation type',
	DISPLAY NUMBER(11,0) COMMENT 'Display Number',
	CASHFLOW_SUMMARY VARCHAR(4) COMMENT 'CASHFLOW SUMMARY',
	ISCASHFLOW NUMBER(11,0) COMMENT 'Indicator to determine the cashflow'
);
create or replace TABLE DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES VARCHAR(40) COMMENT 'Hash key for the REF_INVESTMENT_SAVING_PROGRAM_TYPES',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the INVESTMENT_PRODUCT_TYPE',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for the HUB_CONTRACT',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	TRANSACTION_ID VARCHAR(100) COMMENT 'The ID of the transaction',
	CLIENT_ID VARCHAR(100) COMMENT 'Client ID',
	MASTER_CODE VARCHAR(50) COMMENT 'Code of the advisor',
	CONTRACT_ID VARCHAR(100) COMMENT 'Contract ID',
	INVESTMENT_PRODUCT_ID VARCHAR(100) COMMENT 'product ID',
	ACCOUNT_RAP_CODE VARCHAR(1) COMMENT 'ACCOUNT RAP CODE',
	RETAIL_PLAN VARCHAR(4) COMMENT 'Retail Plan',
	TRAN_TRADING_NET_AMT NUMBER(38,2) COMMENT 'Transaction net amount in CAD or USD',
	TRAN_TRADING_TRADE_DATE DATE COMMENT 'Trade date',
	TRAN_ENTRY_DESCRIPTION VARCHAR(50) COMMENT 'Description of the trading',
	TRAN_USER_DESCRIPTION VARCHAR(50) COMMENT 'Description of the trading',
	TRAN_PROCESS_DATE DATE COMMENT 'Process date',
	TRAN_TXN_REFERENCE_ID VARCHAR(50) COMMENT 'Tax reference ID',
	TRAN_TRADING_CURRENCY VARCHAR(10) COMMENT 'Transaction amounts currency',
	TRAN_TRADING_GROSS_AMT NUMBER(38,2) COMMENT 'Transaction gross amount in CAD or USD',
	TRAN_QTY NUMBER(38,4) COMMENT 'Quantity',
	EXCHANGERATE NUMBER(38,8) COMMENT 'Conversion rate from USD to CAD',
	TI_ISSUE_PRICE NUMBER(38,5) COMMENT 'TI Issue Price',
	STRIKE_PRICE NUMBER(38,8) COMMENT 'STRIKE PRICE',
	TI_UNDERLYING_CDN_PRICE NUMBER(38,8) COMMENT 'TI Underlying CDN Price, this field and above fields were added for OG calculation',
	TI_UNDERLYING_USD_PRICE NUMBER(38,8) COMMENT 'TI Underlying USD Price',
	TI_BASIS_POINT NUMBER(38,5) COMMENT 'TI Basis Point',
	TI_FACE_VALUE NUMBER(38,5) COMMENT 'TI Face Value',
	TI_SYMBOL VARCHAR(50) COMMENT 'Product symbol',
	COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
	TRAN_TRADING_TYPE VARCHAR(10) COMMENT 'Type of the trading : Sell, Buy,...',
	ADMINISTRATORY_TYPE VARCHAR(8000) COMMENT 'Type of administration',
	A_C_ACCOUNT_CLASS VARCHAR(3) COMMENT 'Account class : 038, 040, ...',
	RETAIL_PLAN_RESP VARCHAR(1) COMMENT 'To be defined',
	TI_PRIMARY_MARKET VARCHAR(50) COMMENT 'Primary Market',
	A_C_REPRESENTATIVE VARCHAR(50) COMMENT 'Representative ID',
	ASC_1_RESP_PLAN_TYPES VARCHAR(100) COMMENT 'subtype of the RESP plans',
	DEPARTED_ADVISOR_IND NUMBER(1,0) COMMENT 'DEPARTED ADVISOR INDICATOR',
	DEPARTED_ADVISOR_MASTER_CODE VARCHAR(50),
	COMMISSIONPCT_ADVISOR NUMBER(6,3) COMMENT 'Advisor Commission PCT',
	COMMISSIONPCT_FINANCIAL NUMBER(6,3) COMMENT 'Financial Commission PCT'
);
create or replace view DB_IAW_PROD_DWH.TRANSACTIONS_BDV.VW_INITIAL_LOADING_WT_TRANSLINK_FINANCIAL_TRANSACTION(
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_CONTRACT,
	MD_START_DT,
	MD_CREATION_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_CREATION_AUDIT_ID,
	MD_EXTRACT_DT,
	TRANSACTION_ID,
	CLIENT_ID,
	MASTER_CODE,
	CONTRACT_ID,
	INVESTMENT_PRODUCT_ID,
	ACCOUNT_RAP_CODE,
	RETAIL_PLAN,
	TRAN_TRADING_NET_AMT,
	TRAN_TRADING_TRADE_DATE,
	TRAN_ENTRY_DESCRIPTION,
	TRAN_USER_DESCRIPTION,
	TRAN_PROCESS_DATE,
	TRAN_TXN_REFERENCE_ID,
	TRAN_TRADING_CURRENCY,
	TRAN_TRADING_GROSS_AMT,
	TRAN_QTY,
	EXCHANGERATE,
	TI_ISSUE_PRICE,
	STRIKE_PRICE,
	TI_UNDERLYING_CDN_PRICE,
	TI_UNDERLYING_USD_PRICE,
	TI_BASIS_POINT,
	TI_FACE_VALUE,
	TI_SYMBOL,
	COMMISSIONPCT,
	TRAN_TRADING_TYPE,
	ADMINISTRATORY_TYPE,
	A_C_ACCOUNT_CLASS,
	RETAIL_PLAN_RESP,
	TI_PRIMARY_MARKET,
	A_C_REPRESENTATIVE,
	ASC_1_RESP_PLAN_TYPES,
	DEPARTED_ADVISOR_IND,
	DEPARTED_ADVISOR_MASTER_CODE
) as
WITH LATEST_VERSION_SHARE AS (
	SELECT 
	SLT.HK_LINK,
	COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE,
	COMM_SHARE.MD_START_DT,
	COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR,
	COMM_SHARE.MASTER_CODE,
	COMM_SHARE.COMMISSIONPCT,
	COALESCE (COMM_SHARE.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLT.HK_LINK,COMM_SHARE.HK_LINK ORDER BY COMM_SHARE.MD_START_DT DESC ),1) AS RANK_SHARE
	FROM TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_NBIN_IAVMBK SLT
	INNER JOIN TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR LT
    	ON  SLT.HK_LINK=LT.HK_LINK
	LEFT JOIN 	( SELECT LCS.HK_LINK,LCS.HK_HUB_REGISTERED_REPRESENTATIVE,CS.MD_START_DT,LCS.HK_HUB_PARTY_ROLE_ADVISOR,LCS.MASTER_CODE,CS.COMMISSIONPCT,CS.MD_ACTIVE
	        	FROM SHARED_BDV.LINK_PARTY_RELATIONSHIP_SHARE LCS 
	        	INNER JOIN SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE CS 
	        		ON CS.HK_LINK=LCS.HK_LINK AND CS.MD_SRC_SYSTEM = 'IAS'
	    		) COMM_SHARE
	    ON LT.HK_HUB_REGISTERED_REPRESENTATIVE=COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE
	    AND  COMM_SHARE.MD_START_DT <= DATEADD(SECOND, 86399, SLT.MD_START_DT) 
),
/*LATEST_VERSION_INVESTMENT_CONTRACT AS (
	SELECT INVESTMENT_CONTRACT.HK_HUB_PARTY_ROLE_ADVISOR, COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR,
	SLT.HK_LINK,
	INVESTMENT_CONTRACT.HK_HUB_CONTRACT,
	INVESTMENT_CONTRACT.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	INVESTMENT_CONTRACT.HK_HUB_PARTY_ROLE_ADVISOR,
	COALESCE (INVESTMENT_CONTRACT.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLT.HK_LINK,INVESTMENT_CONTRACT.HK_LINK ORDER BY INVESTMENT_CONTRACT.MD_START_DT DESC ),1) AS RANK_INVESTMENT_CONTRACT
	FROM TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_NBIN_IAVMBK SLT
	INNER JOIN TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR LT
    	ON  SLT.HK_LINK=LT.HK_LINK
    LEFT JOIN LATEST_VERSION_SHARE COMM_SHARE
	    ON LT.HK_HUB_REGISTERED_REPRESENTATIVE=COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE
	    AND  COMM_SHARE.HK_LINK = SLT.HK_LINK 
	    AND  COMM_SHARE.MD_ACTIVE = 'A' 
	    AND COMM_SHARE.RANK_SHARE = 1
	LEFT JOIN 
	(	SELECT DISTINCT SLIC.HK_LINK, HK_HUB_CONTRACT, HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, HK_HUB_PARTY_ROLE_ADVISOR, LIC.CLIENT_ID, SLIC.MD_ACTIVE, MD_START_DT
		FROM SHARED_BDV.LINK_INVESTMENT_CONTRACT LIC 
		INNER JOIN SHARED_BDV.SAT_LINK_INVESTMENT_CONTRACT SLIC 
			ON SLIC.HK_LINK = LIC.HK_LINK 
	) INVESTMENT_CONTRACT
	ON INVESTMENT_CONTRACT.HK_HUB_CONTRACT = LT.HK_HUB_CONTRACT 
	AND INVESTMENT_CONTRACT.HK_HUB_PARTY_ROLE_ADVISOR = COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR
	AND INVESTMENT_CONTRACT.MD_START_DT <= SLT.MD_START_DT
), */
LATEST_VERSION_CONTRACT AS (
	SELECT SLT.HK_LINK,
	CONTRACT.HK_HUB,
	CONTRACT.A_C_CLIENT, 
	CONTRACT.ACCOUNT_RAP_CODE,
	CONTRACT.ASC_1_RESP_PLAN_TYPES,
	CONTRACT.RETAIL_PLAN,
	CONTRACT.A_C_CURRENCY,
	CONTRACT.ASC_3_MANAGED_TYPE,
	CONTRACT.ADMINISTRATOR_TYPE,
	CONTRACT.A_C_ACCOUNT_CLASS,
	CONTRACT.RETAIL_PLAN_RESP,
	COALESCE (CONTRACT.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLT.HK_LINK,CONTRACT.HK_HUB ORDER BY CONTRACT.MD_START_DT DESC ),1) AS RANK_CONTRACT
	FROM TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_NBIN_IAVMBK SLT
	INNER JOIN TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR LT
    	ON  SLT.HK_LINK=LT.HK_LINK
	LEFT JOIN  SHARED_RDV.SAT_CONTRACT_IAS_NBIN CONTRACT
	    ON LT.HK_HUB_CONTRACT = CONTRACT.HK_HUB
	    AND CONTRACT.MD_START_DT <= SLT.MD_START_DT
),
LATEST_VERSION_SERVICING_CODES AS (
	SELECT SLT.HK_LINK,
	SC.MASTER_CODE,
	SC.HK_HUB_REGISTERED_REPRESENTATIVE,
	COALESCE (SC.MD_ACTIVE,'A') AS MD_ACTIVE,
	COALESCE (ROW_NUMBER() OVER (PARTITION BY SLT.HK_LINK,SC.HK_LINK  ORDER BY SC.MD_START_DT DESC ),1) AS RANK_SERVICING_CODES
	FROM TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_NBIN_IAVMBK SLT
	INNER JOIN TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR LT
    	ON  SLT.HK_LINK=LT.HK_LINK
	LEFT JOIN  (SELECT LSC.HK_LINK, LSC.MASTER_CODE, SLSC.MD_ACTIVE, SLSC.MD_START_DT, LSC.HK_HUB_REGISTERED_REPRESENTATIVE, SLSC.END_DATE 
				FROM STEWARDSHIP_BDV.LINK_SERVICING_CODES LSC 
				INNER JOIN  STEWARDSHIP_BDV.SAT_LINK_SERVICING_CODES SLSC 
	    		ON SLSC.HK_LINK  = LSC.HK_LINK AND SLSC.REP_ROW_NUM = 1) SC
	    ON LT.HK_HUB_REGISTERED_REPRESENTATIVE  = SC.HK_HUB_REGISTERED_REPRESENTATIVE 
	    AND SC.END_DATE <= SLT.TRAN_TRADING_TRADE_DATE
)
SELECT 		
		DECODE(TRUE, CONTRACT.A_C_CLIENT IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM(LT.MD_SRC_SYSTEM), '#NULL#'), '|' , COALESCE(TRIM(CONTRACT.A_C_CLIENT), '#NULL#')))))  AS HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER, 
		COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR AS HK_HUB_PARTY_ROLE_ADVISOR, 
		LT.HK_HUB_INVESTMENT_PRODUCT_TYPE AS HK_HUB_INVESTMENT_PRODUCT_TYPE, 
		LT.HK_HUB_CONTRACT AS HK_HUB_CONTRACT, 
		DATEADD(DAY,1,SLT.TRAN_PROCESS_DATE) AS MD_START_DT, 
		CURRENT_TIMESTAMP() AS MD_CREATION_DT, 
		LT.MD_SOURCE AS MD_SOURCE, 
		LT.MD_SRC_SYSTEM AS MD_SRC_SYSTEM, 
		'-1' AS MD_CREATION_AUDIT_ID, 
		SLT.MD_EXTRACT_DT AS MD_EXTRACT_DT, 
		LT.TRANSACTION_ID AS TRANSACTION_ID, 
		CONTRACT.A_C_CLIENT AS CLIENT_ID, 
		COMM_SHARE.MASTER_CODE AS MASTER_CODE, 
		LT.CONTRACT_ID AS CONTRACT_ID, 
		LT.INVESTMENT_PRODUCT_ID AS INVESTMENT_PRODUCT_ID, 
		CONTRACT.ACCOUNT_RAP_CODE AS ACCOUNT_RAP_CODE, 
		CONTRACT.RETAIL_PLAN AS RETAIL_PLAN, 
		SLT.TRAN_TRADING_NET_AMT AS TRAN_TRADING_NET_AMT, 
		SLT.TRAN_TRADING_TRADE_DATE AS TRAN_TRADING_TRADE_DATE, 
		SLT.TRAN_ENTRY_DESCRIPTION AS TRAN_ENTRY_DESCRIPTION, 
		SLT.TRAN_USER_DESCRIPTION AS TRAN_USER_DESCRIPTION, 
		SLT.TRAN_PROCESS_DATE AS TRAN_PROCESS_DATE, 
		SLT.TRAN_TXN_REFERENCE_ID AS TRAN_TXN_REFERENCE_ID, 
		SLT.TRAN_TRADING_CURRENCY AS TRAN_TRADING_CURRENCY, 
		SLT.TRAN_TRADING_GROSS_AMT AS TRAN_TRADING_GROSS_AMT, 
		SLT.TRAN_QTY AS TRAN_QTY, 
		LER.EXCHANGERATE AS EXCHANGERATE, 
		SLT.TI_ISSUE_PRICE AS TI_ISSUE_PRICE, 
		SLT.STRIKE_PRICE AS STRIKE_PRICE, 
		SLT.TI_UNDERLYING_CDN_PRICE AS TI_UNDERLYING_CDN_PRICE, 
		SLT.TI_UNDERLYING_USD_PRICE AS TI_UNDERLYING_USD_PRICE, 
		SLT.TI_BASIS_POINT AS TI_BASIS_POINT, 
		SLT.TI_FACE_VALUE AS TI_FACE_VALUE, 
		SLT.TI_SYMBOL AS TI_SYMBOL, 
		COMM_SHARE.COMMISSIONPCT AS COMMISSIONPCT, 
		SLT.TRAN_TRADING_TYPE AS TRAN_TRADING_TYPE, 
		CONTRACT.ADMINISTRATOR_TYPE AS ADMINISTRATORY_TYPE, 
		CONTRACT.A_C_ACCOUNT_CLASS AS A_C_ACCOUNT_CLASS, 
		CONTRACT.RETAIL_PLAN_RESP AS RETAIL_PLAN_RESP, 
		SLT.TI_PRIMARY_MARKET AS TI_PRIMARY_MARKET, 
		LT.REGISTERED_REPRESENTATIVE_ID AS A_C_REPRESENTATIVE, 
		CONTRACT.ASC_1_RESP_PLAN_TYPES AS ASC_1_RESP_PLAN_TYPES	,
		CASE WHEN SERVICING_CODES.HK_HUB_REGISTERED_REPRESENTATIVE IS NULL THEN 0 ELSE 1 END AS DEPARTED_ADVISOR_IND,
		SERVICING_CODES.MASTER_CODE AS DEPARTED_ADVISOR_MASTER_CODE
FROM TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_NBIN_IAVMBK SLT
INNER JOIN TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR LT
    ON  SLT.HK_LINK=LT.HK_LINK
LEFT JOIN LATEST_VERSION_SHARE COMM_SHARE
    ON LT.HK_HUB_REGISTERED_REPRESENTATIVE=COMM_SHARE.HK_HUB_REGISTERED_REPRESENTATIVE
    AND  COMM_SHARE.HK_LINK = SLT.HK_LINK 
    AND  COMM_SHARE.MD_ACTIVE = 'A' 
    AND COMM_SHARE.RANK_SHARE = 1
LEFT JOIN LATEST_VERSION_CONTRACT CONTRACT
    ON LT.HK_HUB_CONTRACT = CONTRACT.HK_HUB
    AND CONTRACT.HK_LINK = SLT.HK_LINK 
    AND  CONTRACT.MD_ACTIVE = 'A' AND CONTRACT.RANK_CONTRACT = 1
/*
LEFT JOIN LATEST_VERSION_INVESTMENT_CONTRACT INVESTMENT_CONTRACT
	ON INVESTMENT_CONTRACT.HK_LINK = SLT.HK_LINK 
	AND INVESTMENT_CONTRACT.HK_HUB_PARTY_ROLE_ADVISOR = COMM_SHARE.HK_HUB_PARTY_ROLE_ADVISOR
	AND INVESTMENT_CONTRACT.HK_HUB_CONTRACT = LT.HK_HUB_CONTRACT
    AND INVESTMENT_CONTRACT.MD_ACTIVE = 'A' AND INVESTMENT_CONTRACT.RANK_INVESTMENT_CONTRACT = 1v
*/
LEFT JOIN LATEST_VERSION_SERVICING_CODES SERVICING_CODES
    ON  SERVICING_CODES.HK_LINK = SLT.HK_LINK 
    AND  SERVICING_CODES.MD_ACTIVE = 'A' AND SERVICING_CODES.RANK_SERVICING_CODES = 1    
LEFT JOIN SHARED_BDV.TRANSLINK_EXCHANGE_RATE LER
	ON LER.EXCHANGE_DATE = SLT.TRAN_TRADING_TRADE_DATE
	/*
LEFT JOIN ( SELECT DISTINCT REP_CODE FROM STEWARDSHIP_BDV.LINK_SERVICING_CODES WHERE REP_CODE IS NOT NULL) DEP 
	ON DEP.REP_CODE = LT.REGISTERED_REPRESENTATIVE_ID;*/
;
create or replace view DB_IAW_PROD_DWH.TRANSACTIONS_BDV.VW_TRANSLINK_FINANCIAL_TRANSACTION(
	HK_LINK,
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
	HK_HUB_PARTY_ROLE_ADVISOR,
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
	HK_HUB_INVESTMENT_PRODUCT_TYPE,
	HK_HUB_CONTRACT,
	MD_START_DT,
	MD_EXTRACT_DT,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	TRANSACTION_ID,
	CLIENT_ID,
	MASTER_CODE,
	CONTRACT_ID,
	INVESTMENT_PRODUCT_ID,
	PLN_MNEM,
	ACCOUNT_RAP_CODE,
	RETAIL_PLAN,
	ASC_1_RESP_PLAN_TYPES,
	""Trade date"",
	""Gross amount"",
	""Transaction type"",
	ORD_TRANSACTION_TYPE,
	CASH_FLOW,
	CASHFLOW_TYPE,
	""Administratory type"",
	""number of transactions"",
	DEPARTED_ADVISOR_IND,
	DAYS_LAST_PRICED,
	DEPARTED_ADVISOR_MASTER_CODE,
	A_C_REPRESENTATIVE,
	DEPARTED_ADVISOR_12M_IND
) as
WITH EXCLUSION AS
(
SELECT
    R.REPID,
    S.IND_EXCLUDE,
    S.MD_ACTIVE
FROM DB_IAW_PROD_DWH.STEWARDSHIP_RDV.REF_MANUAL_ADVISOR_RVP_IAS R                    
INNER JOIN DB_IAW_PROD_DWH.STEWARDSHIP_RDV.SAT_REF_MANUAL_ADVISOR_RVP_IAS S
ON R.HK_HUB = S.HK_HUB
QUALIFY ROW_NUMBER() OVER (PARTITION BY R.REPID ORDER BY S.MD_START_DT DESC)=1
),
REVERSALS_BK AS
(SELECT
    DISTINCT Y.TRANSACTION_ID ,
    TRUE AS REVERSAL_IND
FROM
    DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION Y
INNER JOIN
(
SELECT DISTINCT
L.REGISTERED_REPRESENTATIVE_ID,L.CONTRACT_ID,SL.TRAN_ENTRY_DESCRIPTION,SL.TRAN_TRADING_NET_AMT,SL.TRAN_TRADING_TRADE_DATE
FROM DB_IAW_PROD_DWH.TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR L
INNER JOIN
DB_IAW_PROD_DWH.TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_NBIN_IAVMBK SL 
ON
L.HK_LINK=SL.HK_LINK
) N 
     ON
     SUBSTRING(Y.TRAN_ENTRY_DESCRIPTION,4) = N.TRAN_ENTRY_DESCRIPTION
     AND Y.A_C_REPRESENTATIVE = N.REGISTERED_REPRESENTATIVE_ID
     AND Y.CONTRACT_ID = N.CONTRACT_ID 
     AND Y.TRAN_TRADING_NET_AMT = -1*N.TRAN_TRADING_NET_AMT 
     AND Y.TRAN_TRADING_TRADE_DATE = N.TRAN_TRADING_TRADE_DATE 
WHERE
     Y.TRAN_ENTRY_DESCRIPTION LIKE 'CXL%'
),
Val AS
(
SELECT -- We added Distinct because we have duplicates in the WT and this is normal because we are splitting transactions by the share
DISTINCT
CASE WHEN Tran_User_Description like '%INT%' THEN TO_NUMBER(SPLIT_PART(REGEXP_REPLACE(TRAN_USER_DESCRIPTION,'( ){2,}', ' '),' ',1), 38,10) + TO_NUMBER (SPLIT_PART(REGEXP_REPLACE(TRAN_USER_DESCRIPTION,'( ){2,}', ' '),' ',2), 38,10) ELSE TO_NUMBER(Tran_User_Description, 22,6) END  AS Tran_User_Description,
TRAN_PROCESS_DATE,
CONTRACT_ID,
Tran_Txn_Reference_ID
FROM DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION
WHERE Tran_Entry_Description in ('VALUE', 'VALEUR')  
), -- Removed the accountid and picked the latest price based on SYMBOL, MARKET, and PROCESSDATE to include the missing transactions
Pos AS (
    SELECT
        DISTINCT
        UNITOFMEASURE, SYMBOL, MARKET, PROCESSDATE, CLOSEPRICE, PRICECURRENCY,BIDPRICE,ASKPRICE
    FROM  DB_IAW_PROD_DWH.TRANSACTIONS_RDV.TRANSLINK_POSITION_PRICE_IAS_IAVM P
    WHERE
        COALESCE(TO_VARCHAR(TRY_TO_NUMBER(P.ACCOUNTID)),'') <> P.ACCOUNTID
),
POS_CLOSEST_PRICE_TRADE_DATE AS (               --  should be max trade date #RF
    SELECT T.HK_LINK, MAX(P.PROCESSDATE) AS PROCESS_DATE
    FROM Pos P
    INNER JOIN DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION T
    ON P.MARKET = T.TI_Primary_Market 
    AND P.SYMBOL = T.TI_Symbol 
    WHERE P.PROCESSDATE <= T.TRAN_TRADING_TRADE_DATE
    group by T.HK_LINK
),
POS_CLOSEST_PRICE_PROCESS_DATE AS (
    SELECT T.HK_LINK, MAX(P.PROCESSDATE) AS PROCESS_DATE
    FROM Pos P
    INNER JOIN DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION T
    ON P.MARKET = T.TI_Primary_Market 
    AND P.SYMBOL = T.TI_Symbol 
    WHERE P.PROCESSDATE <= T.TRAN_PROCESS_DATE  
    group by T.HK_LINK
),
POS_ALL AS
(
    SELECT T.HK_LINK, 
    COALESCE (P1.PROCESSDATE, P2.PROCESSDATE, P3.PROCESSDATE, P4.PROCESSDATE, P5.PROCESSDATE) AS PROCESSDATE,
    COALESCE (P1.CLOSEPRICE, P2.CLOSEPRICE, P3.CLOSEPRICE, P4.CLOSEPRICE, P5.CLOSEPRICE) AS CLOSEPRICE,
    COALESCE (P1.BIDPRICE, P2.BIDPRICE, P3.BIDPRICE, P4.BIDPRICE, P5.BIDPRICE) AS BIDPRICE,
    COALESCE (P1.ASKPRICE, P2.ASKPRICE, P3.ASKPRICE, P4.ASKPRICE, P5.ASKPRICE) AS ASKPRICE,
    COALESCE (P1.UNITOFMEASURE, P2.UNITOFMEASURE, P3.UNITOFMEASURE, P4.UNITOFMEASURE, P5.UNITOFMEASURE) AS UNITOFMEASURE,
    COALESCE (P1.SYMBOL, P2.SYMBOL, P3.SYMBOL, P4.SYMBOL, P5.SYMBOL) AS SYMBOL,
    COALESCE (P1.MARKET, P2.MARKET, P3.MARKET, P4.MARKET, P5.MARKET) AS MARKET,
    COALESCE (P1.PRICECURRENCY, P2.PRICECURRENCY, P3.PRICECURRENCY, P4.PRICECURRENCY, P5.PRICECURRENCY) AS PRICECURRENCY
    FROM DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION T
    -- 1. We look at the transaction TRADE DATE
    LEFT JOIN Pos P1 
        ON P1.MARKET = T.TI_Primary_Market 
        AND P1.SYMBOL = T.TI_Symbol 
        AND P1.PROCESSDATE = T.TRAN_TRADING_TRADE_DATE  
    -- 2. We look one day prior to the trade date for the price
    LEFT JOIN Pos P2
        ON P2.MARKET = T.TI_Primary_Market 
        AND P2.SYMBOL = T.TI_Symbol 
        AND DATEADD(DAY,-1,P2.PROCESSDATE) = T.TRAN_TRADING_TRADE_DATE
    -- 3. We look at the process date
    LEFT JOIN Pos P3
        ON P3.MARKET = T.TI_Primary_Market 
        AND P3.SYMBOL = T.TI_Symbol 
        AND P3.PROCESSDATE = T.TRAN_PROCESS_DATE
    -- 4. We look at the history of the trade date. (we take the most recent price)
    LEFT JOIN POS_CLOSEST_PRICE_TRADE_DATE P4_HIS
        ON T.HK_LINK = P4_HIS.HK_LINK
    LEFT JOIN POS P4
        ON P4.MARKET = T.TI_Primary_Market 
        AND P4.SYMBOL = T.TI_Symbol 
        AND P4.PROCESSDATE =  P4_HIS.PROCESS_DATE
    -- 5.we look at the history of the process date. (we take the most recent price)   
    LEFT JOIN POS_CLOSEST_PRICE_PROCESS_DATE P5_HIS
        ON T.HK_LINK = P5_HIS.HK_LINK
    LEFT JOIN POS P5
        ON P5.MARKET = T.TI_Primary_Market 
        AND P5.SYMBOL = T.TI_Symbol 
        AND P5.PROCESSDATE =  P5_HIS.PROCESS_DATE
)
, ADVISOR_INFO as -- #RF: STORY 81850 - New Departed Advisor Indicator
( 
select S.HK_HUB, H.MASTER_CODE, S.END_DATE 
    from DB_IAW_PROD_DWH.SHARED_BDV.HUB_PARTY_ROLE_ADVISOR H 
    inner join DB_IAW_PROD_DWH.SHARED_BDV.SAT_PARTY_ROLE_ADVISOR_COMPUTE_IAS_WEALTH S 
        on H.HK_HUB = S.HK_HUB
qualify row_number() over (partition by S.HK_HUB order by  S.MD_START_DT desc) = 1 AND  S.END_DATE IS NOT NULL
)
SELECT
    HK_LINK,
    HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
    HK_HUB_PARTY_ROLE_ADVISOR,
    HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
    HK_HUB_INVESTMENT_PRODUCT_TYPE,
    HK_HUB_CONTRACT,
    MD_START_DT,
    MD_EXTRACT_DT,
    MD_SOURCE,
    MD_SRC_SYSTEM,
    TRANSACTION_ID,
    CLIENT_ID,
    MASTER_CODE,
    CONTRACT_ID,
    INVESTMENT_PRODUCT_ID,
    PLN_MNEM,ACCOUNT_RAP_CODE, RETAIL_PLAN, ASC_1_RESP_PLAN_TYPES,
    ""Trade date"",
    ""Gross amount"", ""Transaction type"", ORD_TRANSACTION_TYPE, CASH_FLOW, CASHFLOW_TYPE, ""Administratory type"",  
    ""number of transactions"",
    DEPARTED_ADVISOR_IND,
    DAYS_LAST_PRICED,
    DEPARTED_ADVISOR_MASTER_CODE,
    A_C_REPRESENTATIVE,
    DEPARTED_ADVISOR_12M_IND -- #RF: STORY 81850 - New Departed Advisor Indicator
FROM
(
SELECT
    T.HK_LINK,
    T.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
    T.HK_HUB_PARTY_ROLE_ADVISOR,
    T.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
    T.HK_HUB_INVESTMENT_PRODUCT_TYPE,
    T.HK_HUB_CONTRACT,
    T.MD_START_DT,
    T.MD_EXTRACT_DT,
    T.MD_SOURCE,
    T.MD_SRC_SYSTEM,
    T.TRANSACTION_ID,
    T.CLIENT_ID,
    T.MASTER_CODE,
    T.CONTRACT_ID,
    T.INVESTMENT_PRODUCT_ID,
    NULL AS PLN_MNEM,
    T.ACCOUNT_RAP_CODE,
    T.RETAIL_PLAN,
    T.ASC_1_RESP_PLAN_TYPES,
    T.TRAN_TRADING_TRADE_DATE AS ""Trade date"",
    DECODE( T.TRAN_TRADING_CURRENCY, 'USD',
     CASE WHEN  T.TRAN_TRADING_GROSS_AMT != 0
                 AND COALESCE(Y.IBMSOURCE, '') NOT IN ('ADJTFR','CNV','CONV','CONV$','CT','CTOC','DISP','FX','MBD','MBD-IN','PLEDGE','QIATFR','QICONT','QIHIST','QISUBS','QIUACO','QLCONT','QLCTFR','QLHIST','QLSUBS','QLTXCR','QOATFR','QOCONT','QOHIST','QOSUBS','QOTXCR','QOUACO','QRCONT','QRCTFR','QRHIST','QRSUBS','QRUACO','RDM','T1','T2','T3','T4','T5','T6','T7','T8','T9','TA','TB','TC','TD','TF','TFCONT','TFE','TFIN','TFOUT','TFRADJ','TFRLIV','TFROUT','TFRREC','TFSCEE','TICONT','TIGCES','TIHIST','TIHIST2','TISCEE','TIUACO','TLCONA','TOCONT','TOGCES','TOTFR','TOTSF','TOUACO','TRCOAS','TRF','TRF-IN','TRF-OUT','TRHIST','TRSF','TSF','TSFLIV','TSFREC','WO','TFR-IN','TFRIN','TFR','TFR-OUT','TFRT','TMSWO','TRFIN','TRFOUT','TRSFIN','TRSFOUT','TRXDIFF','TSFOUT','PAR')  
          THEN  T.TRAN_TRADING_GROSS_AMT*-1* T.EXCHANGERATE
          WHEN  COALESCE(POS.unitOfMeasure,-1) !=-1
                AND COALESCE(POS.PRICECURRENCY,'') !=''
                AND COALESCE(NULLIF(POS.CLOSEPRICE,0), NULLIF(POS.BIDPRICE,0), NULLIF(POS.ASKPRICE,0), -1) !=-1
          THEN IFF(T.Tran_Entry_Description not in ('', 'VALUE', 'VALEUR'),round(DIV0(T.Tran_Qty,POS.unitOfMeasure)* COALESCE(NULLIF(POS.CLOSEPRICE,0), NULLIF(POS.BIDPRICE,0), NULLIF(POS.ASKPRICE,0) ) ,2) * IFF(POS.PRICECURRENCY = 'USD',T.EXCHANGERATE,1) ,T.TRAN_TRADING_GROSS_AMT*-1* T.EXCHANGERATE)  
        /*  WHEN    COALESCE(POS_pdt.unitOfMeasure,-1) !=-1 
                AND COALESCE(POS_pdt.PRICECURRENCY,'') !='' 
                AND COALESCE(NULLIF(POS_pdt.CLOSEPRICE,0), NULLIF(POS_pdt.BIDPRICE,0), NULLIF(POS_pdt.ASKPRICE,0), -1) !=-1 
          THEN IFF(T.Tran_Entry_Description not in ('', 'VALUE', 'VALEUR'),round(DIV0(T.Tran_Qty,POS_pdt.unitOfMeasure)* COALESCE(NULLIF(POS_pdt.CLOSEPRICE,0), NULLIF(POS_pdt.BIDPRICE,0), NULLIF(POS_pdt.ASKPRICE,0) ) ,2) * IFF(POS_pdt.PRICECURRENCY = 'USD',T.EXCHANGERATE,1) ,T.TRAN_TRADING_GROSS_AMT*-1* T.EXCHANGERATE)  
          */
          WHEN  T.Tran_Entry_Description not in ('', 'VALUE', 'VALEUR') 
                AND abs(val.Tran_User_Description) > 0
          THEN val.Tran_User_Description 
          WHEN  T.Tran_Entry_Description not in ('', 'VALUE', 'VALEUR') 
                AND abs(T.Tran_Qty * greatest(T.TI_Issue_Price, T.STRIKE_PRICE, T.TI_Underlying_CDN_Price, T.TI_Underlying_USD_Price) * DIV0(T.TI_Basis_Point,T.TI_Face_Value)) > 0
          THEN  round(T.Tran_Qty * greatest(T.TI_Issue_Price, T.STRIKE_PRICE, T.TI_Underlying_CDN_Price, T.TI_Underlying_USD_Price) * DIV0(T.TI_Basis_Point,T.TI_Face_Value), 2) * T.EXCHANGERATE 
          WHEN  T.TRAN_TRADING_GROSS_AMT != 0
                 AND T.TI_SYMBOL IS NULL
          THEN  T.TRAN_TRADING_GROSS_AMT*-1* T.EXCHANGERATE
    ELSE 0 END 
    ,   
     CASE WHEN  T.TRAN_TRADING_GROSS_AMT != 0
                 AND COALESCE(Y.IBMSOURCE, '') NOT IN ('ADJTFR','CNV','CONV','CONV$','CT','CTOC','DISP','FX','MBD','MBD-IN','PLEDGE','QIATFR','QICONT','QIHIST','QISUBS','QIUACO','QLCONT','QLCTFR','QLHIST','QLSUBS','QLTXCR','QOATFR','QOCONT','QOHIST','QOSUBS','QOTXCR','QOUACO','QRCONT','QRCTFR','QRHIST','QRSUBS','QRUACO','RDM','T1','T2','T3','T4','T5','T6','T7','T8','T9','TA','TB','TC','TD','TF','TFCONT','TFE','TFIN','TFOUT','TFRADJ','TFRLIV','TFROUT','TFRREC','TFSCEE','TICONT','TIGCES','TIHIST','TIHIST2','TISCEE','TIUACO','TLCONA','TOCONT','TOGCES','TOTFR','TOTSF','TOUACO','TRCOAS','TRF','TRF-IN','TRF-OUT','TRHIST','TRSF','TSF','TSFLIV','TSFREC','WO','TFR-IN','TFRIN','TFR','TFR-OUT','TFRT','TMSWO','TRFIN','TRFOUT','TRSFIN','TRSFOUT','TRXDIFF','TSFOUT','PAR')  
          THEN T.TRAN_TRADING_GROSS_AMT * -1
          WHEN  COALESCE(POS.unitOfMeasure,-1) !=-1
                AND COALESCE(POS.PRICECURRENCY,'') !=''
                AND COALESCE(NULLIF(POS.CLOSEPRICE,0), NULLIF(POS.BIDPRICE,0), NULLIF(POS.ASKPRICE,0), -1) !=-1
          THEN IFF(T.Tran_Entry_Description not in ('', 'VALUE', 'VALEUR'),round(DIV0(T.Tran_Qty,POS.unitOfMeasure)* COALESCE(NULLIF(POS.CLOSEPRICE,0), NULLIF(POS.BIDPRICE,0), NULLIF(POS.ASKPRICE,0) ) ,2) * IFF(POS.PRICECURRENCY = 'USD',T.EXCHANGERATE,1) ,T.TRAN_TRADING_GROSS_AMT*-1)  
        /*  WHEN    COALESCE(POS_pdt.unitOfMeasure,-1) !=-1
                AND COALESCE(POS_pdt.PRICECURRENCY,'') !='' 
                AND COALESCE(NULLIF(POS_pdt.CLOSEPRICE,0), NULLIF(POS_pdt.BIDPRICE,0), NULLIF(POS_pdt.ASKPRICE,0), -1) !=-1
          THEN IFF(T.Tran_Entry_Description not in ('', 'VALUE', 'VALEUR'),round(DIV0(T.Tran_Qty,POS_pdt.unitOfMeasure)* COALESCE(NULLIF(POS_pdt.CLOSEPRICE,0), NULLIF(POS_pdt.BIDPRICE,0), NULLIF(POS_pdt.ASKPRICE,0) ) ,2) * IFF(POS_pdt.PRICECURRENCY = 'USD',T.EXCHANGERATE,1) ,T.TRAN_TRADING_GROSS_AMT*-1)  */
      WHEN  T.Tran_Entry_Description not in ('', 'VALUE', 'VALEUR') 
                AND abs(val.Tran_User_Description) > 0
          THEN val.Tran_User_Description
          WHEN  T.Tran_Entry_Description not in ('', 'VALUE', 'VALEUR') 
                AND abs(T.Tran_Qty * greatest(T.TI_Issue_Price, T.STRIKE_PRICE, T.TI_Underlying_CDN_Price, T.TI_Underlying_USD_Price) * DIV0(T.TI_Basis_Point,T.TI_Face_Value)) > 0
          THEN round(T.Tran_Qty * greatest(T.TI_Issue_Price, T.STRIKE_PRICE, T.TI_Underlying_CDN_Price, T.TI_Underlying_USD_Price) * DIV0(T.TI_Basis_Point,T.TI_Face_Value), 2)
          WHEN  T.TRAN_TRADING_GROSS_AMT != 0
                 AND T.TI_SYMBOL IS NULL
          THEN  T.TRAN_TRADING_GROSS_AMT*-1
     ELSE 0 END    
     ) * COALESCE(T.COMMISSIONPCT,100) * 0.01 AS ""Gross amount"", 
    CASE
    T.TRAN_TRADING_TYPE WHEN 'B' THEN 'Purchases'
    WHEN 'S' THEN 'Redemptions'
    ELSE 'Others'
    END AS ""Transaction type"",
    CASE
    T.TRAN_TRADING_TYPE WHEN 'B' THEN 1
    WHEN 'S' THEN 2
    ELSE 9
    END AS ORD_TRANSACTION_TYPE,
    CASE
    WHEN COALESCE(X.ISCASHFLOW,Y.ISCASHFLOW,Z.ISCASHFLOW) IS NULL THEN 'Unknown'
    WHEN COALESCE(X.ISCASHFLOW,Y.ISCASHFLOW,Z.ISCASHFLOW) = 0 THEN 'No'
    WHEN COALESCE(X.ISCASHFLOW,Y.ISCASHFLOW,Z.ISCASHFLOW) = 1 THEN 'Yes'
    END AS CASH_FLOW,
    CASE WHEN
         (SUBSTR(T.CONTRACT_ID,7,1) IN ('C', 'D'))
         THEN 'OTHER'
         WHEN (DECODE(TRUE, T.TRAN_ENTRY_DESCRIPTION LIKE 'CXL%', 1, 0) = 0 /*CANCEL_IND*/
         AND CASH_FLOW='Yes' AND ""Gross amount"" >= 0)
         OR
         (DECODE(TRUE, T.TRAN_ENTRY_DESCRIPTION LIKE 'CXL%', 1, 0) = 1 /*CANCEL_IND*/
         AND CASH_FLOW='Yes' AND ""Gross amount"" <= 0)
         THEN 'IN FLOW'
         WHEN (DECODE(TRUE, T.TRAN_ENTRY_DESCRIPTION LIKE 'CXL%', 1, 0) = 0 /*CANCEL_IND*/
         AND CASH_FLOW='Yes' AND ""Gross amount"" <= 0)
         OR
         (DECODE(TRUE, T.TRAN_ENTRY_DESCRIPTION LIKE 'CXL%', 1, 0) = 1 /*CANCEL_IND*/
         AND CASH_FLOW='Yes' AND ""Gross amount"" >= 0)
         THEN 'OUT FLOW' ELSE 'OTHER' END AS CASHFLOW_TYPE,     
    T.ADMINISTRATORY_TYPE AS ""Administratory type"",
    DECODE(R.REVERSAL_IND,TRUE,-1,1) AS ""number of transactions"",
    T.DEPARTED_ADVISOR_IND,
    CASE WHEN   T.TRAN_TRADING_GROSS_AMT != 0
                 AND COALESCE(Y.IBMSOURCE, '') NOT IN ('ADJTFR','CNV','CONV','CONV$','CT','CTOC','DISP','FX','MBD','MBD-IN','PLEDGE','QIATFR','QICONT','QIHIST','QISUBS','QIUACO','QLCONT','QLCTFR','QLHIST','QLSUBS','QLTXCR','QOATFR','QOCONT','QOHIST','QOSUBS','QOTXCR','QOUACO','QRCONT','QRCTFR','QRHIST','QRSUBS','QRUACO','RDM','T1','T2','T3','T4','T5','T6','T7','T8','T9','TA','TB','TC','TD','TF','TFCONT','TFE','TFIN','TFOUT','TFRADJ','TFRLIV','TFROUT','TFRREC','TFSCEE','TICONT','TIGCES','TIHIST','TIHIST2','TISCEE','TIUACO','TLCONA','TOCONT','TOGCES','TOTFR','TOTSF','TOUACO','TRCOAS','TRF','TRF-IN','TRF-OUT','TRHIST','TRSF','TSF','TSFLIV','TSFREC','WO','TFR-IN','TFRIN','TFR','TFR-OUT','TFRT','TMSWO','TRFIN','TRFOUT','TRSFIN','TRSFOUT','TRXDIFF','TSFOUT','PAR')  
          THEN 0
          WHEN  COALESCE(POS.unitOfMeasure,-1) !=-1
                AND COALESCE(POS.PRICECURRENCY,'') !=''
                AND COALESCE(NULLIF(POS.CLOSEPRICE,0), NULLIF(POS.BIDPRICE,0), NULLIF(POS.ASKPRICE,0), -1) !=-1
          THEN 
                 DATEDIFF( days, Pos.PROCESSDATE,  T.TRAN_TRADING_TRADE_DATE)  
     ELSE NULL END AS ""DAYS_LAST_PRICED_TRADE_DATE""     
    ,
     CASE WHEN  T.TRAN_TRADING_GROSS_AMT != 0
                 AND COALESCE(Y.IBMSOURCE, '') NOT IN ('ADJTFR','CNV','CONV','CONV$','CT','CTOC','DISP','FX','MBD','MBD-IN','PLEDGE','QIATFR','QICONT','QIHIST','QISUBS','QIUACO','QLCONT','QLCTFR','QLHIST','QLSUBS','QLTXCR','QOATFR','QOCONT','QOHIST','QOSUBS','QOTXCR','QOUACO','QRCONT','QRCTFR','QRHIST','QRSUBS','QRUACO','RDM','T1','T2','T3','T4','T5','T6','T7','T8','T9','TA','TB','TC','TD','TF','TFCONT','TFE','TFIN','TFOUT','TFRADJ','TFRLIV','TFROUT','TFRREC','TFSCEE','TICONT','TIGCES','TIHIST','TIHIST2','TISCEE','TIUACO','TLCONA','TOCONT','TOGCES','TOTFR','TOTSF','TOUACO','TRCOAS','TRF','TRF-IN','TRF-OUT','TRHIST','TRSF','TSF','TSFLIV','TSFREC','WO','TFR-IN','TFRIN','TFR','TFR-OUT','TFRT','TMSWO','TRFIN','TRFOUT','TRSFIN','TRSFOUT','TRXDIFF','TSFOUT','PAR')  
          THEN 0
          WHEN  COALESCE(Pos.unitOfMeasure,-1) !=-1
                AND COALESCE(Pos.PRICECURRENCY,'') !=''
                AND COALESCE(NULLIF(Pos.CLOSEPRICE,0), NULLIF(Pos.BIDPRICE,0), NULLIF(Pos.ASKPRICE,0), -1) !=-1
          THEN 
                 DATEDIFF( days, Pos.PROCESSDATE,  T.TRAN_PROCESS_DATE)  
     ELSE NULL END AS ""DAYS_LAST_PRICED_PROCESS_DATE""        
    , 
     CASE WHEN DAYS_LAST_PRICED_TRADE_DATE >= DAYS_LAST_PRICED_PROCESS_DATE THEN DAYS_LAST_PRICED_PROCESS_DATE ELSE DAYS_LAST_PRICED_TRADE_DATE END AS DAYS_LAST_PRICED,
     T.DEPARTED_ADVISOR_MASTER_CODE,
     T.A_C_REPRESENTATIVE
    ,CASE -- #RF: STORY 81850 - New Departed Advisor Indicator
            WHEN T.DEPARTED_ADVISOR_IND = 1 AND (T.TRAN_TRADING_TRADE_DATE >= ADVISOR_INFO.END_DATE AND T.TRAN_TRADING_TRADE_DATE < DATEADD(YEAR,1,ADVISOR_INFO.END_DATE)) THEN 1 ELSE 0
    END AS DEPARTED_ADVISOR_12M_IND
FROM DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION T
LEFT JOIN DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_REF_MAPPING_OPER_TYPE Y ON
(DECODE(TRUE,TRAN_ENTRY_DESCRIPTION LIKE 'CXL%',SUBSTRING(TRAN_ENTRY_DESCRIPTION,4),TRAN_ENTRY_DESCRIPTION)= Y.IBMSOURCE AND Y.""LEVEL"" =1)
LEFT JOIN DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_REF_MAPPING_OPER_TYPE X ON
(TRAN_ENTRY_DESCRIPTION= X.IBMSOURCE AND X.""LEVEL"" =1)
LEFT JOIN /*REMOVE DUPLICATION IN LEVEL 2 FOR MAPPING_OPER_TYPE*/
(SELECT TR.TRANSACTION_ID, OT.ISCASHFLOW, ROW_NUMBER() OVER(PARTITION BY TR.TRANSACTION_ID ORDER BY OT.ISCASHFLOW DESC) AS RN /*IF WE HAVE DIFFERENT VALUES FOR ISCASHFLOW FOR SAME TRAN WE PRIORITIZE TRUE VALUE*/
FROM DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION TR
LEFT JOIN DB_IAW_PROD_DWH.TRANSACTIONS_BDV.WT_REF_MAPPING_OPER_TYPE OT ON
(DECODE(TRUE,TR.TRAN_ENTRY_DESCRIPTION LIKE 'CXL%',SUBSTRING(TR.TRAN_ENTRY_DESCRIPTION,4),TR.TRAN_ENTRY_DESCRIPTION) RLIKE REPLACE(REPLACE(REPLACE(REPLACE(OT.IBMSOURCE,'*','.*'),'?','.'),'#','\\d'),'@','[a-zA-Z]') AND OT.""LEVEL"" =2)) Z
ON T.TRANSACTION_ID = Z.TRANSACTION_ID AND Z.RN= 1
LEFT JOIN REVERSALS_BK R ON
R.TRANSACTION_ID=T.TRANSACTION_ID 
LEFT JOIN val val on
 val.TRAN_PROCESS_DATE = T.TRAN_PROCESS_DATE and
 val.CONTRACT_ID = T.CONTRACT_ID and
 val.Tran_Txn_Reference_ID = T.Tran_Txn_Reference_ID 
LEFT JOIN POS_ALL POS
    ON T.HK_LINK = POS.HK_LINK
LEFT JOIN ADVISOR_INFO  -- #RF: STORY 81850 - New Departed Advisor Indicator
    ON ADVISOR_INFO.MASTER_CODE = T.DEPARTED_ADVISOR_MASTER_CODE
-- ADD EXCLUSION
LEFT JOIN EXCLUSION E
ON E.REPID = T.MASTER_CODE
AND E.IND_EXCLUDE = 1
AND E.MD_ACTIVE = 'A'
WHERE T.CONTRACT_ID NOT RLIKE '^[A-Z][A-Z].*'
--AND T.CONTRACT_ID IS NOT NULL
AND T.A_C_REPRESENTATIVE NOT IN ('SEAA', 'SEZ9', 'QYYY', 'SNJB')
-- EXCLUDE RVP ADVISOR
AND E.REPID IS NULL
);
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TRANSACTIONS_BDV.""DB_IAW_PROD_DWH.TRANSACTIONS_BDV.SP_CONV_LOADBDV_RDV_TRANSACTIONS_INVESTIA_UNIVERIS_TO_BDV_WT_LINK_FINANCIAL_TRANSACTION_INVESTIA_UNIVERIS""(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_INVESTIA_UNIVERIS WHERE 1=1'';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_INVESTIA_UNIVERIS ( 	
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
,HK_HUB_PARTY_ROLE_ADVISOR	
,HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES	
,HK_HUB_INVESTMENT_PRODUCT_TYPE		
,HK_HUB_CONTRACT	
,MD_START_DT		
,MD_CREATION_DT	
,MD_SOURCE		
,MD_SRC_SYSTEM	
,MD_EXTRACT_DT	
,TRANSACTION_ID		
,UNIVERIS_CLIENT_ID	
,MASTER_CODE	
,UNIVERIS_PLAN_ID
,INVESTMENT_PRODUCT_ID	
,PLN_MNEM		
,TRADE_DATE		
,GROSS_AMOUNT		
,TRANSACTION_TYPE		
,ORD_TRANSACTION_TYPE		
,CASH_FLOW	
,CASH_FLOW_TYPE	
,ADMINISTRATORY_TYPE )
SELECT
	sbdv.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	
	,bdv02.HK_HUB_PARTY_ROLE_ADVISOR	
	,sbdv.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES	
	,trdv.HK_HUB_INVESTMENT_PRODUCT_TYPE	
	,trdv.HK_HUB_CONTRACT	
	,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')	
	,CURRENT_TIMESTAMP
	,rdv3.MD_SOURCE	
	,trdv.MD_SRC_SYSTEM	
	,rdv3.MD_EXTRACT_DT	
	,trdv.TRANSACTION_ID	
	,trdv.UNIVERIS_CLIENT_ID
	,bdv02.MASTER_CODE	
	,trdv.UNIVERIS_PLAN_ID	
	,trdv.INVESTMENT_PRODUCT_ID	
	,sbdv.PLN_MNEM	
	,rdv3.TRADE_DT	
	,rdv3.TRX_GROSS* (CASE WHEN bdv02.COMMISSIONPCT IS NULL THEN 1 ELSE bdv02.COMMISSIONPCT/100 END)
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_TRANSACTION_TYPE_001(rdv3.SPR_CTGY,rdv3.TRX_MNEM_ENG)[''''o_TRANSACTION_TYPE'''']
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_TRANSACTION_TYPE_001(rdv3.SPR_CTGY,rdv3.TRX_MNEM_ENG)[''''o_TRANSACTION_TYPE'''']	
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_CASH_FLOW_002(rdv3.TRX_MNEM_ENG)
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_CASH_FLOW_003((rdv3.TRX_MNEM_ENG),(rdv3.TRX_GROSS* (CASE WHEN bdv02.COMMISSIONPCT IS NULL THEN 1 ELSE bdv02.COMMISSIONPCT/100 END)))
	,bdv04.ADMINISTRATOR_TYPE
	FROM (
		SELECT *
			FROM DB_IAW_''||ENV||''_DWH.TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_INVESTIA_UNIVERIS WHERE MD_START_DT = TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')  AND MD_ACTIVE = ''''A'''' )rdv3
		JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR WHERE  MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''')trdv 
		ON rdv3.HK_LINK = trdv.HK_LINK
		LEFT JOIN
		(
			SELECT rdv2.HK_HUB_CONTRACT, srdv3.MD_ACTIVE 
			FROM (
				SELECT *
				FROM (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''')) rdv2
				JOIN DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS srdv3 ON srdv3.HK_LINK = rdv2.HK_LINK
			JOIN ( 
				SELECT *
				FROM (
					SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB_CONTRACT ORDER BY MD_START_DT DESC) RN 
						FROM (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR rdv2 
							JOIN DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS srdv3 
				ON srdv3.HK_LINK = rdv2.HK_LINK WHERE rdv2.MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''')) SATHUB WHERE SATHUB.RN = 1 AND SATHUB.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') 
				)SATHUB0 ON rdv2.HK_HUB_CONTRACT = SATHUB0.HK_HUB_CONTRACT AND srdv3.MD_START_DT = SATHUB0.MD_START_DT
		)bdv0 ON bdv0.HK_HUB_CONTRACT = trdv.HK_HUB_CONTRACT  
		LEFT JOIN
		(
			SELECT rdv.HK_HUB, rdv.RR_CD, srdv2.REP_SYSID, srdv2.MD_ACTIVE
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_INVESTIA_UNIVERIS) srdv2
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN1
					FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_INVESTIA_UNIVERIS) SATHUB1
				WHERE SATHUB1.RN1 = 1 AND SATHUB1.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') 
				) rdv2lv ON rdv2lv.HK_HUB = srdv2.HK_HUB
			JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''')rdv ON rdv.HK_HUB = srdv2.HK_HUB WHERE srdv2.MD_ACTIVE = ''''A''''
		)bdv01 ON rdv3.REP_SYSID = bdv01.REP_SYSID
		LEFT JOIN
		(
			SELECT bdv.HK_HUB_REGISTERED_REPRESENTATIVE, bdv.HK_HUB_PARTY_ROLE_ADVISOR, bdv.MASTER_CODE, bdv2.COMMISSIONPCT
			FROM (
				SELECT *
				FROM (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS''''
				))bdv2
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_LINK ORDER BY MD_START_DT DESC
							) RN2
					FROM (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS''''
					)) SATHUB2
				WHERE SATHUB2.RN2 = 1 AND SATHUB2.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') 
				) ssbdv4 ON ssbdv4.HK_LINK = bdv2.HK_LINK 
			JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''') bdv ON bdv.HK_LINK =bdv2.HK_LINK WHERE bdv2.MD_ACTIVE = ''''A''''
		)bdv02	ON bdv01.HK_HUB = bdv02.HK_HUB_REGISTERED_REPRESENTATIVE
		LEFT JOIN
		(
			SELECT srdv.HK_HUB,srdv.ADMINISTRATOR_TYPE
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_INVESTIA_UNIVERIS) srdv
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN3
					FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_INVESTIA_UNIVERIS
					) SATHUB3
				WHERE SATHUB3.RN3 = 1 AND SATHUB3.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') 
				) ssbdv5 ON ssbdv5.HK_HUB = srdv.HK_HUB WHERE ssbdv5.MD_ACTIVE = ''''A''''
		)bdv04 ON trdv.HK_HUB_CONTRACT = bdv04.HK_HUB
		LEFT JOIN
		(
			SELECT rdv4.HK_HUB, rdv4.SYMBOL
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_INVESTIA_UNIVERIS
				) rdv4
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN4
					FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_INVESTIA_UNIVERIS
					) SATHUB4
				WHERE SATHUB4.RN4 = 1 AND SATHUB4.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') 
				) ssbdv6 ON ssbdv6.HK_HUB = rdv4.HK_HUB WHERE ssbdv6.MD_ACTIVE = ''''A'''' 
		)bdv06 ON trdv.HK_HUB_INVESTMENT_PRODUCT_TYPE = bdv06.HK_HUB
		LEFT JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.LINK_INVESTMENT_CONTRACT WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''') sbdv ON sbdv.HK_HUB_CONTRACT = trdv.HK_HUB_CONTRACT AND sbdv.HK_HUB_PARTY_ROLE_ADVISOR = bdv02.HK_HUB_PARTY_ROLE_ADVISOR
		WHERE rdv3.SPR_CTGY IN (''''PUR'''', ''''PAC'''', ''''RED'''', ''''AWD'''', ''''SWI'''', ''''SWO'''', ''''TIN'''', ''''TOT'''', ''''XIN'''', ''''XOT'''') AND bdv06.SYMBOL NOT IN (''''MRC001'''', ''''IAAFCCA'''', ''''INVCCA'''')	
		AND
		bdv0.MD_ACTIVE = ''''A''''        
             '';
INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_INVESTIA_UNIVERIS
SET 
	HK_LINK=
	SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , 
	COALESCE(TRIM(TRANSACTION_ID), ''''#NULL#''''), ''''|'''' , 
	COALESCE(TRIM(UNIVERIS_CLIENT_ID), ''''#NULL#''''), ''''|'''' , 
	COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' , 
	''''#NULL#'''', ''''|'''',  -- CONTRACT_ID
	COALESCE(TRIM(UNIVERIS_PLAN_ID), ''''#NULL#''''), ''''|'''',
	COALESCE(TRIM(INVESTMENT_PRODUCT_ID), ''''#NULL#''''), ''''|'''' ,  
	COALESCE(TRIM(PLN_MNEM),''''#NULL#''''), ''''|'''' , 
	''''#NULL#'''', ''''|'''', -- ACCOUNT_RAP_CODE
	''''#NULL#'''', ''''|'''' , -- RETAIL_PLAN
	''''#NULL#'''' -- ASC_1_RESP_PLAN_TYPES
	))),
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = COALESCE(HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,''''0''''),
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER= COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
	HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''''0''''),
	HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''''0''''),
	HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''''0'''')
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END

';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TRANSACTIONS_BDV.SP_CONV_LOADBDV_RDV_MAP_OPER_TYPE_TO_BDV_WT_REF_MAPP_OPER_TYPE(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_REF_MAPPING_OPER_TYPE WHERE 1=1'';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_REF_MAPPING_OPER_TYPE 
(	HK_HUB,
	MD_SOURCE,
	MD_SRC_SYSTEM,
	MD_EXTRACT_DT,
	IBMSOURCE,
	LEVEL,
	MD_START_DT,
	DESCRIPTION_EN,
	DESCRIPTION_SHORT_EN,
	DESCRIPTION_FR,
	DESCRIPTION_SHORT_FR,
	OPERATION_TYPE,
	DISPLAY,
	CASHFLOW_SUMMARY,
	ISCASHFLOW )
SELECT
	HUB.HK_HUB,
	SAT.MD_SOURCE,
	SAT.MD_SRC_SYSTEM,
	SAT.MD_EXTRACT_DT,
	HUB.IBMSOURCE,
	HUB.LEVEL,
	TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD''''),	
	SAT.DESCRIPTION_EN,
	SAT.DESCRIPTION_SHORT_EN,
	SAT.DESCRIPTION_FR,
	SAT.DESCRIPTION_SHORT_FR,
	SAT.OPERATION_TYPE,
	SAT.DISPLAY,
	SAT.CASHFLOW_SUMMARY,
	SAT.ISCASHFLOW
FROM (
	SELECT * 
			FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.SAT_REF_MAPPING_OPER_TYPE_IAS) SAT
		JOIN (
		SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN
					FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.SAT_REF_MAPPING_OPER_TYPE_IAS
                    WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
					) SATHUB
				WHERE SATHUB.RN = 1  
		)LV ON LV.HK_HUB = SAT.HK_HUB AND LV.MD_START_DT = SAT.MD_START_DT
	JOIN DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.REF_MAPPING_OPER_TYPE HUB ON SAT.HK_HUB = HUB.HK_HUB 
	WHERE SAT.MD_ACTIVE = ''''A''''
              '';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TRANSACTIONS_BDV.SP_CONV_LOADBDV_RDV_MAP_OPER_TYPE_TO_BDV_WT_REF_MAPP_OPER_TYPE_IAPW(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_REF_MAPPING_OPER_TYPE WHERE 1=1 '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_REF_MAPPING_OPER_TYPE (
HK_HUB	 	
,MD_SOURCE		
,MD_SRC_SYSTEM		
,MD_EXTRACT_DT		
,IBMSOURCE		
,LEVEL		
,MD_START_DT		
,DESCRIPTION_EN		
,DESCRIPTION_SHORT_EN		
,DESCRIPTION_FR		
,DESCRIPTION_SHORT_FR	
,OPERATION_TYPE		
,DISPLAY		
,CASHFLOW_SUMMARY		
,ISCASHFLOW )
SELECT hub.HK_HUB	 	
	,sat.MD_SOURCE	
	,sat.MD_SRC_SYSTEM	
	,sat.MD_EXTRACT_DT	
	,hub.IBMSOURCE	
	,hub.LEVEL	
	,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')	
	,sat.DESCRIPTION_EN	
	,sat.DESCRIPTION_SHORT_EN	
	,sat.DESCRIPTION_FR	
	,sat.DESCRIPTION_SHORT_FR
	,sat.OPERATION_TYPE	
	,sat.DISPLAY	
	,sat.CASHFLOW_SUMMARY	
	,sat.ISCASHFLOW
	FROM (
	SELECT * FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.SAT_REF_MAPPING_OPER_TYPE_IAS WHERE MD_ACTIVE = ''''A'''') sat
	JOIN DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.REF_MAPPING_OPER_TYPE hub ON sat.HK_HUB = hub.HK_HUB
              '';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TRANSACTIONS_BDV.SP_CONV_LOADBDV_RDV_TRANSACTIONS_IAS_UNIVERIS_TO_BDV_WT_LINK_TRANSACTIONS_IAS_UNIVERIS(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_UNIVERIS WHERE 1=1'';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_UNIVERIS (
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
,HK_HUB_PARTY_ROLE_ADVISOR	
,HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES		
,HK_HUB_INVESTMENT_PRODUCT_TYPE	
,HK_HUB_CONTRACT	
,MD_START_DT	
,MD_CREATION_DT	
,MD_SOURCE		
,MD_SRC_SYSTEM		
,MD_EXTRACT_DT	
,TRANSACTION_ID		
,UNIVERIS_CLIENT_ID	
,MASTER_CODE	
,UNIVERIS_PLAN_ID	
,INVESTMENT_PRODUCT_ID		
,PLN_MNEM		
,TRADE_DATE	
,GROSS_AMOUNT	
,TRANSACTION_TYPE	
,ORD_TRANSACTION_TYPE	
,CASH_FLOW	
,CASH_FLOW_TYPE		
,ADMINISTRATORY_TYPE	
,DEPARTED_ADVISOR_IND		
,DEPARTED_ADVISOR_MASTER_CODE
,A_C_REPRESENTATIVE )
SELECT
	bdv0.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	
	,bdv02.HK_HUB_PARTY_ROLE_ADVISOR	
	,bdv2.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES	
	,rdv.HK_HUB_INVESTMENT_PRODUCT_TYPE	
	,rdv.HK_HUB_CONTRACT	
	,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
	,CURRENT_TIMESTAMP	
	,trdv.MD_SOURCE	
	,rdv.MD_SRC_SYSTEM	
	,trdv.MD_EXTRACT_DT	
	,rdv.TRANSACTION_ID	
	,rdv.UNIVERIS_CLIENT_ID	
	,bdv02.MASTER_CODE	
	,rdv.UNIVERIS_PLAN_ID
	,rdv.INVESTMENT_PRODUCT_ID	
	,bdv2.PLN_MNEM	
	,trdv.TRADE_DT	
	,trdv.TRX_GROSS* (CASE WHEN bdv02.COMMISSIONPCT IS NULL THEN 1 ELSE bdv02.COMMISSIONPCT/100 END)
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_TRANSACTION_TYPE_001(trdv.SPR_CTGY,trdv.TRX_MNEM_ENG)[''''o_TRANSACTION_TYPE'''']
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_TRANSACTION_TYPE_001(trdv.SPR_CTGY,trdv.TRX_MNEM_ENG)[''''o_ORD_TRANSACTION_TYPE'''']
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_CASH_FLOW_002(trdv.TRX_MNEM_ENG)
	,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_CASH_FLOW_003((trdv.TRX_MNEM_ENG),(trdv.TRX_GROSS*1))
	,bdv04.ADMINISTRATOR_TYPE	
	,CASE WHEN bdv07.REP_CODE IS NULL THEN 1 ELSE 0 END
	,bdv07.MASTER_CODE
	,rdv.REGISTERED_REPRESENTATIVE_ID
	FROM (
		SELECT *
			FROM DB_IAW_''||ENV||''_DWH.TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_UNIVERIS WHERE MD_START_DT = TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD''''))trdv
		JOIN DB_IAW_''||ENV||''_DWH.TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR rdv ON rdv.HK_LINK = trdv.HK_LINK
		LEFT JOIN
		(
			SELECT *
			FROM (
				SELECT rdv2.HK_HUB_CONTRACT,rdv2.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
				FROM (DB_IAW_''||ENV||''_DWH.SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR) rdv2
				JOIN DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_IAS_UNIVERIS srdv4 ON srdv4.HK_LINK = rdv2.HK_LINK
			JOIN ( 
				SELECT *
				FROM (
					SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB_CONTRACT ORDER BY MD_START_DT DESC) RN 
						FROM (SELECT * from DB_IAW_''||ENV||''_DWH.SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR rdv2 
							JOIN DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_IAS_UNIVERIS srdv4 
				ON srdv4.HK_LINK = rdv2.HK_LINK
                WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') )) SATHUB WHERE SATHUB.RN = 1 
				)SATHUB0 ON rdv2.HK_HUB_CONTRACT = SATHUB0.HK_HUB_CONTRACT AND srdv4.MD_START_DT = SATHUB0.MD_START_DT AND srdv4.MD_ACTIVE=''''A'''')
		)bdv0 ON bdv0.HK_HUB_CONTRACT = rdv.HK_HUB_CONTRACT  
		LEFT JOIN
		(
			SELECT srdv5.RR_CD, srdv5.HK_HUB,srdv3.MD_ACTIVE
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_UNIVERIS) srdv3
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN1
					FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_IAS_UNIVERIS
                    WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') ) SATHUB1
				WHERE SATHUB1.RN1 = 1 
				) rdv2lv ON rdv2lv.HK_HUB = srdv3.HK_HUB AND rdv2lv.MD_START_DT = srdv3.MD_START_DT
			JOIN DB_IAW_''||ENV||''_DWH.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE srdv5 ON srdv5.HK_HUB = srdv3.HK_HUB
			WHERE REGEXP_INSTR( srdv5.MD_SRC_SYSTEM, ''''IAS'''' )= TRUE
		)bdv01 ON trdv.REP_CD = bdv01.RR_CD
		LEFT JOIN
		(
			SELECT bdv.HK_HUB_REGISTERED_REPRESENTATIVE, bdv.HK_HUB_PARTY_ROLE_ADVISOR, bdv.MASTER_CODE, bdv3.COMMISSIONPCT
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE
				) bdv3
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_LINK ORDER BY MD_START_DT DESC
							) RN2
					FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE
                    WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
					) SATHUB2
				WHERE SATHUB2.RN2 = 1 
				) ssbdv4 ON ssbdv4.HK_LINK = bdv3.HK_LINK AND ssbdv4.MD_START_DT = bdv3.MD_START_DT
			JOIN DB_IAW_''||ENV||''_DWH.SHARED_BDV.LINK_PARTY_RELATIONSHIP_SHARE bdv ON bdv.HK_LINK =bdv3.HK_LINK WHERE ssbdv4.MD_ACTIVE = ''''A'''' AND ssbdv4.MD_SRC_SYSTEM = ''''IAS''''
		)bdv02	ON bdv01.HK_HUB = bdv02.HK_HUB_REGISTERED_REPRESENTATIVE
		LEFT JOIN
		(
			SELECT srdv.ADMINISTRATOR_TYPE,srdv.HK_HUB,srdv.MD_ACTIVE
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_IAS_UNIVERIS) srdv
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN3
					FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_IAS_UNIVERIS
                    WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
					) SATHUB3
				WHERE SATHUB3.RN3 = 1 
				) ssbdv5 ON ssbdv5.HK_HUB = srdv.HK_HUB AND ssbdv5.MD_START_DT = srdv.MD_START_DT WHERE ssbdv5.MD_ACTIVE = ''''A''''
		)bdv04 ON rdv.HK_HUB_CONTRACT = bdv04.HK_HUB
		LEFT JOIN
		(
			SELECT rdv3.*
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_UNIVERIS
				) rdv3
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN4
					FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_IAS_UNIVERIS
                    WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
					) SATHUB4
				WHERE SATHUB4.RN4 = 1 
				) ssbdv6 ON ssbdv6.HK_HUB = rdv3.HK_HUB AND ssbdv6.MD_START_DT = rdv3.MD_START_DT WHERE ssbdv6.MD_ACTIVE = ''''A'''' 
		)bdv06 ON rdv.HK_HUB_INVESTMENT_PRODUCT_TYPE = bdv06.HK_HUB
		LEFT JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.LINK_INVESTMENT_CONTRACT) bdv2 ON bdv2.HK_HUB_CONTRACT = bdv0.HK_HUB_CONTRACT AND bdv02.HK_HUB_PARTY_ROLE_ADVISOR = bdv2.HK_HUB_PARTY_ROLE_ADVISOR
		LEFT JOIN
		(
			SELECT sbdv.REP_CODE, sbdv.MASTER_CODE
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.SAT_LINK_SERVICING_CODES
				) sbdv2
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_LINK ORDER BY MD_START_DT DESC
							) RN5
					FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.SAT_LINK_SERVICING_CODES
                    WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
					) SATHUB5
				WHERE SATHUB5.RN5 = 1 
				) ssbdv7 ON ssbdv7.HK_LINK = sbdv2.HK_LINK AND ssbdv7.MD_START_DT = sbdv2.MD_START_DT
			JOIN DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.LINK_SERVICING_CODES sbdv ON sbdv.HK_LINK = sbdv2.HK_LINK
			WHERE sbdv2.MD_ACTIVE = ''''A'''' AND sbdv2.REP_ROW_NUM = 1
			GROUP BY 1,2
		)bdv07 ON bdv01.RR_CD = bdv07.REP_CODE
		WHERE trdv.SPR_CTGY IN (''''PUR'''', ''''PAC'''', ''''RED'''', ''''AWD'''', ''''SWI'''', ''''SWO'''', ''''TIN'''', ''''TOT'''', ''''XIN'''', ''''XOT'''') AND bdv06.SYMBOL NOT IN (''''MRC001'''', ''''IAAFCCA'''', ''''INVCCA'''')	
		AND
		bdv01.MD_ACTIVE = ''''A''''
             '';
INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_UNIVERIS
SET
	HK_LINK=
	SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , 
	COALESCE(TRIM(TRANSACTION_ID), ''''#NULL#''''), ''''|'''' , 
	COALESCE(TRIM(UNIVERIS_CLIENT_ID), ''''#NULL#''''), ''''|'''' , 
	COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' , 
	''''#NULL#'''', ''''|'''',  -- CONTRACT_ID
	COALESCE(TRIM(UNIVERIS_PLAN_ID), ''''#NULL#''''), ''''|'''',
	COALESCE(TRIM(INVESTMENT_PRODUCT_ID), ''''#NULL#''''), ''''|'''' ,  
	COALESCE(TRIM(PLN_MNEM),''''#NULL#''''), ''''|'''' , 
	''''#NULL#'''', ''''|'''', -- ACCOUNT_RAP_CODE
	''''#NULL#'''', ''''|'''' , -- RETAIL_PLAN
	''''#NULL#'''' -- ASC_1_RESP_PLAN_TYPES
	))),
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = COALESCE(HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,''''0''''),
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER= COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
	HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''''0''''),
	HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''''0''''),
	HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''''0'''')
Where 1=1;
'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;


END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TRANSACTIONS_BDV.SP_CONV_LOADBDV_RDV_TRANSACTIONS_INVESTIA_UNIVERIS_TO_BDV_WT_LINK_FINANCIAL_TRANSACTION_INVESTIA_UNIVERIS(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_INVESTIA_UNIVERIS WHERE 1=1'';

INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_INVESTIA_UNIVERIS (      
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
,HK_HUB_PARTY_ROLE_ADVISOR             
,HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES         
,HK_HUB_INVESTMENT_PRODUCT_TYPE                              
,HK_HUB_CONTRACT     
,MD_START_DT                
,MD_CREATION_DT        
,MD_SOURCE                    
,MD_SRC_SYSTEM          
,MD_EXTRACT_DT           
,TRANSACTION_ID                          
,UNIVERIS_CLIENT_ID    
,MASTER_CODE 
,UNIVERIS_PLAN_ID
,INVESTMENT_PRODUCT_ID       
,PLN_MNEM                      
,TRADE_DATE                    
,GROSS_AMOUNT                           
,TRANSACTION_TYPE                     
,ORD_TRANSACTION_TYPE                          
,CASH_FLOW     
,CASH_FLOW_TYPE         
,ADMINISTRATORY_TYPE
,A_C_REPRESENTATIVE )
SELECT
                sbdv.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER               
                ,bdv02.HK_HUB_PARTY_ROLE_ADVISOR               
                ,sbdv.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES              
                ,trdv.HK_HUB_INVESTMENT_PRODUCT_TYPE     
                ,trdv.HK_HUB_CONTRACT           
                ,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')            
                ,CURRENT_TIMESTAMP
                ,rdv3.MD_SOURCE          
                ,trdv.MD_SRC_SYSTEM 
                ,rdv3.MD_EXTRACT_DT 
                ,trdv.TRANSACTION_ID 
                ,trdv.UNIVERIS_CLIENT_ID
                ,bdv02.MASTER_CODE  
                ,trdv.UNIVERIS_PLAN_ID              
                ,trdv.INVESTMENT_PRODUCT_ID              
                ,sbdv.PLN_MNEM           
                ,rdv3.TRADE_DT               
                ,rdv3.TRX_GROSS* (CASE WHEN bdv02.COMMISSIONPCT IS NULL THEN 1 ELSE bdv02.COMMISSIONPCT/100 END)
,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_TRANSACTION_TYPE_001(rdv3.SPR_CTGY,rdv3.TRX_MNEM_ENG)[''''o_TRANSACTION_TYPE'''']
,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_TRANSACTION_TYPE_001(rdv3.SPR_CTGY,rdv3.TRX_MNEM_ENG)[''''o_ORD_TRANSACTION_TYPE'''']                
                ,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_CASH_FLOW_002(rdv3.TRX_MNEM_ENG)
,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_CASH_FLOW_003((rdv3.TRX_MNEM_ENG),(rdv3.TRX_GROSS* (CASE WHEN bdv02.COMMISSIONPCT IS NULL THEN 1 ELSE bdv02.COMMISSIONPCT/100 END)))
                ,bdv04.ADMINISTRATOR_TYPE
				,trdv.REGISTERED_REPRESENTATIVE_ID
                FROM (
                                SELECT *
                                                FROM DB_IAW_''||ENV||''_DWH.TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_INVESTIA_UNIVERIS WHERE MD_START_DT = TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')  AND MD_ACTIVE = ''''A'''' )rdv3
                                JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR WHERE  MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''')trdv 
                                ON rdv3.HK_LINK = trdv.HK_LINK
                                LEFT JOIN
                                (
                                                SELECT rdv2.HK_HUB_CONTRACT, srdv3.MD_ACTIVE 
                                                FROM (
                                                                SELECT *
                                                                FROM (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''')) rdv2
                                                                JOIN DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS srdv3 ON srdv3.HK_LINK = rdv2.HK_LINK
                                                JOIN ( 
                                                                SELECT *
                                                                FROM (
                                                                                SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB_CONTRACT ORDER BY MD_START_DT DESC) RN 
                                                                                                FROM (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR rdv2 
                                                                                                JOIN DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS srdv3 
                                                                ON srdv3.HK_LINK = rdv2.HK_LINK WHERE rdv2.MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''' AND MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
                                                                )) SATHUB WHERE SATHUB.RN = 1  
                                                                )SATHUB0 ON rdv2.HK_HUB_CONTRACT = SATHUB0.HK_HUB_CONTRACT AND srdv3.MD_START_DT = SATHUB0.MD_START_DT AND srdv3.MD_ACTIVE=''''A''''
                                )bdv0 ON bdv0.HK_HUB_CONTRACT = trdv.HK_HUB_CONTRACT  AND bdv0.MD_ACTIVE = ''''A''''  
                                LEFT JOIN
                                (
                                                SELECT rdv.HK_HUB, rdv.RR_CD, srdv2.REP_SYSID, srdv2.MD_ACTIVE
                                                FROM (
                                                                SELECT *
                                                                FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_INVESTIA_UNIVERIS) srdv2
                                                JOIN (
                                                                SELECT *
                                                                FROM (
                                                                                SELECT *
                                                                                                ,ROW_NUMBER() OVER (PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
                                                                                                                ) RN1
                                                                                FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_INVESTIA_UNIVERIS WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')  ) SATHUB1
                                                                WHERE SATHUB1.RN1 = 1
                                                                ) rdv2lv ON rdv2lv.HK_HUB = srdv2.HK_HUB AND rdv2lv.MD_START_DT = srdv2.MD_START_DT
                                                JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''')rdv ON rdv.HK_HUB = srdv2.HK_HUB WHERE srdv2.MD_ACTIVE = ''''A''''
                                )bdv01 ON rdv3.REP_SYSID = bdv01.REP_SYSID
                                LEFT JOIN
                                (
                                                SELECT bdv.HK_HUB_REGISTERED_REPRESENTATIVE, bdv.HK_HUB_PARTY_ROLE_ADVISOR, bdv.MASTER_CODE, bdv2.COMMISSIONPCT
                                                FROM (
                                                                SELECT *
                                                                FROM (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS''''
                                                                ))bdv2
                                                JOIN (
                                                                SELECT *
                                                                FROM (
                                                                                SELECT *
                                                                                                ,ROW_NUMBER() OVER (
                                                                                                                PARTITION BY HK_LINK ORDER BY MD_START_DT DESC
                                                                                                                ) RN2
                                                                                FROM (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS''''
                                                                                AND MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
                                                                                )) SATHUB2
                                                                WHERE SATHUB2.RN2 = 1  
                                                                ) ssbdv4 ON ssbdv4.HK_LINK = bdv2.HK_LINK AND ssbdv4.MD_START_DT = bdv2.MD_START_DT 
                                                JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.LINK_PARTY_RELATIONSHIP_SHARE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''') bdv ON bdv.HK_LINK =bdv2.HK_LINK WHERE bdv2.MD_ACTIVE = ''''A''''
                                )bdv02  ON bdv01.HK_HUB = bdv02.HK_HUB_REGISTERED_REPRESENTATIVE
                                LEFT JOIN
                                (
                                                SELECT srdv.HK_HUB,srdv.ADMINISTRATOR_TYPE
                                                FROM (
                                                                SELECT *
                                                                FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_INVESTIA_UNIVERIS) srdv
                                                JOIN (
                                                                SELECT *
                                                                FROM (
                                                                                SELECT *
                                                                                                ,ROW_NUMBER() OVER (
                                                                                                                PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
                                                                                                                ) RN3
                                                                                FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_INVESTIA_UNIVERIS
                                                                                WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
                                                                                ) SATHUB3
                                                                WHERE SATHUB3.RN3 = 1  
                                                                ) ssbdv5 ON ssbdv5.HK_HUB = srdv.HK_HUB AND ssbdv5.MD_START_DT = srdv.MD_START_DT WHERE ssbdv5.MD_ACTIVE = ''''A''''
                                )bdv04 ON trdv.HK_HUB_CONTRACT = bdv04.HK_HUB  
                                LEFT JOIN
                                (
                                                SELECT rdv4.HK_HUB, rdv4.SYMBOL
                                                FROM (
                                                                SELECT *
                                                                FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_INVESTIA_UNIVERIS
                                                                ) rdv4
                                                JOIN (
                                                                SELECT *
                                                                FROM (
                                                                                SELECT *
                                                                                                ,ROW_NUMBER() OVER (
                                                                                                                PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
                                                                                                                ) RN4
                                                                                FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_INVESTIA_UNIVERIS
                                                                                WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
                                                                                ) SATHUB4
                                                                WHERE SATHUB4.RN4 = 1  
                                                                ) ssbdv6 ON ssbdv6.HK_HUB = rdv4.HK_HUB AND ssbdv6.MD_START_DT = rdv4.MD_START_DT WHERE ssbdv6.MD_ACTIVE = ''''A'''' 
                                )bdv06 ON trdv.HK_HUB_INVESTMENT_PRODUCT_TYPE = bdv06.HK_HUB
                                LEFT JOIN (SELECT * FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.LINK_INVESTMENT_CONTRACT WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''') sbdv ON sbdv.HK_HUB_CONTRACT = trdv.HK_HUB_CONTRACT AND sbdv.HK_HUB_PARTY_ROLE_ADVISOR = bdv02.HK_HUB_PARTY_ROLE_ADVISOR
                                WHERE rdv3.SPR_CTGY IN (''''PUR'''', ''''PAC'''', ''''RED'''', ''''AWD'''', ''''SWI'''', ''''SWO'''', ''''TIN'''', ''''TOT'''', ''''XIN'''', ''''XOT'''') AND bdv06.SYMBOL NOT IN (''''MRC001'''', ''''IAAFCCA'''', ''''INVCCA'''')      
             '';
INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_INVESTIA_UNIVERIS
SET 
                HK_LINK=
                SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , 
                COALESCE(TRIM(TRANSACTION_ID), ''''#NULL#''''), ''''|'''' , 
                COALESCE(TRIM(UNIVERIS_CLIENT_ID), ''''#NULL#''''), ''''|'''' , 
                COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' , 
                ''''#NULL#'''', ''''|'''',  -- CONTRACT_ID
                COALESCE(TRIM(UNIVERIS_PLAN_ID), ''''#NULL#''''), ''''|'''',
                COALESCE(TRIM(INVESTMENT_PRODUCT_ID), ''''#NULL#''''), ''''|'''' ,  
                COALESCE(TRIM(PLN_MNEM),''''#NULL#''''), ''''|'''' , 
                ''''#NULL#'''', ''''|'''', -- ACCOUNT_RAP_CODE
                ''''#NULL#'''', ''''|'''' , -- RETAIL_PLAN
                ''''#NULL#'''' -- ASC_1_RESP_PLAN_TYPES
                ))),
                HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = COALESCE(HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,''''0''''),
                HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER= COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
                HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''''0''''),
                HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''''0''''),
                HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''''0'''')
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END

';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TRANSACTIONS_BDV.SP_CONV_LOADBDV_RDV_TRANSACTIONS_TO_BDV_WT_LINK_TRANSACTIONS(""ENV"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
TRUNC_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
TRUNC_QUERY := ''TRUNCATE TABLE DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_INVESTIA_UNIVERIS'';
INS_QUERY := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_INVESTIA_UNIVERIS(
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
HK_HUB_PARTY_ROLE_ADVISOR,
HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
HK_HUB_INVESTMENT_PRODUCT_TYPE,
HK_HUB_CONTRACT,
MD_START_DT,
MD_CREATION_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
TRANSACTION_ID,
UNIVERIS_CLIENT_ID,
MASTER_CODE,
UNIVERIS_PLAN_ID,
INVESTMENT_PRODUCT_ID,
PLN_MNEM,
TRADE_DATE,
GROSS_AMOUNT,
TRANSACTION_TYPE,
ORD_TRANSACTION_TYPE,
CASH_FLOW,
CASH_FLOW_TYPE,
ADMINISTRATORY_TYPE)
(SELECT
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
HK_HUB_PARTY_ROLE_ADVISOR,
HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,
HK_HUB_INVESTMENT_PRODUCT_TYPE,
HK_HUB_CONTRACT,
MD_START_DT,
MD_CREATION_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
TRANSACTION_ID,
UNIVERIS_CLIENT_ID,
MASTER_CODE,
UNIVERIS_PLAN_ID,
INVESTMENT_PRODUCT_ID,
PLN_MNEM,
TRADE_DATE,
GROSS_AMOUNT,
TRANSACTION_TYPE,
ORD_TRANSACTION_TYPE,
CASH_FLOW,
CASH_FLOW_TYPE,
ADMINISTRATORY_TYPE
FROM DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.VW_INITIAL_LOADING_INVESTIA_WT_TRANSLINK_FINANCIAL_TRANSACTION)'';

UPD_QUERY := ''UPDATE DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_INVESTIA_UNIVERIS
SET
HK_LINK=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''NULL''''), ''''|'''' ,
COALESCE(TRIM(TRANSACTION_ID), ''''NULL''''), ''''|'''' ,
COALESCE(TRIM(UNIVERIS_CLIENT_ID), ''''NULL''''), ''''|'''' ,
COALESCE(TRIM(MASTER_CODE), ''''NULL''''), ''''|'''' ,
''''NULL'''', ''''|'''',  -- CONTRACT_ID
COALESCE(TRIM(UNIVERIS_PLAN_ID), ''''NULL''''), ''''|'''',
COALESCE(TRIM(INVESTMENT_PRODUCT_ID), ''''NULL''''), ''''|'''' ,
COALESCE(TRIM(PLN_MNEM),''''NULL''''), ''''|'''' ,
''''NULL'''', ''''|'''', 
''''NULL'''', ''''|'''' , 
''''NULL'''' 
))),
HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = COALESCE(HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,''''0''''),
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER= COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''''0''''),
HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''''0''''),
HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''''0'''')
Where 1=1;'';


EXECUTE IMMEDIATE :TRUNC_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TRANSACTIONS_BDV.SP_CONV_LOADBDV_RDV_TRANSACTIONS_TO_BDV_WT_LINK_TRANSACTIONS(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION WHERE 1=1 '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION (
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	
,HK_HUB_PARTY_ROLE_ADVISOR
,HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES	
,HK_HUB_INVESTMENT_PRODUCT_TYPE
,HK_HUB_CONTRACT	
,MD_START_DT		
,MD_CREATION_DT	
,MD_SOURCE		
,MD_SRC_SYSTEM		
,MD_CREATION_AUDIT_ID	
,MD_EXTRACT_DT		
,TRANSACTION_ID		
,CLIENT_ID	
,MASTER_CODE	
,CONTRACT_ID	
,INVESTMENT_PRODUCT_ID		
,ACCOUNT_RAP_CODE		
,RETAIL_PLAN		
,TRAN_TRADING_NET_AMT		
,TRAN_TRADING_TRADE_DATE		
,TRAN_ENTRY_DESCRIPTION		
,TRAN_USER_DESCRIPTION		
,TRAN_PROCESS_DATE		
,TRAN_TXN_REFERENCE_ID		
,TRAN_TRADING_CURRENCY		
,TRAN_TRADING_GROSS_AMT		
,TRAN_QTY		
,EXCHANGERATE		
,TI_ISSUE_PRICE		
,STRIKE_PRICE		
,TI_UNDERLYING_CDN_PRICE		
,TI_UNDERLYING_USD_PRICE	
,TI_BASIS_POINT		
,TI_FACE_VALUE		
,TI_SYMBOL	
,COMMISSIONPCT		
,TRAN_TRADING_TYPE		
,ADMINISTRATORY_TYPE	
,A_C_ACCOUNT_CLASS		
,RETAIL_PLAN_RESP		
,TI_PRIMARY_MARKET		
,A_C_REPRESENTATIVE	
,ASC_1_RESP_PLAN_TYPES	
,DEPARTED_ADVISOR_IND	
,DEPARTED_ADVISOR_MASTER_CODE
,COMMISSIONPCT_ADVISOR
,COMMISSIONPCT_FINANCIAL )
SELECT
	bdv01.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	
	,bdv0.HK_HUB_PARTY_ROLE_ADVISOR	
	,bdv01.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES	
	,trdv.HK_HUB_INVESTMENT_PRODUCT_TYPE	
	,trdv.HK_HUB_CONTRACT	
	,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
	,CURRENT_TIMESTAMP	
	,trdv.MD_SOURCE	
	,trdv.MD_SRC_SYSTEM	
	,CURRENT_TIMESTAMP	
	,rdv.MD_EXTRACT_DT	
	,trdv.TRANSACTION_ID	
	,bdv01.CLIENT_ID	
	,bdv0.MASTER_CODE	
	,trdv.CONTRACT_ID	
	,trdv.INVESTMENT_PRODUCT_ID	
	,bdv01.ACCOUNT_RAP_CODE	
	,bdv01.RETAIL_PLAN	
	,rdv.TRAN_TRADING_NET_AMT	
	,rdv.TRAN_TRADING_TRADE_DATE	
	,rdv.TRAN_ENTRY_DESCRIPTION	
	,rdv.TRAN_USER_DESCRIPTION	
	,rdv.TRAN_PROCESS_DATE	
	,rdv.TRAN_TXN_REFERENCE_ID	
	,rdv.TRAN_TRADING_CURRENCY	
	,rdv.TRAN_TRADING_GROSS_AMT	
	,rdv.TRAN_QTY	
	,sbdv2.EXCHANGERATE	
	,rdv.TI_ISSUE_PRICE	
	,rdv.STRIKE_PRICE	
	,rdv.TI_UNDERLYING_CDN_PRICE	
	,rdv.TI_UNDERLYING_USD_PRICE	
	,rdv.TI_BASIS_POINT	
	,rdv.TI_FACE_VALUE	
	,rdv.TI_SYMBOL	
	,bdv0.COMMISSIONPCT	
	,rdv.TRAN_TRADING_TYPE	
	,bdv01.ADMINISTRATOR_TYPE	
	,bdv01.A_C_ACCOUNT_CLASS	
	,bdv01.RETAIL_PLAN_RESP	
	,rdv.TI_PRIMARY_MARKET	
	,trdv.REGISTERED_REPRESENTATIVE_ID	
	,bdv01.ASC_1_RESP_PLAN_TYPES	
	,CASE WHEN sbdv02.REP_CODE IS NULL THEN 0 ELSE 1 END
	,sbdv02.MASTER_CODE
	,bdv0.COMMISSIONPCT_ADVISOR
	,bdv0.COMMISSIONPCT_FINANCIAL
	FROM (
	SELECT *
			FROM DB_IAW_''||ENV||''_DWH.TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_NBIN_IAVMBK WHERE MD_START_DT = TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD''''))rdv 
		JOIN DB_IAW_''||ENV||''_DWH.TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR trdv 
		ON rdv.HK_LINK = trdv.HK_LINK
		LEFT JOIN
		(
			SELECT bdv2.HK_HUB_PARTY_ROLE_ADVISOR, bdv2.MASTER_CODE,bdv2.HK_HUB_REGISTERED_REPRESENTATIVE, sbdv.COMMISSIONPCT, sbdv.COMMISSIONPCT_ADVISOR, sbdv.COMMISSIONPCT_FINANCIAL
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE
				) sbdv
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_LINK ORDER BY MD_START_DT DESC
							) RN
					FROM DB_IAW_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_SHARE 
                    WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
					) SATHUB
				WHERE SATHUB.RN = 1 
				) bdvcv ON bdvcv.HK_LINK = sbdv.HK_LINK AND bdvcv.MD_START_DT = sbdv.MD_START_DT
			JOIN DB_IAW_''||ENV||''_DWH.SHARED_BDV.LINK_PARTY_RELATIONSHIP_SHARE bdv2 ON bdv2.HK_LINK = sbdv.HK_LINK
			WHERE sbdv.MD_ACTIVE = ''''A'''' AND sbdv.MD_SRC_SYSTEM = ''''IAS''''
		)bdv0 ON bdv0.HK_HUB_REGISTERED_REPRESENTATIVE = trdv.HK_HUB_REGISTERED_REPRESENTATIVE 
	 	LEFT JOIN
		(
			SELECT rdv2.ADMINISTRATOR_TYPE, rdv2.A_C_ACCOUNT_CLASS, rdv2.RETAIL_PLAN_RESP, bdv.*
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_IAS_NBIN
				) rdv2
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN1
					FROM DB_IAW_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_IAS_NBIN
                    WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
					) SATHUB1
				WHERE SATHUB1.RN1 = 1 
				) rdv2lv ON rdv2lv.HK_HUB = rdv2.HK_HUB AND rdv2lv.MD_START_DT = rdv2.MD_START_DT
			JOIN DB_IAW_''||ENV||''_DWH.SHARED_BDV.LINK_INVESTMENT_CONTRACT bdv ON bdv.HK_HUB_CONTRACT = rdv2.HK_HUB
			WHERE rdv2.MD_ACTIVE = ''''A''''
		)bdv01 ON trdv.HK_HUB_CONTRACT = bdv01.HK_HUB_CONTRACT AND bdv0.HK_HUB_PARTY_ROLE_ADVISOR = bdv01.HK_HUB_PARTY_ROLE_ADVISOR
		LEFT JOIN DB_IAW_''||ENV||''_DWH.SHARED_BDV.TRANSLINK_EXCHANGE_RATE sbdv2 ON sbdv2.EXCHANGE_DATE = rdv.TRAN_TRADING_TRADE_DATE
		LEFT JOIN
		(
			SELECT sbdv3.MASTER_CODE, sbdv3.REP_CODE
			FROM (
				SELECT *
				FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.SAT_LINK_SERVICING_CODES
				) ssbdv3
			JOIN (
				SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_LINK ORDER BY MD_START_DT DESC
							) RN2
					FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.SAT_LINK_SERVICING_CODES
                    WHERE MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')
					) SATHUB2
				WHERE SATHUB2.RN2 = 1 
				) ssbdv4 ON ssbdv4.HK_LINK = ssbdv3.HK_LINK AND ssbdv4.MD_START_DT = ssbdv3.MD_START_DT
			JOIN DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.LINK_SERVICING_CODES sbdv3 ON sbdv3.HK_LINK = ssbdv3.HK_LINK
			WHERE ssbdv3.MD_ACTIVE = ''''A'''' AND ssbdv3.REP_ROW_NUM = 1
			GROUP BY 2,1
		)sbdv02 ON trdv.REGISTERED_REPRESENTATIVE_ID = sbdv02.REP_CODE
		WHERE rdv.MD_ACTIVE = ''''A''''	
			 '';
INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION
SET 
	HK_LINK=
	SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,
	COALESCE(TRIM(TRANSACTION_ID), ''''#NULL#''''), ''''|'''' ,
	COALESCE(TRIM(CLIENT_ID), ''''#NULL#''''), ''''|'''' ,
	COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' ,
	COALESCE(TRIM(CONTRACT_ID), ''''#NULL#''''), ''''|'''' ,
	''''#NULL#'''', ''''|'''', -- UNIVERIS_PLAN_ID
	COALESCE(TRIM(INVESTMENT_PRODUCT_ID), ''''#NULL#''''), ''''|'''' ,
	''''#NULL#'''', ''''|'''', -- PLN_MNEM
	COALESCE(TRIM(ACCOUNT_RAP_CODE), ''''#NULL#''''), ''''|'''' ,
	COALESCE(TRIM(RETAIL_PLAN),''''#NULL#''''), ''''|'''',
	COALESCE(TRIM(ASC_1_RESP_PLAN_TYPES),''''#NULL#'''')
	))),
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = DECODE(TRUE, ASC_1_RESP_PLAN_TYPES IS NULL AND RETAIL_PLAN IS NULL AND ACCOUNT_RAP_CODE IS NULL ,''''0'''',
	SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#'''') ,''''|'''', ''''#NULL#'''',''''|'''',COALESCE(TRIM(ACCOUNT_RAP_CODE),''''#NULL#''''), ''''|'''',  COALESCE(TRIM(RETAIL_PLAN),''''#NULL#''''),''''|'''',
	COALESCE(TRIM(CASE WHEN ACCOUNT_RAP_CODE <> ''''Z'''' THEN NULL ELSE ASC_1_RESP_PLAN_TYPES END),''''#NULL#''''))))),
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER= COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
	HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''''0''''),
	HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''''0''''),
	HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''''0'''')
WHERE 1=1;
		'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TRANSACTIONS_BDV.SP_CONV_LOADBDV_RDV_TRANSACTIONS_TO_BDV_WT_LINK_TRANSACTIONS_IAPW(""ENV"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION WHERE 1=1; '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION (
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	
,HK_HUB_PARTY_ROLE_ADVISOR	
,HK_HUB_INVESTMENT_PRODUCT_TYPE		
,HK_HUB_CONTRACT	
,MD_START_DT	
,MD_CREATION_DT		
,MD_SOURCE		
,MD_SRC_SYSTEM		
,MD_CREATION_AUDIT_ID		
,MD_EXTRACT_DT		
,TRANSACTION_ID	
,CLIENT_ID		
,MASTER_CODE		
,CONTRACT_ID		
,INVESTMENT_PRODUCT_ID		
,ACCOUNT_RAP_CODE		
,RETAIL_PLAN		
,TRAN_TRADING_NET_AMT		
,TRAN_TRADING_TRADE_DATE	
,TRAN_ENTRY_DESCRIPTION		
,TRAN_USER_DESCRIPTION		
,TRAN_PROCESS_DATE		
,TRAN_TXN_REFERENCE_ID	
,TRAN_TRADING_CURRENCY		
,TRAN_TRADING_GROSS_AMT		
,TRAN_QTY	
,EXCHANGERATE		
,TI_ISSUE_PRICE		
,STRIKE_PRICE		
,TI_UNDERLYING_CDN_PRICE	
,TI_UNDERLYING_USD_PRICE		
,TI_BASIS_POINT		
,TI_FACE_VALUE		
,TI_SYMBOL	
,COMMISSIONPCT		
,TRAN_TRADING_TYPE		
,ADMINISTRATORY_TYPE		
,A_C_ACCOUNT_CLASS		
,RETAIL_PLAN_RESP		
,TI_PRIMARY_MARKET	
,A_C_REPRESENTATIVE		
,ASC_1_RESP_PLAN_TYPES )
SELECT src.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	
	,src.HK_HUB_PARTY_ROLE_ADVISOR	
	,src.HK_HUB_INVESTMENT_PRODUCT_TYPE	
	,src.HK_HUB_CONTRACT	
	,src.MD_START_DT	
	,src.MD_CREATION_DT	
	,src.MD_SOURCE	
	,src.MD_SRC_SYSTEM	
	,src.MD_CREATION_AUDIT_ID	
	,src.MD_EXTRACT_DT	
	,src.TRANSACTION_ID
	,src.CLIENT_ID	
	,src.MASTER_CODE	
	,src.CONTRACT_ID	
	,src.INVESTMENT_PRODUCT_ID	
	,src.ACCOUNT_RAP_CODE	
	,src.RETAIL_PLAN	
	,src.TRAN_TRADING_NET_AMT	
	,src.TRAN_TRADING_TRADE_DATE	
	,src.TRAN_ENTRY_DESCRIPTION	
	,src.TRAN_USER_DESCRIPTION	
	,src.TRAN_PROCESS_DATE	
	,src.TRAN_TXN_REFERENCE_ID
	,src.TRAN_TRADING_CURRENCY	
	,src.TRAN_TRADING_GROSS_AMT	
	,src.TRAN_QTY	
	,src.EXCHANGERATE	
	,src.TI_ISSUE_PRICE	
	,src.STRIKE_PRICE	
	,src.TI_UNDERLYING_CDN_PRICE	
	,src.TI_UNDERLYING_USD_PRICE	
	,src.TI_BASIS_POINT	
	,src.TI_FACE_VALUE	
	,src.TI_SYMBOL
	,src.COMMISSIONPCT	
	,src.TRAN_TRADING_TYPE	
	,src.ADMINISTRATORY_TYPE	
	,src.A_C_ACCOUNT_CLASS	
	,src.RETAIL_PLAN_RESP	
	,src.TI_PRIMARY_MARKET	
	,src.A_C_REPRESENTATIVE	
	,src.ASC_1_RESP_PLAN_TYPES
	FROM DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.VW_INITIAL_LOADING_WT_TRANSLINK_FINANCIAL_TRANSACTION src	
              '';
INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_TRANSLINK_FINANCIAL_TRANSACTION
SET 
	HK_LINK=
		SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , 
		COALESCE(TRIM(TRANSACTION_ID), ''''#NULL#''''), ''''|'''' , 
		COALESCE(TRIM(CLIENT_ID), ''''#NULL#''''), ''''|'''' , 
		COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' ,
		COALESCE(TRIM(CONTRACT_ID), ''''#NULL#''''), ''''|'''' , 
		''''#NULL#'''', ''''|'''', -- UNIVERIS_PLAN_ID
		COALESCE(TRIM(INVESTMENT_PRODUCT_ID), ''''#NULL#''''), ''''|'''' , 
		''''#NULL#'''', ''''|'''', -- PLN_MNEM
		COALESCE(TRIM(ACCOUNT_RAP_CODE), ''''#NULL#''''), ''''|'''' , 
		COALESCE(TRIM(RETAIL_PLAN),''''#NULL#''''), ''''|'''', 
		COALESCE(TRIM(ASC_1_RESP_PLAN_TYPES),''''#NULL#'''')
		))),
		HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = DECODE(TRUE, ASC_1_RESP_PLAN_TYPES IS NULL AND RETAIL_PLAN IS NULL AND ACCOUNT_RAP_CODE IS NULL ,''''0'''', 
		SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#'''') ,''''|'''', ''''#NULL#'''',''''|'''',COALESCE(TRIM(ACCOUNT_RAP_CODE),''''#NULL#''''), ''''|'''',  COALESCE(TRIM(RETAIL_PLAN),''''#NULL#''''),''''|'''', 
		COALESCE(TRIM(CASE WHEN ACCOUNT_RAP_CODE <> ''''Z'''' THEN NULL ELSE ASC_1_RESP_PLAN_TYPES END),''''#NULL#''''))))),
		HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER= COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
		HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''''0''''),
		HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''''0''''),
		HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''''0'''')
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TRANSACTIONS_BDV.SP_CONV_LOADBDV_RDV_TRANSACTIONS_TO_BDV_WT_LINK_TRANSACTIONS_UNIVERIS(""ENV"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_UNIVERIS WHERE 1=1 '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_UNIVERIS (
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER		
,HK_HUB_PARTY_ROLE_ADVISOR		
,HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES	
,HK_HUB_INVESTMENT_PRODUCT_TYPE		
,HK_HUB_CONTRACT	
,MD_START_DT		
,MD_CREATION_DT		
,MD_SOURCE		
,MD_SRC_SYSTEM		
,MD_EXTRACT_DT		
,TRANSACTION_ID		
,UNIVERIS_CLIENT_ID		
,MASTER_CODE		
,UNIVERIS_PLAN_ID	
,INVESTMENT_PRODUCT_ID		
,PLN_MNEM		
,TRADE_DATE	
,GROSS_AMOUNT		
,TRANSACTION_TYPE		
,ORD_TRANSACTION_TYPE		
,CASH_FLOW		
,CASH_FLOW_TYPE		
,ADMINISTRATORY_TYPE )
SELECT src.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER	
,src.HK_HUB_PARTY_ROLE_ADVISOR	
,src.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES	
,src.HK_HUB_INVESTMENT_PRODUCT_TYPE	
,src.HK_HUB_CONTRACT	
,src.MD_START_DT	
,src.MD_CREATION_DT	
,src.MD_SOURCE	
,src.MD_SRC_SYSTEM	
,src.MD_EXTRACT_DT	
,src.TRANSACTION_ID	
,src.UNIVERIS_CLIENT_ID	
,src.MASTER_CODE	
,src.UNIVERIS_PLAN_ID
,src.INVESTMENT_PRODUCT_ID	
,src.PLN_MNEM	
,src.TRADE_DATE	
,src.GROSS_AMOUNT	
,src.TRANSACTION_TYPE	
,src.ORD_TRANSACTION_TYPE	
,src.CASH_FLOW	
,src.CASH_FLOW_TYPE	
,src.ADMINISTRATORY_TYPE
	FROM DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.VW_INITIAL_UNI_LOADING_WT_TRANSLINK_FINANCIAL_TRANSACTION src
             '';
INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_UNIVERIS
SET 
	HK_LINK=
	SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , 
	COALESCE(TRIM(TRANSACTION_ID), ''''#NULL#''''), ''''|'''' , 
	COALESCE(TRIM(UNIVERIS_CLIENT_ID), ''''#NULL#''''), ''''|'''' , 
	COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' , 
	''''#NULL#'''', ''''|'''',  -- CONTRACT_ID
	COALESCE(TRIM(UNIVERIS_PLAN_ID), ''''#NULL#''''), ''''|'''',
	COALESCE(TRIM(INVESTMENT_PRODUCT_ID), ''''#NULL#''''), ''''|'''' ,  
	COALESCE(TRIM(PLN_MNEM),''''#NULL#''''), ''''|'''' , 
	''''#NULL#'''', ''''|'''', -- ACCOUNT_RAP_CODE
	''''#NULL#'''', ''''|'''' , -- RETAIL_PLAN
	''''#NULL#'''' -- ASC_1_RESP_PLAN_TYPES
	))),
	HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = COALESCE(HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,''''0''''),
	HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER= COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
	HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''''0''''),
	HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''''0''''),
	HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''''0'''')
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE FUNCTION DB_IAW_PROD_DWH.TRANSACTIONS_BDV.UF_IAW_GET_CLOSEST_PRICE_DATE(""MARKET_P"" VARCHAR(16777216), ""SYMBOL_P"" VARCHAR(16777216), ""TRADE_DATE"" DATE)
RETURNS DATE
LANGUAGE SQL
AS 'SELECT MAX(P.PROCESSDATE) 
FROM TRANSACTIONS_RDV.TRANSLINK_POSITION_PRICE_IAS_IAVM P 
WHERE P.PROCESSDATE <= TRADE_DATE 
AND P.MARKET = MARKET_P 
AND P.SYMBOL = SYMBOL_P';
create or replace schema DB_IAW_PROD_DWH.TRANSACTIONS_RDV;

create or replace TABLE DB_IAW_PROD_DWH.TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
	HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
	HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	TRANSACTION_ID VARCHAR(100) COMMENT 'The ID of the transaction',
	CONTRACT_ID VARCHAR(100) COMMENT 'Account ID',
	REGISTERED_REPRESENTATIVE_ID VARCHAR(50) COMMENT 'Advisor RR code',
	INVESTMENT_PRODUCT_ID VARCHAR(50) COMMENT 'Financial product ID',
	UNIVERIS_PLAN_ID NUMBER(38,0) COMMENT 'Univeris Plan ID',
	UNIVERIS_CLIENT_ID NUMBER(38,0) COMMENT 'Univeris Client ID'
);
create or replace TABLE DB_IAW_PROD_DWH.TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_NBIN_IAVMBK (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
	TRAN_ENTRY_DESCRIPTION VARCHAR(50) COMMENT 'Description of the trading',
	TRAN_USER_DESCRIPTION VARCHAR(50) COMMENT 'Description of the trading',
	TRAN_TRADING_TYPE VARCHAR(10) COMMENT 'Type of the trading : Sell, Buy,...',
	TRAN_TRADING_GROSS_AMT NUMBER(38,2) COMMENT 'Transaction gross amount in CAD or USD',
	TRAN_TRADING_CURRENCY VARCHAR(10) COMMENT 'Transaction amounts currency',
	TRAN_TRADING_NET_AMT NUMBER(38,2) COMMENT 'Transaction net amount in CAD or USD',
	TRAN_TRADING_TRADE_DATE DATE COMMENT 'Trade date',
	TRAN_TRADING_SETT_DATE DATE COMMENT 'Settlement date',
	TRAN_PROCESS_DATE DATE COMMENT 'Process date',
	TI_SYMBOL VARCHAR(50) COMMENT 'Product symbol',
	TRAN_QTY NUMBER(38,4) COMMENT 'Quantity',
	TI_PRIMARY_MARKET VARCHAR(50) COMMENT 'Primary market',
	TRAN_TXN_REFERENCE_ID VARCHAR(50) COMMENT 'Tax reference ID',
	TRAN_AMOUNT_2 NUMBER(38,2) COMMENT 'Transaction amount 2',
	TI_UNDERLYING_CDN_PRICE NUMBER(38,8) COMMENT 'TI Underlying CDN Price, this field and above fields were added for OG calculation',
	TI_BASIS_POINT NUMBER(38,5) COMMENT 'TI Basis Point',
	TI_FACE_VALUE NUMBER(38,5) COMMENT 'TI Face Value',
	TI_ISSUE_PRICE NUMBER(38,5) COMMENT 'TI Issue Price',
	STRIKE_PRICE NUMBER(38,8) COMMENT 'STRIKE PRICE',
	TI_UNDERLYING_USD_PRICE NUMBER(38,8) COMMENT 'TI Underlying USD Price'
);
create or replace TABLE DB_IAW_PROD_DWH.TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_IAS_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	REP_SYSID NUMBER(38,0) COMMENT 'Representative ID',
	ACT_SYSID NUMBER(38,0) COMMENT 'Holding system ID',
	TRX_STATUS VARCHAR(2) COMMENT 'Transaction status code',
	TRX_ST_DESC_ENG VARCHAR(40) COMMENT 'Transaction status description',
	TRADE_DT TIMESTAMP_NTZ(9) COMMENT 'Trade date',
	MGT_CD VARCHAR(5) COMMENT 'Management company code',
	MGT_NAME_ENG VARCHAR(60) COMMENT 'Management company name',
	DLR_SYSID NUMBER(38,0) COMMENT 'Dealer ID',
	RGN_SYSID NUMBER(38,0) COMMENT 'Region ID',
	BRN_SYSID NUMBER(38,0) COMMENT 'Branch ID',
	TRX_UNIT NUMBER(38,0) COMMENT 'Transaction quantity',
	TRX_PRICE NUMBER(38,0) COMMENT 'Transaction unit price',
	TRX_GROSS NUMBER(29,12) COMMENT 'Transaction gross amount',
	TRX_NET NUMBER(29,12) COMMENT 'Transaction net amount',
	TRX_GROSS_CAD NUMBER(29,12) COMMENT 'Transaction gross amount CAD',
	SPR_FACTOR NUMBER(3,0) COMMENT 'Transaction sign (IN or OUT)',
	CURRENCY_CD VARCHAR(3) COMMENT 'Currency code',
	DLR_CD VARCHAR(5) COMMENT 'Dealer code',
	RGN_CD VARCHAR(5) COMMENT 'Region code',
	BRN_CD VARCHAR(5) COMMENT 'Branch code',
	REP_CD VARCHAR(5) COMMENT 'Representative code',
	PLN_TYPE VARCHAR(2) COMMENT 'Plan Type',
	SPR_CTGY VARCHAR(3) COMMENT 'Transaction category',
	TRX_MNEM_ENG VARCHAR(10) COMMENT 'Transaction mnemonic name',
	REVERSAL_IND NUMBER(1,0) COMMENT 'Transaction reversed indicator'
);
create or replace TABLE DB_IAW_PROD_DWH.TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_INVESTIA_UNIVERIS (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Hub',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	MD_ACTIVE VARCHAR(1) COMMENT 'Active Flag, \""A\"" row exists in the source, \""D\"" row does not exist in the source',
	REP_SYSID NUMBER(38,0) COMMENT 'Representative ID',
	ACT_SYSID NUMBER(38,0) COMMENT 'Holding system ID',
	TRX_STATUS VARCHAR(4) COMMENT 'Transaction status code',
	TRX_ST_DESC_ENG VARCHAR(40) COMMENT 'Transaction status description',
	TRADE_DT TIMESTAMP_NTZ(9) COMMENT 'Trade date',
	MGT_CD VARCHAR(10) COMMENT 'Management company code',
	MGT_NAME_ENG VARCHAR(60) COMMENT 'Management company name',
	DLR_SYSID NUMBER(38,0) COMMENT 'Dealer ID',
	RGN_SYSID NUMBER(38,0) COMMENT 'Region ID',
	BRN_SYSID NUMBER(38,0) COMMENT 'Branch ID',
	TRX_UNIT NUMBER(38,0) COMMENT 'Transaction quantity',
	TRX_PRICE NUMBER(38,0) COMMENT 'Transaction unit price',
	TRX_GROSS NUMBER(29,12) COMMENT 'Transaction gross amount',
	TRX_NET NUMBER(29,12) COMMENT 'Transaction net amount',
	TRX_GROSS_CAD NUMBER(29,12) COMMENT 'Transaction gross amount CAD',
	SPR_FACTOR NUMBER(3,0) COMMENT 'Transaction sign (IN or OUT)',
	CURRENCY_CD VARCHAR(6) COMMENT 'Currency code',
	DLR_CD VARCHAR(10) COMMENT 'Dealer code',
	RGN_CD VARCHAR(10) COMMENT 'Region code',
	BRN_CD VARCHAR(10) COMMENT 'Branch code',
	REP_CD VARCHAR(10) COMMENT 'Representative code',
	PLN_TYPE VARCHAR(4) COMMENT 'Plan Type',
	SPR_CTGY VARCHAR(6) COMMENT 'Transaction category',
	TRX_MNEM_ENG VARCHAR(20) COMMENT 'Transaction mnemonic name',
	REVERSAL_IND NUMBER(1,0) COMMENT 'Transaction reversed indicator'
);
create or replace TABLE DB_IAW_PROD_DWH.TRANSACTIONS_RDV.TRANSLINK_POSITION_PRICE_IAS_IAVM (
	HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
	MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
	MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
	MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
	MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
	MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
	MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
	PROCESSDATE DATE NOT NULL COMMENT 'Process Date',
	UNITOFMEASURE NUMBER(11,0) COMMENT 'Unit Of Measure',
	PRICE NUMBER(38,8) COMMENT 'Price',
	SYMBOL VARCHAR(26) COMMENT 'SECURITY_SYMBOL',
	MARKET VARCHAR(12) COMMENT 'Market',
	ACCOUNTID VARCHAR(18) COMMENT 'Account ID',
	CLOSEPRICE NUMBER(38,8) COMMENT 'Close Price',
	PRICECURRENCY VARCHAR(3) COMMENT 'Price Currency',
	BIDPRICE NUMBER(38,8) COMMENT 'Bid Price',
	ASKPRICE NUMBER(38,8) COMMENT 'Ask Price'
);
CREATE OR REPLACE PROCEDURE DB_IAW_PROD_DWH.TRANSACTIONS_RDV.SP_CONV_LOADBDV_RDV_MAP_OPER_TYPE_TO_BDV_WT_REF_MAPP_OPER_TYPE(""ENV"" VARCHAR(1000), ""I_DATA_START_DATE"" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH_TRANSACTIONS_BDV.WT_REF_MAPPING_OPER_TYPE WHERE 1=1'';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_DWH_TRANSACTIONS_BDV.WT_REF_MAPPING_OPER_TYPE 
(	HK_HUB,
	MD_CREATION_DT,
	MD_CREATION_AUDIT_ID,
	MD_SOURCE,
	MD_SAT_SYSTEM,
	MD_EXTRACT_DT,
	IBMSOURCE,
	LEVEL,
	MD_START_DT,
	DESCRIPTION_EN,
	DESCRIPTION_SHORT_EN,
	DESCRIPTION_FR,
	DESCRIPTION_SHORT_FR,
	OPERATION_TYPE,
	DISPLAY,
	CASHFLOW_SUMMARY,
	ISCASHFLOW 
)
SELECT
	HUB.HK_HUB,
	SAT.MD_SOURCE,
	SAT.MD_SRC_SYSTEM,
	SAT.MD_EXTRACT_DT,
	HUB.IBMSOURCE,
	HUB.LEVEL
	TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')
	SAT.DESCRIPTION_EN,
	SAT.DESCRIPTION_SHORT_EN,
	SAT.DESCRIPTION_FR,
	SAT.DESCRIPTION_SHORT_FR,
	SAT.OPERATION_TYPE,
	SAT.DISPLAY,
	SAT.CASHFLOW_SUMMARY,
	SAT.ISCASHFLOW
FROM (
	SELECT * 
			FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.SAT_REF_MAPPING_OPER_TYPE_IAS SAT
		LEFT JOIN
		(SELECT *
				FROM (
					SELECT *
						,ROW_NUMBER() OVER (
							PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
							) RN
					FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.SAT_REF_MAPPING_OPER_TYPE_IAS
					) SATHUB
				WHERE SATHUB.RN = 1 AND SATHUB.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') 
		)LV ON LV.HK_HUB = SAT.HK_HUB
	LEFT JOIN DB_IAW_''||ENV||''_DWH.STEWARDSHIP_RDV.REF_MAPPING_OPER_TYPE HUB ON SAT.HK_HUB = HUB.HK_HUB 
	WHERE SAT.MD_ACTIVE = ''''A''''
              '';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
END
';"
