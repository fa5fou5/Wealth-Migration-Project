-- Update: 2023-02-14
-- Query: SELECT GET_DDL('DATABASE', 'DB_IAW_DEV_STG', TRUE);

create or replace database DB_IAW_DEV_STG;

create or replace schema DB_IAW_DEV_STG.A_AAZAM;

create or replace sequence DB_IAW_DEV_STG.A_AAZAM.TT start with 2200 increment by 1;
create or replace TABLE DB_IAW_DEV_STG.A_AAZAM.CONTRACT (
  HK_HUB VARCHAR(40),
  MD_START_DT TIMESTAMP_NTZ(9),
  MD_HASHDIFF VARCHAR(40),
  MD_CREATION_DT TIMESTAMP_NTZ(9),
  MD_SOURCE VARCHAR(1000),
  MD_SRC_SYSTEM VARCHAR(100),
  MD_EXTRACT_DT TIMESTAMP_NTZ(9),
  A_C_ID VARCHAR(18),
  A_C_CLIENT VARCHAR(20),
  A_C_REPRESENTATIVE VARCHAR(4),
  ADMINISTRATOR_TYPE VARCHAR(100),
  A_C_OPEN_DATE DATE,
  A_C_CLOSING_DATE DATE,
  A_C_ACCOUNT_CLASS VARCHAR(3),
  RETAIL_PLAN VARCHAR(4),
  RETAIL_PLAN_RESP VARCHAR(1),
  ACCOUNT_RAP_CODE VARCHAR(1),
  ASC_3_MANAGED_TYPE VARCHAR(1),
  A_C_SPECIAL_TAG VARCHAR(20),
  ASC_1_RESP_PLAN_TYPES VARCHAR(1),
  A_C_CURRENCY VARCHAR(10),
  IVT_OBJ_CDE VARCHAR(15),
  RISK_TOLERANCE VARCHAR(15)
);
create or replace TABLE DB_IAW_DEV_STG.A_AAZAM.CONTRACT_TRG (
  HK_HUB VARCHAR(40),
  MD_START_DT TIMESTAMP_NTZ(9),
  MD_HASHDIFF VARCHAR(40),
  MD_CREATION_DT TIMESTAMP_NTZ(9),
  MD_SOURCE VARCHAR(1000),
  MD_SRC_SYSTEM VARCHAR(100),
  MD_EXTRACT_DT TIMESTAMP_NTZ(9),
  A_C_ID VARCHAR(18),
  A_C_CLIENT VARCHAR(20),
  A_C_REPRESENTATIVE VARCHAR(4),
  ADMINISTRATOR_TYPE VARCHAR(100),
  A_C_OPEN_DATE DATE,
  A_C_CLOSING_DATE DATE,
  A_C_ACCOUNT_CLASS VARCHAR(3),
  RETAIL_PLAN VARCHAR(4),
  RETAIL_PLAN_RESP VARCHAR(1),
  ACCOUNT_RAP_CODE VARCHAR(1),
  ASC_3_MANAGED_TYPE VARCHAR(1),
  A_C_SPECIAL_TAG VARCHAR(20),
  ASC_1_RESP_PLAN_TYPES VARCHAR(1),
  A_C_CURRENCY VARCHAR(10),
  IVT_OBJ_CDE VARCHAR(15),
  RISK_TOLERANCE VARCHAR(15)
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.A_AAZAM.REVENUES (
  HK_LINK VARCHAR(40) COMMENT 'Hash of the business keys',
  HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for registered representative',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  TRANSID NUMBER(38,0) COMMENT 'Transaction ID',
  EXTTRANSID VARCHAR(20) COMMENT 'Extended transaction ID',
  PROCESSDATE DATE COMMENT 'Process date',
  TRANSDATE TIMESTAMP_NTZ(9) COMMENT 'Transaction date',
  SOURCECODE VARCHAR(24) COMMENT 'Source code / Transaction type',
  CANCELIND NUMBER(38,0) COMMENT 'Cancel indicator',
  REPID VARCHAR(24) COMMENT 'Representative ID',
  CURRENCY VARCHAR(6) COMMENT 'transaction currency',
  EXCHANGERATE NUMBER(38,2) COMMENT 'the exchange rate used for the transaction',
  ENTRY_TYPE VARCHAR(24) COMMENT 'entry type = insurance revenue',
  COMMISSION NUMBER(38,2) COMMENT 'Representative gross commission',
  COMMISSIONCAD NUMBER(38,2) COMMENT 'Representative gross commission in CAD',
  OVERRIDEIND NUMBER(38,0) COMMENT 'Override indicator',
  ACCURATEIND NUMBER(38,0) COMMENT 'Accuracy indicator',
  DESCRIPTION VARCHAR(250) COMMENT 'Description',
  NUMBEROFORDERS NUMBER(38,0) COMMENT 'Number of orders',
  NETCOMMISSION NUMBER(38,2) COMMENT 'Representative net commission',
  TRANSFEE NUMBER(38,2) COMMENT 'Representative transaction fees',
  SHAREIND NUMBER(38,0) COMMENT 'Share indicator',
  AFFECTGROSSCOMMIND NUMBER(38,0) COMMENT 'Affect gross commission Indicator',
  REVENUEONLYIND NUMBER(38,0) COMMENT 'Revenu Only Indicator',
  NOTE VARCHAR(250) COMMENT 'Notes',
  REVNO VARCHAR(250) COMMENT 'Revision number',
  STAMP DATE COMMENT 'Record insertion date',
  USERID VARCHAR(250) COMMENT 'User ID',
  PROGRAM_TYPE VARCHAR(512) COMMENT 'Program type of the account',
  ACCOUNTID VARCHAR(100) COMMENT 'Account ID',
  QUANTITY NUMBER(38,0) COMMENT 'Transaction quantity',
  TRANSTYPE VARCHAR(10) COMMENT 'Transaction Type ([B]uy/[S]ell) / BUY_SELL_INDICATOR'
);
create or replace TABLE DB_IAW_DEV_STG.A_AAZAM.TEMP_TAB (
  ID NUMBER(38,0) autoincrement,
  EMPNAME VARCHAR(100)
);
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.A_AAZAM.CSV_UTF8
  TYPE = csv
  FIELD_DELIMITER = ';'
  SKIP_HEADER = 1
  NULL_IF = ()
;
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.A_AAZAM.SP_CONV_LOADSTG_PSA_IAS_COMMISSION_TO_STG_REVENUES("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.A_AAZAM.REVENUES WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.A_AAZAM.REVENUES
(
MD_START_DT, 
MD_SOURCE,
  TRANSID, 
  EXTTRANSID, 
  PROCESSDATE, 
  TRANSDATE, 
  SOURCECODE, 
  CANCELIND, 
  REPID, 
  CURRENCY, 
  EXCHANGERATE, 
  ENTRY_TYPE, 
  COMMISSION, 
  COMMISSIONCAD, 
  OVERRIDEIND, 
  ACCURATEIND, 
  DESCRIPTION, 
  NUMBEROFORDERS, 
  NETCOMMISSION, 
  TRANSFEE, 
  SHAREIND, 
  AFFECTGROSSCOMMIND, 
  REVENUEONLYIND, 
  NOTE, 
  REVNO, 
  STAMP, 
  USERID,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  PROGRAM_TYPE,
  ACCOUNTID,
  QUANTITY,
  TRANSTYPE
) 
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,t.$11,t.$12,t.$13,t.$14,t.$15,t.$16,t.$17,t.$18,t.$19,t.$20,t.$21,t.$22,t.$23,t.$24,t.$25,t.$26,t.$27,t.$28,t.$29,t.$30,t.$31
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern =''''.*REVENUES_.*csv'''' file_format=(format_name= DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
  '';
   INS_UPDATE := ''
UPDATE DB_IAW_''''||ENV||''''_STG.A_AAZAM.REVENUES 
SET 
HK_LINK= SHA1(UPPER(
           CONCAT(
       COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' ,
       COALESCE(TRIM(REPID), ''''#NULL#''''), ''''|'''' ,
       COALESCE(TRIM(PROGRAM_TYPE), ''''#NULL#''''), ''''|'''' ,
       COALESCE(TRIM(ACCOUNTID), ''''#NULL#''''), ''''|'''' ,
       COALESCE(TRIM(TO_VARCHAR(PROCESSDATE)), ''''#NULL#''''), ''''|'''' , 
       COALESCE(TRIM(SOURCECODE), ''''#NULL#''''), ''''|'''' ,
       COALESCE(TRIM(QUANTITY), ''''#NULL#''''), ''''|'''' ,
       COALESCE(TRIM(TRANSTYPE), ''''#NULL#'''') , ''''|'''' ,
       COALESCE(TRIM(ENTRY_TYPE), ''''#NULL#''''), ''''|'''' ,
       COALESCE(TRIM(TO_VARCHAR(STAMP)), ''''#NULL#'''') 
       ))),
HK_HUB_CONTRACT=DECODE(TRUE, ACCOUNTID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''),''''#NULL#''''),''''|'''',COALESCE(TRIM(ACCOUNTID),''''#NULL#''''),''''|'''', ''''#NULL#'''' ,''''|'''', ''''#NULL#'''' )))),
HK_HUB_REGISTERED_REPRESENTATIVE=DECODE(TRUE, REPID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REPID), ''''#NULL#''''))))),
MD_CREATION_DT=systimestamp(),
MD_START_DT = DATEADD(DAY, 1,STAMP)
Where 1=1'';
        
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.A_AAZAM.SP_CONV_LOADSTG_PSA_IAS_NBIN_TO_STG_CONTRACT("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.A_AAZAM.CONTRACT WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.A_AAZAM.CONTRACT (
    MD_START_DT
  , MD_SOURCE
  , A_C_ID
  , A_C_CLIENT
  , A_C_REPRESENTATIVE
  , ADMINISTRATOR_TYPE
  , A_C_OPEN_DATE
  , A_C_CLOSING_DATE
  , A_C_ACCOUNT_CLASS
  , RETAIL_PLAN
  , RETAIL_PLAN_RESP
  , ACCOUNT_RAP_CODE
  , ASC_3_MANAGED_TYPE
  , A_C_SPECIAL_TAG
  , ASC_1_RESP_PLAN_TYPES
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM
  , A_C_CURRENCY
  , IVT_OBJ_CDE
  , RISK_TOLERANCE )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18
  FROM
    @DB_IAW_DEV_STG.DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/ACCOUNTS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.A_AAZAM.CONTRACT
SET
  HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#''''),''''|'''',COALESCE(TRIM(A_C_ID),''''#NULL#''''),''''|'''', ''''#NULL#'''' ,''''|'''', ''''#NULL#'''' ))),
  MD_HASHDIFF=SHA1(CONCAT(COALESCE(A_C_CLIENT,''''#NULL#''''), ''''|'''' , COALESCE(A_C_REPRESENTATIVE,''''#NULL#''''), ''''|'''', COALESCE(ADMINISTRATOR_TYPE,''''#NULL#''''),''''|'''' ,COALESCE(TO_VARCHAR(A_C_OPEN_DATE),''''#NULL#''''),''''|'''' ,COALESCE(TO_VARCHAR(A_C_CLOSING_DATE),''''#NULL#''''),''''|'''' ,COALESCE(A_C_ACCOUNT_CLASS,''''#NULL#''''),''''|'''' ,COALESCE(RETAIL_PLAN,''''#NULL#''''),''''|'''' ,COALESCE(RETAIL_PLAN_RESP,''''#NULL#''''),''''|'''' ,COALESCE(ACCOUNT_RAP_CODE,''''#NULL#''''),''''|'''' ,COALESCE(ASC_3_MANAGED_TYPE,''''#NULL#''''),''''|'''' ,COALESCE(A_C_SPECIAL_TAG,''''#NULL#''''),''''|'''' ,COALESCE(ASC_1_RESP_PLAN_TYPES,''''#NULL#''''),''''|'''' ,COALESCE(A_C_CURRENCY,''''#NULL#''''),''''|'''',COALESCE(IVT_OBJ_CDE,''''#NULL#'''') ,''''|'''',COALESCE(RISK_TOLERANCE,''''#NULL#'''') )), 
  MD_CREATION_DT= SYSTIMESTAMP()
Where 1=1'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
create or replace schema DB_IAW_DEV_STG.A_ANIS;

create or replace TRANSIENT TABLE DB_IAW_DEV_STG.A_ANIS.REGISTERED_REPRESENTATIVE_RECEPTION (
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  CID VARCHAR(500) COMMENT 'Source Account ID exp: #100002',
  FIRST_NAME VARCHAR(500) COMMENT 'Representative first name',
  LAST_NAME VARCHAR(500) COMMENT 'Representative last name',
  FULL_NAME VARCHAR(1000) COMMENT 'Representative full name',
  PRIMARY_ROLE VARCHAR(500) COMMENT 'Representative primary role exp: Supervisor, Director, etc...',
  RVP VARCHAR(500) COMMENT 'Representative RVP exp: RVP1, RVP2, etc...',
  BRANCH_NRD VARCHAR(500) COMMENT 'Code of the representative branch',
  BRANCH_NAME VARCHAR(500) COMMENT 'Name of the representative branch',
  PROVINCE VARCHAR(500) COMMENT 'Province name',
  IS_ACTIVE NUMBER(1,0) COMMENT 'Active user indicator',
  REP_CODE VARCHAR(2000) COMMENT 'RR code',
  TRADE_NAME VARCHAR(2000) COMMENT 'Trade name exp: Tradenames_#118048',
  PORTAL_IDS VARCHAR(2000) COMMENT 'Portal identifier exp: PortalIds_#118048',
  BEGIN_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor begin date',
  END_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor end date',
  ADVISOR_BIRTH_DATE DATE COMMENT 'Advisor month and year of birth',
  REP_EMAIL VARCHAR(1000) COMMENT 'Advisor repemail',
  CBM VARCHAR(1000) COMMENT 'Advisor cbm',
  BRANCH_ADDRESS1 VARCHAR(1000) COMMENT 'Advisor branch address1',
  BRANCH_ADDRESS2 VARCHAR(1000) COMMENT 'Advisor branch address2',
  BRANCH_CITY VARCHAR(1000) COMMENT 'Advisor branch city',
  BRANCH_POSTAL_CODE VARCHAR(1000) COMMENT 'Advisor branch postal code'
);
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.A_ANIS.SP_CONV_LDSTG_PSA_IAS_CERT_TO_STG_REG_REP_REC_IAS_CERTS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.A_ANIS.REGISTERED_REPRESENTATIVE_RECEPTION WHERE 1=1'';
INS_PRE_COPY := ''
COPY INTO DB_IAW_''||ENV||''_STG.A_ANIS.REGISTERED_REPRESENTATIVE_RECEPTION
(
    MD_START_DT,
    MD_SOURCE,
    CID ,
  FIRST_NAME ,
  LAST_NAME ,
  FULL_NAME ,
  PRIMARY_ROLE ,
  RVP ,
  BRANCH_NRD ,
  BRANCH_NAME ,
  PROVINCE ,
  IS_ACTIVE ,
  REP_CODE ,
  TRADE_NAME ,
  PORTAL_IDS ,
  BEGIN_DT ,
  END_DT,
  ADVISOR_BIRTH_DATE,
    REP_EMAIL,     
  CBM,       
  BRANCH_ADDRESS1,   
  BRANCH_ADDRESS2,   
  BRANCH_CITY,     
  BRANCH_POSTAL_CODE
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,t.$11,t.$12,t.$13,t.$14,t.$15,t.$16,t.$17,t.$18,t.$19,t.$20,t.$21,t.$22 
  FROM
    @DATALAKE.''||IO_PATH||'' t
  ) pattern =''''.*REGISTERED_REPRESENTATIVE__.*csv'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16)
              '';
INS_UPDATE :=''UPDATE DB_IAW_''||ENV||''_STG.A_ANIS.REGISTERED_REPRESENTATIVE_RECEPTION SET MD_EXTRACT_DT =''''2000-01-01'''' WHERE ASCII(CID) <>239'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_COPY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
create or replace schema DB_IAW_DEV_STG.A_FAYSAL;

create or replace schema DB_IAW_DEV_STG.CLONE_INF2_IAS;

create or replace TRANSIENT TABLE DB_IAW_DEV_STG.CLONE_INF2_IAS.ACCOUNT_HOLDER (
  HK_HUB VARCHAR(40) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  A_C_CLIENT VARCHAR(100) COMMENT 'Client ID',
  SIN_HASH VARCHAR(64) COMMENT 'SIN Hash',
  CLIENT_BIRTH_DATE DATE COMMENT 'Client birth date',
  CLIENT_TAX_RECIP_TYPE VARCHAR(10) COMMENT 'Tax recipient type : 1 - Individual, 2 - Joint, 3 - Corporation, ...',
  CLIENT_RESIDENCE VARCHAR(50) COMMENT 'Client residence country',
  CLIENT_RESIDENCE_REGION VARCHAR(50) COMMENT 'Client residence province',
  CLIENT_ANNUAL_GROSS_INC VARCHAR(10) COMMENT 'Annual gross income',
  CLIENT_INIT_CONTRACT_DATE DATE COMMENT 'Initial contrat date',
  CLIENT_INV_KNOWLEDGE_LVL VARCHAR(1) COMMENT 'Clients Investment Knowledge Level',
  A_C_NAME VARCHAR(1000) COMMENT 'A_C_NAME',
  A_C_FIRST_NAME VARCHAR(1000) COMMENT 'A_C_FIRST_NAME',
  A_C_MIDDLE_NAME VARCHAR(1000) COMMENT 'A_C_MIDDLE_NAME',
  A_C_LAST_NAME VARCHAR(1000) COMMENT 'A_C_LAST_NAME',
  CLIENT_FIRST_NAME VARCHAR(1000) COMMENT 'CLIENT_FIRST_NAME',
  CLIENT_LAST_NAME VARCHAR(1000) COMMENT 'CLIENT_LAST_NAME'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.CLONE_INF2_IAS.CASH_HOLDINGS (
  HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
  HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for HUB_REGISTERED_REPRESENTATIVE',
  HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT '0 value as it is always NULL, added as it is required when loading RDV',
  MD_SEQ VARCHAR(50) COMMENT 'The value of METADATA$FILE_ROW_NUMBER when loading using INFORMATICA',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  A_C_ID VARCHAR(100) COMMENT 'Account ID',
  A_C_REPRESENTATIVE VARCHAR(50) COMMENT 'Advisor RR code',
  A_C_SUMM_BALANCE_BUS_DATE DATE COMMENT 'Update business date',
  A_C_SUMM_SD_NET_AMT NUMBER(38,2) COMMENT 'A/C Summ settelment date Net Amt',
  A_C_SUMM_TD_NET_AMT NUMBER(38,2) COMMENT 'A/C Summ trade date Net Amt',
  A_C_CURRENCY VARCHAR(10) COMMENT 'Holding value currency'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.CLONE_INF2_IAS.CONTRACT (
  HK_HUB VARCHAR(40) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  A_C_ID VARCHAR(18) COMMENT 'Account ID',
  A_C_CLIENT VARCHAR(20) COMMENT 'Client ID',
  A_C_REPRESENTATIVE VARCHAR(4) COMMENT 'Advisor RR code',
  ADMINISTRATOR_TYPE VARCHAR(100) COMMENT 'Nominee, Client name, ...',
  A_C_OPEN_DATE DATE COMMENT 'Account opening date',
  A_C_CLOSING_DATE DATE COMMENT 'Account closing date',
  A_C_ACCOUNT_CLASS VARCHAR(3) COMMENT 'Account class : 038, 040, ...',
  RETAIL_PLAN VARCHAR(4) COMMENT 'Retail plan code : RS, LF, ...',
  RETAIL_PLAN_RESP VARCHAR(1) COMMENT 'To be defined',
  ACCOUNT_RAP_CODE VARCHAR(1) COMMENT 'To be defined : Last letter of an account ID',
  ASC_3_MANAGED_TYPE VARCHAR(1) COMMENT 'To be defined : J, L, ...',
  A_C_SPECIAL_TAG VARCHAR(20) COMMENT 'Used to indicate relationship if multiple client names : JTWROS, JTIC, Trust, ...',
  ASC_1_RESP_PLAN_TYPES VARCHAR(1) COMMENT 'subtype of the RESP plans',
  A_C_CURRENCY VARCHAR(10) COMMENT 'Account Currency',
  IVT_OBJ_CDE VARCHAR(15) COMMENT 'Accounts Risk Profile (Cash, Income, Growth, Speculations - PCT)',
  RISK_TOLERANCE VARCHAR(15) COMMENT 'Accounts Risk Tolerance'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.CLONE_INF2_IAS.FINANCIAL_TRANSACTIONS_CMSDT (
  HK_LINK VARCHAR(40) COMMENT 'Hash of the business keys',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for CONTRACT',
  HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE',
  HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9),
  TRANSACTION_NUMBER NUMBER(38,0),
  RR_NUMBER VARCHAR(4),
  FMSL_ACCOUNT_NUMBER VARCHAR(10),
  SECURITY_NUMBER VARCHAR(12),
  SECURITY_TYPE_CODE VARCHAR(3),
  SECURITY_CLASS_CODE VARCHAR(4),
  SECURITY_GROUP_CODE VARCHAR(3),
  TRANSACTION_TYPE VARCHAR(3),
  TRADE_GROUP_GROSS_AMOUNT NUMBER(38,2),
  TRAN_TRADING_NET_CURRENCY VARCHAR(3),
  PROCESS_DATE TIMESTAMP_NTZ(9),
  TRADE_DATE TIMESTAMP_NTZ(9),
  SETTLEMENT_DATE TIMESTAMP_NTZ(9),
  EFFECTIVE_DATE TIMESTAMP_NTZ(9),
  TRANSACTION_ID NUMBER(11,0),
  CANCEL_INDICATOR VARCHAR(1),
  BUY_SELL_INDICATOR VARCHAR(1),
  TRADE_GROUP_QUANTITY NUMBER(38,0),
  TRANS_TRADING_NET_AMT NUMBER(38,2),
  TICKET_NUMBER VARCHAR(6),
  TRADE_GRP_COMM_ENTERED NUMBER(38,2)
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.CLONE_INF2_IAS.FINANCIAL_TRANSACTIONS_IAVMBK (
  HK_LINK VARCHAR(40) COMMENT 'Hash of the business keys',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for CONTRACT',
  HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE',
  HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  A_C_ID VARCHAR(100) COMMENT 'Account ID',
  A_C_REPRESENTATIVE VARCHAR(50) COMMENT 'Advisor RR code',
  TI_ALTERNATE_ID VARCHAR(50) COMMENT 'Financial product ID',
  TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
  TRAN_ENTRY_DESCRIPTION VARCHAR(50) COMMENT 'Description of the trading',
  TRAN_USER_DESCRIPTION VARCHAR(50) COMMENT 'Description of the trading',
  TRAN_TRADING_TYPE VARCHAR(10) COMMENT 'Type of the trading : Sell, Buy,...',
  TRANSACTION NUMBER(38,0) COMMENT 'Transaction ID',
  TRAN_TRADING_GROSS_AMT NUMBER(38,2) COMMENT 'Transaction gross amount in CAD or USD',
  TRAN_TRADING_CURRENCY VARCHAR(10) COMMENT 'Transaction amounts currency',
  TRAN_TRADING_NET_AMT NUMBER(38,2) COMMENT 'Transaction net amount in CAD or USD',
  TRAN_TRADING_TRADE_DATE DATE COMMENT 'Trade date',
  TRAN_TRADING_SETT_DATE DATE COMMENT 'Settlement date',
  TRAN_PROCESS_DATE DATE COMMENT 'Process date',
  TI_SYMBOL VARCHAR(50) COMMENT 'Product symbol',
  TRAN_QTY NUMBER(38,4) COMMENT 'Quantity',
  TI_PRIMARY_MARKET VARCHAR(50) COMMENT 'Primary market',
  TRAN_TXN_REFERENCE_ID VARCHAR(50) COMMENT 'Tax reference ID',
  TRAN_AMOUNT_2 NUMBER(38,2) COMMENT 'Transaction amount 2 in CAD or USD',
  TI_UNDERLYING_CDN_PRICE NUMBER(38,8) COMMENT 'TI Underlying CDN Price, this field and above fields were added for OG calculation',
  TI_BASIS_POINT NUMBER(38,5) COMMENT 'TI Basis Point',
  TI_FACE_VALUE NUMBER(38,5) COMMENT 'TI Face Value',
  TI_ISSUE_PRICE NUMBER(38,5) COMMENT 'TI Issue Price',
  STRIKE_PRICE NUMBER(38,8) COMMENT 'STRIKE PRICE',
  TI_UNDERLYING_USD_PRICE NUMBER(38,8) COMMENT 'TI Underlying USD Price'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.CLONE_INF2_IAS.HOLDINGS (
  HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
  HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for HUB_REGISTERED_REPRESENTATIVE',
  HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
  MD_SEQ VARCHAR(50) COMMENT 'The value of METADATA$FILE_ROW_NUMBER when loading using INFORMATICA',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  A_C_ID VARCHAR(100) COMMENT 'Account ID',
  A_C_REPRESENTATIVE VARCHAR(50) COMMENT 'Advisor RR code',
  TI_ALTERNATE_ID VARCHAR(50) COMMENT 'Financial product ID',
  TRAN_SUMM_CURR_MKT_VALUE NUMBER(38,2) COMMENT 'Market value of the holding in CAD or USD',
  TRAN_SUMM_BUSINESS_DATE DATE COMMENT 'Update business date',
  TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
  B_V_SECURITY_POSITION_VAL NUMBER(38,2) COMMENT 'Book value',
  B_V_SECURITY_POSITION_COS NUMBER(38,4) COMMENT 'Average cost base',
  TRAN_SUMM_AVG_UNIT_COST NUMBER(38,5) COMMENT 'Average cost base',
  TRAN_SUMM_NET_SETT_AMT NUMBER(38,2) COMMENT 'Cash position',
  TRAN_SUMM_CURRENCY VARCHAR(10) COMMENT 'Holding value currency',
  TRAN_SUMM_SETT_QTY NUMBER(38,4) COMMENT 'Units',
  TRAN_SUMM_TRADE_QTY NUMBER(38,4) COMMENT 'Units calculated by trade date',
  TI_FACE_VALUE NUMBER(29,5) COMMENT 'TI Face Value',
  TI_BASIS_POINT NUMBER(29,5) COMMENT 'TI Basis Point',
  MKT_PRICE_DATE TIMESTAMP_NTZ(9) COMMENT 'Mkt Price Date',
  MARKET_PRICE_BID NUMBER(29,8) COMMENT 'Market Price Bid',
  MARKET_PRICE_ASK NUMBER(29,8) COMMENT 'Market Price Ask',
  MARKET_PRICE_CLOSE NUMBER(29,8) COMMENT 'Market Price Close',
  PRICE_CURRENCY VARCHAR(3) COMMENT 'Price Currency',
  TRAN_SUMM_CURR_MKT_PRICE NUMBER(29,8) COMMENT 'Tran Summ Curr Mkt Price',
  TRAN_SUMM_SFK_QTY NUMBER(29,4) COMMENT 'Tran Summ Sfk Qty'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.CLONE_INF2_IAS.INVESTMENT_PRODUCT_TYPE (
  HK_HUB VARCHAR(64) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  TI_ALTERNATE_ID VARCHAR(50) COMMENT 'Financial product ID',
  TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
  TI_TYPE VARCHAR(10) COMMENT 'Financial product type',
  TI_ALTERNATE_TI_CLASS VARCHAR(50) COMMENT 'Financial product class ID',
  TI_CLASS VARCHAR(50) COMMENT 'Financial product class',
  TI_ALTERNATE_SHORT_DESC VARCHAR(100) COMMENT 'Financial product short decsription',
  ENGLISH_DESCRIPTION VARCHAR(512) COMMENT 'Financial product description',
  TI_SYMBOL VARCHAR(512) COMMENT 'TI Symbol'
);
create or replace TABLE DB_IAW_DEV_STG.CLONE_INF2_IAS.PRODUCTION_SHARE_TEST_TRANSACTIONS (
  A_C_ID VARCHAR(100) COMMENT 'Account ID',
  A_C_REPRESENTATIVE VARCHAR(50) COMMENT 'Advisor RR code',
  TI_ALTERNATE_ID VARCHAR(50) COMMENT 'Financial product ID',
  TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
  TRAN_ENTRY_DESCRIPTION VARCHAR(50) COMMENT 'Description of the trading',
  TRAN_USER_DESCRIPTION VARCHAR(50) COMMENT 'Description of the trading',
  TRAN_TRADING_TYPE VARCHAR(10) COMMENT 'Type of the trading : Sell, Buy,...',
  TRANSACTION NUMBER(38,0) COMMENT 'Transaction ID',
  TRAN_TRADING_GROSS_AMT NUMBER(38,2) COMMENT 'Transaction gross amount in CAD or USD',
  TRAN_TRADING_CURRENCY VARCHAR(10) COMMENT 'Transaction amounts currency',
  TRAN_TRADING_NET_AMT NUMBER(38,2) COMMENT 'Transaction net amount in CAD or USD',
  TRAN_TRADING_TRADE_DATE DATE COMMENT 'Trade date',
  TRAN_TRADING_SETT_DATE DATE COMMENT 'Settlement date',
  TRAN_PROCESS_DATE DATE COMMENT 'Process date',
  TI_SYMBOL VARCHAR(50) COMMENT 'Product symbol',
  TRAN_QTY NUMBER(38,4) COMMENT 'Quantity',
  TI_PRIMARY_MARKET VARCHAR(50) COMMENT 'Primary market',
  TRAN_TXN_REFERENCE_ID VARCHAR(50) COMMENT 'Tax reference ID',
  TRAN_AMOUNT_2 NUMBER(38,2) COMMENT 'Transaction amount 2',
  MD_SRC VARCHAR(50) COMMENT 'Main source table for the data',
  MD_LOADDATE TIMESTAMP_NTZ(9),
  MD_SRCSYSTEM VARCHAR(50),
  TI_UNDERLYING_CDN_PRICE NUMBER(38,8) COMMENT 'TI Underlying CDN Price, this field and above fields were added for OG calculation',
  TI_BASIS_POINT NUMBER(38,5) COMMENT 'TI Basis Point',
  TI_FACE_VALUE NUMBER(38,5) COMMENT 'TI Face Value',
  TI_ISSUE_PRICE NUMBER(38,5) COMMENT 'TI Issue Price',
  STRIKE_PRICE NUMBER(38,8) COMMENT 'STRIKE PRICE',
  TI_UNDERLYING_USD_PRICE NUMBER(38,8) COMMENT 'TI Underlying USD Price'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.CLONE_INF2_IAS.REF_INVESTMENT_SAVING_PROGRAM_TYPES (
  HK_HUB VARCHAR(40) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  A_C_ACCOUNT_CLASS VARCHAR(50) COMMENT 'Account class : 038, 040, ...',
  RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
  RETAIL_PLAN_RESP VARCHAR(10) COMMENT 'To be defined',
  ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID'
);
create or replace view DB_IAW_DEV_STG.CLONE_INF2_IAS.VW_CONTRACT(
  HK_LINK,
  MD_HASHDIFF,
  HK_HUB_CONTRACT,
  HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
  HK_HUB_REGISTERED_REPRESENTATIVE,
  CONTRACT_ID,
  CLIENT_ID,
  RR_CD,
  MD_START_DT,
  MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT
) as
SELECT 
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), '#NULL#')
, '|' , COALESCE(TRIM(A_C_ID), '#NULL#')
, '|' , COALESCE(TRIM(A_C_CLIENT), '#NULL#')
, '|' , COALESCE(TRIM(A_C_REPRESENTATIVE), '#NULL#')
, '|' , '#NULL#'  ))) AS HK_LINK,
'0' AS MD_HASHDIFF,
--SHA1(CONCAT (COALESCE(MD_SRC_SYSTEM,'#NULL#'),'|',COALESCE(A_C_ID,'#NULL#'))) AS HK_HUB_CONTRACT,
DECODE(TRUE, A_C_ID IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), '#NULL#'), '|' , COALESCE(TRIM(A_C_ID), '#NULL#') , '|' ,'#NULL#' , '|' ,'#NULL#')))) AS HK_HUB_CONTRACT,
--SHA1(CONCAT(COALESCE(MD_SRC_SYSTEM, '#NULL#'), '|' , COALESCE(A_C_CLIENT, '#NULL#'))) AS HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
DECODE(TRUE, A_C_CLIENT IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), '#NULL#'), '|' , COALESCE(TRIM(A_C_CLIENT), '#NULL#'))))) AS HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
--SHA1(CONCAT (COALESCE(MD_SRC_SYSTEM,'#NULL#'),'|', COALESCE(A_C_REPRESENTATIVE,'#NULL#'))) AS HK_HUB_REGISTERED_REPRESENTATIVE,
DECODE(TRUE, A_C_REPRESENTATIVE IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), '#NULL#'), '|' , COALESCE(TRIM(A_C_REPRESENTATIVE), '#NULL#'))))) AS HK_HUB_REGISTERED_REPRESENTATIVE,
TRIM(A_C_ID) AS CONTRACT_ID,
TRIM(A_C_CLIENT) AS CLIENT_ID,
TRIM(A_C_REPRESENTATIVE) AS RR_CD,
MD_START_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT
FROM IAS.CONTRACT;
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.CLONE_INF2_IAS.JSON_FORMAT
  TYPE = json
  NULL_IF = ()
;
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.CLONE_INF2_IAS.META_CSV_FILE_FORMAT
;
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.CLONE_INF2_IAS.PIPE_UTF16
  TYPE = csv
  FIELD_DELIMITER = '|'
  ESCAPE_UNENCLOSED_FIELD = 'NONE'
  NULL_IF = ('0000-00-00')
  ENCODING = 'UTF-16'
;
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.CLONE_INF2_IAS.PIPE_UTF8
  TYPE = csv
  FIELD_DELIMITER = '|'
;
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS.SP_CONV_LOADSTG_IAS_NBIN_TO_STG_FINANCIAL_TRANSACTIONS_IAVMBK("ENV" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_DELETE STRING;
INS_INSERT STRING;
INS_UPDATE STRING;
BEGIN
INS_DELETE := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK WHERE 1=1'';
INS_INSERT := ''INSERT INTO DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK (MD_START_DT,MD_SOURCE,A_C_ID,A_C_REPRESENTATIVE,TI_ALTERNATE_ID,TI_ALTERNATE_TI_TYPE,TRAN_ENTRY_DESCRIPTION,TRAN_USER_DESCRIPTION,TRAN_TRADING_TYPE,"TRANSACTION",TRAN_TRADING_GROSS_AMT,TRAN_TRADING_CURRENCY,TRAN_TRADING_NET_AMT,TRAN_TRADING_TRADE_DATE,TRAN_TRADING_SETT_DATE,TRAN_PROCESS_DATE,TI_SYMBOL,TRAN_QTY,TI_PRIMARY_MARKET,TRAN_TXN_REFERENCE_ID,TRAN_AMOUNT_2,MD_EXTRACT_DT,MD_SRC_SYSTEM,TI_UNDERLYING_CDN_PRICE,TI_BASIS_POINT,TI_FACE_VALUE,TI_ISSUE_PRICE,STRIKE_PRICE,TI_UNDERLYING_USD_PRICE)
SELECT
  TRAN_TRADING_TRADE_DATE,
  ''''IAS.PRODUCTION_SHARE_TEST_TRANSACTIONS'''',
  A_C_ID,
  A_C_REPRESENTATIVE,
  TI_ALTERNATE_ID,
  TI_ALTERNATE_TI_TYPE,
  TRAN_ENTRY_DESCRIPTION,
  TRAN_USER_DESCRIPTION,
  TRAN_TRADING_TYPE,
  "TRANSACTION",
  TRAN_TRADING_GROSS_AMT,
  TRAN_TRADING_CURRENCY,
  TRAN_TRADING_NET_AMT,
  TRAN_TRADING_TRADE_DATE,
  TRAN_TRADING_SETT_DATE,
  TRAN_PROCESS_DATE,
  TI_SYMBOL,
  TRAN_QTY,
  TI_PRIMARY_MARKET,
  TRAN_TXN_REFERENCE_ID,
  TRAN_AMOUNT_2,
  --MD_SRC,
  TO_DATE(SYSTIMESTAMP()),
  MD_SRCSYSTEM,
  TI_UNDERLYING_CDN_PRICE,
  TI_BASIS_POINT,
  TI_FACE_VALUE,
  TI_ISSUE_PRICE,
  STRIKE_PRICE,
  TI_UNDERLYING_USD_PRICE
  FROM DB_IAW_''||ENV||''_STG.IAS.PRODUCTION_SHARE_TEST_TRANSACTIONS
        '';
INS_UPDATE := ''UPDATE DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK
SET
HK_LINK=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM("TRANSACTION"), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_ID), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#'''')))),
HK_HUB_CONTRACT=
--SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_ID), ''''#NULL#'''')))),
DECODE(TRUE, A_C_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_ID), ''''#NULL#'''') ,''''|'''', ''''#NULL#'''' ,''''|'''', ''''#NULL#'''' )))),
HK_HUB_REGISTERED_REPRESENTATIVE=
--SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#'''')))),
DECODE(TRUE, A_C_REPRESENTATIVE IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''))))),
HK_HUB_INVESTMENT_PRODUCT_TYPE=
DECODE(TRUE, TI_ALTERNATE_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#''''))))),
MD_HASHDIFF=
SHA1(CONCAT(COALESCE(TI_ALTERNATE_TI_TYPE, ''''#NULL#''''), ''''|'''',COALESCE(TRAN_ENTRY_DESCRIPTION, ''''#NULL#''''), ''''|'''' , COALESCE(TRAN_USER_DESCRIPTION, ''''#NULL#''''), ''''|'''' ,
COALESCE(TRAN_TRADING_TYPE, ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TRAN_TRADING_GROSS_AMT),''''#NULL#''''), ''''|'''',
COALESCE(TRAN_TRADING_CURRENCY,''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_NET_AMT),''''#NULL#'''') , ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_TRADE_DATE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_SETT_DATE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_PROCESS_DATE),''''#NULL#'''')
, ''''|'''', COALESCE(TI_SYMBOL,''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_QTY),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_PRIMARY_MARKET),''''#NULL#'''')
, ''''|'''', COALESCE(TO_VARCHAR(TRAN_TXN_REFERENCE_ID),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_AMOUNT_2),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_UNDERLYING_CDN_PRICE),''''#NULL#'''')
, ''''|'''', COALESCE(TO_VARCHAR(TI_BASIS_POINT),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_FACE_VALUE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_ISSUE_PRICE),''''#NULL#'''')
, ''''|'''', COALESCE(TO_VARCHAR(STRIKE_PRICE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_UNDERLYING_USD_PRICE),''''#NULL#'''')
)), 
MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1
        '';
EXECUTE IMMEDIATE :INS_DELETE;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS.SP_CONV_LOADSTG_IAS_NBIN_TO_STG_FINANCIAL_TRANSACTIONS_IAVMBK_IAPW("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK (
  MD_SOURCE,
  A_C_ID,
  A_C_REPRESENTATIVE,
  TI_ALTERNATE_ID, 
  TI_ALTERNATE_TI_TYPE, 
  TRAN_ENTRY_DESCRIPTION, 
  TRAN_USER_DESCRIPTION, 
  TRAN_TRADING_TYPE, 
  TRANSACTION, 
  TRAN_TRADING_GROSS_AMT, 
  TRAN_TRADING_CURRENCY, 
  TRAN_TRADING_NET_AMT, 
  TRAN_TRADING_TRADE_DATE, 
  TRAN_TRADING_SETT_DATE, 
  TRAN_PROCESS_DATE, 
  TI_SYMBOL, 
  TRAN_QTY, 
  TI_PRIMARY_MARKET, 
  TRAN_TXN_REFERENCE_ID, 
  TRAN_AMOUNT_2, 
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM,
  TI_UNDERLYING_CDN_PRICE, 
  TI_BASIS_POINT, 
  TI_FACE_VALUE, 
  TI_ISSUE_PRICE, 
  STRIKE_PRICE, 
  TI_UNDERLYING_USD_PRICE )
FROM
  (
  SELECT
    metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10,t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$21
    ,t.$22, t.$23, t.$24, t.$25, t.$26, t.$27, t.$28
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*MISSING_TRANSACTIONS.csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK
SET 
  HK_LINK=
  SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TRANSACTION), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_ID), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#'''')))),

  HK_HUB_CONTRACT=
  DECODE(TRUE, A_C_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_ID), ''''#NULL#'''') ,''''|'''', ''''#NULL#'''' ,''''|'''', ''''#NULL#'''' )))),

  HK_HUB_REGISTERED_REPRESENTATIVE=
  DECODE(TRUE, A_C_REPRESENTATIVE IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''))))),

  HK_HUB_INVESTMENT_PRODUCT_TYPE=
  DECODE(TRUE, TI_ALTERNATE_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#''''))))),

  MD_HASHDIFF=
  SHA1(CONCAT(COALESCE(TI_ALTERNATE_TI_TYPE, ''''#NULL#''''), ''''|'''',COALESCE(TRAN_ENTRY_DESCRIPTION, ''''#NULL#''''), ''''|'''' , COALESCE(TRAN_USER_DESCRIPTION, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TRAN_TRADING_TYPE, ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TRAN_TRADING_GROSS_AMT),''''#NULL#''''), ''''|'''', 
  COALESCE(TRAN_TRADING_CURRENCY,''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_NET_AMT),''''#NULL#'''') , ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_TRADE_DATE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_SETT_DATE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_PROCESS_DATE),''''#NULL#'''')
  , ''''|'''', COALESCE(TI_SYMBOL,''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_QTY),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_PRIMARY_MARKET),''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(TRAN_TXN_REFERENCE_ID),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_AMOUNT_2),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_UNDERLYING_CDN_PRICE),''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(TI_BASIS_POINT),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_FACE_VALUE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_ISSUE_PRICE),''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(STRIKE_PRICE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_UNDERLYING_USD_PRICE),''''#NULL#'''')
  )), 
  MD_CREATION_DT=SYSTIMESTAMP(),
  MD_START_DT = DATEADD(DAY,1,TRAN_PROCESS_DATE)
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS.SP_CONV_LOADSTG_INVESTIA_UNIVERIS_TO_STG_REVENUE_PAYABLE("ENV" VARCHAR(1000), "IO_FILE_NAME" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_COPY_QUERY STRING;
INS_UPDATE STRING;

BEGIN
INS_COPY_QUERY := ''
COPY INTO 
  DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REVENUE_PAYABLE (
  MD_START_DT, 
  MD_SOURCE,
  PAY_SYSID,
  PYBL_STATUS,
  EVENT_PROC_SYSID,
  EVENT_RPT_SYSID,
  BEN_SYSID,
  REP_SYSID,
  DEAL_SYSID,
  COM_SYSID,
  DIST_SYSID,
  TRX_SYSID,
  IVR_SYSID,
  PLN_SYSID,
  ACT_SYSID,
  IVD_SYSID,
  MGT_CD,
  TRX_CD,
  PROC_DT,
  PAID_DT,
  PAY_PERIOD,
  TAX_YEAR,
  TRADE_DT,
  GRSS_AMT,
  COM_DLR,
  COM_PYBL,
  COM_BEN_PYBL,
  TICKET_CHG,
  PAY_CD,
  COM_PRODUCTION_CD,
  AMOUNT,
  USR_SYSID,
  OTX_SYSID,
  DISPLAY_FLAG,
  DLR_MINIMUM,
  ORIG_PAY_PER,
  IVT_TYPE,
  COM_PAY_SYSID,
  INTERNAL_COMM,
  WRHS_IND,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM ) 
FROM
  (
  SELECT
    t.$18, metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,
    t.$11,t.$12,t.$13,t.$14,t.$15,t.$16,t.$17,t.$18,t.$19,t.$20,t.$21,t.$22,t.$23,t.$24,
    t.$25,t.$26,t.$27,t.$28,t.$29,t.$30,t.$31,t.$32,t.$33,t.$34,
    t.$35,t.$36,t.$37,t.$38,t.$39,t.$40
  FROM
    @DATALAKE.raw/INVESTIA/INITIAL_LOADING T
  ) pattern = ''||io_file_name||'' file_format =(format_name = DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16);
             '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REVENUE_PAYABLE
SET 
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , 
COALESCE(TO_VARCHAR(PAY_SYSID), ''''#NULL#''''), ''''|'''' , 
COALESCE(TO_VARCHAR(PAID_DT), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVD_SYSID), ''''#NULL#''''), ''''|'''' ,
''''#NULL#''''))),
HK_HUB_CONTRACT=DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#'''')  ,''''|'''', COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''))))),
HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, IVD_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TO_VARCHAR(IVD_SYSID)), ''''#NULL#''''))))),
MD_HASHDIFF = SHA1(CONCAT(
  COALESCE(PYBL_STATUS, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(EVENT_PROC_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(EVENT_RPT_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(BEN_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(DEAL_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(COM_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(DIST_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(TRX_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(ACT_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(MGT_CD, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(TRX_CD),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(PROC_DT),''''#NULL#''''), ''''|'''', 
  COALESCE(PAY_PERIOD, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TAX_YEAR, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(TRADE_DT),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(GRSS_AMT),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(COM_DLR),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(COM_PYBL),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(COM_BEN_PYBL),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(TICKET_CHG),''''#NULL#''''), ''''|'''', 
  COALESCE(PAY_CD, ''''#NULL#''''), ''''|'''' , 
  COALESCE(COM_PRODUCTION_CD, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(AMOUNT),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(USR_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(OTX_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(DISPLAY_FLAG),''''#NULL#''''), ''''|'''', 
  COALESCE(DLR_MINIMUM, ''''#NULL#''''), ''''|'''' , 
  COALESCE(ORIG_PAY_PER, ''''#NULL#''''), ''''|'''' , 
  COALESCE(IVT_TYPE, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(COM_PAY_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(INTERNAL_COMM),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(WRHS_IND),''''#NULL#''''))),  
MD_CREATION_DT=systimestamp(),
MD_START_DT = DATEADD(DAY,1,COALESCE(PAID_DT,PROC_DT))
Where 1=1;
'';
--EXECUTE IMMEDIATE :INS_COPY_QUERY;
--EXECUTE IMMEDIATE :INS_UPDATE;

RETURN INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS.SP_CONV_LOADSTG_PSA_IAS_FUNDATA_TO_STG_FUND("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_FUNDATA.FUND WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_FUNDATA.FUND (
    MD_START_DT
  , MD_SOURCE
  , FUNDSERVID
  , FUNDID
  , FUNDDESCFR
  , FUNDDESCEN
  , FUNDTYPE
  , GROUPNAMEFR
  , GROUPNAMEEN
  , RRSPELIGIBLE
  , FUNDDESCLONGFR
  , FUNDDESCLONGEN
  , LEGALNAMEEN
  , LEGALNAMEFR
  , STAMP
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14, t.$15
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/FUNDATA_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_FUNDATA.FUND
SET
HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(FUNDSERVID), ''''#NULL#'''')))),
  
    MD_HASHDIFF=SHA1(CONCAT(COALESCE(FUNDID, ''''#NULL#''''), ''''|'''',COALESCE(FUNDDESCFR, ''''#NULL#''''), ''''|'''' , COALESCE(FUNDDESCEN, ''''#NULL#''''), ''''|'''' , COALESCE(FUNDTYPE, ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(GROUPNAMEFR),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(GROUPNAMEEN),''''#NULL#''''), ''''|'''', COALESCE(RRSPELIGIBLE,''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(FUNDDESCLONGFR), ''''#NULL#''''), ''''|'''', COALESCE(FUNDDESCLONGEN,''''#NULL#''''), ''''|'''', COALESCE(LEGALNAMEEN,''''#NULL#''''), ''''|'''', COALESCE(LEGALNAMEFR,''''#NULL#''''), ''''|'''', COALESCE(STAMP,''''#NULL#''''))),  
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS.SP_CONV_LOADSTG_PSA_IAS_IAVM_TO_STG_POSITION_PRICE_IAS_IAVM_IAPW("ENV" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_STG.IAS_IAVM.POSITION_PRICE (
MD_START_DT,
MD_SOURCE,
UNITOFMEASURE,
PRICE,
SYMBOL,
MARKET,
PROCESSDATE,
ACCOUNTID,
CLOSEPRICE,
PRICECURRENCY,
BIDPRICE,
ASKPRICE,
MD_EXTRACT_DT,
MD_SRC_SYSTEM ) 
SELECT 
  PROCESSDATE,
  ''''IAS_IAVM.PRODUCTION_SHARE_TEST_POSITION'''',
  UNITOFMEASURE,
  PRICE,
  SYMBOL,
  MARKET,
  PROCESSDATE,
  ACCOUNTID,
  CLOSEPRICE,
  PRICECURRENCY,
  BIDPRICE,
  ASKPRICE,
  TO_DATE(SYSTIMESTAMP()),
  MD_SRCSYSTEM
FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.PRODUCTION_SHARE_TEST_POSITION
UNION ALL 
SELECT 
  PROCESSDATE,
  ''''IAS_IAVM.PRODUCTION_SHARE_TEST_POSITION_HIST'''',
  UNITOFMEASURE,
  PRICE,
  SYMBOL,
  MARKET,
  PROCESSDATE,
  ACCOUNTID,
  CLOSEPRICE,
  PRICECURRENCY,
  BIDPRICE,
  ASKPRICE,
  TO_DATE(SYSTIMESTAMP()),
  MD_SRCSYSTEM
FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.PRODUCTION_SHARE_TEST_POSITION_HIST
      '';
INS_UPDATE := ''UPDATE DB_IAW_''||ENV||''_STG.IAS_IAVM.POSITION_PRICE
SET 
  HK_LINK=
  SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(PROCESSDATE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(UNITOFMEASURE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(SYMBOL), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MARKET), ''''#NULL#''''), ''''|'''', COALESCE(TRIM(ACCOUNTID), ''''#NULL#'''')))),

  MD_HASHDIFF=
  SHA1(CONCAT(COALESCE(TO_VARCHAR(PRICE), ''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(CLOSEPRICE), ''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(PRICECURRENCY), ''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(BIDPRICE), ''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(ASKPRICE), ''''#NULL#'''')
  )), 
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;
      '';

EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS.SP_CONV_LOADSTG_PSA_IAS_IAVM_TO_STG_REF_HOLIDAYS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_HOLIDAYS WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_HOLIDAYS (
    MD_START_DT
  , MD_SOURCE
  , HOLIDAY_DATE
  , DESCRIPTION
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename,t.$1, t.$2, t.$3, t.$4
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/HOLIDAYS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS.SP_CONV_LOADSTG_PSA_IAS_NBIN_TO_STG_CASH_HOLDINGS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.CASH_HOLDINGS WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS.CASH_HOLDINGS (
   MD_START_DT
  , MD_SOURCE
  , MD_SEQ
  , A_C_ID
  , A_C_REPRESENTATIVE
  , A_C_SUMM_BALANCE_BUS_DATE
  , A_C_SUMM_SD_NET_AMT
  , A_C_SUMM_TD_NET_AMT
  , A_C_CURRENCY
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, metadata$file_row_number,
    t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*CASH_HOLDINGS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS.CASH_HOLDINGS
SET
  HK_LINK = SHA1(UPPER(CONCAT(
    COALESCE(TRIM(MD_SEQ), ''''#NULL#''''), ''''|''''
  , COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|''''
  , COALESCE(TRIM(MD_EXTRACT_DT), ''''#NULL#''''), ''''|''''
  , COALESCE(TRIM(A_C_ID), ''''#NULL#''''), ''''|''''
  , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''), ''''|''''
  , ''''#NULL#''''
  ))),
  HK_HUB_CONTRACT = DECODE(TRUE, A_C_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#''''),''''|'''',COALESCE(TRIM(A_C_ID),''''#NULL#''''),''''|'''', ''''#NULL#'''' ,''''|'''', ''''#NULL#'''' )))),
  HK_HUB_REGISTERED_REPRESENTATIVE = DECODE(TRUE, A_C_REPRESENTATIVE IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''))))),
  HK_HUB_INVESTMENT_PRODUCT_TYPE = ''''0'''',
  
  MD_HASHDIFF=SHA1(CONCAT(
    COALESCE(TO_VARCHAR(A_C_SUMM_BALANCE_BUS_DATE),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(A_C_SUMM_SD_NET_AMT),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(A_C_SUMM_TD_NET_AMT),''''#NULL#''''),''''|''''
  , COALESCE(A_C_CURRENCY,''''#NULL#'''')
  )), 
  
  MD_CREATION_DT= SYSTIMESTAMP()
Where 1=1;
'';


EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS.SP_CONV_LOADSTG_PSA_IAS_NBIN_TO_STG_CLIENTS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.ACCOUNT_HOLDER WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS.ACCOUNT_HOLDER (
   MD_START_DT,
  MD_SOURCE,
  A_C_CLIENT,
  SIN_HASH,
  CLIENT_BIRTH_DATE,
  CLIENT_TAX_RECIP_TYPE,
  CLIENT_RESIDENCE,
  CLIENT_RESIDENCE_REGION,
  CLIENT_ANNUAL_GROSS_INC,
  CLIENT_INIT_CONTRACT_DATE,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM,
    CLIENT_INV_KNOWLEDGE_LVL,
    A_C_NAME,
    A_C_FIRST_NAME,
    A_C_MIDDLE_NAME,
    A_C_LAST_NAME,
    CLIENT_FIRST_NAME,
    CLIENT_LAST_NAME )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6,t.$7, t.$8,t.$9, t.$10, t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern =''''.*CLIENTS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS.ACCOUNT_HOLDER
SET
    HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_CLIENT), ''''#NULL#'''')))),
  MD_HASHDIFF=SHA1(CONCAT(COALESCE(SIN_HASH, ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(CLIENT_BIRTH_DATE),''''#NULL#''''), ''''|'''', COALESCE(CLIENT_TAX_RECIP_TYPE,''''#NULL#''''), ''''|'''', COALESCE(CLIENT_RESIDENCE, ''''#NULL#''''), ''''|'''', COALESCE(CLIENT_RESIDENCE_REGION,''''#NULL#''''), ''''|'''', COALESCE(CLIENT_ANNUAL_GROSS_INC,''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(CLIENT_INIT_CONTRACT_DATE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(CLIENT_INV_KNOWLEDGE_LVL),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(A_C_NAME),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(A_C_FIRST_NAME),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(A_C_MIDDLE_NAME),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(A_C_LAST_NAME),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(CLIENT_FIRST_NAME),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(CLIENT_LAST_NAME),''''#NULL#'''') )),  
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;
'';


EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS.SP_CONV_LOADSTG_PSA_IAS_NBIN_TO_STG_CONTRACT("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.CONTRACT WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS.CONTRACT (
    MD_START_DT
  , MD_SOURCE
  , A_C_ID
  , A_C_CLIENT
  , A_C_REPRESENTATIVE
  , ADMINISTRATOR_TYPE
  , A_C_OPEN_DATE
  , A_C_CLOSING_DATE
  , A_C_ACCOUNT_CLASS
  , RETAIL_PLAN
  , RETAIL_PLAN_RESP
  , ACCOUNT_RAP_CODE
  , ASC_3_MANAGED_TYPE
  , A_C_SPECIAL_TAG
  , ASC_1_RESP_PLAN_TYPES
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM
  , A_C_CURRENCY
  , IVT_OBJ_CDE
  , RISK_TOLERANCE )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/ACCOUNTS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS.CONTRACT
SET
  HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#''''),''''|'''',COALESCE(TRIM(A_C_ID),''''#NULL#''''),''''|'''', ''''#NULL#'''' ,''''|'''', ''''#NULL#'''' ))),
  MD_HASHDIFF=SHA1(CONCAT(COALESCE(A_C_CLIENT,''''#NULL#''''), ''''|'''' , COALESCE(A_C_REPRESENTATIVE,''''#NULL#''''), ''''|'''', COALESCE(ADMINISTRATOR_TYPE,''''#NULL#''''),''''|'''' ,COALESCE(TO_VARCHAR(A_C_OPEN_DATE),''''#NULL#''''),''''|'''' ,COALESCE(TO_VARCHAR(A_C_CLOSING_DATE),''''#NULL#''''),''''|'''' ,COALESCE(A_C_ACCOUNT_CLASS,''''#NULL#''''),''''|'''' ,COALESCE(RETAIL_PLAN,''''#NULL#''''),''''|'''' ,COALESCE(RETAIL_PLAN_RESP,''''#NULL#''''),''''|'''' ,COALESCE(ACCOUNT_RAP_CODE,''''#NULL#''''),''''|'''' ,COALESCE(ASC_3_MANAGED_TYPE,''''#NULL#''''),''''|'''' ,COALESCE(A_C_SPECIAL_TAG,''''#NULL#''''),''''|'''' ,COALESCE(ASC_1_RESP_PLAN_TYPES,''''#NULL#''''),''''|'''' ,COALESCE(A_C_CURRENCY,''''#NULL#''''),''''|'''',COALESCE(IVT_OBJ_CDE,''''#NULL#'''') ,''''|'''',COALESCE(RISK_TOLERANCE,''''#NULL#'''') )), 
  MD_CREATION_DT= SYSTIMESTAMP()
Where 1=1'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS.SP_CONV_LOADSTG_PSA_IAS_NBIN_TO_STG_FINANCIAL_TRANSACTIONS_IAVMBK("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;


BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK (
    MD_START_DT
  , MD_SOURCE
  , A_C_ID
  , A_C_REPRESENTATIVE
  , TI_ALTERNATE_ID
  , TI_ALTERNATE_TI_TYPE
  , TRAN_ENTRY_DESCRIPTION
  , TRAN_USER_DESCRIPTION
  , TRAN_TRADING_TYPE
  , TRANSACTION
  , TRAN_TRADING_GROSS_AMT
  , TRAN_TRADING_CURRENCY
  , TRAN_TRADING_NET_AMT
  , TRAN_TRADING_TRADE_DATE
  , TRAN_TRADING_SETT_DATE
  , TRAN_PROCESS_DATE
  , TI_SYMBOL
  , TRAN_QTY
  , TI_PRIMARY_MARKET
  , TRAN_TXN_REFERENCE_ID
  , TRAN_AMOUNT_2
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM
  , TI_UNDERLYING_CDN_PRICE
  , TI_BASIS_POINT
  , TI_FACE_VALUE
  , TI_ISSUE_PRICE
  , STRIKE_PRICE
  , TI_UNDERLYING_USD_PRICE )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10,t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$21
    ,t.$22, t.$23, t.$24, t.$25, t.$26, t.$27, t.$28
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/BK_TRANSACTIONS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';

INS_UPDATE :=''UPDATE DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK
SET 
HK_LINK=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM("TRANSACTION"), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_ID), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#'''')))),

HK_HUB_CONTRACT=
--SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_ID), ''''#NULL#'''')))),
DECODE(TRUE, A_C_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#''''),''''|'''',COALESCE(TRIM(A_C_ID),''''#NULL#''''),''''|'''', ''''#NULL#'''' ,''''|'''', ''''#NULL#'''' )))),

HK_HUB_REGISTERED_REPRESENTATIVE=
--SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#'''')))),
DECODE(TRUE, A_C_REPRESENTATIVE IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''))))),

HK_HUB_INVESTMENT_PRODUCT_TYPE=
DECODE(TRUE, TI_ALTERNATE_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#''''))))),

MD_HASHDIFF=
SHA1(CONCAT(COALESCE(TI_ALTERNATE_TI_TYPE, ''''#NULL#''''), ''''|'''',COALESCE(TRAN_ENTRY_DESCRIPTION, ''''#NULL#''''), ''''|'''' , COALESCE(TRAN_USER_DESCRIPTION, ''''#NULL#''''), ''''|'''' , 
COALESCE(TRAN_TRADING_TYPE, ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TRAN_TRADING_GROSS_AMT),''''#NULL#''''), ''''|'''', 
COALESCE(TRAN_TRADING_CURRENCY,''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_NET_AMT),''''#NULL#'''') , ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_TRADE_DATE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_SETT_DATE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_PROCESS_DATE),''''#NULL#'''')
, ''''|'''', COALESCE(TI_SYMBOL,''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_QTY),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_PRIMARY_MARKET),''''#NULL#'''')
, ''''|'''', COALESCE(TO_VARCHAR(TRAN_TXN_REFERENCE_ID),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_AMOUNT_2),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_UNDERLYING_CDN_PRICE),''''#NULL#'''')
, ''''|'''', COALESCE(TO_VARCHAR(TI_BASIS_POINT),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_FACE_VALUE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_ISSUE_PRICE),''''#NULL#'''')
, ''''|'''', COALESCE(TO_VARCHAR(STRIKE_PRICE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_UNDERLYING_USD_PRICE),''''#NULL#'''')
)), 
MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1'';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS.SP_CONV_LOADSTG_PSA_IAS_NBIN_TO_STG_HOLDINGS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.HOLDINGS WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS.HOLDINGS (
    MD_START_DT
  , MD_SOURCE
  , MD_SEQ
  , A_C_ID
  , A_C_REPRESENTATIVE
  , TI_ALTERNATE_ID
  , TRAN_SUMM_CURR_MKT_VALUE
  , TRAN_SUMM_BUSINESS_DATE
  , TI_ALTERNATE_TI_TYPE
  , B_V_SECURITY_POSITION_VAL
  , B_V_SECURITY_POSITION_COS
  , TRAN_SUMM_AVG_UNIT_COST
  , TRAN_SUMM_NET_SETT_AMT
  , TRAN_SUMM_CURRENCY
  , TRAN_SUMM_SETT_QTY
  , TRAN_SUMM_TRADE_QTY
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM
  , TI_FACE_VALUE
  , TI_BASIS_POINT
  , MKT_PRICE_DATE
  , MARKET_PRICE_BID
  , MARKET_PRICE_ASK
  , MARKET_PRICE_CLOSE
  , PRICE_CURRENCY
  , TRAN_SUMM_CURR_MKT_PRICE
  , TRAN_SUMM_SFK_QTY 
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, metadata$file_row_number,
    t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20, t.$21, t.$22, t.$23, t.$24
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/HOLDINGS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS.HOLDINGS
SET 
  HK_LINK = SHA1(UPPER(CONCAT(
    COALESCE(TRIM(MD_SEQ), ''''#NULL#''''), ''''|'''' 
  , COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' 
  , COALESCE(TRIM(MD_EXTRACT_DT), ''''#NULL#''''), ''''|'''' 
  , COALESCE(TRIM(A_C_ID), ''''#NULL#''''), ''''|'''' 
  , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''), ''''|'''' 
  , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#''''), ''''|''''
  , ''''#NULL#'''', ''''|''''
  , ''''#NULL#''''
  ))),
    
  HK_HUB_CONTRACT = DECODE(TRUE, A_C_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_ID), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''', ''''|'''' ,''''#NULL#'''' )))),
  HK_HUB_REGISTERED_REPRESENTATIVE = DECODE(TRUE, A_C_REPRESENTATIVE IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''))))),
  HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, TI_ALTERNATE_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#''''))))),

  MD_HASHDIFF=SHA1(CONCAT(
    COALESCE(TO_VARCHAR(TRAN_SUMM_CURR_MKT_VALUE),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(TRAN_SUMM_BUSINESS_DATE),''''#NULL#''''), ''''|''''
  , COALESCE(TI_ALTERNATE_TI_TYPE,''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(B_V_SECURITY_POSITION_VAL),''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(B_V_SECURITY_POSITION_COS),''''#NULL#''''),''''|''''
  , COALESCE(TO_VARCHAR(TRAN_SUMM_AVG_UNIT_COST),''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(TRAN_SUMM_NET_SETT_AMT),''''#NULL#''''),''''|'''' 
  , COALESCE(TRAN_SUMM_CURRENCY,''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(TRAN_SUMM_SETT_QTY),''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(TRAN_SUMM_TRADE_QTY),''''#NULL#''''),''''|''''
  , COALESCE(TO_VARCHAR(TI_FACE_VALUE),''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(TI_BASIS_POINT),''''#NULL#''''),''''|''''
  , COALESCE(TO_VARCHAR(MKT_PRICE_DATE),''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(MARKET_PRICE_BID),''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(MARKET_PRICE_ASK),''''#NULL#''''),''''|''''
  , COALESCE(TO_VARCHAR(MARKET_PRICE_CLOSE),''''#NULL#''''),''''|''''
  , COALESCE(PRICE_CURRENCY,''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(TRAN_SUMM_CURR_MKT_PRICE),''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(TRAN_SUMM_SFK_QTY),''''#NULL#'''')  
  )), 
  
  MD_CREATION_DT= SYSTIMESTAMP()
Where 1=1;
'';


EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS.SP_CONV_LOADSTG_PSA_IAS_NBIN_TO_STG_INVESTMENT_PRODUCT_TYPE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.INVESTMENT_PRODUCT_TYPE WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS.INVESTMENT_PRODUCT_TYPE
(
MD_START_DT,
MD_SOURCE,
TI_ALTERNATE_ID,
TI_ALTERNATE_TI_TYPE,
TI_TYPE,
TI_ALTERNATE_TI_CLASS,
TI_CLASS,
TI_ALTERNATE_SHORT_DESC,
ENGLISH_DESCRIPTION,
TI_SYMBOL,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*MARKETPRODUCTS__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS.INVESTMENT_PRODUCT_TYPE
SET
HK_HUB=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#'''')))),
MD_HASHDIFF=
SHA1(CONCAT(COALESCE(TI_ALTERNATE_TI_TYPE, ''''#NULL#''''), ''''|'''',COALESCE(TI_TYPE, ''''#NULL#''''), ''''|'''' , COALESCE(TI_ALTERNATE_TI_CLASS, ''''#NULL#''''), ''''|'''' , COALESCE(TI_CLASS, ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TI_ALTERNATE_SHORT_DESC),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(ENGLISH_DESCRIPTION),''''#NULL#''''), ''''|'''', COALESCE(TI_SYMBOL,''''#NULL#'''') )),  
MD_CREATION_DT= SYSTIMESTAMP()
Where 1=1;
'';


EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS.SP_CONV_LOADSTG_PSA_IAS_NBIN_TO_STG_PLANS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.REF_INVESTMENT_SAVING_PROGRAM_TYPES WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS.REF_INVESTMENT_SAVING_PROGRAM_TYPES
(
MD_START_DT,
MD_SOURCE,
A_C_ACCOUNT_CLASS,
RETAIL_PLAN,
RETAIL_PLAN_RESP,
ACCOUNT_RAP_CODE,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4,t.$5, t.$6
  FROM
    @DATALAKE.''||io_PATH||'' t
  ) pattern =''''.*PLANS_.*csv'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS.REF_INVESTMENT_SAVING_PROGRAM_TYPES
SET
HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#'''') ,''''|'''', ''''#NULL#'''',''''|'''', COALESCE(TRIM(A_C_ACCOUNT_CLASS),''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TO_VARCHAR(RETAIL_PLAN)),''''#NULL#''''), ''''|'''', COALESCE(TRIM(RETAIL_PLAN_RESP),''''#NULL#''''),''''|'''', COALESCE(TRIM(ACCOUNT_RAP_CODE),''''#NULL#'''')))),
     MD_HASHDIFF=''''0'''' ,
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;
'';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS.SP_LOADSTG_PSA_IAS_COMMISSION_TO_STG_REVENUES("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_COMMISSION.REVENUES WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_COMMISSION.REVENUES
(
MD_START_DT,
MD_SOURCE,
  REPID ,
  ADVISOR_ID ,
  PROGRAM_TYPE ,
  ACCOUNTID ,
  PROCESSDATE ,
  SOURCECODE ,
  QUANTITY ,
  TRANSTYPE ,
  REVENUE ,
  COMMISSION ,
  NETCOMMISSION ,
  TRANSFEE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,t.$11,t.$12,t.$13,t.$14
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern =''''.*REVENUES__.*csv'''' file_format=(format_name=IAS.PIPE_UTF16);
              '';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS.SP_LOADSTG_PSA_IAS_NBIN_TO_STG_CASH_HOLDINGS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.CASH_HOLDINGS WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS.CASH_HOLDINGS (
    MD_START_DT
  , MD_SOURCE
  , MD_SEQ
  , A_C_ID
  , A_C_CLIENT
  , A_C_REPRESENTATIVE
  , A_C_SUMM_BALANCE_BUS_DATE
  , A_C_SUMM_SD_NET_AMT
  , A_C_SUMM_TD_NET_AMT
  , A_C_CURRENCY
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/CASH_HOLDINGS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS.SP_LOADSTG_PSA_IAS_NBIN_TO_STG_CLIENTS("ENV" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var UPD_QUERY = "UPDATE DB_IAW_"+ENV+"_STG.IAS.ACCOUNT_HOLDER SET \\
        HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''#NULL#''), ''|'' , COALESCE(TRIM(A_C_CLIENT), ''#NULL#'')))), \\
        MD_HASHDIFF=SHA1(CONCAT(COALESCE(SIN_HASH, ''#NULL#''), ''|'' , COALESCE(TO_VARCHAR(CLIENT_BIRTH_DATE),''#NULL#''), ''|'', COALESCE(CLIENT_TAX_RECIP_TYPE,''#NULL#''), ''|'',  COALESCE(CLIENT_RESIDENCE, ''#NULL#''), ''|'', COALESCE(CLIENT_RESIDENCE_REGION,''#NULL#''), ''|'', COALESCE(CLIENT_ANNUAL_GROSS_INC,''#NULL#''), ''|'', COALESCE(TO_VARCHAR(CLIENT_INIT_CONTRACT_DATE),''#NULL#''))), MD_CREATION_DT=SYSTIMESTAMP() Where 1=1;";

var sql_statement = snowflake.createStatement(
          {
          sqlText: UPD_QUERY
          }
       );
   var result_scan = sql_statement.execute(); 
 
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS.SP_LOADSTG_PSA_IAS_NBIN_TO_STG_HOLDINGS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.HOLDINGS WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS.HOLDINGS (
    MD_START_DT
  , MD_SOURCE
  , MD_SEQ
  , A_C_ID
  , A_C_REPRESENTATIVE
  , TI_ALTERNATE_ID
  , TRAN_SUMM_CURR_MKT_VALUE
  , TRAN_SUMM_BUSINESS_DATE
  , TI_ALTERNATE_TI_TYPE
  , B_V_SECURITY_POSITION_VAL
  , B_V_SECURITY_POSITION_COS
  , TRAN_SUMM_AVG_UNIT_COST
  , TRAN_SUMM_NET_SETT_AMT
  , TRAN_SUMM_CURRENCY
  , TRAN_SUMM_SETT_QTY
  , TRAN_SUMM_TRADE_QTY
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, metadata$file_row_number,
    t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14, t.$15
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/HOLDINGS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS.TEST1("ENV" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '';
create or replace schema DB_IAW_DEV_STG.CLONE_INF2_IAS_IAVM;

create or replace TRANSIENT TABLE DB_IAW_DEV_STG.CLONE_INF2_IAS_IAVM.ACCRUED_INTEREST (
  HK_LINK VARCHAR(40) COMMENT 'Hash of the business keys',
  HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash of the investment product type',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  PROCESS_DATE DATE COMMENT 'Process date',
  PRODUCT_CODE VARCHAR(12) COMMENT 'Product code / Security group code',
  FIID VARCHAR(15) COMMENT 'IBM/OSS Security Id',
  CUSIP VARCHAR(9) COMMENT 'CUSIP',
  ISIN VARCHAR(12) COMMENT 'ISIN NO',
  MARKET VARCHAR(12) COMMENT 'Market',
  SYMBOL VARCHAR(26) COMMENT 'Security Symbol',
  INTEREST_RATE NUMBER(29,2) COMMENT 'Income Profile Rate',
  ACCRUED_INTEREST_METHOD1 VARCHAR(1) COMMENT 'Accrued Int Method 1',
  ACCRUED_INTEREST_METHOD2 VARCHAR(1) COMMENT 'Accrued Int Method 2',
  DAILY_COUNT_BASIS VARCHAR(15) COMMENT 'US_NASD/ACTUAL_360/ACTUAL_329/ACTUAL',
  INTEREST_START_DATE DATE COMMENT 'Int. Start Date',
  YEAR_FRACTION NUMBER(29,9) COMMENT 'Year',
  BASE_ACCRUED_INTEREST NUMBER(29,11) COMMENT 'BASE ACCRUED INTEREST'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.CLONE_INF2_IAS_IAVM.POSITION_PRICE (
  HK_LINK VARCHAR(40) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  PROCESSDATE DATE COMMENT 'Process Date',
  UNITOFMEASURE NUMBER(11,0) COMMENT 'Unit Of Measure',
  PRICE NUMBER(38,8) COMMENT 'Price',
  SYMBOL VARCHAR(26) COMMENT 'SECURITY_SYMBOL',
  MARKET VARCHAR(12) COMMENT 'Market',
  ACCOUNTID VARCHAR(18) COMMENT 'Account ID',
  CLOSEPRICE NUMBER(38,8) COMMENT 'Close Price',
  PRICECURRENCY VARCHAR(3) COMMENT 'Price Currency',
  BIDPRICE NUMBER(38,8) COMMENT 'Bid Price',
  ASKPRICE NUMBER(38,8) COMMENT 'Ask Price'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.CLONE_INF2_IAS_IAVM.PRODUCTION_SHARE_TEST_POSITION (
  UNITOFMEASURE NUMBER(11,0) COMMENT 'Unit Of Measure',
  PRICE NUMBER(38,8) COMMENT 'Price',
  SYMBOL VARCHAR(26) COMMENT 'SECURITY_SYMBOL',
  MARKET VARCHAR(12) COMMENT 'Market',
  PROCESSDATE DATE NOT NULL COMMENT 'Process Date',
  MD_LOADDATE DATE COMMENT 'Load Date',
  MD_SRCSYSTEM VARCHAR(36)
);
create or replace TABLE DB_IAW_DEV_STG.CLONE_INF2_IAS_IAVM.PRODUCTION_SHARE_TEST_POSITION_HIST (
  UNITOFMEASURE NUMBER(11,0) COMMENT 'Unit Of Measure',
  PRICE NUMBER(38,8) COMMENT 'Price',
  SYMBOL VARCHAR(26) COMMENT 'SECURITY_SYMBOL',
  MARKET VARCHAR(12) COMMENT 'Market',
  PROCESSDATE DATE NOT NULL COMMENT 'Process Date',
  MD_LOADDATE DATE COMMENT 'Load Date',
  MD_SRCSYSTEM VARCHAR(36)
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.CLONE_INF2_IAS_IAVM.REF_EXCHANGE_RATE (
  HK_LINK VARCHAR(64) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  EXCHANGEDATE DATE COMMENT 'Exchange rate date',
  EXCHANGERATE NUMBER(38,8) COMMENT 'Conversion rate from USD to CAD',
  REVNO NUMBER(38,0) COMMENT 'Modification version number'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.CLONE_INF2_IAS_IAVM.REF_HOLIDAYS (
  HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  HOLIDAY_DATE DATE COMMENT 'Date of the holiday',
  DESCRIPTION VARCHAR(512) COMMENT 'Description of the holiday'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.CLONE_INF2_IAS_IAVM.REF_MAPPING_PRODUCT_TYPE (
  HK_HUB VARCHAR(64) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  DESCRIPTIONEN VARCHAR(512) COMMENT 'Product type description EN',
  DESCRIPTIONFR VARCHAR(512) COMMENT 'Product type description FR',
  TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
  TI_ALTERNATE_TI_CLASS VARCHAR(50) COMMENT 'Product type class code',
  PRODUCTTYPE VARCHAR(100) COMMENT 'Product type code'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.CLONE_INF2_IAS_IAVM.REGISTERED_REPRESENTATIVE (
  HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  MEMBER VARCHAR(250) COMMENT 'Member: JSMITH',
  TEAMTYPE VARCHAR(7) COMMENT 'The type of team - Default constant',
  ACTIVE VARCHAR(12) COMMENT 'The type of team - Default constant',
  USERTYPE VARCHAR(12) COMMENT 'Type of User : IA',
  TEAMID NUMBER(38,0) COMMENT 'The advisor team code',
  TEAMNAME VARCHAR(256) COMMENT 'The advisor team name: IA HOUSE',
  RVPID NUMBER(38,0) COMMENT 'VP Rep ID',
  RVPNAME VARCHAR(256) COMMENT 'VP Name',
  REPID VARCHAR(12) COMMENT 'Representative ID',
  REPNAME VARCHAR(250) COMMENT 'Representative Name: SMITH JOHN',
  PROVINCE VARCHAR(12) COMMENT 'Province Code : ON'
);
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.CLONE_INF2_IAS_IAVM.PIPE_UTF16
  TYPE = csv
  FIELD_DELIMITER = '|'
  ESCAPE_UNENCLOSED_FIELD = 'NONE'
  NULL_IF = ('0000-00-00')
  ENCODING = 'UTF-16'
;
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS_IAVM.SP_CONV_LOADSTG_PSA_IAS_IAVM_TO_STG_ACCRUED_INTEREST("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAWT_''||ENV||''_STG.IAS_IAVM.ACCRUED_INTEREST WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAWT_''||ENV||''_STG.IAS_IAVM.ACCRUED_INTEREST (
  MD_START_DT, 
  MD_SOURCE,
  PROCESS_DATE,
  PRODUCT_CODE,
  FIID,
  CUSIP,
  ISIN,
  MARKET,
  SYMBOL,
  INTEREST_RATE,
  ACCRUED_INTEREST_METHOD1,
  ACCRUED_INTEREST_METHOD2,
  DAILY_COUNT_BASIS,
  INTEREST_START_DATE,
  YEAR_FRACTION,
  BASE_ACCRUED_INTEREST,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13,t.$14,t.$15,t.$16
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*ACCRUED_INTEREST_.*csv'''' file_format =(format_name = DB_IAWT_''||ENV||''_STG.IAS_IAVM.PIPE_UTF16);
              '';         
INS_UPDATE := ''
UPDATE DB_IAWT_''||ENV||''_STG.IAS_IAVM.ACCRUED_INTEREST 
SET 
HK_LINK= 
           SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , 
                         COALESCE(TO_VARCHAR(TRIM(PROCESS_DATE)), ''''#NULL#''''), ''''|'''' , 
               COALESCE(TRIM(FIID), ''''#NULL#''''), ''''|'''' ,
               COALESCE(TRIM(PRODUCT_CODE), ''''#NULL#''''), ''''|'''' ,
               COALESCE(TRIM(MARKET), ''''#NULL#''''), ''''|'''' ,
                             COALESCE(TRIM(SYMBOL), ''''#NULL#''''), ''''|'''' , 
               COALESCE(TO_VARCHAR(TRIM(INTEREST_RATE)), ''''#NULL#''''), ''''|'''' ,
               COALESCE(TO_VARCHAR(TRIM(INTEREST_START_DATE)), ''''#NULL#''''), ''''|'''' ,
               COALESCE(TO_VARCHAR(TRIM(YEAR_FRACTION)), ''''#NULL#'''') , ''''|'''' ,
               COALESCE(TO_VARCHAR(TRIM(BASE_ACCRUED_INTEREST)), ''''#NULL#'''') 
               ))),
HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, FIID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(FIID), ''''#NULL#''''))))),
MD_CREATION_DT=systimestamp()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS_IAVM.SP_CONV_LOADSTG_PSA_IAS_IAVM_TO_STG_POSITION_PRICE_IAS_IAVM("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.POSITION_PRICE WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_IAVM.POSITION_PRICE (
    MD_START_DT
  , MD_SOURCE
  , ACCOUNTID
  , UNITOFMEASURE
  , PRICE
  , SYMBOL
  , MARKET
  , PROCESSDATE
  , CLOSEPRICE
  , PRICECURRENCY
  , BIDPRICE
  , ASKPRICE
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/POSITION_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_IAVM.POSITION_PRICE
SET
  HK_LINK=
  SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(PROCESSDATE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(UNITOFMEASURE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(SYMBOL), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MARKET), ''''#NULL#''''), ''''|'''', COALESCE(TRIM(ACCOUNTID), ''''#NULL#'''')))),
  MD_HASHDIFF=
  SHA1(CONCAT(COALESCE(TO_VARCHAR(PRICE), ''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(CLOSEPRICE), ''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(PRICECURRENCY), ''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(BIDPRICE), ''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(ASKPRICE), ''''#NULL#'''')
  )), 
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS_IAVM.SP_CONV_LOADSTG_PSA_IAS_IAVM_TO_STG_REF_EXCHANGE_RATE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_EXCHANGE_RATE WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_EXCHANGE_RATE
(
MD_START_DT,
MD_SOURCE,
EXCHANGEDATE,
EXCHANGERATE,
REVNO,
MD_EXTRACT_DT,
MD_SRC_SYSTEM

) 
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5
  FROM
    @DATALAKE.''||IO_PATH||'' T
  ) pattern = ''''.*EXCHANGE_RATE__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
        '';      

INS_UPDATE :=''UPDATE DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_EXCHANGE_RATE SET HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TO_VARCHAR(EXCHANGEDATE)), ''''#NULL#'''')))),
MD_HASHDIFF= SHA1(CONCAT(COALESCE(TO_VARCHAR(EXCHANGERATE), ''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(REVNO), ''''#NULL#''''))),  MD_CREATION_DT=SYSTIMESTAMP() Where 1=1'';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS_IAVM.SP_CONV_LOADSTG_PSA_IAS_IAVM_TO_STG_REF_HOLIDAYS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_HOLIDAYS WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_HOLIDAYS (
    MD_START_DT
  , MD_SOURCE
  , HOLIDAY_DATE
  , DESCRIPTION
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename,t.$1, t.$2, t.$3, t.$4
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/HOLIDAYS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_HOLIDAYS
SET
  HK_HUB=
  SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TO_VARCHAR(HOLIDAY_DATE)), ''''#NULL#'''')))),
  MD_HASHDIFF=
  SHA1(COALESCE(TO_VARCHAR(DESCRIPTION), ''''#NULL#'''')),  
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS_IAVM.SP_CONV_LOADSTG_PSA_IAS_IAVM_TO_STG_REF_HOLIDAYSS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_HOLIDAYS WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_HOLIDAYS (
    MD_START_DT
  , MD_SOURCE
  , HOLIDAY_DATE
  , DESCRIPTION
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename,t.$1, t.$2, t.$3, t.$4
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/HOLIDAYS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS_IAVM.SP_CONV_LOADSTG_PSA_IAS_IAVM_TO_STG_REF_MAPPING_PRODUCT_TYPE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_MAPPING_PRODUCT_TYPE
WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_MAPPING_PRODUCT_TYPE (
    MD_START_DT
  , MD_SOURCE
  , TI_ALTERNATE_TI_TYPE
  , TI_ALTERNATE_TI_CLASS
  , DESCRIPTIONEN
  , DESCRIPTIONFR
  , PRODUCTTYPE
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/MAPPING_PRODUCT_TYPE_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_MAPPING_PRODUCT_TYPE
SET
    HK_HUB=
  SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_TI_TYPE), ''''#NULL#''''), ''''|'''' ,COALESCE(TRIM(TI_ALTERNATE_TI_CLASS), ''''#NULL#'''')))),
  MD_HASHDIFF=
  SHA1(CONCAT(COALESCE(DESCRIPTIONEN,''''#NULL#''''), ''''|'''',COALESCE(DESCRIPTIONFR, ''''#NULL#''''), ''''|'''' , COALESCE(PRODUCTTYPE, ''''#NULL#''''))), 
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS_IAVM.SP_CONV_LOADSTG_PSA_IAS_IAVM_TO_STG_REGISTERED_REPRESENTATIVE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.REGISTERED_REPRESENTATIVE WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_IAVM.REGISTERED_REPRESENTATIVE (
    MD_START_DT
  , MD_SOURCE
  , MEMBER
  , TEAMTYPE
  , ACTIVE
  , USERTYPE
  , TEAMID
  , TEAMNAME
  , RVPID
  , RVPNAME
  , REPID
  , REPNAME
  , PROVINCE
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/REGISTERED_REPRESENTATIVE_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS_IAVM.PIPE_UTF16);
              '';         
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_IAVM.REGISTERED_REPRESENTATIVE
SET
    HK_HUB=SHA1(UPPER(CONCAT(''''IAS'''', ''''|'''' ,COALESCE(TRIM(REPID), ''''#NULL#'''') ))),
  MD_HASHDIFF=SHA1(CONCAT(
  COALESCE(MEMBER, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TEAMTYPE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(ACTIVE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(USERTYPE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(TEAMID), ''''#NULL#''''), ''''|'''' ,
  COALESCE(TEAMNAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(RVPID), ''''#NULL#''''), ''''|'''' ,
  COALESCE(RVPNAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(REPID), ''''#NULL#''''), ''''|'''' ,
  COALESCE(REPNAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(PROVINCE, ''''#NULL#''''))),
  MD_CREATION_DT=systimestamp()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.CLONE_INF2_IAS_IAVM."SP_CONV_LOADSTG_PSA_IAS_IAVM_To_STG_REF_MAPPING_PRODUCT_TYPE"("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_MAPPING_PRODUCT_TYPE
WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_MAPPING_PRODUCT_TYPE (
    MD_START_DT
  , MD_SOURCE
  , TI_ALTERNATE_TI_TYPE
  , TI_ALTERNATE_TI_CLASS
  , DESCRIPTIONEN
  , DESCRIPTIONFR
  , PRODUCTTYPE
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/MAPPING_PRODUCT_TYPE_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
create or replace schema DB_IAW_DEV_STG.DATALAKE;

create or replace schema DB_IAW_DEV_STG.EXTERNAL_KPI;

create or replace TABLE DB_IAW_DEV_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_CLARINGTON (
  HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  KPI_DATE TIMESTAMP_NTZ(9) COMMENT 'Date',
  TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_MF NUMBER(20,4) COMMENT 'Trade/Account Processing Automation % MF',
  TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_GIF NUMBER(20,4) COMMENT 'Trade/Account Processing Automation % GIF',
  FTE NUMBER(20,4) COMMENT 'FTE',
  TOTAL_TRANSACTIONS_MF NUMBER(20,4) COMMENT 'Total Transactions MF',
  TOTAL_TRANSACTIONS_GIF NUMBER(20,4) COMMENT 'Total Transactions GIF',
  TOTAL_TRANSACTIONS_FTE_MF NUMBER(20,4) COMMENT 'Total Transactions/FTE MF',
  TOTAL_TRANSACTIONS_FTE_GIF NUMBER(20,4) COMMENT 'Total Transactions/FTE GIF',
  NO_OF_ACCOUNTS NUMBER(20,4) COMMENT 'No. of Accounts',
  ACCOUNTS_FTE NUMBER(20,4) COMMENT 'Accounts/FTE',
  ACCOUNTS_FTE_TARGET NUMBER(20,4) COMMENT 'Accounts/FTE Target',
  YOY_NEW_ACCOUNTS_CLIENT_NAME NUMBER(20,4) COMMENT 'YoY New Accounts Client Name',
  YOY_NEW_ACCOUNTS_CLIENT_NOMINEE NUMBER(20,4) COMMENT 'YoY New Accounts Client Nominee',
  TOTAL_ACCOUNTS_IN_NOMINEE NUMBER(20,4) COMMENT 'Total Account in Nominee %',
  EXPENSES NUMBER(20,4) COMMENT 'Expenses',
  REVENUES NUMBER(20,4) COMMENT 'Revenues',
  EFFICIENCY_RATIO NUMBER(20,4) COMMENT 'Efficiency Ratio',
  EXPENSES_TARGET NUMBER(20,4) COMMENT 'Expenses Target',
  REVENUE_TARGET NUMBER(20,4) COMMENT 'Revenue Target',
  EFFICIENCY_RATIO_TARGET NUMBER(20,4) COMMENT 'Efficiency Ratio Target',
  TOTAL_ASSETS NUMBER(20,4) COMMENT 'Total Assets',
  AFFILIATE_PENETRATION_IIROC NUMBER(20,4) COMMENT 'Affiliate Penetration IIROC',
  AFFILIATE_PENETRATION_IIROC_TARGET NUMBER(20,4) COMMENT 'Affiliate Penetration IIROC Target',
  AFFILIATE_PENETRATION_MFDA NUMBER(20,4) COMMENT 'Affiliate Penetration MFDA',
  AFFILIATE_PENETRATION_MFDA_TARGET NUMBER(20,4) COMMENT 'Affiliate Penetration MFDA Target',
  GROSS_MARGIN NUMBER(20,4) COMMENT 'Gross Margin',
  GROSS_MARGIN_TARGET NUMBER(20,4) COMMENT 'Gross Margin Target',
  NET_SALES NUMBER(20,4) COMMENT 'Net Sales'
);
create or replace TABLE DB_IAW_DEV_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_IAPW (
  HK_HUB VARCHAR(40) COMMENT ' Hash key for the Hub ',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT ' Start Date of the image/version ',
  MD_HASHDIFF VARCHAR(40) COMMENT ' Represents the whole set of hashed attributes to be historized for an occurrence ',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT ' Creation Date Time of the occurrence ',
  MD_SOURCE VARCHAR(1000) COMMENT ' Represents the source system, file, etc. of the instance ',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT ' Source system ',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT ' Extraction date of the occurrence ',
  KPI_DATE TIMESTAMP_NTZ(9) COMMENT 'KPI Date',
  NO_OF_ACTIVE_CLIENTS NUMBER(38,4) COMMENT 'No. of Active Clients',
  NO_OF_ACTIVE_ACCOUNTS NUMBER(38,4) COMMENT 'No. of Active Accounts',
  FTE NUMBER(38,4) COMMENT 'FTE',
  ACCOUNTS_FTE NUMBER(38,4) COMMENT 'Accounts/FTE',
  ACCOUNTS_FTE_TARGET NUMBER(38,4) COMMENT 'Accounts/FTE Target',
  APPWAY_REGISTRATION NUMBER(38,4) COMMENT 'Appway % Registration',
  APPWAY_REGISTRATION_TARGET NUMBER(38,4) COMMENT 'Appway % Registration Target',
  NO_OF_CLIENT_ID_REGISTERED NUMBER(38,4) COMMENT 'No. of Client ID registered',
  PORTAL_REGISTRATION NUMBER(38,4) COMMENT 'Portal % registration',
  PORTAL_REGISTRATION_TARGET NUMBER(38,4) COMMENT 'Portal % registration Target',
  MYPORTFOLIO_TO_NEW_CLIENT NUMBER(38,4) COMMENT 'MyPortfolio+ to new client',
  E_DELIVERY_PORTFOLIO_STATEMENTS NUMBER(38,4) COMMENT 'E-Delivery Portfolio Statements',
  E_DELIVERY_TAX_SLIPS NUMBER(38,4) COMMENT 'E-Delivery Tax Slips',
  E_DELIVERY_CONFIRMS NUMBER(38,4) COMMENT 'E-Delivery Confirms',
  AVG_E_DELIVERY_REGISTRATION NUMBER(38,4) COMMENT 'Avg. E-Delivery % registration',
  E_DELIVERY_REGISTRATION_TARGET NUMBER(38,4) COMMENT 'E-Delivery % registration Target',
  RETAIL_YTD_EXPENSES NUMBER(38,4) COMMENT 'Retail YTD Expenses',
  RETAIL_YTD_REVENUES NUMBER(38,4) COMMENT 'Retail YTD Revenues',
  RETAIL_FINANCIAL_EFFICIENCY_RATIO NUMBER(38,4) COMMENT 'Retail Financial Efficiency Ratio',
  RETAIL_YTD_EXPENSES_TARGET NUMBER(38,4) COMMENT 'Retail YTD Expenses Target',
  RETAIL_YTD_REVENUES_TARGET NUMBER(38,4) COMMENT 'Retail YTD Revenues Target',
  RETAIL_EFFICIENCY_RATIO_TARGET NUMBER(38,4) COMMENT 'Retail Efficiency Ratio Target',
  CAP_MRKTS_YTD_EXPENSES NUMBER(38,4) COMMENT 'Cap. Mrkts YTD Expenses',
  CAP_MKTS_YTD_REVENUES NUMBER(38,4) COMMENT 'Cap. Mkts YTD Revenues',
  CAP_MRKTS_EFFICIENCY_RATIO NUMBER(38,4) COMMENT 'Cap. Mrkts Efficiency Ratio',
  CAP_MRKTS_YTD_EXPENSES_TARGET NUMBER(38,4) COMMENT 'Cap. Mrkts YTD Expenses Target',
  CAP_MRKTS_YTD_REVENUES_TARGET NUMBER(38,4) COMMENT 'Cap. Mrkts YTD Revenues Target',
  CAP_MRKTS_EFFICIENCY_RATIO_TARGET NUMBER(38,4) COMMENT 'Cap. Mrkts Efficiency Ratio Target',
  TOTAL_ASSETS NUMBER(38,4) COMMENT 'Total Assets',
  NET_TOTAL_REVENUE NUMBER(38,4) COMMENT 'Net Total Revenue',
  NET_TOTAL_REVENUE_TARGET NUMBER(38,4) COMMENT 'Net Total Revenue Target',
  NET_BOND_DESK_REVENUE NUMBER(38,4) COMMENT 'Net Bond Desk Revenue',
  NET_BOND_DESK_REVENUE_TARGET NUMBER(38,4) COMMENT 'Net Bond Desk Revenue Target',
  CAPITAL_MKTS_REVENUE NUMBER(38,4) COMMENT 'Capital Mkts Revenue',
  CAPITAL_MKTS_REVENUE_TARGET NUMBER(38,4) COMMENT 'Capital Mkts Revenue Target',
  NET_RETAIL_REVENUE NUMBER(38,4) COMMENT 'Net Retail Revenue',
  NET_RETAIL_REVENUE_TARGET NUMBER(38,4) COMMENT 'Net Retail Revenue Target',
  RECRUITING NUMBER(38,4) COMMENT 'Recruiting',
  TERMINATED_ADVISORS NUMBER(38,4) COMMENT 'Terminated Advisors',
  ORGANIC_GROWTH NUMBER(38,4) COMMENT 'Organic Growth'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_INVESTIA (
  HK_HUB VARCHAR(40) COMMENT ' Hash key for the Hub ',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT ' Start Date of the image/version ',
  MD_HASHDIFF VARCHAR(40) COMMENT ' Represents the whole set of hashed attributes to be historized for an occurrence ',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT ' Creation Date Time of the occurrence ',
  MD_SOURCE VARCHAR(1000) COMMENT ' Represents the source system, file, etc. of the instance ',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT ' Source system ',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT ' Extraction date of the occurrence ',
  KPI_DATE TIMESTAMP_NTZ(9) COMMENT ' KPI Date ',
  NO_CLIENT_ID NUMBER(20,4) COMMENT ' # Client ID ',
  E_DELIVERY NUMBER(20,4) COMMENT ' E-delivery ',
  E_DELIVERY_PCT NUMBER(20,4) COMMENT ' % E-delivery ',
  E_DELIVERY_TARGET_PCT NUMBER(20,4) COMMENT ' % E-delivery Target ',
  PORTAL_REGISTRATION NUMBER(20,4) COMMENT ' Portal Registration ',
  PORTAL_REGISTRATION_PCT NUMBER(20,4) COMMENT ' % Portal Registration ',
  PORTAL_REGISTRATION_TARGET NUMBER(20,4) COMMENT ' Portal Registration Target ',
  FTE NUMBER(20,4) COMMENT ' FTE ',
  CLIENTS_BY_FTE NUMBER(20,4) COMMENT ' Clients by FTE ',
  CLIENTS_BY_FTE_TARGET NUMBER(20,4) COMMENT ' Clients by FTE Target ',
  NO_OF_ACCOUNTS NUMBER(20,4) COMMENT ' No of accounts ',
  ACCOUNTS_BY_FTE NUMBER(20,4) COMMENT ' Accounts by FTE ',
  ACTUAL_YTD_EXPENSES NUMBER(20,4) COMMENT ' Actual YTD Expenses ',
  ACTUAL_YTD_REVENUES NUMBER(20,4) COMMENT ' Actual YTD Revenues ',
  EFFICIENCY_RATIO NUMBER(20,4) COMMENT ' Efficiency Ratio ',
  YTD_EXPENSES_TARGET NUMBER(20,4) COMMENT ' YTD Expenses Taregt ',
  YTD_REVENUES_TARGET NUMBER(20,4) COMMENT ' YTD Revenues Target ',
  EFFICIENCY_RATIO_TARGET NUMBER(20,4) COMMENT ' Efficiency Ratio Target ',
  AUA_IN_NOMINEE NUMBER(20,4) COMMENT ' AUA in Nominee ',
  AUA_IN_CLIENT_NAME NUMBER(20,4) COMMENT ' AUA in Client Name ',
  NO_OF_RPAS_IMPLEMENTED NUMBER(20,4) COMMENT ' # of RPAs implemented ',
  HOURS_SAVED_DUE_TO_RPAS NUMBER(20,4) COMMENT ' Hours Saved due to RPAs ',
  CONTINUOUS_IMPROVEMENT_QUICK_WINS NUMBER(20,4) COMMENT ' Continuous improvement/quick wins ',
  TOTAL_ASSETS NUMBER(20,4) COMMENT ' Total Assets  ',
  ORGANIC_GROWTH NUMBER(20,4) COMMENT ' Organic Growth  ',
  TOTAL_REVENUE NUMBER(20,4) COMMENT ' Total Revenue  ',
  TOTAL_REVENUE_TARGET NUMBER(20,4) COMMENT ' Total Revenue Target  ',
  RECRUITING NUMBER(20,4) COMMENT ' Recruiting  ',
  TERMINATED_ADVISORS NUMBER(20,4) COMMENT ' Terminated Advisors  '
);
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.EXTERNAL_KPI.CSV_UTF8
  TYPE = csv
  FIELD_DELIMITER = ';'
  SKIP_HEADER = 1
  NULL_IF = ('NULL', '')
;
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.EXTERNAL_KPI.SP_CONV_LOADSTG_PSA_IAPW_TO_STG_MASTER_KPI_DATA_CLARINGTON("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_CLARINGTON WHERE 1=1'';
INS_PRE_COPY := ''

COPY INTO DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_CLARINGTON
(
MD_START_DT,
MD_SOURCE,
MD_EXTRACT_DT,
KPI_DATE,
TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_MF,
TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_GIF,
FTE,
TOTAL_TRANSACTIONS_MF,
TOTAL_TRANSACTIONS_GIF,
TOTAL_TRANSACTIONS_FTE_MF,
TOTAL_TRANSACTIONS_FTE_GIF,
NO_OF_ACCOUNTS,
ACCOUNTS_FTE,
ACCOUNTS_FTE_TARGET,
YOY_NEW_ACCOUNTS_CLIENT_NAME,
YOY_NEW_ACCOUNTS_CLIENT_NOMINEE,
TOTAL_ACCOUNTS_IN_NOMINEE,
EXPENSES,
REVENUES,
EFFICIENCY_RATIO,
EXPENSES_TARGET,
REVENUE_TARGET,
EFFICIENCY_RATIO_TARGET,
TOTAL_ASSETS,
AFFILIATE_PENETRATION_IIROC,
AFFILIATE_PENETRATION_IIROC_TARGET,
AFFILIATE_PENETRATION_MFDA,
AFFILIATE_PENETRATION_MFDA_TARGET,
GROSS_MARGIN,
GROSS_MARGIN_TARGET,
NET_SALES
)
FROM
(
SELECT
TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,
t.$1,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11,
t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20, t.$21, t.$22,
t.$23, t.$24, t.$25, t.$26, t.$27, t.$28
FROM
@DATALAKE.''||IO_PATH||'' t
) pattern = ''''.*MASTER_KPI_DATA_CLARINGTON__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.CSV_UTF8)
'';
INS_UPDATE := ''
  UPDATE DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_CLARINGTON  
  SET
  HK_HUB=
  SHA1(COALESCE(TRIM("KPI_DATE"), ''''#NULL#'''')),
  MD_HASHDIFF=
  SHA1(CONCAT(
  COALESCE(TO_VARCHAR(TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_MF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_GIF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(FTE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_TRANSACTIONS_MF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_TRANSACTIONS_GIF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_TRANSACTIONS_FTE_MF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_TRANSACTIONS_FTE_GIF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NO_OF_ACCOUNTS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(ACCOUNTS_FTE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(ACCOUNTS_FTE_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(YOY_NEW_ACCOUNTS_CLIENT_NAME) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(YOY_NEW_ACCOUNTS_CLIENT_NOMINEE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_ACCOUNTS_IN_NOMINEE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(EXPENSES) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(REVENUES) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(EFFICIENCY_RATIO) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(EXPENSES_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(REVENUE_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(EFFICIENCY_RATIO_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_ASSETS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AFFILIATE_PENETRATION_IIROC) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AFFILIATE_PENETRATION_IIROC_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AFFILIATE_PENETRATION_MFDA) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AFFILIATE_PENETRATION_MFDA_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(GROSS_MARGIN) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(GROSS_MARGIN_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NET_SALES) , ''''#NULL#'''')
)),
MD_CREATION_DT=systimestamp(),
MD_SRC_SYSTEM =''''CLARINGTON_MONTHLY_KPI''''
Where 1=1'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_COPY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.EXTERNAL_KPI.SP_CONV_LOADSTG_PSA_IAPW_TO_STG_MASTER_KPI_DATA_IAPW("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_IAPW WHERE 1=1'';
INS_PRE_COPY := ''
COPY INTO DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_IAPW
(
MD_START_DT,
MD_SOURCE,
MD_EXTRACT_DT,
KPI_DATE,
NO_OF_ACTIVE_CLIENTS,
NO_OF_ACTIVE_ACCOUNTS,
FTE,
ACCOUNTS_FTE,
ACCOUNTS_FTE_TARGET,
APPWAY_REGISTRATION,
APPWAY_REGISTRATION_TARGET,
NO_OF_CLIENT_ID_REGISTERED,
PORTAL_REGISTRATION,
PORTAL_REGISTRATION_TARGET,
MYPORTFOLIO_TO_NEW_CLIENT,
E_DELIVERY_PORTFOLIO_STATEMENTS,
E_DELIVERY_TAX_SLIPS,
E_DELIVERY_CONFIRMS,
AVG_E_DELIVERY_REGISTRATION,
E_DELIVERY_REGISTRATION_TARGET,
RETAIL_YTD_EXPENSES,
RETAIL_YTD_REVENUES,
RETAIL_FINANCIAL_EFFICIENCY_RATIO,
RETAIL_YTD_EXPENSES_TARGET,
RETAIL_YTD_REVENUES_TARGET,
RETAIL_EFFICIENCY_RATIO_TARGET,
CAP_MRKTS_YTD_EXPENSES,
CAP_MKTS_YTD_REVENUES,
CAP_MRKTS_EFFICIENCY_RATIO,
CAP_MRKTS_YTD_EXPENSES_TARGET,
CAP_MRKTS_YTD_REVENUES_TARGET,
CAP_MRKTS_EFFICIENCY_RATIO_TARGET,
TOTAL_ASSETS,
NET_TOTAL_REVENUE,
NET_TOTAL_REVENUE_TARGET,
NET_BOND_DESK_REVENUE,
NET_BOND_DESK_REVENUE_TARGET,
CAPITAL_MKTS_REVENUE,
CAPITAL_MKTS_REVENUE_TARGET,
NET_RETAIL_REVENUE,
NET_RETAIL_REVENUE_TARGET,
RECRUITING,
TERMINATED_ADVISORS,
ORGANIC_GROWTH
)
FROM
(
SELECT
TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,
t.$1, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9,t.$10, t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18,
           t.$19, t.$20, t.$21, t.$22, t.$23, t.$24, t.$25, t.$26, t.$27,t.$28, t.$29, t.$30, t.$31, t.$32, t.$33, t.$34, t.$35, t.$36,t.$37, t.$38, t.$39,t.$40,t.$41
FROM
@DATALAKE.''||IO_PATH||'' t
) pattern = ''''.*MASTER_KPI_DATA_IAPW__.*csv'''' file_format =(format_name = EXTERNAL_KPI.CSV_UTF8);
'';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_IAPW  
SET
HK_HUB=
SHA1(COALESCE(TRIM("KPI_DATE"), ''''#NULL#'''')),
MD_HASHDIFF=
SHA1(CONCAT(
   COALESCE(TO_VARCHAR(NO_OF_ACTIVE_CLIENTS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NO_OF_ACTIVE_ACCOUNTS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(FTE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(ACCOUNTS_FTE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(ACCOUNTS_FTE_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(APPWAY_REGISTRATION) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(APPWAY_REGISTRATION_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NO_OF_CLIENT_ID_REGISTERED) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(PORTAL_REGISTRATION) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(PORTAL_REGISTRATION_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(MYPORTFOLIO_TO_NEW_CLIENT) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(E_DELIVERY_PORTFOLIO_STATEMENTS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(E_DELIVERY_TAX_SLIPS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(E_DELIVERY_CONFIRMS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AVG_E_DELIVERY_REGISTRATION) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(E_DELIVERY_REGISTRATION_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(RETAIL_YTD_EXPENSES) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(RETAIL_YTD_REVENUES) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(RETAIL_FINANCIAL_EFFICIENCY_RATIO) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(RETAIL_YTD_EXPENSES_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(RETAIL_YTD_REVENUES_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(RETAIL_EFFICIENCY_RATIO_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(CAP_MRKTS_YTD_EXPENSES) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(CAP_MKTS_YTD_REVENUES) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(CAP_MRKTS_EFFICIENCY_RATIO) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(CAP_MRKTS_YTD_EXPENSES_TARGET) , ''''#NULL#''''),''''|''''
,  COALESCE(TO_VARCHAR(CAP_MRKTS_YTD_REVENUES_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(CAP_MRKTS_EFFICIENCY_RATIO_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_ASSETS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NET_TOTAL_REVENUE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NET_TOTAL_REVENUE_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NET_BOND_DESK_REVENUE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NET_BOND_DESK_REVENUE_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(CAPITAL_MKTS_REVENUE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(CAPITAL_MKTS_REVENUE_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NET_RETAIL_REVENUE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NET_RETAIL_REVENUE_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(RECRUITING) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TERMINATED_ADVISORS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(ORGANIC_GROWTH) , ''''#NULL#'''')
)),
MD_CREATION_DT=systimestamp(),
MD_SRC_SYSTEM =''''IAPW_MONTHLY_KPI''''
Where 1=1'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_COPY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.EXTERNAL_KPI.SP_CONV_LOADSTG_PSA_IAPW_TO_STG_MASTER_KPI_DATA_INVESTIA("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_INVESTIA WHERE 1=1'';
INS_PRE_COPY := ''
COPY INTO DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_INVESTIA
(
MD_START_DT,
MD_SOURCE,
MD_EXTRACT_DT,
KPI_DATE,
NO_CLIENT_ID,
E_DELIVERY,
E_DELIVERY_PCT,
E_DELIVERY_TARGET_PCT,
PORTAL_REGISTRATION,
PORTAL_REGISTRATION_PCT,
PORTAL_REGISTRATION_TARGET,
FTE,
CLIENTS_BY_FTE,
CLIENTS_BY_FTE_TARGET,
NO_OF_ACCOUNTS,
ACCOUNTS_BY_FTE,
ACTUAL_YTD_EXPENSES,
ACTUAL_YTD_REVENUES,
EFFICIENCY_RATIO,
YTD_EXPENSES_TARGET,
YTD_REVENUES_TARGET,
EFFICIENCY_RATIO_TARGET,
AUA_IN_NOMINEE,
AUA_IN_CLIENT_NAME,
NO_OF_RPAS_IMPLEMENTED,
HOURS_SAVED_DUE_TO_RPAS,
CONTINUOUS_IMPROVEMENT_QUICK_WINS,
TOTAL_ASSETS,
ORGANIC_GROWTH,
TOTAL_REVENUE,
TOTAL_REVENUE_TARGET,
RECRUITING,
TERMINATED_ADVISORS
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,
        t.$1,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11,
          t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20, t.$21, t.$22,
            t.$23, t.$24, t.$25, t.$26, t.$27, t.$28, t.$29, t.$30
  FROM
    @DATALAKE.''||IO_PATH||'' t
  ) pattern = ''''.*MASTER_KPI_DATA_INVESTIA__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.CSV_UTF8)
              '';
INS_UPDATE := ''
  UPDATE DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_INVESTIA
  SET
  HK_HUB=
  SHA1( UPPER(CONCAT(COALESCE(TRIM(KPI_DATE), ''''#NULL#''''))) ),
  MD_HASHDIFF=
  SHA1(CONCAT(
       COALESCE(TRIM(NO_CLIENT_ID), ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(E_DELIVERY) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(E_DELIVERY_PCT) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(E_DELIVERY_TARGET_PCT) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(PORTAL_REGISTRATION) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(PORTAL_REGISTRATION_PCT) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(PORTAL_REGISTRATION_TARGET) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(FTE) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(CLIENTS_BY_FTE) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(CLIENTS_BY_FTE_TARGET) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(NO_OF_ACCOUNTS) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(ACCOUNTS_BY_FTE) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(ACTUAL_YTD_EXPENSES) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(ACTUAL_YTD_REVENUES) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(EFFICIENCY_RATIO) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(YTD_EXPENSES_TARGET) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(YTD_REVENUES_TARGET) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(EFFICIENCY_RATIO_TARGET) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(AUA_IN_NOMINEE) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(AUA_IN_CLIENT_NAME) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(NO_OF_RPAS_IMPLEMENTED) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(HOURS_SAVED_DUE_TO_RPAS) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(CONTINUOUS_IMPROVEMENT_QUICK_WINS) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(TOTAL_ASSETS) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(ORGANIC_GROWTH) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(TOTAL_REVENUE) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(TOTAL_REVENUE_TARGET) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(RECRUITING) , ''''#NULL#''''), ''''|''''
    ,  COALESCE(TO_VARCHAR(TERMINATED_ADVISORS) , ''''#NULL#'''')
  )), 
  MD_CREATION_DT=systimestamp(),
  MD_SRC_SYSTEM =''''INVESTIA_MONTHLY_KPI''''
  Where 1=1'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_COPY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.EXTERNAL_KPI.SP_CONV_LOADSTG_PSA_IAPW_TO_STG_REF_MASTER_KPI_DATA_CLARINGTON("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_CLARINGTON WHERE 1=1'';
INS_PRE_COPY := ''
COPY INTO DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_CLARINGTON
(
COPY INTO EXTERNAL_KPI.REF_MASTER_KPI_DATA_CLARINGTON
(
MD_START_DT,
MD_SOURCE,
MD_EXTRACT_DT,
KPI_DATE,
TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_MF,
TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_GIF,
FTE,
TOTAL_TRANSACTIONS_MF,
TOTAL_TRANSACTIONS_GIF,
TOTAL_TRANSACTIONS_FTE_MF,
TOTAL_TRANSACTIONS_FTE_GIF,
NO_OF_ACCOUNTS,
ACCOUNTS_FTE,
ACCOUNTS_FTE_TARGET,
YOY_NEW_ACCOUNTS_CLIENT_NAME,
YOY_NEW_ACCOUNTS_CLIENT_NOMINEE,
EXPENSES,
REVENUES,
EFFICIENCY_RATIO,
EXPENSES_TARGET,
REVENUE_TARGET,
EFFICIENCY_RATIO_TARGET,
TOTAL_ASSETS,
AFFILIATE_PENETRATION_IIROC,
AFFILIATE_PENETRATION_IIROC_TARGET,
AFFILIATE_PENETRATION_MFDA,
AFFILIATE_PENETRATION_MFDA_TARGET,
GROSS_MARGIN,
GROSS_MARGIN_TARGET,
NET_SALES,
NO_OF_ACCOUNTS_CLIENT_NAME,
NO_OF_ACCOUNTS_NOMINEE
)
FROM
(
SELECT
TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,
t.$1,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11,
t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20, t.$21, t.$22,
t.$23, t.$24, t.$25, t.$26, t.$27, t.$28, t.$29
FROM
@DATALAKE.''||IO_PATH||'' t
) pattern = ''''.*MASTER_KPI_DATA_CLARINGTON__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.CSV_UTF8)
'';
INS_UPDATE := ''
  UPDATE DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_CLARINGTON  
  SET
  HK_HUB=
  SHA1(COALESCE(TRIM("KPI_DATE"), ''''#NULL#'''')),
  MD_HASHDIFF=
  SHA1(CONCAT(
  COALESCE(TO_VARCHAR(TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_MF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_GIF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(FTE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_TRANSACTIONS_MF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_TRANSACTIONS_GIF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_TRANSACTIONS_FTE_MF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_TRANSACTIONS_FTE_GIF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NO_OF_ACCOUNTS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(ACCOUNTS_FTE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(ACCOUNTS_FTE_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(YOY_NEW_ACCOUNTS_CLIENT_NAME) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(YOY_NEW_ACCOUNTS_CLIENT_NOMINEE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(EXPENSES) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(REVENUES) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(EFFICIENCY_RATIO) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(EXPENSES_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(REVENUE_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(EFFICIENCY_RATIO_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_ASSETS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AFFILIATE_PENETRATION_IIROC) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AFFILIATE_PENETRATION_IIROC_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AFFILIATE_PENETRATION_MFDA) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AFFILIATE_PENETRATION_MFDA_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(GROSS_MARGIN) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(GROSS_MARGIN_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NET_SALES) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NO_OF_ACCOUNTS_CLIENT_NAME) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NO_OF_ACCOUNTS_NOMINEE) , ''''#NULL#'''')
)),
MD_CREATION_DT=systimestamp(),
MD_SRC_SYSTEM =''''CLARINGTON_MONTHLY_KPI''''
Where 1=1'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_COPY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.EXTERNAL_KPI.SP_CONV_LOADSTG_PSA_IAPW_TO_STG_REF_MASTER_KPI_DATA_IAPW("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_IAPW WHERE 1=1'';
INS_PRE_COPY := ''
COPY INTO EXTERNAL_KPI.REF_MASTER_KPI_DATA_IAPW
(
MD_START_DT,
MD_SOURCE,
MD_EXTRACT_DT,
KPI_DATE,
NO_OF_ACTIVE_CLIENTS,
NO_OF_ACTIVE_ACCOUNTS,
FTE,
ACCOUNTS_FTE,
ACCOUNTS_FTE_TARGET,
APPWAY_REGISTRATION,
APPWAY_REGISTRATION_TARGET,
NO_OF_CLIENT_ID_REGISTERED,
PORTAL_REGISTRATION,
PORTAL_REGISTRATION_TARGET,
MYPORTFOLIO_TO_NEW_CLIENT,
E_DELIVERY_PORTFOLIO_STATEMENTS,
E_DELIVERY_TAX_SLIPS,
E_DELIVERY_CONFIRMS,
AVG_E_DELIVERY_REGISTRATION,
E_DELIVERY_REGISTRATION_TARGET,
RETAIL_YTD_EXPENSES,
RETAIL_YTD_REVENUES,
RETAIL_FINANCIAL_EFFICIENCY_RATIO,
RETAIL_YTD_EXPENSES_TARGET,
RETAIL_YTD_REVENUES_TARGET,
RETAIL_EFFICIENCY_RATIO_TARGET,
CAP_MRKTS_YTD_EXPENSES,
CAP_MKTS_YTD_REVENUES,
CAP_MRKTS_EFFICIENCY_RATIO,
CAP_MRKTS_YTD_EXPENSES_TARGET,
CAP_MRKTS_YTD_REVENUES_TARGET,
CAP_MRKTS_EFFICIENCY_RATIO_TARGET,
TOTAL_ASSETS,
NET_TOTAL_REVENUE,
NET_TOTAL_REVENUE_TARGET,
NET_BOND_DESK_REVENUE,
NET_BOND_DESK_REVENUE_TARGET,
CAPITAL_MKTS_REVENUE,
CAPITAL_MKTS_REVENUE_TARGET,
NET_RETAIL_REVENUE,
NET_RETAIL_REVENUE_TARGET,
RETAIL_REVENUE_GROWTH,
EBIT,
SMA_ADOPTION,
INSURANCE_REVENUE,
AUA_TARGET,
DEPARTED_ADVISORS,
RECRUITING,
TERMINATED_ADVISORS
)
FROM
(
SELECT
TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,
t.$1, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9,t.$10, t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18,
           t.$19, t.$20, t.$21, t.$22, t.$23, t.$24, t.$25, t.$26, t.$27,t.$28, t.$29, t.$30, t.$31, t.$32, t.$33, t.$34, t.$35, t.$36,t.$37, t.$38, t.$39, t.$40, t.$41, t.$42, t.$43, t.$44, t.$45,t.$46
FROM
@DATALAKE.$$io_PATH T
) pattern = ''''.*MASTER_KPI_DATA_IAPW__.*csv'''' file_format =(format_name = EXTERNAL_KPI.CSV_UTF8);
'';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_IAPW  
SET
HK_HUB
SHA1(COALESCE(TRIM("KPI_DATE"), ''''#NULL#''''))
MD_HASHDIFF=
SHA1(CONCAT(
   COALESCE(TO_VARCHAR(NO_OF_ACTIVE_CLIENTS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NO_OF_ACTIVE_ACCOUNTS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(FTE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(ACCOUNTS_FTE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(ACCOUNTS_FTE_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(APPWAY_REGISTRATION) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(APPWAY_REGISTRATION_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NO_OF_CLIENT_ID_REGISTERED) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(PORTAL_REGISTRATION) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(PORTAL_REGISTRATION_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(MYPORTFOLIO_TO_NEW_CLIENT) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(E_DELIVERY_PORTFOLIO_STATEMENTS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(E_DELIVERY_TAX_SLIPS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(E_DELIVERY_CONFIRMS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AVG_E_DELIVERY_REGISTRATION) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(E_DELIVERY_REGISTRATION_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(RETAIL_YTD_EXPENSES) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(RETAIL_YTD_REVENUES) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(RETAIL_FINANCIAL_EFFICIENCY_RATIO) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(RETAIL_YTD_EXPENSES_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(RETAIL_YTD_REVENUES_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(RETAIL_EFFICIENCY_RATIO_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(CAP_MRKTS_YTD_EXPENSES) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(CAP_MKTS_YTD_REVENUES) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(CAP_MRKTS_EFFICIENCY_RATIO) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(CAP_MRKTS_YTD_EXPENSES_TARGET) , ''''#NULL#''''),''''|''''
,  COALESCE(TO_VARCHAR(CAP_MRKTS_YTD_REVENUES_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(CAP_MRKTS_EFFICIENCY_RATIO_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_ASSETS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NET_TOTAL_REVENUE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NET_TOTAL_REVENUE_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NET_BOND_DESK_REVENUE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NET_BOND_DESK_REVENUE_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(CAPITAL_MKTS_REVENUE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(CAPITAL_MKTS_REVENUE_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NET_RETAIL_REVENUE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NET_RETAIL_REVENUE_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(RETAIL_REVENUE_GROWTH) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(EBIT) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(SMA_ADOPTION) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(INSURANCE_REVENUE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AUA_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(DEPARTED_ADVISORS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(RECRUITING) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TERMINATED_ADVISORS) , ''''#NULL#'''')
)),
MD_CREATION_DT=systimestamp(),
MD_SRC_SYSTEM =''''IAPW_MONTHLY_KPI''''
Where 1=1'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_COPY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
create or replace schema DB_IAW_DEV_STG.FUNDATA;

CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.FUNDATA.PIPE_UTF16
  FIELD_DELIMITER = '|'
;
create or replace schema DB_IAW_DEV_STG.FUNDEX;

CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.FUNDEX.CSV_PIPE
  FIELD_DELIMITER = '|'
;
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.FUNDEX.PIPE_UTF16
  TYPE = csv
  FIELD_DELIMITER = '|'
  ESCAPE = '\\'
  ENCODING = 'UTF16'
;
create or replace schema DB_IAW_DEV_STG.IAPW_PORTAL_API;

create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAPW_PORTAL_API.ACCOUNTS_CLIENTS_SUMMARY (
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  CONTENT VARIANT COMMENT 'Json content'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAPW_PORTAL_API.ACCOUNTS_CLIENTS_SUMMARY_RVP (
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  RVPID NUMBER(10,0) COMMENT 'RVP ID',
  CONTENT VARIANT COMMENT 'Json content'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYACCOUNTTYPE (
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  CONTENT VARIANT COMMENT 'Json content'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYACCOUNTTYPE_RVP (
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  RVPID NUMBER(10,0) COMMENT 'RVP Ids',
  CONTENT VARIANT COMMENT 'Json content'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYCOMMISSIONTYPE (
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  CONTENT VARIANT COMMENT 'Json content'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT (
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  CONTENT VARIANT COMMENT 'Json content'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT_RVP (
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  RVPID NUMBER(10,0) COMMENT 'RVP ID',
  CONTENT VARIANT COMMENT 'Json content'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYCOMMISSIONTYPE_RVP (
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  RVPID NUMBER(10,0) COMMENT 'RVP ID',
  CONTENT VARIANT COMMENT 'Json content'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYPRODUCT (
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  CONTENT VARIANT COMMENT 'Json content'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYPRODUCT_RVP (
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  RVPID NUMBER(10,0),
  CONTENT VARIANT COMMENT 'Json content'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYPROVINCE (
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  CONTENT VARIANT COMMENT 'Json content'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYPROVINCE_RVP (
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  RVPID NUMBER(10,0) COMMENT 'RVP Ids',
  CONTENT VARIANT COMMENT 'Json content'
);
create or replace view DB_IAW_DEV_STG.IAPW_PORTAL_API.VW_ACCOUNTS_CLIENTS_SUMMARY(
  MD_START_DT,
  MD_SOURCE,
  MD_CREATION_DT,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  NB_MANAGED,
  NB_FEE_BASED,
  NB_COMMISSION,
  NB_CLIENT,
  NB_ACCOUNT,
  PROCESS_DATE
) as 
SELECT MD_START_DT,
MD_SOURCE,
MD_CREATION_DT,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
TO_NUMBER(ft.value:"nbManaged",20,2) AS NB_MANAGED,
TO_NUMBER(ft.value:"nbFeeBased",20,2) AS NB_FEE_BASED,
TO_NUMBER(ft.value:"nbCommission",20,2) AS NB_COMMISSION,
TO_NUMBER(ft.value:"nbClient",20,2) AS NB_CLIENT,
TO_NUMBER(ft.value:"nbAccount",20,2) AS NB_ACCOUNT,
ft.value:"processDate"::DATETIME AS PROCESS_DATE
FROM IAPW_PORTAL_API.ACCOUNTS_CLIENTS_SUMMARY a,
LATERAL FLATTEN(INPUT => a.CONTENT, PATH => '"data"') ft;
create or replace view DB_IAW_DEV_STG.IAPW_PORTAL_API.VW_ACCOUNTS_CLIENTS_SUMMARY_RVP(
  MD_START_DT,
  MD_SOURCE,
  MD_CREATION_DT,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  RVPID,
  NB_MANAGED,
  NB_FEE_BASED,
  NB_COMMISSION,
  NB_CLIENT,
  NB_ACCOUNT,
  PROCESS_DATE
) as 
SELECT MD_START_DT,
MD_SOURCE,
MD_CREATION_DT,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
RVPID,
TO_NUMBER(ft.value:"nbManaged",20,2) AS NB_MANAGED,
TO_NUMBER(ft.value:"nbFeeBased",20,2) AS NB_FEE_BASED,
TO_NUMBER(ft.value:"nbCommission",20,2) AS NB_COMMISSION,
TO_NUMBER(ft.value:"nbClient",20,2) AS NB_CLIENT,
TO_NUMBER(ft.value:"nbAccount",20,2) AS NB_ACCOUNT,
ft.value:"processDate"::DATETIME AS PROCESS_DATE
FROM IAPW_PORTAL_API.ACCOUNTS_CLIENTS_SUMMARY_RVP a,
LATERAL FLATTEN(INPUT => a.CONTENT, PATH => '"data"') ft;
create or replace view DB_IAW_DEV_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYACCOUNTTYPE(
  MD_START_DT,
  MD_SOURCE,
  MD_CREATION_DT,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  VALUE,
  ACCOUNT_TYPE
) as 
SELECT MD_START_DT,
MD_SOURCE,
MD_CREATION_DT,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
TO_NUMBER(ft.value:"value"::STRING ,20, 2) AS VALUE,
ft.value:"accountType"::STRING AS ACCOUNT_TYPE
FROM IAPW_PORTAL_API.ASSETS_SUMMARY_BYACCOUNTTYPE a,
LATERAL FLATTEN(INPUT => a.CONTENT, PATH => '"data"') ft;
create or replace view DB_IAW_DEV_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYACCOUNTTYPE_RVP(
  MD_START_DT,
  MD_SOURCE,
  MD_CREATION_DT,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  RVPID,
  VALUE,
  ACCOUNT_TYPE
) as 
SELECT MD_START_DT,
MD_SOURCE,
MD_CREATION_DT,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
RVPID,
TO_NUMBER(ft.value:"value"::STRING ,20, 2) AS VALUE,
ft.value:"accountType"::STRING AS ACCOUNT_TYPE
FROM IAPW_PORTAL_API.ASSETS_SUMMARY_BYACCOUNTTYPE_RVP a,
LATERAL FLATTEN(INPUT => a.CONTENT, PATH => '"data"') ft;
create or replace view DB_IAW_DEV_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYCOMMISSIONTYPE(
  MD_START_DT,
  MD_SOURCE,
  MD_CREATION_DT,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  PROCESS_DATE,
  VALUE,
  COMMISSION_TYPE
) as 
SELECT MD_START_DT,
MD_SOURCE,
MD_CREATION_DT,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
ft.value:"processDate"::DATETIME AS PROCESS_DATE,
ft.value:"value"::STRING AS VALUE,
ft.value:"commissionType"::STRING AS COMMISSION_TYPE
FROM IAPW_PORTAL_API.ASSETS_SUMMARY_BYCOMMISSIONTYPE a,
LATERAL FLATTEN(INPUT => a.CONTENT, PATH => '"data"') ft;
create or replace view DB_IAW_DEV_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT(
  MD_START_DT,
  MD_SOURCE,
  MD_CREATION_DT,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  PROCESS_DATE,
  COMMISSION_TYPE,
  EQT,
  MUT,
  FIX,
  OFF,
  CASH,
  TOTAL
) as 
SELECT MD_START_DT,
MD_SOURCE,
MD_CREATION_DT,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
ft.value:"processDate"::DATETIME AS PROCESS_DATE,
ft.value:"commissionType"::STRING AS COMMISSION_TYPE,
ft.value:"eqt"::STRING AS EQT,
ft.value:"mut"::STRING AS MUT,
ft.value:"fix"::STRING AS FIX,
ft.value:"off"::STRING AS OFF,
ft.value:"cash"::STRING AS CASH,
ft.value:"total"::STRING AS TOTAL
FROM IAPW_PORTAL_API.ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT a,
LATERAL FLATTEN(INPUT => a.CONTENT, PATH => '"data"') ft;
create or replace view DB_IAW_DEV_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT_RVP(
  MD_START_DT,
  MD_SOURCE,
  MD_CREATION_DT,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  RVPID,
  PROCESS_DATE,
  COMMISSION_TYPE,
  EQT,
  MUT,
  FIX,
  OFF,
  CASH,
  TOTAL
) as 
SELECT MD_START_DT,
MD_SOURCE,
MD_CREATION_DT,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
RVPID,
ft.value:"processDate"::DATETIME AS PROCESS_DATE,
ft.value:"commissionType"::STRING AS COMMISSION_TYPE,
ft.value:"eqt"::STRING AS EQT,
ft.value:"mut"::STRING AS MUT,
ft.value:"fix"::STRING AS FIX,
ft.value:"off"::STRING AS OFF,
ft.value:"cash"::STRING AS CASH,
ft.value:"total"::STRING AS TOTAL
FROM IAPW_PORTAL_API.ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT_RVP a,
LATERAL FLATTEN(INPUT => a.CONTENT, PATH => '"data"') ft;
create or replace view DB_IAW_DEV_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYCOMMISSIONTYPE_RVP(
  MD_START_DT,
  MD_SOURCE,
  MD_CREATION_DT,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  RVPID,
  PROCESS_DATE,
  VALUE,
  COMMISSION_TYPE
) as 
SELECT MD_START_DT,
MD_SOURCE,
MD_CREATION_DT,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
RVPID,
ft.value:"processDate"::DATETIME AS PROCESS_DATE,
ft.value:"value"::STRING AS VALUE,
ft.value:"commissionType"::STRING AS COMMISSION_TYPE
FROM IAPW_PORTAL_API.ASSETS_SUMMARY_BYCOMMISSIONTYPE_RVP a,
LATERAL FLATTEN(INPUT => a.CONTENT, PATH => '"data"') ft;
create or replace view DB_IAW_DEV_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYPRODUCT(
  MD_START_DT,
  MD_SOURCE,
  MD_CREATION_DT,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  PROCESS_DATE,
  VALUE,
  PRODUCT_CODE
) as 
SELECT MD_START_DT,
MD_SOURCE,
MD_CREATION_DT,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
ft.value:"processDate"::DATETIME AS PROCESS_DATE,
ft.value:"value"::STRING AS VALUE,
ft.value:"productCode"::STRING AS PRODUCT_CODE
FROM IAPW_PORTAL_API.ASSETS_SUMMARY_BYPRODUCT a,
LATERAL FLATTEN(INPUT => a.CONTENT, PATH => '"data"') ft;
create or replace view DB_IAW_DEV_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYPRODUCT_RVP(
  MD_START_DT,
  MD_SOURCE,
  MD_CREATION_DT,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  RVPID,
  PROCESS_DATE,
  VALUE,
  PRODUCT_CODE
) as 
SELECT MD_START_DT,
MD_SOURCE,
MD_CREATION_DT,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
RVPID,
ft.value:"processDate"::DATETIME AS PROCESS_DATE,
ft.value:"value"::STRING AS VALUE,
ft.value:"productCode"::STRING AS PRODUCT_CODE
FROM IAPW_PORTAL_API.ASSETS_SUMMARY_BYPRODUCT_RVP a,
LATERAL FLATTEN(INPUT => a.CONTENT, PATH => '"data"') ft;
create or replace view DB_IAW_DEV_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYPROVINCE(
  MD_START_DT,
  MD_SOURCE,
  MD_CREATION_DT,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  PROCESS_DATE,
  VALUE,
  PROVINCE_CODE
) as 
SELECT MD_START_DT,
MD_SOURCE,
MD_CREATION_DT,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
ft.value:"processDate"::DATETIME AS PROCESS_DATE,
TO_NUMBER(ft.value:"value"::STRING ,20, 2) AS VALUE,
ft.value:"provinceCode"::STRING AS PROVINCE_CODE
FROM IAPW_PORTAL_API.ASSETS_SUMMARY_BYPROVINCE a,
LATERAL FLATTEN(INPUT => a.CONTENT, PATH => '"data"') ft;
create or replace view DB_IAW_DEV_STG.IAPW_PORTAL_API.VW_ASSETS_SUMMARY_BYPROVINCE_RVP(
  MD_START_DT,
  MD_SOURCE,
  MD_CREATION_DT,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  RVPID,
  PROCESS_DATE,
  VALUE,
  PROVINCE_CODE
) as 
SELECT MD_START_DT,
MD_SOURCE,
MD_CREATION_DT,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
RVPID,
ft.value:"processDate"::DATETIME AS PROCESS_DATE,
TO_NUMBER(ft.value:"value"::STRING ,20, 2) AS VALUE,
ft.value:"provinceCode"::STRING AS PROVINCE_CODE
FROM IAPW_PORTAL_API.ASSETS_SUMMARY_BYPROVINCE_RVP a,
LATERAL FLATTEN(INPUT => a.CONTENT, PATH => '"data"') ft;
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.IAPW_PORTAL_API.JSON_FORMAT
  TYPE = json
  NULL_IF = ()
;
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAPW_PORTAL_API.SP_CONV_LOADSTG_PSA_IAPW_PORTAL_API_TO_ACCOUNTS_CLIENTS_SUMMARY("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ACCOUNTS_CLIENTS_SUMMARY WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ACCOUNTS_CLIENTS_SUMMARY
(
    MD_START_DT,
    MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
    CONTENT
    )
 FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,''''IAPW_PORTAL_API'''',TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),t.$1
  FROM
    @DATALAKE.''||io_PATH||'' t
  ) pattern =''''.*accountsAndClientsSummary__.*json'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.JSON_FORMAT);
              '';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAPW_PORTAL_API.SP_CONV_LOADSTG_PSA_IAPW_PORTAL_API_TO_ACCOUNTS_CLIENTS_SUMMARY_RVP("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ACCOUNTS_CLIENTS_SUMMARY_RVP WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ACCOUNTS_CLIENTS_SUMMARY_RVP
(
    MD_START_DT,
    MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  RVPID,
    CONTENT
    )
 FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,''''IAPW_PORTAL_API'''',TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),split_part(split_part(metadata$filename,''''#'''',2),''''__'''',0),t.$1
  FROM
    @DATALAKE.''||io_PATH||'' t
  ) pattern =''''.*accountsAndClientsSummary_RVP.*__.*json'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.JSON_FORMAT);
              '';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAPW_PORTAL_API.SP_CONV_LOADSTG_PSA_IAPW_PORTAL_API_TO_ASSETS_SUMMARY_BYCOMMISSIONTYPE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYCOMMISSIONTYPE WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYCOMMISSIONTYPE
(
    MD_START_DT,
    MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
    CONTENT
    )
 FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,''''IAPW_PORTAL_API'''',TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),t.$1
  FROM
    @DATALAKE.''||io_PATH||'' t
  ) pattern =''''.*assetsSummaryByCommType__.*json'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.JSON_FORMAT);
              '';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAPW_PORTAL_API.SP_CONV_LOADSTG_PSA_IAPW_PORTAL_API_TO_ASSETS_SUMMARY_BYCOMMISSIONTYPE_RVP("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYCOMMISSIONTYPE_RVP WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYCOMMISSIONTYPE_RVP
(
    MD_START_DT,
    MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  RVPID,
    CONTENT
    )
 FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,''''IAPW_PORTAL_API'''',TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),split_part(split_part(metadata$filename,''''#'''',2),''''__'''',0),t.$1
  FROM
    @DATALAKE.''||io_PATH||'' t
  ) pattern =''''.*assetsSummaryByCommType_RVP.*__.*json'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.JSON_FORMAT);
              '';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAPW_PORTAL_API.SP_CONV_LOADSTG_PSA_IAPW_PORTAL_API_TO_ASSETS_SUMMARY_BYPRODUCT("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYPRODUCT WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYPRODUCT
(
    MD_START_DT,
    MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
    CONTENT
    )
 FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,''''IAPW_PORTAL_API'''',TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),t.$1
  FROM
    @DATALAKE.''||io_PATH||'' t
  ) pattern =''''.*assetsSummaryByProduct__.*json'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.JSON_FORMAT);
              '';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAPW_PORTAL_API.SP_CONV_LOADSTG_PSA_IAPW_PORTAL_API_TO_ASSETS_SUMMARY_BYPRODUCT_RVP("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYPRODUCT_RVP WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYPRODUCT_RVP
(
    MD_START_DT,
    MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  RVPID,
    CONTENT
    )
 FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,''''IAPW_PORTAL_API'''',TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),split_part(split_part(metadata$filename,''''#'''',2),''''__'''',0),t.$1
  FROM
    @DATALAKE.''||io_PATH||'' t
  ) pattern =''''.*assetsSummaryByProduct_RVP.*__.*json'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.JSON_FORMAT);
              '';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAPW_PORTAL_API.SP_CONV_LOADSTG_PSA_IAPW_PORTAL_API_TO_ASSETS_SUMMARY_BY_COMMISSIONTYPE_AND_PRODUCT("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT
(
    MD_START_DT,
    MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
    CONTENT
    )
 FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,''''IAPW_PORTAL_API'''',TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),t.$1
  FROM
    @DATALAKE.''||io_PATH||'' t
  ) pattern =''''.*ByCommTypeAndProduct__.*json'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.JSON_FORMAT);
              '';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAPW_PORTAL_API.SP_CONV_LOADSTG_PSA_IAPW_PORTAL_API_TO_ASSETS_SUMMARY_BY_COMMISSIONTYPE_AND_PRODUCT_RVP("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT_RVP WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYCOMMISSIONTYPE_AND_PRODUCT_RVP
(
    MD_START_DT,
    MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  RVPID,
    CONTENT
    )
 FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,''''IAPW_PORTAL_API'''',TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),split_part(split_part(metadata$filename,''''#'''',2),''''__'''',0),t.$1
  FROM
    @DATALAKE.''||io_PATH||'' t
  ) pattern =''''.*ByCommTypeAndProduct_RVP#.*__.*json'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.JSON_FORMAT);
              '';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAPW_PORTAL_API.SP_CONV_LOADSTG_PSA_IAPW_PORTAL_API_TO_ASSETS_SUMMARY_LAST_13_MONTHS_BYCOMMISSIONTYPE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_LAST_13_MONTHS_BYCOMMISSIONTYPE WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_LAST_13_MONTHS_BYCOMMISSIONTYPE
(
    MD_START_DT,
    MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
    CONTENT
    )
 FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,''''IAPW_PORTAL_API'''',TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),t.$1
  FROM
    @DATALAKE.''||io_PATH||'' t
  ) pattern =''''.*ByCommissionType_13months__.*json''''file_format=(format_name=DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.JSON_FORMAT);
              '';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAPW_PORTAL_API.SP_CONV_LOADSTG_PSA_IAPW_PORTAL_API_TO_ASSETS_SUMMARY_LAST_13_MONTHS_BYPRODUCT("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_LAST_13_MONTHS_BYPRODUCT WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_LAST_13_MONTHS_BYPRODUCT
(
    MD_START_DT,
    MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
    CONTENT
    )
 FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,''''IAPW_PORTAL_API'''',TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),t.$1
  FROM
    @DATALAKE.''||io_PATH||'' t
  ) pattern =''''.*ByProduct_13months__.*json''''file_format=(format_name=DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.JSON_FORMAT);
              '';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAPW_PORTAL_API.SP_CONV_LOADSTG_PSA_IAWP_PORTAL_API_TO_ASSETS_SUMMARY_BYACCOUNTTYPE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYACCOUNTTYPE WHERE 1=1'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYACCOUNTTYPE
(
    MD_START_DT,
    MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
    CONTENT
    )
 FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,''''IAPW_PORTAL_API'''',TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),t.$1
  FROM
    @DATALAKE.''||IO_PATH||'' t
  ) pattern =''''.*assetsSummaryByAccountType__.*json'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.JSON_FORMAT)
              '';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAPW_PORTAL_API.SP_CONV_LOADSTG_PSA_IAWP_PORTAL_API_TO_ASSETS_SUMMARY_BYACCOUNTTYPE_RVP("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYACCOUNTTYPE_RVP WHERE 1=1'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYACCOUNTTYPE_RVP
(
    MD_START_DT,
    MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  RVPID,
    CONTENT
    )
 FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,''''IAPW_PORTAL_API'''',TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),split_part(split_part(metadata$filename,''''#'''',2),''''__'''',0),t.$1
  FROM
    @DATALAKE.''||IO_PATH||'' t
  ) pattern =''''.*assetsSummaryByAccountType_RVP#.*__.*json'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.JSON_FORMAT);
              '';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAPW_PORTAL_API.SP_CONV_LOADSTG_PSA_IAWP_PORTAL_API_TO_ASSETS_SUMMARY_BYPROVINCE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYPROVINCE WHERE 1=1'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYPROVINCE
(
    MD_START_DT,
    MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
    CONTENT
    )
 FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,''''IAPW_PORTAL_API'''',TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),t.$1
  FROM
    @DATALAKE.''||IO_PATH||'' t
  ) pattern =''''.*assetsSummaryByProvince__.*json'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.JSON_FORMAT);
              '';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAPW_PORTAL_API.SP_CONV_LOADSTG_PSA_IAWP_PORTAL_API_TO_ASSETS_SUMMARY_BYPROVINCE_RVP("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYPROVINCE_RVP WHERE 1=1'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.ASSETS_SUMMARY_BYPROVINCE_RVP
(
     MD_START_DT,
    MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  RVPID,
    CONTENT
    )
 FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,''''IAPW_PORTAL_API'''',TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),split_part(split_part(metadata$filename,''''#'''',2),''''__'''',0),t.$1
  FROM
    @DATALAKE.''||IO_PATH||'' t
  ) pattern =''''.*assetsSummaryByProvince_RVP#.*__.*json'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.IAPW_PORTAL_API.JSON_FORMAT);
              '';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
create or replace schema DB_IAW_DEV_STG.IAS;

create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS.ACCOUNT_HOLDER (
  HK_HUB VARCHAR(40) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  A_C_CLIENT VARCHAR(100) COMMENT 'Client ID',
  SIN_HASH VARCHAR(64) COMMENT 'SIN Hash',
  CLIENT_BIRTH_DATE DATE COMMENT 'Client birth date',
  CLIENT_TAX_RECIP_TYPE VARCHAR(10) COMMENT 'Tax recipient type : 1 - Individual, 2 - Joint, 3 - Corporation, ...',
  CLIENT_RESIDENCE VARCHAR(50) COMMENT 'Client residence country',
  CLIENT_RESIDENCE_REGION VARCHAR(50) COMMENT 'Client residence province',
  CLIENT_ANNUAL_GROSS_INC VARCHAR(10) COMMENT 'Annual gross income',
  CLIENT_INIT_CONTRACT_DATE DATE COMMENT 'Initial contrat date',
  CLIENT_INV_KNOWLEDGE_LVL VARCHAR(1) COMMENT 'Clients Investment Knowledge Level',
  A_C_NAME VARCHAR(1000) COMMENT 'A_C_NAME',
  A_C_FIRST_NAME VARCHAR(1000) COMMENT 'A_C_FIRST_NAME',
  A_C_MIDDLE_NAME VARCHAR(1000) COMMENT 'A_C_MIDDLE_NAME',
  A_C_LAST_NAME VARCHAR(1000) COMMENT 'A_C_LAST_NAME',
  CLIENT_FIRST_NAME VARCHAR(1000) COMMENT 'CLIENT_FIRST_NAME',
  CLIENT_LAST_NAME VARCHAR(1000) COMMENT 'CLIENT_LAST_NAME'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS.CASH_HOLDINGS (
  HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
  HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for HUB_REGISTERED_REPRESENTATIVE',
  HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT '0 value as it is always NULL, added as it is required when loading RDV',
  MD_SEQ VARCHAR(50) COMMENT 'The value of METADATA$FILE_ROW_NUMBER when loading using INFORMATICA',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  A_C_ID VARCHAR(100) COMMENT 'Account ID',
  A_C_REPRESENTATIVE VARCHAR(50) COMMENT 'Advisor RR code',
  A_C_SUMM_BALANCE_BUS_DATE DATE COMMENT 'Update business date',
  A_C_SUMM_SD_NET_AMT NUMBER(38,2) COMMENT 'A/C Summ settelment date Net Amt',
  A_C_SUMM_TD_NET_AMT NUMBER(38,2) COMMENT 'A/C Summ trade date Net Amt',
  A_C_CURRENCY VARCHAR(10) COMMENT 'Holding value currency'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS.CONTRACT (
  HK_HUB VARCHAR(40) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  A_C_ID VARCHAR(18) COMMENT 'Account ID',
  A_C_CLIENT VARCHAR(20) COMMENT 'Client ID',
  A_C_REPRESENTATIVE VARCHAR(4) COMMENT 'Advisor RR code',
  ADMINISTRATOR_TYPE VARCHAR(100) COMMENT 'Nominee, Client name, ...',
  A_C_OPEN_DATE DATE COMMENT 'Account opening date',
  A_C_CLOSING_DATE DATE COMMENT 'Account closing date',
  A_C_ACCOUNT_CLASS VARCHAR(3) COMMENT 'Account classification code',
  RETAIL_PLAN VARCHAR(4) COMMENT 'Retail plan code : RS, LF, ...',
  RETAIL_PLAN_RESP VARCHAR(1) COMMENT 'To be defined',
  ACCOUNT_RAP_CODE VARCHAR(1) COMMENT 'An alpha account type indicator (known as a \"RAP\" code)',
  ASC_3_MANAGED_TYPE VARCHAR(1) COMMENT 'ASC 3 - managed type indicator',
  A_C_SPECIAL_TAG VARCHAR(20) COMMENT 'non delivery information tag fields',
  ASC_1_RESP_PLAN_TYPES VARCHAR(1) COMMENT 'ASC 1 - RESP plan types indicator',
  A_C_CURRENCY VARCHAR(10) COMMENT 'Account Currency',
  IVT_OBJ_CDE VARCHAR(15) COMMENT 'Accounts Risk Profile (Cash, Income, Growth, Speculations - PCT)',
  RISK_TOLERANCE VARCHAR(15) COMMENT 'Accounts Risk Tolerance',
  DOC_LAST_UPDATE DATE COMMENT 'Last update date for the Know Your Client documents',
  MANAGED_IND NUMBER(1,0) COMMENT 'Managed indicator at the repCode Level, 1 for managed account and 0 for non-managed account'
);
create or replace TABLE DB_IAW_DEV_STG.IAS.CONTRACT_CLONE (
  HK_HUB VARCHAR(40),
  MD_START_DT TIMESTAMP_NTZ(9),
  MD_HASHDIFF VARCHAR(40),
  MD_CREATION_DT TIMESTAMP_NTZ(9),
  MD_SOURCE VARCHAR(1000),
  MD_SRC_SYSTEM VARCHAR(100),
  MD_EXTRACT_DT TIMESTAMP_NTZ(9),
  A_C_ID VARCHAR(18),
  A_C_CLIENT VARCHAR(20),
  A_C_REPRESENTATIVE VARCHAR(4),
  ADMINISTRATOR_TYPE VARCHAR(100),
  A_C_OPEN_DATE DATE,
  A_C_CLOSING_DATE DATE,
  A_C_ACCOUNT_CLASS VARCHAR(3),
  RETAIL_PLAN VARCHAR(4),
  RETAIL_PLAN_RESP VARCHAR(1),
  ACCOUNT_RAP_CODE VARCHAR(1),
  ASC_3_MANAGED_TYPE VARCHAR(1),
  A_C_SPECIAL_TAG VARCHAR(20),
  ASC_1_RESP_PLAN_TYPES VARCHAR(1),
  A_C_CURRENCY VARCHAR(10),
  IVT_OBJ_CDE VARCHAR(15),
  RISK_TOLERANCE VARCHAR(15),
  DOC_LAST_UPDATE DATE,
  MANAGED_IND NUMBER(1,0)
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS.FINANCIAL_TRANSACTIONS_CMSDT (
  HK_LINK VARCHAR(40) COMMENT 'Hash of the business keys',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for CONTRACT',
  HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE',
  HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9),
  TRANSACTION_NUMBER NUMBER(38,0),
  RR_NUMBER VARCHAR(4),
  FMSL_ACCOUNT_NUMBER VARCHAR(10),
  SECURITY_NUMBER VARCHAR(12),
  SECURITY_TYPE_CODE VARCHAR(3),
  SECURITY_CLASS_CODE VARCHAR(4),
  SECURITY_GROUP_CODE VARCHAR(3),
  TRANSACTION_TYPE VARCHAR(3),
  TRADE_GROUP_GROSS_AMOUNT NUMBER(38,2),
  TRAN_TRADING_NET_CURRENCY VARCHAR(3),
  PROCESS_DATE TIMESTAMP_NTZ(9),
  TRADE_DATE TIMESTAMP_NTZ(9),
  SETTLEMENT_DATE TIMESTAMP_NTZ(9),
  EFFECTIVE_DATE TIMESTAMP_NTZ(9),
  TRANSACTION_ID NUMBER(11,0),
  CANCEL_INDICATOR VARCHAR(1),
  BUY_SELL_INDICATOR VARCHAR(1),
  TRADE_GROUP_QUANTITY NUMBER(38,0),
  TRANS_TRADING_NET_AMT NUMBER(38,2),
  TICKET_NUMBER VARCHAR(6),
  TRADE_GRP_COMM_ENTERED NUMBER(38,2)
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK (
  HK_LINK VARCHAR(40) COMMENT 'Hash of the business keys',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for CONTRACT',
  HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE',
  HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for the REF_MAPPING_PRODUCT_TYPE',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  A_C_ID VARCHAR(100) COMMENT 'Account ID',
  A_C_REPRESENTATIVE VARCHAR(50) COMMENT 'Advisor RR code',
  TI_ALTERNATE_ID VARCHAR(50) COMMENT 'Financial product ID',
  TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
  TRAN_ENTRY_DESCRIPTION VARCHAR(50) COMMENT 'Description of the trading',
  TRAN_USER_DESCRIPTION VARCHAR(50) COMMENT 'Description of the trading',
  TRAN_TRADING_TYPE VARCHAR(10) COMMENT 'Type of the trading : Sell, Buy,...',
  TRANSACTION NUMBER(38,0) COMMENT 'Transaction ID',
  TRAN_TRADING_GROSS_AMT NUMBER(38,2) COMMENT 'Transaction gross amount in CAD or USD',
  TRAN_TRADING_CURRENCY VARCHAR(10) COMMENT 'Transaction amounts currency',
  TRAN_TRADING_NET_AMT NUMBER(38,2) COMMENT 'Transaction net amount in CAD or USD',
  TRAN_TRADING_TRADE_DATE DATE COMMENT 'Trade date',
  TRAN_TRADING_SETT_DATE DATE COMMENT 'Settlement date',
  TRAN_PROCESS_DATE DATE COMMENT 'Process date',
  TI_SYMBOL VARCHAR(50) COMMENT 'Product symbol',
  TRAN_QTY NUMBER(38,4) COMMENT 'Quantity',
  TI_PRIMARY_MARKET VARCHAR(50) COMMENT 'Primary market',
  TRAN_TXN_REFERENCE_ID VARCHAR(50) COMMENT 'Tax reference ID',
  TRAN_AMOUNT_2 NUMBER(38,2) COMMENT 'Transaction amount 2 in CAD or USD',
  TI_UNDERLYING_CDN_PRICE NUMBER(38,8) COMMENT 'TI Underlying CDN Price, this field and above fields were added for OG calculation',
  TI_BASIS_POINT NUMBER(38,5) COMMENT 'TI Basis Point',
  TI_FACE_VALUE NUMBER(38,5) COMMENT 'TI Face Value',
  TI_ISSUE_PRICE NUMBER(38,5) COMMENT 'TI Issue Price',
  STRIKE_PRICE NUMBER(38,8) COMMENT 'STRIKE PRICE',
  TI_UNDERLYING_USD_PRICE NUMBER(38,8) COMMENT 'TI Underlying USD Price'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS.HOLDINGS (
  HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
  HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for HUB_REGISTERED_REPRESENTATIVE',
  HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
  MD_SEQ VARCHAR(50) COMMENT 'The value of METADATA$FILE_ROW_NUMBER when loading using INFORMATICA',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  A_C_ID VARCHAR(100) COMMENT 'Account ID',
  A_C_REPRESENTATIVE VARCHAR(50) COMMENT 'Advisor RR code',
  TI_ALTERNATE_ID VARCHAR(50) COMMENT 'Financial product ID',
  TRAN_SUMM_CURR_MKT_VALUE NUMBER(38,2) COMMENT 'Market value of the holding in CAD or USD',
  TRAN_SUMM_BUSINESS_DATE DATE COMMENT 'Update business date',
  TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
  B_V_SECURITY_POSITION_VAL NUMBER(38,2) COMMENT 'Book value',
  B_V_SECURITY_POSITION_COS NUMBER(38,4) COMMENT 'Average cost base',
  TRAN_SUMM_AVG_UNIT_COST NUMBER(38,5) COMMENT 'Average cost base',
  TRAN_SUMM_NET_SETT_AMT NUMBER(38,2) COMMENT 'Cash position',
  TRAN_SUMM_CURRENCY VARCHAR(10) COMMENT 'Holding value currency',
  TRAN_SUMM_SETT_QTY NUMBER(38,4) COMMENT 'Units',
  TRAN_SUMM_TRADE_QTY NUMBER(38,4) COMMENT 'Units calculated by trade date',
  TI_FACE_VALUE NUMBER(29,5) COMMENT 'TI Face Value',
  TI_BASIS_POINT NUMBER(29,5) COMMENT 'TI Basis Point',
  MKT_PRICE_DATE TIMESTAMP_NTZ(9) COMMENT 'Mkt Price Date',
  MARKET_PRICE_BID NUMBER(29,8) COMMENT 'Market Price Bid',
  MARKET_PRICE_ASK NUMBER(29,8) COMMENT 'Market Price Ask',
  MARKET_PRICE_CLOSE NUMBER(29,8) COMMENT 'Market Price Close',
  PRICE_CURRENCY VARCHAR(3) COMMENT 'Price Currency',
  TRAN_SUMM_CURR_MKT_PRICE NUMBER(29,8) COMMENT 'Tran Summ Curr Mkt Price',
  TRAN_SUMM_SFK_QTY NUMBER(29,4) COMMENT 'Tran Summ Sfk Qty'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS.INVESTMENT_PRODUCT_TYPE (
  HK_HUB VARCHAR(64) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  TI_ALTERNATE_ID VARCHAR(50) COMMENT 'Financial product ID',
  TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
  TI_TYPE VARCHAR(10) COMMENT 'Financial product type',
  TI_ALTERNATE_TI_CLASS VARCHAR(50) COMMENT 'Financial product class ID',
  TI_CLASS VARCHAR(50) COMMENT 'Financial product class',
  TI_ALTERNATE_SHORT_DESC VARCHAR(100) COMMENT 'Financial product short decsription',
  ENGLISH_DESCRIPTION VARCHAR(512) COMMENT 'Financial product description',
  TI_SYMBOL VARCHAR(512) COMMENT 'TI Symbol'
);
create or replace TABLE DB_IAW_DEV_STG.IAS.PRODUCTION_SHARE_TEST_TRANSACTIONS (
  A_C_ID VARCHAR(100) COMMENT 'Account ID',
  A_C_REPRESENTATIVE VARCHAR(50) COMMENT 'Advisor RR code',
  TI_ALTERNATE_ID VARCHAR(50) COMMENT 'Financial product ID',
  TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
  TRAN_ENTRY_DESCRIPTION VARCHAR(50) COMMENT 'Description of the trading',
  TRAN_USER_DESCRIPTION VARCHAR(50) COMMENT 'Description of the trading',
  TRAN_TRADING_TYPE VARCHAR(10) COMMENT 'Type of the trading : Sell, Buy,...',
  TRANSACTION NUMBER(38,0) COMMENT 'Transaction ID',
  TRAN_TRADING_GROSS_AMT NUMBER(38,2) COMMENT 'Transaction gross amount in CAD or USD',
  TRAN_TRADING_CURRENCY VARCHAR(10) COMMENT 'Transaction amounts currency',
  TRAN_TRADING_NET_AMT NUMBER(38,2) COMMENT 'Transaction net amount in CAD or USD',
  TRAN_TRADING_TRADE_DATE DATE COMMENT 'Trade date',
  TRAN_TRADING_SETT_DATE DATE COMMENT 'Settlement date',
  TRAN_PROCESS_DATE DATE COMMENT 'Process date',
  TI_SYMBOL VARCHAR(50) COMMENT 'Product symbol',
  TRAN_QTY NUMBER(38,4) COMMENT 'Quantity',
  TI_PRIMARY_MARKET VARCHAR(50) COMMENT 'Primary market',
  TRAN_TXN_REFERENCE_ID VARCHAR(50) COMMENT 'Tax reference ID',
  TRAN_AMOUNT_2 NUMBER(38,2) COMMENT 'Transaction amount 2',
  MD_SRC VARCHAR(50) COMMENT 'Main source table for the data',
  MD_LOADDATE TIMESTAMP_NTZ(9),
  MD_SRCSYSTEM VARCHAR(50),
  TI_UNDERLYING_CDN_PRICE NUMBER(38,8) COMMENT 'TI Underlying CDN Price, this field and above fields were added for OG calculation',
  TI_BASIS_POINT NUMBER(38,5) COMMENT 'TI Basis Point',
  TI_FACE_VALUE NUMBER(38,5) COMMENT 'TI Face Value',
  TI_ISSUE_PRICE NUMBER(38,5) COMMENT 'TI Issue Price',
  STRIKE_PRICE NUMBER(38,8) COMMENT 'STRIKE PRICE',
  TI_UNDERLYING_USD_PRICE NUMBER(38,8) COMMENT 'TI Underlying USD Price'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS.REF_INVESTMENT_SAVING_PROGRAM_TYPES (
  HK_HUB VARCHAR(40) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  A_C_ACCOUNT_CLASS VARCHAR(50) COMMENT 'Account class : 038, 040, ...',
  RETAIL_PLAN VARCHAR(50) COMMENT 'Retail plan code : RS, LF, ...',
  RETAIL_PLAN_RESP VARCHAR(10) COMMENT 'To be defined',
  ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'To be defined : Last letter of an account ID'
);
create or replace view DB_IAW_DEV_STG.IAS.VW_CONTRACT(
  HK_LINK,
  MD_HASHDIFF,
  HK_HUB_CONTRACT,
  HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
  HK_HUB_REGISTERED_REPRESENTATIVE,
  CONTRACT_ID,
  CLIENT_ID,
  RR_CD,
  MD_START_DT,
  MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT
) as
SELECT 
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), '#NULL#')
, '|' , COALESCE(TRIM(A_C_ID), '#NULL#')
, '|' , COALESCE(TRIM(A_C_CLIENT), '#NULL#')
, '|' , COALESCE(TRIM(A_C_REPRESENTATIVE), '#NULL#')
, '|' , '#NULL#'  ))) AS HK_LINK,
'0' AS MD_HASHDIFF,
--SHA1(CONCAT (COALESCE(MD_SRC_SYSTEM,'#NULL#'),'|',COALESCE(A_C_ID,'#NULL#'))) AS HK_HUB_CONTRACT,
DECODE(TRUE, A_C_ID IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), '#NULL#'), '|' , COALESCE(TRIM(A_C_ID), '#NULL#') , '|' ,'#NULL#' , '|' ,'#NULL#')))) AS HK_HUB_CONTRACT,
--SHA1(CONCAT(COALESCE(MD_SRC_SYSTEM, '#NULL#'), '|' , COALESCE(A_C_CLIENT, '#NULL#'))) AS HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
DECODE(TRUE, A_C_CLIENT IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), '#NULL#'), '|' , COALESCE(TRIM(A_C_CLIENT), '#NULL#'))))) AS HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
--SHA1(CONCAT (COALESCE(MD_SRC_SYSTEM,'#NULL#'),'|', COALESCE(A_C_REPRESENTATIVE,'#NULL#'))) AS HK_HUB_REGISTERED_REPRESENTATIVE,
DECODE(TRUE, A_C_REPRESENTATIVE IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), '#NULL#'), '|' , COALESCE(TRIM(A_C_REPRESENTATIVE), '#NULL#'))))) AS HK_HUB_REGISTERED_REPRESENTATIVE,
TRIM(A_C_ID) AS CONTRACT_ID,
TRIM(A_C_CLIENT) AS CLIENT_ID,
TRIM(A_C_REPRESENTATIVE) AS RR_CD,
MD_START_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT
FROM IAS.CONTRACT;
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.IAS.JSON_FORMAT
  TYPE = json
  NULL_IF = ()
;
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.IAS.META_CSV_FILE_FORMAT
;
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.IAS.PIPE_UTF16
  TYPE = csv
  FIELD_DELIMITER = '|'
  ESCAPE_UNENCLOSED_FIELD = 'NONE'
  NULL_IF = ('0000-00-00')
  ENCODING = 'UTF-16'
;
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS.SP_CONV_LOADSTG_IAS_NBIN_TO_STG_FINANCIAL_TRANSACTIONS_IAVMBK("ENV" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_DELETE STRING;
INS_INSERT STRING;
INS_UPDATE STRING;
BEGIN
INS_DELETE := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK WHERE 1=1'';
INS_INSERT := ''INSERT INTO DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK (MD_START_DT,MD_SOURCE,A_C_ID,A_C_REPRESENTATIVE,TI_ALTERNATE_ID,TI_ALTERNATE_TI_TYPE,TRAN_ENTRY_DESCRIPTION,TRAN_USER_DESCRIPTION,TRAN_TRADING_TYPE,"TRANSACTION",TRAN_TRADING_GROSS_AMT,TRAN_TRADING_CURRENCY,TRAN_TRADING_NET_AMT,TRAN_TRADING_TRADE_DATE,TRAN_TRADING_SETT_DATE,TRAN_PROCESS_DATE,TI_SYMBOL,TRAN_QTY,TI_PRIMARY_MARKET,TRAN_TXN_REFERENCE_ID,TRAN_AMOUNT_2,MD_EXTRACT_DT,MD_SRC_SYSTEM,TI_UNDERLYING_CDN_PRICE,TI_BASIS_POINT,TI_FACE_VALUE,TI_ISSUE_PRICE,STRIKE_PRICE,TI_UNDERLYING_USD_PRICE)
SELECT
  TRAN_TRADING_TRADE_DATE,
  ''''IAS.PRODUCTION_SHARE_TEST_TRANSACTIONS'''',
  A_C_ID,
  A_C_REPRESENTATIVE,
  TI_ALTERNATE_ID,
  TI_ALTERNATE_TI_TYPE,
  TRAN_ENTRY_DESCRIPTION,
  TRAN_USER_DESCRIPTION,
  TRAN_TRADING_TYPE,
  "TRANSACTION",
  TRAN_TRADING_GROSS_AMT,
  TRAN_TRADING_CURRENCY,
  TRAN_TRADING_NET_AMT,
  TRAN_TRADING_TRADE_DATE,
  TRAN_TRADING_SETT_DATE,
  TRAN_PROCESS_DATE,
  TI_SYMBOL,
  TRAN_QTY,
  TI_PRIMARY_MARKET,
  TRAN_TXN_REFERENCE_ID,
  TRAN_AMOUNT_2,
  --MD_SRC,
  TO_DATE(SYSTIMESTAMP()),
  MD_SRCSYSTEM,
  TI_UNDERLYING_CDN_PRICE,
  TI_BASIS_POINT,
  TI_FACE_VALUE,
  TI_ISSUE_PRICE,
  STRIKE_PRICE,
  TI_UNDERLYING_USD_PRICE
  FROM DB_IAW_''||ENV||''_STG.IAS.PRODUCTION_SHARE_TEST_TRANSACTIONS
        '';
INS_UPDATE := ''UPDATE DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK
SET
HK_LINK=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM("TRANSACTION"), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_ID), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#'''')))),
HK_HUB_CONTRACT=
--SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_ID), ''''#NULL#'''')))),
DECODE(TRUE, A_C_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_ID), ''''#NULL#'''') ,''''|'''', ''''#NULL#'''' ,''''|'''', ''''#NULL#'''' )))),
HK_HUB_REGISTERED_REPRESENTATIVE=
--SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#'''')))),
DECODE(TRUE, A_C_REPRESENTATIVE IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''))))),
HK_HUB_INVESTMENT_PRODUCT_TYPE=
DECODE(TRUE, TI_ALTERNATE_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#''''))))),
MD_HASHDIFF=
SHA1(CONCAT(COALESCE(TI_ALTERNATE_TI_TYPE, ''''#NULL#''''), ''''|'''',COALESCE(TRAN_ENTRY_DESCRIPTION, ''''#NULL#''''), ''''|'''' , COALESCE(TRAN_USER_DESCRIPTION, ''''#NULL#''''), ''''|'''' ,
COALESCE(TRAN_TRADING_TYPE, ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TRAN_TRADING_GROSS_AMT),''''#NULL#''''), ''''|'''',
COALESCE(TRAN_TRADING_CURRENCY,''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_NET_AMT),''''#NULL#'''') , ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_TRADE_DATE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_SETT_DATE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_PROCESS_DATE),''''#NULL#'''')
, ''''|'''', COALESCE(TI_SYMBOL,''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_QTY),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_PRIMARY_MARKET),''''#NULL#'''')
, ''''|'''', COALESCE(TO_VARCHAR(TRAN_TXN_REFERENCE_ID),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_AMOUNT_2),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_UNDERLYING_CDN_PRICE),''''#NULL#'''')
, ''''|'''', COALESCE(TO_VARCHAR(TI_BASIS_POINT),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_FACE_VALUE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_ISSUE_PRICE),''''#NULL#'''')
, ''''|'''', COALESCE(TO_VARCHAR(STRIKE_PRICE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_UNDERLYING_USD_PRICE),''''#NULL#'''')
)), 
MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1
        '';
EXECUTE IMMEDIATE :INS_DELETE;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS.SP_CONV_LOADSTG_IAS_NBIN_TO_STG_FINANCIAL_TRANSACTIONS_IAVMBK_IAPW("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK (
  MD_SOURCE,
  A_C_ID,
  A_C_REPRESENTATIVE,
  TI_ALTERNATE_ID, 
  TI_ALTERNATE_TI_TYPE, 
  TRAN_ENTRY_DESCRIPTION, 
  TRAN_USER_DESCRIPTION, 
  TRAN_TRADING_TYPE, 
  TRANSACTION, 
  TRAN_TRADING_GROSS_AMT, 
  TRAN_TRADING_CURRENCY, 
  TRAN_TRADING_NET_AMT, 
  TRAN_TRADING_TRADE_DATE, 
  TRAN_TRADING_SETT_DATE, 
  TRAN_PROCESS_DATE, 
  TI_SYMBOL, 
  TRAN_QTY, 
  TI_PRIMARY_MARKET, 
  TRAN_TXN_REFERENCE_ID, 
  TRAN_AMOUNT_2, 
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM,
  TI_UNDERLYING_CDN_PRICE, 
  TI_BASIS_POINT, 
  TI_FACE_VALUE, 
  TI_ISSUE_PRICE, 
  STRIKE_PRICE, 
  TI_UNDERLYING_USD_PRICE )
FROM
  (
  SELECT
    metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10,t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$21
    ,t.$22, t.$23, t.$24, t.$25, t.$26, t.$27, t.$28
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*MISSING_TRANSACTIONS.csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK
SET 
  HK_LINK=
  SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TRANSACTION), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_ID), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#'''')))),

  HK_HUB_CONTRACT=
  DECODE(TRUE, A_C_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_ID), ''''#NULL#'''') ,''''|'''', ''''#NULL#'''' ,''''|'''', ''''#NULL#'''' )))),

  HK_HUB_REGISTERED_REPRESENTATIVE=
  DECODE(TRUE, A_C_REPRESENTATIVE IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''))))),

  HK_HUB_INVESTMENT_PRODUCT_TYPE=
  DECODE(TRUE, TI_ALTERNATE_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#''''))))),

  MD_HASHDIFF=
  SHA1(CONCAT(COALESCE(TI_ALTERNATE_TI_TYPE, ''''#NULL#''''), ''''|'''',COALESCE(TRAN_ENTRY_DESCRIPTION, ''''#NULL#''''), ''''|'''' , COALESCE(TRAN_USER_DESCRIPTION, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TRAN_TRADING_TYPE, ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TRAN_TRADING_GROSS_AMT),''''#NULL#''''), ''''|'''', 
  COALESCE(TRAN_TRADING_CURRENCY,''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_NET_AMT),''''#NULL#'''') , ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_TRADE_DATE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_SETT_DATE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_PROCESS_DATE),''''#NULL#'''')
  , ''''|'''', COALESCE(TI_SYMBOL,''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_QTY),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_PRIMARY_MARKET),''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(TRAN_TXN_REFERENCE_ID),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_AMOUNT_2),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_UNDERLYING_CDN_PRICE),''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(TI_BASIS_POINT),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_FACE_VALUE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_ISSUE_PRICE),''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(STRIKE_PRICE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_UNDERLYING_USD_PRICE),''''#NULL#'''')
  )), 
  MD_CREATION_DT=SYSTIMESTAMP(),
  MD_START_DT = DATEADD(DAY,1,TRAN_PROCESS_DATE)
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS.SP_CONV_LOADSTG_INVESTIA_UNIVERIS_TO_STG_REVENUE_PAYABLE("ENV" VARCHAR(1000), "IO_FILE_NAME" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_COPY_QUERY STRING;
INS_UPDATE STRING;

BEGIN
INS_COPY_QUERY := ''
COPY INTO 
  DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REVENUE_PAYABLE (
  MD_START_DT, 
  MD_SOURCE,
  PAY_SYSID,
  PYBL_STATUS,
  EVENT_PROC_SYSID,
  EVENT_RPT_SYSID,
  BEN_SYSID,
  REP_SYSID,
  DEAL_SYSID,
  COM_SYSID,
  DIST_SYSID,
  TRX_SYSID,
  IVR_SYSID,
  PLN_SYSID,
  ACT_SYSID,
  IVD_SYSID,
  MGT_CD,
  TRX_CD,
  PROC_DT,
  PAID_DT,
  PAY_PERIOD,
  TAX_YEAR,
  TRADE_DT,
  GRSS_AMT,
  COM_DLR,
  COM_PYBL,
  COM_BEN_PYBL,
  TICKET_CHG,
  PAY_CD,
  COM_PRODUCTION_CD,
  AMOUNT,
  USR_SYSID,
  OTX_SYSID,
  DISPLAY_FLAG,
  DLR_MINIMUM,
  ORIG_PAY_PER,
  IVT_TYPE,
  COM_PAY_SYSID,
  INTERNAL_COMM,
  WRHS_IND,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM ) 
FROM
  (
  SELECT
    t.$18, metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,
    t.$11,t.$12,t.$13,t.$14,t.$15,t.$16,t.$17,t.$18,t.$19,t.$20,t.$21,t.$22,t.$23,t.$24,
    t.$25,t.$26,t.$27,t.$28,t.$29,t.$30,t.$31,t.$32,t.$33,t.$34,
    t.$35,t.$36,t.$37,t.$38,t.$39,t.$40
  FROM
    @DATALAKE.raw/INVESTIA/INITIAL_LOADING T
  ) pattern = ''||io_file_name||'' file_format =(format_name = DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16);
             '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REVENUE_PAYABLE
SET 
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , 
COALESCE(TO_VARCHAR(PAY_SYSID), ''''#NULL#''''), ''''|'''' , 
COALESCE(TO_VARCHAR(PAID_DT), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVD_SYSID), ''''#NULL#''''), ''''|'''' ,
''''#NULL#''''))),
HK_HUB_CONTRACT=DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#'''')  ,''''|'''', COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''))))),
HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, IVD_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TO_VARCHAR(IVD_SYSID)), ''''#NULL#''''))))),
MD_HASHDIFF = SHA1(CONCAT(
  COALESCE(PYBL_STATUS, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(EVENT_PROC_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(EVENT_RPT_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(BEN_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(DEAL_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(COM_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(DIST_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(TRX_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(ACT_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(MGT_CD, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(TRX_CD),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(PROC_DT),''''#NULL#''''), ''''|'''', 
  COALESCE(PAY_PERIOD, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TAX_YEAR, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(TRADE_DT),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(GRSS_AMT),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(COM_DLR),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(COM_PYBL),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(COM_BEN_PYBL),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(TICKET_CHG),''''#NULL#''''), ''''|'''', 
  COALESCE(PAY_CD, ''''#NULL#''''), ''''|'''' , 
  COALESCE(COM_PRODUCTION_CD, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(AMOUNT),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(USR_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(OTX_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(DISPLAY_FLAG),''''#NULL#''''), ''''|'''', 
  COALESCE(DLR_MINIMUM, ''''#NULL#''''), ''''|'''' , 
  COALESCE(ORIG_PAY_PER, ''''#NULL#''''), ''''|'''' , 
  COALESCE(IVT_TYPE, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(COM_PAY_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(INTERNAL_COMM),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(WRHS_IND),''''#NULL#''''))),  
MD_CREATION_DT=systimestamp(),
MD_START_DT = DATEADD(DAY,1,COALESCE(PAID_DT,PROC_DT))
Where 1=1;
'';
--EXECUTE IMMEDIATE :INS_COPY_QUERY;
--EXECUTE IMMEDIATE :INS_UPDATE;

RETURN INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS.SP_CONV_LOADSTG_PSA_IAS_FUNDATA_TO_STG_FUND("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_FUNDATA.FUND WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_FUNDATA.FUND (
    MD_START_DT
  , MD_SOURCE
  , FUNDSERVID
  , FUNDID
  , FUNDDESCFR
  , FUNDDESCEN
  , FUNDTYPE
  , GROUPNAMEFR
  , GROUPNAMEEN
  , RRSPELIGIBLE
  , FUNDDESCLONGFR
  , FUNDDESCLONGEN
  , LEGALNAMEEN
  , LEGALNAMEFR
  , STAMP
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14, t.$15
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/FUNDATA_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_FUNDATA.FUND
SET
HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(FUNDSERVID), ''''#NULL#'''')))),
  
    MD_HASHDIFF=SHA1(CONCAT(COALESCE(FUNDID, ''''#NULL#''''), ''''|'''',COALESCE(FUNDDESCFR, ''''#NULL#''''), ''''|'''' , COALESCE(FUNDDESCEN, ''''#NULL#''''), ''''|'''' , COALESCE(FUNDTYPE, ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(GROUPNAMEFR),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(GROUPNAMEEN),''''#NULL#''''), ''''|'''', COALESCE(RRSPELIGIBLE,''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(FUNDDESCLONGFR), ''''#NULL#''''), ''''|'''', COALESCE(FUNDDESCLONGEN,''''#NULL#''''), ''''|'''', COALESCE(LEGALNAMEEN,''''#NULL#''''), ''''|'''', COALESCE(LEGALNAMEFR,''''#NULL#''''), ''''|'''', COALESCE(STAMP,''''#NULL#''''))),  
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS.SP_CONV_LOADSTG_PSA_IAS_IAVM_TO_STG_POSITION_PRICE_IAS_IAVM_IAPW("ENV" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_STG.IAS_IAVM.POSITION_PRICE (
MD_START_DT,
MD_SOURCE,
UNITOFMEASURE,
PRICE,
SYMBOL,
MARKET,
PROCESSDATE,
ACCOUNTID,
CLOSEPRICE,
PRICECURRENCY,
BIDPRICE,
ASKPRICE,
MD_EXTRACT_DT,
MD_SRC_SYSTEM ) 
SELECT 
  PROCESSDATE,
  ''''IAS_IAVM.PRODUCTION_SHARE_TEST_POSITION'''',
  UNITOFMEASURE,
  PRICE,
  SYMBOL,
  MARKET,
  PROCESSDATE,
  ACCOUNTID,
  CLOSEPRICE,
  PRICECURRENCY,
  BIDPRICE,
  ASKPRICE,
  TO_DATE(SYSTIMESTAMP()),
  MD_SRCSYSTEM
FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.PRODUCTION_SHARE_TEST_POSITION
UNION ALL 
SELECT 
  PROCESSDATE,
  ''''IAS_IAVM.PRODUCTION_SHARE_TEST_POSITION_HIST'''',
  UNITOFMEASURE,
  PRICE,
  SYMBOL,
  MARKET,
  PROCESSDATE,
  ACCOUNTID,
  CLOSEPRICE,
  PRICECURRENCY,
  BIDPRICE,
  ASKPRICE,
  TO_DATE(SYSTIMESTAMP()),
  MD_SRCSYSTEM
FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.PRODUCTION_SHARE_TEST_POSITION_HIST
      '';
INS_UPDATE := ''UPDATE DB_IAW_''||ENV||''_STG.IAS_IAVM.POSITION_PRICE
SET 
  HK_LINK=
  SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(PROCESSDATE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(UNITOFMEASURE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(SYMBOL), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MARKET), ''''#NULL#''''), ''''|'''', COALESCE(TRIM(ACCOUNTID), ''''#NULL#'''')))),

  MD_HASHDIFF=
  SHA1(CONCAT(COALESCE(TO_VARCHAR(PRICE), ''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(CLOSEPRICE), ''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(PRICECURRENCY), ''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(BIDPRICE), ''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(ASKPRICE), ''''#NULL#'''')
  )), 
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;
      '';

EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS.SP_CONV_LOADSTG_PSA_IAS_IAVM_TO_STG_REF_HOLIDAYS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_HOLIDAYS WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_HOLIDAYS (
    MD_START_DT
  , MD_SOURCE
  , HOLIDAY_DATE
  , DESCRIPTION
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename,t.$1, t.$2, t.$3, t.$4
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/HOLIDAYS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS.SP_CONV_LOADSTG_PSA_IAS_NBIN_TO_STG_CASH_HOLDINGS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.CASH_HOLDINGS WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS.CASH_HOLDINGS (
   MD_START_DT
  , MD_SOURCE
  , MD_SEQ
  , A_C_ID
  , A_C_REPRESENTATIVE
  , A_C_SUMM_BALANCE_BUS_DATE
  , A_C_SUMM_SD_NET_AMT
  , A_C_SUMM_TD_NET_AMT
  , A_C_CURRENCY
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, metadata$file_row_number,
    t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*CASH_HOLDINGS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS.CASH_HOLDINGS
SET
  HK_LINK = SHA1(UPPER(CONCAT(
    COALESCE(TRIM(MD_SEQ), ''''#NULL#''''), ''''|''''
  , COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|''''
  , COALESCE(TRIM(MD_EXTRACT_DT), ''''#NULL#''''), ''''|''''
  , COALESCE(TRIM(A_C_ID), ''''#NULL#''''), ''''|''''
  , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''), ''''|''''
  , ''''#NULL#''''
  ))),
  HK_HUB_CONTRACT = DECODE(TRUE, A_C_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#''''),''''|'''',COALESCE(TRIM(A_C_ID),''''#NULL#''''),''''|'''', ''''#NULL#'''' ,''''|'''', ''''#NULL#'''' )))),
  HK_HUB_REGISTERED_REPRESENTATIVE = DECODE(TRUE, A_C_REPRESENTATIVE IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''))))),
  HK_HUB_INVESTMENT_PRODUCT_TYPE = ''''0'''',
  
  MD_HASHDIFF=SHA1(CONCAT(
    COALESCE(TO_VARCHAR(A_C_SUMM_BALANCE_BUS_DATE),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(A_C_SUMM_SD_NET_AMT),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(A_C_SUMM_TD_NET_AMT),''''#NULL#''''),''''|''''
  , COALESCE(A_C_CURRENCY,''''#NULL#'''')
  )), 
  
  MD_CREATION_DT= SYSTIMESTAMP()
Where 1=1;
'';


EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS.SP_CONV_LOADSTG_PSA_IAS_NBIN_TO_STG_CLIENTS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.ACCOUNT_HOLDER WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS.ACCOUNT_HOLDER (
   MD_START_DT,
  MD_SOURCE,
  A_C_CLIENT,
  SIN_HASH,
  CLIENT_BIRTH_DATE,
  CLIENT_TAX_RECIP_TYPE,
  CLIENT_RESIDENCE,
  CLIENT_RESIDENCE_REGION,
  CLIENT_ANNUAL_GROSS_INC,
  CLIENT_INIT_CONTRACT_DATE,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM,
    CLIENT_INV_KNOWLEDGE_LVL,
    A_C_NAME,
    A_C_FIRST_NAME,
    A_C_MIDDLE_NAME,
    A_C_LAST_NAME,
    CLIENT_FIRST_NAME,
    CLIENT_LAST_NAME )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6,t.$7, t.$8,t.$9, t.$10, t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern =''''.*CLIENTS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS.ACCOUNT_HOLDER
SET
    HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_CLIENT), ''''#NULL#'''')))),
  MD_HASHDIFF=SHA1(CONCAT(COALESCE(SIN_HASH, ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(CLIENT_BIRTH_DATE),''''#NULL#''''), ''''|'''', COALESCE(CLIENT_TAX_RECIP_TYPE,''''#NULL#''''), ''''|'''', COALESCE(CLIENT_RESIDENCE, ''''#NULL#''''), ''''|'''', COALESCE(CLIENT_RESIDENCE_REGION,''''#NULL#''''), ''''|'''', COALESCE(CLIENT_ANNUAL_GROSS_INC,''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(CLIENT_INIT_CONTRACT_DATE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(CLIENT_INV_KNOWLEDGE_LVL),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(A_C_NAME),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(A_C_FIRST_NAME),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(A_C_MIDDLE_NAME),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(A_C_LAST_NAME),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(CLIENT_FIRST_NAME),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(CLIENT_LAST_NAME),''''#NULL#'''') )),  
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;
'';


EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS.SP_CONV_LOADSTG_PSA_IAS_NBIN_TO_STG_CONTRACT("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.CONTRACT WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS.CONTRACT (
    MD_START_DT
  , MD_SOURCE
  , A_C_ID
  , A_C_CLIENT
  , A_C_REPRESENTATIVE
  , ADMINISTRATOR_TYPE
  , A_C_OPEN_DATE
  , A_C_CLOSING_DATE
  , A_C_ACCOUNT_CLASS
  , RETAIL_PLAN
  , RETAIL_PLAN_RESP
  , ACCOUNT_RAP_CODE
  , ASC_3_MANAGED_TYPE
  , A_C_SPECIAL_TAG
  , ASC_1_RESP_PLAN_TYPES
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM
  , A_C_CURRENCY
  , IVT_OBJ_CDE
  , RISK_TOLERANCE
  , DOC_LAST_UPDATE
  , MANAGED_IND)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/ACCOUNTS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS.CONTRACT
SET
  HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#''''),''''|'''',
                COALESCE(TRIM(A_C_ID),''''#NULL#''''),''''|''''
                , ''''#NULL#'''' ,''''|''''
                , ''''#NULL#'''' ))),
  MD_HASHDIFF=SHA1(CONCAT(COALESCE(A_C_CLIENT,''''#NULL#''''), ''''|'''' 
              ,COALESCE(A_C_REPRESENTATIVE,''''#NULL#''''),''''|''''
              ,COALESCE(ADMINISTRATOR_TYPE,''''#NULL#''''),''''|'''' 
              ,COALESCE(TO_VARCHAR(A_C_OPEN_DATE),''''#NULL#''''),''''|'''' 
              ,COALESCE(TO_VARCHAR(A_C_CLOSING_DATE),''''#NULL#''''),''''|'''' 
              ,COALESCE(A_C_ACCOUNT_CLASS,''''#NULL#''''),''''|'''' 
              ,COALESCE(RETAIL_PLAN,''''#NULL#''''),''''|'''' 
              ,COALESCE(RETAIL_PLAN_RESP,''''#NULL#''''),''''|''''
              ,COALESCE(ACCOUNT_RAP_CODE,''''#NULL#''''),''''|''''
              ,COALESCE(ASC_3_MANAGED_TYPE,''''#NULL#''''),''''|''''
              ,COALESCE(A_C_SPECIAL_TAG,''''#NULL#''''),''''|''''
              ,COALESCE(ASC_1_RESP_PLAN_TYPES,''''#NULL#''''),''''|''''
              ,COALESCE(A_C_CURRENCY,''''#NULL#''''),''''|''''
              ,COALESCE(IVT_OBJ_CDE,''''#NULL#'''') ,''''|''''
              ,COALESCE(RISK_TOLERANCE,''''#NULL#''''),''''|''''
              ,COALESCE(TO_VARCHAR(DOC_LAST_UPDATE),''''#NULL#''''),''''|''''
              ,COALESCE(TO_VARCHAR(MANAGED_IND),''''#NULL#'''')
              )
          ),
  MD_CREATION_DT= SYSTIMESTAMP()
Where 1=1'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS.SP_CONV_LOADSTG_PSA_IAS_NBIN_TO_STG_FINANCIAL_TRANSACTIONS_IAVMBK("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;


BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK (
    MD_START_DT
  , MD_SOURCE
  , A_C_ID
  , A_C_REPRESENTATIVE
  , TI_ALTERNATE_ID
  , TI_ALTERNATE_TI_TYPE
  , TRAN_ENTRY_DESCRIPTION
  , TRAN_USER_DESCRIPTION
  , TRAN_TRADING_TYPE
  , TRANSACTION
  , TRAN_TRADING_GROSS_AMT
  , TRAN_TRADING_CURRENCY
  , TRAN_TRADING_NET_AMT
  , TRAN_TRADING_TRADE_DATE
  , TRAN_TRADING_SETT_DATE
  , TRAN_PROCESS_DATE
  , TI_SYMBOL
  , TRAN_QTY
  , TI_PRIMARY_MARKET
  , TRAN_TXN_REFERENCE_ID
  , TRAN_AMOUNT_2
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM
  , TI_UNDERLYING_CDN_PRICE
  , TI_BASIS_POINT
  , TI_FACE_VALUE
  , TI_ISSUE_PRICE
  , STRIKE_PRICE
  , TI_UNDERLYING_USD_PRICE )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10,t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$21
    ,t.$22, t.$23, t.$24, t.$25, t.$26, t.$27, t.$28
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/BK_TRANSACTIONS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';

INS_UPDATE :=''UPDATE DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK
SET 
HK_LINK=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM("TRANSACTION"), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_ID), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#'''')))),

HK_HUB_CONTRACT=
--SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_ID), ''''#NULL#'''')))),
DECODE(TRUE, A_C_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#''''),''''|'''',COALESCE(TRIM(A_C_ID),''''#NULL#''''),''''|'''', ''''#NULL#'''' ,''''|'''', ''''#NULL#'''' )))),

HK_HUB_REGISTERED_REPRESENTATIVE=
--SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#'''')))),
DECODE(TRUE, A_C_REPRESENTATIVE IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''))))),

HK_HUB_INVESTMENT_PRODUCT_TYPE=
DECODE(TRUE, TI_ALTERNATE_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#''''))))),

MD_HASHDIFF=
SHA1(CONCAT(COALESCE(TI_ALTERNATE_TI_TYPE, ''''#NULL#''''), ''''|'''',COALESCE(TRAN_ENTRY_DESCRIPTION, ''''#NULL#''''), ''''|'''' , COALESCE(TRAN_USER_DESCRIPTION, ''''#NULL#''''), ''''|'''' , 
COALESCE(TRAN_TRADING_TYPE, ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TRAN_TRADING_GROSS_AMT),''''#NULL#''''), ''''|'''', 
COALESCE(TRAN_TRADING_CURRENCY,''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_NET_AMT),''''#NULL#'''') , ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_TRADE_DATE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_SETT_DATE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_PROCESS_DATE),''''#NULL#'''')
, ''''|'''', COALESCE(TI_SYMBOL,''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_QTY),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_PRIMARY_MARKET),''''#NULL#'''')
, ''''|'''', COALESCE(TO_VARCHAR(TRAN_TXN_REFERENCE_ID),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_AMOUNT_2),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_UNDERLYING_CDN_PRICE),''''#NULL#'''')
, ''''|'''', COALESCE(TO_VARCHAR(TI_BASIS_POINT),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_FACE_VALUE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_ISSUE_PRICE),''''#NULL#'''')
, ''''|'''', COALESCE(TO_VARCHAR(STRIKE_PRICE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_UNDERLYING_USD_PRICE),''''#NULL#'''')
)), 
MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1'';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS.SP_CONV_LOADSTG_PSA_IAS_NBIN_TO_STG_HOLDINGS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.HOLDINGS WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS.HOLDINGS (
    MD_START_DT
  , MD_SOURCE
  , MD_SEQ
  , A_C_ID
  , A_C_REPRESENTATIVE
  , TI_ALTERNATE_ID
  , TRAN_SUMM_CURR_MKT_VALUE
  , TRAN_SUMM_BUSINESS_DATE
  , TI_ALTERNATE_TI_TYPE
  , B_V_SECURITY_POSITION_VAL
  , B_V_SECURITY_POSITION_COS
  , TRAN_SUMM_AVG_UNIT_COST
  , TRAN_SUMM_NET_SETT_AMT
  , TRAN_SUMM_CURRENCY
  , TRAN_SUMM_SETT_QTY
  , TRAN_SUMM_TRADE_QTY
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM
  , TI_FACE_VALUE
  , TI_BASIS_POINT
  , MKT_PRICE_DATE
  , MARKET_PRICE_BID
  , MARKET_PRICE_ASK
  , MARKET_PRICE_CLOSE
  , PRICE_CURRENCY
  , TRAN_SUMM_CURR_MKT_PRICE
  , TRAN_SUMM_SFK_QTY 
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, metadata$file_row_number,
    t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20, t.$21, t.$22, t.$23, t.$24
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/HOLDINGS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS.HOLDINGS
SET 
  HK_LINK = SHA1(UPPER(CONCAT(
    COALESCE(TRIM(MD_SEQ), ''''#NULL#''''), ''''|'''' 
  , COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' 
  , COALESCE(TRIM(MD_EXTRACT_DT), ''''#NULL#''''), ''''|'''' 
  , COALESCE(TRIM(A_C_ID), ''''#NULL#''''), ''''|'''' 
  , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''), ''''|'''' 
  , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#''''), ''''|''''
  , ''''#NULL#'''', ''''|''''
  , ''''#NULL#''''
  ))),
    
  HK_HUB_CONTRACT = DECODE(TRUE, A_C_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_ID), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''', ''''|'''' ,''''#NULL#'''' )))),
  HK_HUB_REGISTERED_REPRESENTATIVE = DECODE(TRUE, A_C_REPRESENTATIVE IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''))))),
  HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, TI_ALTERNATE_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#''''))))),

  MD_HASHDIFF=SHA1(CONCAT(
    COALESCE(TO_VARCHAR(TRAN_SUMM_CURR_MKT_VALUE),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(TRAN_SUMM_BUSINESS_DATE),''''#NULL#''''), ''''|''''
  , COALESCE(TI_ALTERNATE_TI_TYPE,''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(B_V_SECURITY_POSITION_VAL),''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(B_V_SECURITY_POSITION_COS),''''#NULL#''''),''''|''''
  , COALESCE(TO_VARCHAR(TRAN_SUMM_AVG_UNIT_COST),''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(TRAN_SUMM_NET_SETT_AMT),''''#NULL#''''),''''|'''' 
  , COALESCE(TRAN_SUMM_CURRENCY,''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(TRAN_SUMM_SETT_QTY),''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(TRAN_SUMM_TRADE_QTY),''''#NULL#''''),''''|''''
  , COALESCE(TO_VARCHAR(TI_FACE_VALUE),''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(TI_BASIS_POINT),''''#NULL#''''),''''|''''
  , COALESCE(TO_VARCHAR(MKT_PRICE_DATE),''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(MARKET_PRICE_BID),''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(MARKET_PRICE_ASK),''''#NULL#''''),''''|''''
  , COALESCE(TO_VARCHAR(MARKET_PRICE_CLOSE),''''#NULL#''''),''''|''''
  , COALESCE(PRICE_CURRENCY,''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(TRAN_SUMM_CURR_MKT_PRICE),''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(TRAN_SUMM_SFK_QTY),''''#NULL#'''')  
  )), 
  
  MD_CREATION_DT= SYSTIMESTAMP()
Where 1=1;
'';


EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS.SP_CONV_LOADSTG_PSA_IAS_NBIN_TO_STG_INVESTMENT_PRODUCT_TYPE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.INVESTMENT_PRODUCT_TYPE WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS.INVESTMENT_PRODUCT_TYPE
(
MD_START_DT,
MD_SOURCE,
TI_ALTERNATE_ID,
TI_ALTERNATE_TI_TYPE,
TI_TYPE,
TI_ALTERNATE_TI_CLASS,
TI_CLASS,
TI_ALTERNATE_SHORT_DESC,
ENGLISH_DESCRIPTION,
TI_SYMBOL,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*MARKETPRODUCTS__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS.INVESTMENT_PRODUCT_TYPE
SET
HK_HUB=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#'''')))),
MD_HASHDIFF=
SHA1(CONCAT(COALESCE(TI_ALTERNATE_TI_TYPE, ''''#NULL#''''), ''''|'''',COALESCE(TI_TYPE, ''''#NULL#''''), ''''|'''' , COALESCE(TI_ALTERNATE_TI_CLASS, ''''#NULL#''''), ''''|'''' , COALESCE(TI_CLASS, ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TI_ALTERNATE_SHORT_DESC),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(ENGLISH_DESCRIPTION),''''#NULL#''''), ''''|'''', COALESCE(TI_SYMBOL,''''#NULL#'''') )),  
MD_CREATION_DT= SYSTIMESTAMP()
Where 1=1;
'';


EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS.SP_CONV_LOADSTG_PSA_IAS_NBIN_TO_STG_PLANS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.REF_INVESTMENT_SAVING_PROGRAM_TYPES WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS.REF_INVESTMENT_SAVING_PROGRAM_TYPES
(
MD_START_DT,
MD_SOURCE,
A_C_ACCOUNT_CLASS,
RETAIL_PLAN,
RETAIL_PLAN_RESP,
ACCOUNT_RAP_CODE,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4,t.$5, t.$6
  FROM
    @DATALAKE.''||io_PATH||'' t
  ) pattern =''''.*PLANS_.*csv'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS.REF_INVESTMENT_SAVING_PROGRAM_TYPES
SET
HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#'''') ,''''|'''', ''''#NULL#'''',''''|'''', COALESCE(TRIM(A_C_ACCOUNT_CLASS),''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TO_VARCHAR(RETAIL_PLAN)),''''#NULL#''''), ''''|'''', COALESCE(TRIM(RETAIL_PLAN_RESP),''''#NULL#''''),''''|'''', COALESCE(TRIM(ACCOUNT_RAP_CODE),''''#NULL#'''')))),
     MD_HASHDIFF=''''0'''' ,
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;
'';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS.SP_LOADSTG_PSA_IAS_COMMISSION_TO_STG_REVENUES("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_COMMISSION.REVENUES WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_COMMISSION.REVENUES
(
MD_START_DT,
MD_SOURCE,
  REPID ,
  ADVISOR_ID ,
  PROGRAM_TYPE ,
  ACCOUNTID ,
  PROCESSDATE ,
  SOURCECODE ,
  QUANTITY ,
  TRANSTYPE ,
  REVENUE ,
  COMMISSION ,
  NETCOMMISSION ,
  TRANSFEE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,t.$11,t.$12,t.$13,t.$14
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern =''''.*REVENUES__.*csv'''' file_format=(format_name=IAS.PIPE_UTF16);
              '';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS.SP_LOADSTG_PSA_IAS_NBIN_TO_STG_CASH_HOLDINGS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.CASH_HOLDINGS WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS.CASH_HOLDINGS (
    MD_START_DT
  , MD_SOURCE
  , MD_SEQ
  , A_C_ID
  , A_C_CLIENT
  , A_C_REPRESENTATIVE
  , A_C_SUMM_BALANCE_BUS_DATE
  , A_C_SUMM_SD_NET_AMT
  , A_C_SUMM_TD_NET_AMT
  , A_C_CURRENCY
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/CASH_HOLDINGS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS.SP_LOADSTG_PSA_IAS_NBIN_TO_STG_CLIENTS("ENV" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var UPD_QUERY = "UPDATE DB_IAW_"+ENV+"_STG.IAS.ACCOUNT_HOLDER SET \\
        HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''#NULL#''), ''|'' , COALESCE(TRIM(A_C_CLIENT), ''#NULL#'')))), \\
        MD_HASHDIFF=SHA1(CONCAT(COALESCE(SIN_HASH, ''#NULL#''), ''|'' , COALESCE(TO_VARCHAR(CLIENT_BIRTH_DATE),''#NULL#''), ''|'', COALESCE(CLIENT_TAX_RECIP_TYPE,''#NULL#''), ''|'',  COALESCE(CLIENT_RESIDENCE, ''#NULL#''), ''|'', COALESCE(CLIENT_RESIDENCE_REGION,''#NULL#''), ''|'', COALESCE(CLIENT_ANNUAL_GROSS_INC,''#NULL#''), ''|'', COALESCE(TO_VARCHAR(CLIENT_INIT_CONTRACT_DATE),''#NULL#''))), MD_CREATION_DT=SYSTIMESTAMP() Where 1=1;";

var sql_statement = snowflake.createStatement(
          {
          sqlText: UPD_QUERY
          }
       );
   var result_scan = sql_statement.execute(); 
 
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS.SP_LOADSTG_PSA_IAS_NBIN_TO_STG_HOLDINGS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.HOLDINGS WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS.HOLDINGS (
    MD_START_DT
  , MD_SOURCE
  , MD_SEQ
  , A_C_ID
  , A_C_REPRESENTATIVE
  , TI_ALTERNATE_ID
  , TRAN_SUMM_CURR_MKT_VALUE
  , TRAN_SUMM_BUSINESS_DATE
  , TI_ALTERNATE_TI_TYPE
  , B_V_SECURITY_POSITION_VAL
  , B_V_SECURITY_POSITION_COS
  , TRAN_SUMM_AVG_UNIT_COST
  , TRAN_SUMM_NET_SETT_AMT
  , TRAN_SUMM_CURRENCY
  , TRAN_SUMM_SETT_QTY
  , TRAN_SUMM_TRADE_QTY
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, metadata$file_row_number,
    t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14, t.$15
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/HOLDINGS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS.TEST1("ENV" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '';
create or replace schema DB_IAW_DEV_STG.IAS_CERTS;

create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_CERTS.REGISTERED_REPRESENTATIVE (
  HK_HUB VARCHAR(40) COMMENT 'Hash of the business keys',
  HK_SAT VARCHAR(40) COMMENT 'Hash of the Satellite for the multi-active keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  CID VARCHAR(500) COMMENT 'Source Account ID exp: #100002',
  FIRST_NAME VARCHAR(500) COMMENT 'Representative first name',
  LAST_NAME VARCHAR(500) COMMENT 'Representative last name',
  FULL_NAME VARCHAR(1000) COMMENT 'Representative full name',
  PRIMARY_ROLE VARCHAR(500) COMMENT 'Representative primary role exp: Supervisor, Director, etc...',
  RVP VARCHAR(500) COMMENT 'Representative RVP exp: RVP1, RVP2, etc...',
  BRANCH_NRD VARCHAR(500) COMMENT 'Code of the representative branch',
  BRANCH_NAME VARCHAR(500) COMMENT 'Name of the representative branch',
  PROVINCE VARCHAR(500) COMMENT 'Province name',
  IS_ACTIVE NUMBER(1,0) COMMENT 'Active user indicator',
  RR_CD VARCHAR(2000) COMMENT 'RR code',
  TRADE_NAME VARCHAR(2000) COMMENT 'Trade name exp: Tradenames_#118048',
  PORTAL_IDS VARCHAR(2000) COMMENT 'Portal identifier exp: PortalIds_#118048',
  BEGIN_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor begin date',
  END_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor end date',
  ADVISOR_BIRTH_DATE DATE COMMENT 'Advisor month and year of birth',
  REP_EMAIL VARCHAR(1000) COMMENT 'Advisor repemail',
  CBM VARCHAR(1000) COMMENT 'Advisor cbm',
  BRANCH_ADDRESS1 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS1',
  BRANCH_ADDRESS2 VARCHAR(1000) COMMENT 'Advisor branch ADDRESS2',
  BRANCH_CITY VARCHAR(1000) COMMENT 'Advisor branch city',
  BRANCH_POSTAL_CODE VARCHAR(1000) COMMENT 'Advisor branch postal code'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_CERTS.REGISTERED_REPRESENTATIVE_RECEPTION (
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  CID VARCHAR(500) COMMENT 'Source Account ID exp: #100002',
  FIRST_NAME VARCHAR(500) COMMENT 'Representative first name',
  LAST_NAME VARCHAR(500) COMMENT 'Representative last name',
  FULL_NAME VARCHAR(1000) COMMENT 'Representative full name',
  PRIMARY_ROLE VARCHAR(500) COMMENT 'Representative primary role exp: Supervisor, Director, etc...',
  RVP VARCHAR(500) COMMENT 'Representative RVP exp: RVP1, RVP2, etc...',
  BRANCH_NRD VARCHAR(500) COMMENT 'Code of the representative branch',
  BRANCH_NAME VARCHAR(500) COMMENT 'Name of the representative branch',
  PROVINCE VARCHAR(500) COMMENT 'Province name',
  IS_ACTIVE NUMBER(1,0) COMMENT 'Active user indicator',
  REP_CODE VARCHAR(2000) COMMENT 'RR code',
  TRADE_NAME VARCHAR(2000) COMMENT 'Trade name exp: Tradenames_#118048',
  PORTAL_IDS VARCHAR(2000) COMMENT 'Portal identifier exp: PortalIds_#118048',
  BEGIN_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor begin date',
  END_DT TIMESTAMP_NTZ(7) COMMENT 'Advisor end date',
  ADVISOR_BIRTH_DATE DATE COMMENT 'Advisor month and year of birth',
  REP_EMAIL VARCHAR(1000) COMMENT 'Advisor repemail',
  CBM VARCHAR(1000) COMMENT 'Advisor cbm',
  BRANCH_ADDRESS1 VARCHAR(1000) COMMENT 'Advisor branch address1',
  BRANCH_ADDRESS2 VARCHAR(1000) COMMENT 'Advisor branch address2',
  BRANCH_CITY VARCHAR(1000) COMMENT 'Advisor branch city',
  BRANCH_POSTAL_CODE VARCHAR(1000) COMMENT 'Advisor branch postal code'
);
create or replace TABLE DB_IAW_DEV_STG.IAS_CERTS.STG_REGISTERED_REPRESENTATIVE_START_DT_IAS_CERTS (
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version'
);
create or replace view DB_IAW_DEV_STG.IAS_CERTS.REGISTERED_REPRESENTATIVE_TEST(
  HK_HUB,
  HK_SAT,
  MD_START_DT,
  MD_HASHDIFF,
  MD_CREATION_DT,
  MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  CID,
  FIRST_NAME,
  LAST_NAME,
  FULL_NAME,
  PRIMARY_ROLE,
  RVP,
  BRANCH_NRD,
  BRANCH_NAME,
  PROVINCE,
  IS_ACTIVE,
  RR_CD,
  TRADE_NAME,
  PORTAL_IDS,
  BEGIN_DT,
  END_DT,
  ADVISOR_BIRTH_DATE
) as
Select * from DB_IAW_DEV_STG.IAS_CERTS.REGISTERED_REPRESENTATIVE;
create or replace view DB_IAW_DEV_STG.IAS_CERTS.VW_REGISTERED_REPRESENTATIVE(
  "First Name",
  "Last Name",
  "Full Name",
  "Region VP",
  "Branch Code",
  "Branch Name",
  "Date of Birth",
  "Status",
  "Province",
  "RR code",
  "Trade Name"
) as
select distinct
basic.value:fnm::string as "First Name",
basic.value:lnm::string as "Last Name",
basic.value:nam::string as "Full Name",
basic.value:rvp::string as "Region VP",
basic.value:brc::string as "Branch Code",
basic.value:brn::string as "Branch Name",
basic.value:dob::string as "Date of Birth",
basic.value:act::string as "Status",
basic.value:prv::string as "Province",
RR.value::string as "RR code",
trd.value::string as "Trade Name"

  from
  "DB_IAW_DEV_STAGING"."IAS_CERTS"."REGISTERED_REPRESENTATIVE_RECEPTION"
    --"DB_IAW_DEV_STAGING"."IAS"."CERTS_REGISTERED_REPRESENTATIVE_JSON"
    , lateral flatten(input => JSON_CONTENT) ad
    , lateral flatten(input => ad.value:bas) basic
    , lateral flatten(input => ad.value:rep, OUTER => TRUE) RR
    , lateral flatten(input => ad.value:trd, OUTER => TRUE) trd;
create or replace view DB_IAW_DEV_STG.IAS_CERTS.VW_REGISTERED_REPRESENTATIVE_SPLIT(
  MD_START_DT,
  MD_EXTRACT_DT,
  MD_SOURCE,
  CID,
  FIRST_NAME,
  LAST_NAME,
  FULL_NAME,
  PRIMARY_ROLE,
  RVP,
  BRANCH_NRD,
  BRANCH_NAME,
  PROVINCE,
  IS_ACTIVE,
  REP_CODE,
  TRADE_NAME,
  PORTAL_IDS,
  BEGIN_DT,
  END_DT,
  ADVISOR_BIRTH_DATE,
  REP_EMAIL,
  CBM,
  BRANCH_ADDRESS1,
  BRANCH_ADDRESS2,
  BRANCH_CITY,
  BRANCH_POSTAL_CODE
) as 
SELECT 
MD_START_DT,
MD_EXTRACT_DT,
MD_SOURCE,
CID, 
FIRST_NAME, 
LAST_NAME, 
FULL_NAME, 
PRIMARY_ROLE, 
RVP, 
BRANCH_NRD, 
BRANCH_NAME, 
PROVINCE, 
IS_ACTIVE, 
TRIM(c.value::STRING) AS rep_code,
TRADE_NAME, 
PORTAL_IDS, 
BEGIN_DT, 
END_DT,
ADVISOR_BIRTH_DATE,
REP_EMAIL,   
CBM,   
BRANCH_ADDRESS1,
BRANCH_ADDRESS2,
BRANCH_CITY,
BRANCH_POSTAL_CODE
FROM IAS_CERTS.REGISTERED_REPRESENTATIVE_RECEPTION,
lateral flatten(input=>split(REP_CODE, ','),OUTER => TRUE) c;
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.IAS_CERTS.PIPE_UTF16
  TYPE = csv
  FIELD_DELIMITER = '|'
  ESCAPE_UNENCLOSED_FIELD = 'NONE'
  NULL_IF = ('0000-00-00')
  ENCODING = 'UTF-16'
;
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_CERTS.SP_CONV_LDSTG_PSA_IAS_CERT_TO_STG_REG_REP_REC_IAS_CERTS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_CERTS.REGISTERED_REPRESENTATIVE_RECEPTION WHERE 1=1'';
INS_PRE_COPY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_CERTS.REGISTERED_REPRESENTATIVE_RECEPTION
(
    MD_START_DT,
    MD_SOURCE,
    CID ,
  FIRST_NAME ,
  LAST_NAME ,
  FULL_NAME ,
  PRIMARY_ROLE ,
  RVP ,
  BRANCH_NRD ,
  BRANCH_NAME ,
  PROVINCE ,
  IS_ACTIVE ,
  REP_CODE ,
  TRADE_NAME ,
  PORTAL_IDS ,
  BEGIN_DT ,
  END_DT,
  ADVISOR_BIRTH_DATE,
    REP_EMAIL,     
  CBM,       
  BRANCH_ADDRESS1,   
  BRANCH_ADDRESS2,   
  BRANCH_CITY,     
  BRANCH_POSTAL_CODE
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,t.$11,t.$12,t.$13,t.$14,t.$15,t.$16,t.$17,t.$18,t.$19,t.$20,t.$21,t.$22 
  FROM
    @DATALAKE.''||IO_PATH||'' t
  ) pattern =''''.*REGISTERED_REPRESENTATIVE__.*csv'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16)
              '';
INS_UPDATE :=''UPDATE DB_IAW_''||ENV||''_STG.IAS_CERTS.REGISTERED_REPRESENTATIVE_RECEPTION SET MD_EXTRACT_DT =''''2000-01-01'''' WHERE ASCII(CID) <>239'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_COPY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_CERTS.SP_CONV_LOADSTG_SPLIT_VIEW_TO_STG_REG_REP_IAS_CERTS("ENV" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_CERTS.REGISTERED_REPRESENTATIVE WHERE 1=1'';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_STG.IAS_CERTS.REGISTERED_REPRESENTATIVE
( MD_START_DT,
  MD_SOURCE,
  MD_EXTRACT_DT,
  CID,
  FIRST_NAME,
  LAST_NAME,
  FULL_NAME,
  PRIMARY_ROLE,
  RVP,
  BRANCH_NRD,
  BRANCH_NAME,
  PROVINCE,
  IS_ACTIVE,
  RR_CD,
  TRADE_NAME,
  PORTAL_IDS,
  BEGIN_DT,
  END_DT,
  ADVISOR_BIRTH_DATE,
  REP_EMAIL,     
  CBM,       
  BRANCH_ADDRESS1,   
  BRANCH_ADDRESS2,   
  BRANCH_CITY,     
  BRANCH_POSTAL_CODE
)
SELECT
  src.MD_START_DT,
  src.MD_SOURCE,
  src.MD_EXTRACT_DT,
  src.CID,
  src.FIRST_NAME,
  src.LAST_NAME,
  src.FULL_NAME,
  src.PRIMARY_ROLE,
  src.RVP,
  src.BRANCH_NRD,
  src.BRANCH_NAME,
  src.PROVINCE,
  src.IS_ACTIVE,
  src.REP_CODE,
  src.TRADE_NAME,
  src.PORTAL_IDS,
  src.BEGIN_DT,
  src.END_DT,
  src.ADVISOR_BIRTH_DATE,
  src.REP_EMAIL,     
  src.CBM,       
  src.BRANCH_ADDRESS1,   
  src.BRANCH_ADDRESS2,   
  src.BRANCH_CITY,     
  src.BRANCH_POSTAL_CODE
FROM DB_IAW_''||ENV||''_STG.IAS_CERTS.VW_REGISTERED_REPRESENTATIVE_SPLIT src
              '';
INS_UPDATE :=''
UPDATE DB_IAW_''||ENV||''_STG.IAS_CERTS.REGISTERED_REPRESENTATIVE
SET
  HK_HUB=SHA1(UPPER(CONCAT(''''IAS'''', ''''|'''', COALESCE(TRIM(RR_CD), ''''#NULL#'''')))),
  HK_SAT=SHA1(UPPER(CONCAT(TRIM(CID)))),
  MD_HASHDIFF=SHA1(UPPER(CONCAT(COALESCE(FIRST_NAME,''''#NULL#''''), ''''|'''', COALESCE(LAST_NAME,''''#NULL#''''), ''''|'''',
  COALESCE(LAST_NAME,''''#NULL#''''), ''''|'''', COALESCE(PRIMARY_ROLE,''''#NULL#''''), ''''|'''', COALESCE(RVP,''''#NULL#''''), ''''|'''' ,COALESCE(BRANCH_NRD,''''#NULL#''''),''''|'''',
  COALESCE(BRANCH_NAME,''''#NULL#''''), ''''|'''',COALESCE(PROVINCE,''''#NULL#''''),''''|'''',COALESCE(TO_CHAR(IS_ACTIVE),''''#NULL#''''),''''|'''',
  COALESCE(TRADE_NAME,''''#NULL#''''), ''''|'''', COALESCE(PORTAL_IDS,''''#NULL#''''),''''|'''',COALESCE(TO_CHAR(BEGIN_DT),''''#NULL#''''), ''''|'''', 
    COALESCE(TO_CHAR(END_DT),''''#NULL#''''), ''''|'''' ,COALESCE(TO_CHAR(ADVISOR_BIRTH_DATE),''''#NULL#''''),
    ''''|'''' ,COALESCE(REP_EMAIL,''''#NULL#''''), ''''|'''' ,  COALESCE(CBM,''''#NULL#''''), ''''|'''' , COALESCE(BRANCH_ADDRESS1,''''#NULL#''''), ''''|'''' , COALESCE(BRANCH_ADDRESS2,''''#NULL#''''), ''''|'''' ,
    COALESCE(BRANCH_CITY,''''#NULL#''''), ''''|'''' ,COALESCE(BRANCH_POSTAL_CODE,''''#NULL#'''')
    ))),
  MD_CREATION_DT=SYSTIMESTAMP(),
  MD_SRC_SYSTEM=''''IAS_CERTS''''
  Where 1=1
    '';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
create or replace schema DB_IAW_DEV_STG.IAS_COMMISSION;

create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_COMMISSION.INSURANCE_REVENUES (
  HK_LINK VARCHAR(40) COMMENT 'Hash of the business keys',
  HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for registered representative',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  TRANSID NUMBER(38,0) COMMENT 'Transaction ID',
  EXTTRANSID VARCHAR(20) COMMENT 'Extended transaction ID',
  PROCESSDATE DATE COMMENT 'Process date',
  TRANSDATE TIMESTAMP_NTZ(9) COMMENT 'Transaction date',
  SOURCECODE VARCHAR(24) COMMENT 'Source code / Transaction type',
  CANCELIND NUMBER(38,0) COMMENT 'Cancel indicator',
  REPID VARCHAR(24) COMMENT 'Representative ID',
  CURRENCY VARCHAR(6) COMMENT 'transaction currency',
  EXCHANGERATE NUMBER(38,2) COMMENT 'the exchange rate used for the transaction',
  ENTRY_TYPE VARCHAR(24) COMMENT 'entry type = insurance revenue',
  COMMISSION NUMBER(38,2) COMMENT 'Representative gross commission',
  COMMISSIONCAD NUMBER(38,2) COMMENT 'Representative gross commission in CAD',
  OVERRIDEIND NUMBER(38,0) COMMENT 'Override indicator',
  ACCURATEIND NUMBER(38,0) COMMENT 'Accuracy indicator',
  DESCRIPTION VARCHAR(250) COMMENT 'Description',
  NUMBEROFORDERS NUMBER(38,0) COMMENT 'Number of orders',
  NETCOMMISSION NUMBER(38,2) COMMENT 'Representative net commission',
  TRANSFEE NUMBER(38,2) COMMENT 'Representative transaction fees',
  SHAREIND NUMBER(38,0) COMMENT 'Share indicator',
  AFFECTGROSSCOMMIND NUMBER(38,0) COMMENT 'Affect gross commission Indicator',
  REVENUEONLYIND NUMBER(38,0) COMMENT 'Revenu Only Indicator',
  NOTE VARCHAR(250) COMMENT 'Notes',
  REVNO VARCHAR(250) COMMENT 'Revision number',
  STAMP DATE COMMENT 'Record insertion date',
  USERID VARCHAR(250) COMMENT 'User ID'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_COMMISSION.REGISTERED_REPRESENTATIVE (
  HK_HUB VARCHAR(40) COMMENT 'Hash of the business keys',
  HK_SAT VARCHAR(40) COMMENT 'Hash of the Satellite for the multi-active keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  REPID VARCHAR(50) COMMENT 'RR code',
  REPNAME VARCHAR(512) COMMENT 'Representative name',
  FIRSTNAME VARCHAR(512) COMMENT 'Representative first name',
  LASTNAME VARCHAR(512) COMMENT 'Representative last name',
  BRANCHCODE VARCHAR(50) COMMENT 'Code of the representative branch code',
  BRANCHNAME VARCHAR(512) COMMENT 'Name of the representative branch',
  GROUPID NUMBER(38,0) COMMENT 'Representant Group ID',
  GROUPDESCRIPTION VARCHAR(512) COMMENT 'Advisor group description',
  FIXEDFEEIND NUMBER(38,0) COMMENT 'Fixed fees indicator',
  MANAGEDIND NUMBER(38,0) COMMENT 'Managed indicator',
  REFIND NUMBER(38,0) COMMENT 'Holding value currency',
  ACTIVEIND NUMBER(38,0) COMMENT 'Active RR code indicator',
  SEGFUNDIND NUMBER(38,0) COMMENT 'Segregated funds indicator',
  REVNO NUMBER(38,0) COMMENT 'Revision number',
  STAMP TIMESTAMP_NTZ(9) COMMENT 'Source row timestamp',
  USERID VARCHAR(512) COMMENT 'User id',
  ACTIVE NUMBER(38,0) COMMENT 'Active user indicator',
  ADVISOR_ID VARCHAR(512) COMMENT 'Advisor id',
  COMMRATEPCT NUMBER(6,3) COMMENT 'Default Commission Rate Percentage',
  SHAREGROSSCOMMIND NUMBER(38,0) COMMENT 'Indicator of share of gross commission',
  STARTDATE DATE COMMENT 'the starting date of the advisor',
  MAINREPCODE VARCHAR(50) COMMENT 'Main RR code',
  ADVISOR_ROLE VARCHAR(500) COMMENT 'Advisor role (e.g. isAdvisor, isAssistant and isBranchManager)'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_COMMISSION.REGISTERED_REPRESENTATIVE_RECEPTION (
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  REPID VARCHAR(50) COMMENT 'RR code',
  REPNAME VARCHAR(512) COMMENT 'Representative name',
  FIRSTNAME VARCHAR(512) COMMENT 'Representative first name',
  LASTNAME VARCHAR(512) COMMENT 'Representative last name',
  BRANCHCODE VARCHAR(50) COMMENT 'Code of the representative branch code',
  BRANCHNAME VARCHAR(512) COMMENT 'Name of the representative branch',
  GROUPID NUMBER(38,0) COMMENT 'Representant Group ID',
  GROUPDESCRIPTION VARCHAR(512) COMMENT 'Advisor group description',
  FIXEDFEEIND NUMBER(38,0) COMMENT 'Fixed fees indicator',
  MANAGEDIND NUMBER(38,0) COMMENT 'Managed indicator',
  REFIND NUMBER(38,0) COMMENT 'Holding value currency',
  ACTIVEIND NUMBER(38,0) COMMENT 'Active RR code indicator',
  SEGFUNDIND NUMBER(38,0) COMMENT 'Segregated funds indicator',
  REVNO NUMBER(38,0) COMMENT 'Revision number',
  STAMP TIMESTAMP_NTZ(9) COMMENT 'Source row timestamp',
  USERID VARCHAR(512) COMMENT 'User id',
  ACTIVE NUMBER(38,0) COMMENT 'Active user indicator',
  ADVISOR_ID VARCHAR(512) COMMENT 'Advisor id',
  COMMRATEPCT NUMBER(6,3) COMMENT 'Default Commission Rate Percentage',
  SHAREGROSSCOMMIND NUMBER(38,0) COMMENT 'Indicator of share of gross commission',
  STARTDATE DATE COMMENT 'the starting date of the advisor',
  MAINREPCODE VARCHAR(50) COMMENT 'Main RR code',
  ADVISOR_ROLE VARCHAR(500) COMMENT 'Advisor role (e.g. isAdvisor, isAssistant and isBranchManager)'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_COMMISSION.REVENUES (
  HK_LINK VARCHAR(40) COMMENT 'Hash of the business keys',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for PARTY_ROLE_ACCOUNT_HOLDER',
  HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40) COMMENT 'Hash key for the REGISTERED_REPRESENTATIVE_COMMISSION',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  REPID VARCHAR(50) COMMENT 'Master code  code',
  ADVISOR_ID VARCHAR(512) COMMENT 'Advisor ID in commission portal',
  PROGRAM_TYPE VARCHAR(512) COMMENT 'Program type of the account',
  ACCOUNTID VARCHAR(100) COMMENT 'Account ID',
  PROCESSDATE DATE COMMENT 'Process Date',
  SOURCECODE VARCHAR(50) COMMENT 'Source Code / TRANSACTION_TYPE',
  QUANTITY NUMBER(38,0) COMMENT 'Transaction quantity',
  TRANSTYPE VARCHAR(10) COMMENT 'Transaction Type ([B]uy/[S]ell) / BUY_SELL_INDICATOR',
  REVENUE NUMBER(38,2) COMMENT 'Representative gross revenue',
  COMMISSION NUMBER(38,2) COMMENT 'Representative gross commission',
  NETCOMMISSION NUMBER(38,2) COMMENT 'Representative net commission',
  TRANSFEE NUMBER(38,2) COMMENT 'Representative transaction fees',
  ENTRY_TYPE VARCHAR(20) COMMENT 'Entry Type',
  STAMP DATE COMMENT 'Record Insertion Date'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_COMMISSION.SHARE (
  HK_LINK VARCHAR(64) COMMENT 'Hash of the business keys',
  HK_HUB_FROM VARCHAR(64) COMMENT 'Hash of the business keys',
  HK_HUB_TO VARCHAR(64) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  MD_SRCSYSTEM VARCHAR(50) COMMENT 'Source system',
  FROMREPID VARCHAR(50) COMMENT 'RR code',
  TOREPID VARCHAR(50) COMMENT 'Master code',
  SHARETYPE VARCHAR(50) COMMENT 'Sharing Type (codeSet)',
  SOURCECODE VARCHAR(50) COMMENT 'Source Code / TRANSACTION_TYPE',
  PRODUCTCODE VARCHAR(50) COMMENT 'Product Code / SECURITY_GROUP_CODE',
  REVENUEPCT NUMBER(6,3) COMMENT 'Dispatch of revenues (percentage)',
  COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
  NETCOMMISSIONPCT NUMBER(6,3) COMMENT 'Net Commission Sharing Percentage',
  FEEPCT NUMBER(6,3) COMMENT 'Fee Sharing Percentage',
  REVNO NUMBER(38,0) COMMENT 'Revision number',
  STAMP TIMESTAMP_NTZ(9) COMMENT 'Source row timestamp'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_COMMISSION.SHAREHIST (
  HISTID NUMBER(20,0) COMMENT 'Identifier for the operation',
  HISTOPERATION VARCHAR(12) COMMENT 'Operation exp: DELETE',
  HISTSTAMP TIMESTAMP_NTZ(9) COMMENT 'Operation timestamp',
  HISTUSERID VARCHAR(250) COMMENT 'User identifier who did the operation',
  FROMREPID VARCHAR(12) COMMENT 'RR code',
  TOREPID VARCHAR(12) COMMENT 'Master code',
  SHARETYPE VARCHAR(12) COMMENT 'Sharing Type (codeSet)',
  SOURCECODE VARCHAR(12) COMMENT 'Source Code / TRANSACTION_TYPE',
  PRODUCTCOD VARCHAR(12) COMMENT 'Product Code / SECURITY_GROUP_CODE',
  REVENUEPCT NUMBER(6,3) COMMENT 'Dispatch of revenues (percentage)',
  COMMISSIONPCT NUMBER(6,3) COMMENT 'Commission Sharing Percentage',
  NETCOMMISSIONPCT NUMBER(6,3) COMMENT 'Net Commission Sharing Percentage',
  FEEPCT NUMBER(6,3) COMMENT 'Fee Sharing Percentage',
  REVNO NUMBER(11,0) COMMENT 'Revision number',
  STAMP TIMESTAMP_NTZ(9) COMMENT 'Source row timestamp',
  USERID VARCHAR(250) COMMENT 'User identifier',
  MD_EXTRACT_DT TIMESTAMP_NTZ(7) COMMENT 'Extraction date of the occurrence',
  MD_SRC_SYSTEM VARCHAR(50) COMMENT 'Source system',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance'
);
create or replace TABLE DB_IAW_DEV_STG.IAS_COMMISSION.TEST_REV_1 (
  DATE DATE,
  FIRSTNAME VARCHAR(16777216)
);
create or replace TABLE DB_IAW_DEV_STG.IAS_COMMISSION.TEST_REV_IH (
  HK_LINK VARCHAR(40),
  HK_HUB_CONTRACT VARCHAR(40),
  HK_HUB_PARTY_ROLE_ADVISOR VARCHAR(40),
  MD_CREATION_DT TIMESTAMP_NTZ(9),
  MD_START_DT TIMESTAMP_NTZ(9),
  MD_SOURCE VARCHAR(1000),
  MD_SRC_SYSTEM VARCHAR(100),
  MD_EXTRACT_DT TIMESTAMP_NTZ(9),
  REPID VARCHAR(50),
  ADVISOR_ID VARCHAR(512),
  PROGRAM_TYPE VARCHAR(512),
  ACCOUNTID VARCHAR(100),
  PROCESSDATE DATE,
  SOURCECODE VARCHAR(50),
  QUANTITY NUMBER(38,0),
  TRANSTYPE VARCHAR(10),
  REVENUE NUMBER(38,2),
  COMMISSION NUMBER(38,2),
  NETCOMMISSION NUMBER(38,2),
  TRANSFEE NUMBER(38,2),
  ENTRY_TYPE VARCHAR(20),
  STAMP DATE
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_COMMISSION.TRANSACTION_REVENUES (
  HK_LINK VARCHAR(40) COMMENT 'Hash of the business keys',
  HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40) COMMENT 'Hash key for registered representative',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for an Account',
  MD_CREATION_DT TIMESTAMP_NTZ(9) DEFAULT CURRENT_TIMESTAMP() COMMENT 'Creation Date Time of the occurrence',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  TRANSID NUMBER(38,0) COMMENT 'Transaction ID',
  EXTTRANSID VARCHAR(20) COMMENT 'Extended transaction ID',
  PROCESSDATE DATE COMMENT 'Process date',
  TRANSDATE TIMESTAMP_NTZ(9) COMMENT 'Transaction date',
  SOURCECODE VARCHAR(24) COMMENT 'Source code / Transaction type',
  CANCELIND NUMBER(38,0) COMMENT 'Cancel indicator',
  REPID VARCHAR(24) COMMENT 'Representative ID',
  CURRENCY VARCHAR(6) COMMENT 'transaction currency',
  EXCHANGERATE NUMBER(38,2) COMMENT 'the exchange rate used for the transaction',
  ENTRY_TYPE VARCHAR(24) COMMENT 'entry type of revenue in source',
  COMMISSION NUMBER(38,2) COMMENT 'Representative gross commission',
  COMMISSIONCAD NUMBER(38,2) COMMENT 'Representative gross commission in CAD',
  OVERRIDEIND NUMBER(38,0) COMMENT 'Override indicator',
  ACCURATEIND NUMBER(38,0) COMMENT 'Accuracy indicator',
  DESCRIPTION VARCHAR(250) COMMENT 'Description',
  NUMBEROFORDERS NUMBER(38,0) COMMENT 'Number of orders',
  NETCOMMISSION NUMBER(38,2) COMMENT 'Representative net commission',
  TRANSFEE NUMBER(38,2) COMMENT 'Representative transaction fees',
  SHAREIND NUMBER(38,0) COMMENT 'Share indicator',
  AFFECTGROSSCOMMIND NUMBER(38,0) COMMENT 'Affect gross commission Indicator',
  REVENUEONLYIND NUMBER(38,0) COMMENT 'Revenu Only Indicator',
  NOTE VARCHAR(250) COMMENT 'Notes',
  REVNO VARCHAR(250) COMMENT 'Revision number',
  STAMP DATE COMMENT 'Record insertion date',
  USERID VARCHAR(250) COMMENT 'User ID',
  PROGRAM_TYPE VARCHAR(512) COMMENT 'Program type of the account',
  ACCOUNTID VARCHAR(100) COMMENT 'Account ID',
  QUANTITY NUMBER(38,0) COMMENT 'Transaction quantity',
  TRANSTYPE VARCHAR(10) COMMENT 'Transaction Type ([B]uy/[S]ell) / BUY_SELL_INDICATOR'
);
create or replace TABLE DB_IAW_DEV_STG.IAS_COMMISSION.TRANSACTION_REVENUES_CLONE (
  HK_LINK VARCHAR(40),
  HK_HUB_REGISTERED_REPRESENTATIVE VARCHAR(40),
  HK_HUB_CONTRACT VARCHAR(40),
  MD_CREATION_DT TIMESTAMP_NTZ(9),
  MD_START_DT TIMESTAMP_NTZ(9),
  MD_SOURCE VARCHAR(1000),
  MD_SRC_SYSTEM VARCHAR(100),
  MD_EXTRACT_DT TIMESTAMP_NTZ(9),
  MD_HASHDIFF VARCHAR(64),
  TRANSID NUMBER(38,0),
  EXTTRANSID VARCHAR(20),
  PROCESSDATE DATE,
  TRANSDATE TIMESTAMP_NTZ(9),
  SOURCECODE VARCHAR(24),
  CANCELIND NUMBER(38,0),
  REPID VARCHAR(24),
  CURRENCY VARCHAR(6),
  EXCHANGERATE NUMBER(38,2),
  ENTRY_TYPE VARCHAR(24),
  COMMISSION NUMBER(38,2),
  COMMISSIONCAD NUMBER(38,2),
  OVERRIDEIND NUMBER(38,0),
  ACCURATEIND NUMBER(38,0),
  DESCRIPTION VARCHAR(250),
  NUMBEROFORDERS NUMBER(38,0),
  NETCOMMISSION NUMBER(38,2),
  TRANSFEE NUMBER(38,2),
  SHAREIND NUMBER(38,0),
  AFFECTGROSSCOMMIND NUMBER(38,0),
  REVENUEONLYIND NUMBER(38,0),
  NOTE VARCHAR(250),
  REVNO VARCHAR(250),
  STAMP DATE,
  USERID VARCHAR(250),
  PROGRAM_TYPE VARCHAR(512),
  ACCOUNTID VARCHAR(100),
  QUANTITY NUMBER(38,0),
  TRANSTYPE VARCHAR(10)
);
create or replace view DB_IAW_DEV_STG.IAS_COMMISSION.REGISTERED_REPRESENTATIVE_CLEAN(
  MD_START_DT,
  MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  REPID,
  REPNAME,
  FIRSTNAME,
  LASTNAME,
  BRANCHCODE,
  BRANCHNAME,
  GROUPID,
  GROUPDESCRIPTION,
  FIXEDFEEIND,
  MANAGEDIND,
  REFIND,
  ACTIVEIND,
  SEGFUNDIND,
  REVNO,
  STAMP,
  USERID,
  ACTIVE,
  ADVISOR_ID,
  COMMRATEPCT,
  SHAREGROSSCOMMIND,
  STARTDATE,
  MAINREPCODE,
  ADVISOR_ROLE
) as 
SELECT * FROM IAS_COMMISSION.REGISTERED_REPRESENTATIVE_RECEPTION A
WHERE (A.ACTIVE =1 OR A.ACTIVE =0)
AND A.REPID <>'CMLJ'
AND A.MD_START_DT <>'2015-04-24';
create or replace view DB_IAW_DEV_STG.IAS_COMMISSION.VW_HUB_REGISTERED_REPRESENTAVIVE(
  HK_HUB,
  REPID,
  MD_SRC_SYSTEM,
  MD_SOURCE,
  MD_EXTRACT_DT
) as(
  SELECT  DISTINCT a.HK_HUB ,a.REPID ,a.MD_SRC_SYSTEM,a.MD_SOURCE ,a.MD_EXTRACT_DT 
FROM IAS_COMMISSION.REGISTERED_REPRESENTATIVE a );
create or replace view DB_IAW_DEV_STG.IAS_COMMISSION.VW_SHARE_AUD(
  HK_LINK,
  HK_HUB_FROM,
  HK_HUB_TO,
  MD_HASHDIFF,
  MD_CREATION_DT,
  MD_SOURCE,
  MD_SRCSYSTEM,
  MD_START_DT,
  MD_EXTRACT_DT,
  FROMREPID,
  TOREPID,
  SHARETYPE,
  SOURCECODE,
  PRODUCTCOD,
  REVENUEPCT,
  COMMISSIONPCT,
  NETCOMMISSIONPCT,
  FEEPCT,
  REVNO,
  STAMP,
  START_DT,
  END_DT
) as
WITH CLN_SHAREHIST AS
(SELECT DISTINCT 
  MD5(NVL(FROMREPID,'')||NVL(TOREPID,'')||NVL(SHARETYPE,'')||NVL(SOURCECODE,'')||NVL(PRODUCTCOD,'')) AS ID,
  FROMREPID,
  TOREPID,
  SHARETYPE,
  SOURCECODE,
  PRODUCTCOD,
  REVENUEPCT,
  COMMISSIONPCT,
  NETCOMMISSIONPCT,
  FEEPCT,
  REVNO,
  STAMP,
  HISTSTAMP ,
  MD_EXTRACT_DT AS MD_LOADDATE ,
  MD_SRC_SYSTEM 
FROM
  IAS_COMMISSION.SHAREHIST
  QUALIFY ROW_NUMBER() OVER (PARTITION BY ID, HISTSTAMP ORDER BY revno DESC ) = 1 ),  
AUD AS (  
SELECT 
  ID,
  FROMREPID,
  TOREPID,
  SHARETYPE,
  SOURCECODE,
  PRODUCTCOD,
  REVENUEPCT,
  COMMISSIONPCT,
  NETCOMMISSIONPCT,
  FEEPCT,
  REVNO,
  STAMP,
  MD_LOADDATE ,
  MD_SRCSYSTEM , 
  NVL(LAG(HISTSTAMP) OVER ( PARTITION BY SRC,ID ORDER BY HISTSTAMP),  NVL(STAMP, '2000-01-01')) AS START_DT ,
  HISTSTAMP AS END_DT
FROM
(
SELECT
  'SHARE' AS SRC,
  MD5(NVL(FROMREPID,'')||NVL(TOREPID,'')||NVL(SHARETYPE,'')||NVL(SOURCECODE,'')||NVL(PRODUCTCODE,'')) AS ID,
  FROMREPID,
  TOREPID,
  SHARETYPE,
  SOURCECODE,
  PRODUCTCODE AS PRODUCTCOD,
  REVENUEPCT,
  COMMISSIONPCT,
  NETCOMMISSIONPCT,
  FEEPCT,
  REVNO,
  STAMP ,
  MD_EXTRACT_DT AS MD_LOADDATE ,
  MD_SRCSYSTEM ,
  TO_TIMESTAMP('9999-12-31') AS  HISTSTAMP
FROM
  IAS_COMMISSION."SHARE"
UNION ALL
SELECT
  'SHARE_HIST' AS SRC,
  MD5(NVL(FROMREPID,'')||NVL(TOREPID,'')||NVL(SHARETYPE,'')||NVL(SOURCECODE,'')||NVL(PRODUCTCOD,'')) AS ID,
  FROMREPID,
  TOREPID,
  SHARETYPE,
  SOURCECODE,
  PRODUCTCOD,
  REVENUEPCT,
  COMMISSIONPCT,
  NETCOMMISSIONPCT,
  FEEPCT,
  REVNO,
  STAMP,
  MD_LOADDATE ,
  MD_SRC_SYSTEM ,
  HISTSTAMP
FROM
  CLN_SHAREHIST
)
ORDER BY ID, START_DT DESC  
) 
SELECT   
SHA1(UPPER(CONCAT('IAS' ,'|', COALESCE(TRIM(FROMREPID), '#NULL#'), '|', COALESCE(TRIM(TOREPID),'#NULL#'),'|', COALESCE(TRIM(SHARETYPE),'#NULL#'),'|', 
     COALESCE(TRIM(SOURCECODE),'#NULL#'),'|', COALESCE(TRIM(PRODUCTCOD),'#NULL#') ))) AS HK_LINK,
DECODE(TRUE, FROMREPID IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM('IAS'), '#NULL#'), '|' , COALESCE(TRIM(FROMREPID), '#NULL#'))))) AS HK_HUB_FROM ,
DECODE(TRUE, TOREPID IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM('IAS'), '#NULL#'), '|' , COALESCE(TRIM(TOREPID), '#NULL#'))))) AS   HK_HUB_TO ,
SHA1(CONCAT( COALESCE(TO_VARCHAR(REVENUEPCT), '#NULL#'),'|',
    COALESCE(TO_VARCHAR(COMMISSIONPCT), '#NULL#'),'|',
    COALESCE(TO_VARCHAR(NETCOMMISSIONPCT), '#NULL#'),'|',
        COALESCE(TO_VARCHAR(FEEPCT), '#NULL#'),'|',
        COALESCE(TO_VARCHAR(REVNO), '#NULL#'),'|',
        COALESCE(TO_VARCHAR(STAMP), '#NULL#'),'|',
        COALESCE(TO_VARCHAR(START_DT), '#NULL#'),'|',
        COALESCE(TO_VARCHAR(END_DT), '#NULL#') 
      )) AS MD_HASHDIFF,  
SYSTIMESTAMP() AS MD_CREATION_DT,
'SHAREHIST' AS MD_SOURCE,
MD_SRCSYSTEM,
START_DT AS MD_START_DT,
MD_LOADDATE AS MD_EXTRACT_DT,
FROMREPID,
TOREPID,
SHARETYPE,
SOURCECODE,
PRODUCTCOD,
REVENUEPCT,
COMMISSIONPCT,
NETCOMMISSIONPCT,
FEEPCT,
REVNO,
STAMP,
START_DT,
END_DT  
FROM AUD
WHERE START_DT <> END_DT
QUALIFY ROW_NUMBER() OVER (PARTITION BY hk_link,TO_DATE(START_DT) ORDER BY revno DESC, START_DT desc ) = 1;
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.IAS_COMMISSION.PIPE_UTF16
  TYPE = csv
  FIELD_DELIMITER = '|'
  ESCAPE_UNENCLOSED_FIELD = 'NONE'
  NULL_IF = ('0000-00-00')
  ENCODING = 'UTF-16'
;
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.IAS_COMMISSION.PIPE_UTF8
  TYPE = csv
  FIELD_DELIMITER = '|'
;
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_COMMISSION."DB_IAW_DEV_STG.IAS.SP_LOADSTG_PSA_IAS_COMMISSION_TO_STG_REVENUES"("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_COMMISSION.REVENUES WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_COMMISSION.REVENUES
(
MD_START_DT,
MD_SOURCE,
  REPID ,
  ADVISOR_ID ,
  PROGRAM_TYPE ,
  ACCOUNTID ,
  PROCESSDATE ,
  SOURCECODE ,
  QUANTITY ,
  TRANSTYPE ,
  REVENUE ,
  COMMISSION ,
  NETCOMMISSION ,
  TRANSFEE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,t.$11,t.$12,t.$13,t.$14
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern =''''.*REVENUES_.*csv'''' file_format=(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_COMMISSION."DB_IAW_DEV_STG.IAS_COMMISSION.SP_LOADSTG_PSA_IAS_COMMISSION_TO_STG_REVENUES"("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_COMMISSION.REVENUES WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_COMMISSION.REVENUES
(
MD_START_DT,
MD_SOURCE,
  REPID ,
  ADVISOR_ID ,
  PROGRAM_TYPE ,
  ACCOUNTID ,
  PROCESSDATE ,
  SOURCECODE ,
  QUANTITY ,
  TRANSTYPE ,
  REVENUE ,
  COMMISSION ,
  NETCOMMISSION ,
  TRANSFEE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,t.$11,t.$12,t.$13,t.$14
  FROM
    @DATALAKE.''||IO_PATH||'' T
  ) pattern =''''.*REVENUES_.*csv'''' file_format=(format_name=IAS.PIPE_UTF16);
              '';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_COMMISSION.SP_CONV_LDSTG_PSA_IAS_COMSN_TO_STG_REG_REP_COMM_REC("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_COMMISSION.REGISTERED_REPRESENTATIVE_RECEPTION WHERE 1=1'';
INS_PRE_COPY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_COMMISSION.REGISTERED_REPRESENTATIVE_RECEPTION
(  MD_START_DT ,
  MD_SOURCE ,
  REPID ,
  REPNAME ,
  FIRSTNAME ,
  LASTNAME ,
  BRANCHCODE ,
  BRANCHNAME ,
  GROUPID ,
  GROUPDESCRIPTION ,
  FIXEDFEEIND ,
  MANAGEDIND ,
  REFIND ,
  ACTIVEIND ,
  SEGFUNDIND ,
  REVNO ,
  STAMP ,
  USERID ,
  ACTIVE ,
  ADVISOR_ID ,
  COMMRATEPCT ,
  SHAREGROSSCOMMIND ,
  STARTDATE ,
  MAINREPCODE ,
  MD_EXTRACT_DT ,
  MD_SRC_SYSTEM,
  ADVISOR_ROLE )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13,t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20, t.$21, t.$22, t.$23,
    t.$24, t.$25
  FROM 
    @DATALAKE.''||IO_PATH||'' t ) pattern = ''''.*REGISTERED_REPRESENTATIVE__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16)'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_COPY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_COMMISSION.SP_CONV_LOADSTG_IAS_COMMISSION_TO_STG_REVENUES("ENV" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS ' 
var delete_query = "DELETE FROM DB_IAW_dev_stg.STEWARDSHIP.REF_MAPPING_OPER_TYPE WHERE 1=1";
var delete_query_ENV = delete_query.replaceAll("_dev_","_"+ ENV + "_");
var sql_statement1 = snowflake.createStatement({
  sqlText: delete_query_ENV
});
var result1_scan = sql_statement1.execute(); 
INS_QUERY = "INSERT INTO DB_IAW_dev_stg.IAS_COMMISSION.REVENUES(MD_START_DT , " +
"MD_SRC_SYSTEM,   " +
"REPID  ," +
"ADVISOR_ID ," +  
"PROGRAM_TYPE,  " + 
"ACCOUNTID  ," +  
"PROCESSDATE, " +
"SOURCECODE , " +
"QUANTITY , " +
"TRANSTYPE  , " +
"REVENUE    ," +
"COMMISSION , " +
"NETCOMMISSION, " +
"TRANSFEE) " +
"(SELECT PROCESSDATE  , " +
"MD_SRCSYSTEM,  " +
"REPID, " +
"ADVISOR_ID ," +
"PROGRAM_TYPE ," +
"ACCOUNTID  ," +
"PROCESSDATE  ," +
"SOURCECODE ," +
"QUANTITY ," +
"TRANSTYPE  ," +
"REVENUE  ," +
"COMMISSION ," +
"NETCOMMISSION, " +
"TRANSFEE" +
" FROM DB_IAW_dev_stg.IAS_COMMISSION.PRODUCTION_SHARE_TEST_REVENUES)" ;
var INS_QUERY_ENV = INS_QUERY.replaceAll("_dev_","_"+ ENV + "_");
var sql_statement2 = snowflake.createStatement({
  sqlText: INS_QUERY_ENV
});
 var result2_scan = sql_statement2.execute(); 
 var update_query = "UPDATE DB_IAW_dev_stg.IAS_COMMISSION.REVENUES  " +
"SET  " +
"HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(''IAS''), ''#NULL#''), ''|'' , COALESCE(TRIM(REPID), ''#NULL#''), ''|'' , COALESCE(TRIM(ADVISOR_ID), ''#NULL#''), ''|'' ," +
"COALESCE(TRIM(PROGRAM_TYPE), ''#NULL#''), ''|'' " +
",COALESCE(TRIM(ACCOUNTID), ''#NULL#''), ''|'' ," +
"COALESCE(TRIM(TO_VARCHAR(PROCESSDATE)), ''#NULL#''), ''|'' , COALESCE(TRIM(SOURCECODE), ''#NULL#''), ''|'' ,COALESCE(TRIM(QUANTITY), ''#NULL#''), ''|'' ,COALESCE(TRIM(TRANSTYPE), ''#NULL#''))))," +
"HK_HUB_CONTRACT=DECODE(TRUE, ACCOUNTID IS NULL ,''0'',SHA1(UPPER(CONCAT(COALESCE(TRIM(''IAS''),''#NULL#''),''|'',COALESCE(TRIM(ACCOUNTID),''#NULL#''),''|'', ''#NULL#'' ,''|'', ''#NULL#'' ))))," +
"HK_HUB_PARTY_ROLE_ADVISOR =DECODE(TRUE, REPID IS NULL ,''0'',SHA1(UPPER(CONCAT(COALESCE(TRIM(''IAS''), ''#NULL#''), ''|'' , COALESCE(TRIM(REPID), ''#NULL#'')))))," +
"MD_CREATION_DT=systimestamp()" +
"Where 1=1";
var update_query_ENV = update_query.replaceAll("_dev_","_"+ ENV + "_");
var sql_statement3 = snowflake.createStatement({ 
  sqlText: update_query_ENV
});
 var result3_scan = sql_statement3.execute(); 
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_COMMISSION.SP_CONV_LOADSTG_IAS_COMMISSION_TO_STG_SHARE("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_COMMISSION.SHARE WHERE 1=1;'';
INS_QUERY := ''
INSERT INTO DB_IAW_''||ENV||''_STG.IAS_COMMISSION.SHARE
(
MD_START_DT,
 MD_SOURCE,
  FROMREPID ,
  TOREPID ,
  SHARETYPE ,
  SOURCECODE ,
  PRODUCTCODE ,
  REVENUEPCT ,
  COMMISSIONPCT ,
  NETCOMMISSIONPCT ,
  FEEPCT ,    
  REVNO ,
  STAMP,
  MD_EXTRACT_DT ,
  MD_SRCSYSTEM
)
SELECT
TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD''''),
''''DB_IAW_''||ENV||''_STAGING_POCIA.IAS_COMMISSION.SHARE'''',
    FROMREPID ,
  TOREPID ,
  SHARETYPE ,
  SOURCECODE ,
  PRODUCTCODE ,
  REVENUEPCT ,
  COMMISSIONPCT ,
  NETCOMMISSIONPCT ,
  FEEPCT ,
  REVNO ,
  STAMP,
TO_DATE(CURRENT_TIMESTAMP),
  ''''IAS'''' 
FROM DB_IAW_''||ENV||''_STAGING_POCIA.IAS_COMMISSION_POCIA.SHARE;
 '';
        
UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_COMMISSION.SHARE
SET
  HK_LINK=SHA1(UPPER(CONCAT(''''IAS'''' ,''''|'''', COALESCE(TRIM(FROMREPID), ''''#NULL#''''), ''''|'''', COALESCE(TRIM(TOREPID),''''#NULL#''''),''''|'''', COALESCE(TRIM(SHARETYPE),''''#NULL#''''),''''|'''', COALESCE(TRIM(SOURCECODE),''''#NULL#''''),''''|'''', COALESCE(TRIM(PRODUCTCODE),''''#NULL#'''') ))),
  HK_HUB_FROM= DECODE(TRUE, FROMREPID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(FROMREPID), ''''#NULL#''''))))),
  HK_HUB_TO= DECODE(TRUE, TOREPID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TOREPID), ''''#NULL#''''))))),
  MD_HASHDIFF=SHA1(concat( COALESCE(TO_VARCHAR(REVENUEPCT), ''''#NULL#''''),''''|'''',
                   COALESCE(TO_VARCHAR(COMMISSIONPCT), ''''#NULL#''''),''''|'''',
                   COALESCE(TO_VARCHAR(NETCOMMISSIONPCT), ''''#NULL#''''),''''|'''',
             COALESCE(TO_VARCHAR(FEEPCT), ''''#NULL#''''),''''|'''',
             COALESCE(TO_VARCHAR(REVNO), ''''#NULL#'''')
             )),  
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;
'';


EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_COMMISSION.SP_CONV_LOADSTG_IAS_COMMISSION_TO_STG_SHAREHIST_IAS_COMMISSION("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_QUERY STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_COMMISSION.SHAREHIST WHERE 1=1;'';
INS_QUERY := ''
INSERT INTO DB_IAW_''||ENV||''_STG.IAS_COMMISSION.SHAREHIST
(
MD_START_DT,
MD_SOURCE,
HISTID,
HISTOPERATION ,
HISTSTAMP ,
HISTUSERID ,
FROMREPID ,
TOREPID ,
SHARETYPE ,
SOURCECODE ,
PRODUCTCOD ,
REVENUEPCT ,
COMMISSIONPCT ,
NETCOMMISSIONPCT ,
FEEPCT ,
REVNO ,
STAMP ,
USERID ,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
)
SELECT
TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD''''),
STAMP,
''''DB_IAW_DEV_STAGING_POCIA.IAS_COMMISSION.SHAREHIST'''',
HISTID,
HISTOPERATION ,
HISTSTAMP ,
HISTUSERID ,
FROMREPID ,
TOREPID ,
SHARETYPE ,
SOURCECODE ,
PRODUCTCOD ,
REVENUEPCT ,
COMMISSIONPCT ,
NETCOMMISSIONPCT ,
FEEPCT ,
REVNO ,
STAMP ,
USERID,
TO_DATE(CURRENT_TIMESTAMP),

''''IAS''''
FROM DB_IAW_DEV_STAGING_POCIA.IAS_COMMISSION_POCIA.SHAREHIST;
'';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_COMMISSION.SP_CONV_LOADSTG_PSA_IAS_COMMISSION_TO_STG_INSURANCE_REVENUES("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_COMMISSION.INSURANCE_REVENUES WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_COMMISSION.INSURANCE_REVENUES
(
MD_START_DT, 
MD_SOURCE,
  TRANSID, 
  EXTTRANSID, 
  PROCESSDATE, 
  TRANSDATE, 
  SOURCECODE, 
  CANCELIND, 
  REPID, 
  CURRENCY, 
  EXCHANGERATE, 
  ENTRY_TYPE, 
  COMMISSION, 
  COMMISSIONCAD, 
  OVERRIDEIND, 
  ACCURATEIND, 
  DESCRIPTION, 
  NUMBEROFORDERS, 
  NETCOMMISSION, 
  TRANSFEE, 
  SHAREIND, 
  AFFECTGROSSCOMMIND, 
  REVENUEONLYIND, 
  NOTE, 
  REVNO, 
  STAMP, 
  USERID,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT
) 
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,t.$11,t.$12,t.$13,t.$14,t.$15,t.$16,t.$17,t.$18,t.$19,t.$20,t.$21,t.$22,t.$23,t.$24,t.$25,t.$26,t.$27
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern =''''.*INSURANCE_REVENUES_.*csv'''' file_format=(format_name= DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
  '';
   INS_UPDATE := ''
  UPDATE  DB_IAW_''||ENV||''_STG.IAS_COMMISSION.INSURANCE_REVENUES
SET 
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TRANSID), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REPID), ''''#NULL#'''') ))),
HK_HUB_REGISTERED_REPRESENTATIVE =DECODE(TRUE, REPID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REPID), ''''#NULL#''''))))),

MD_CREATION_DT=systimestamp()
Where 1=1'';
        
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_COMMISSION.SP_CONV_LOADSTG_PSA_IAS_COMMISSION_TO_STG_REGREP("ENV" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL string;
INS_INSERT string;
INS_UPDATE string;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_COMMISSION.REGISTERED_REPRESENTATIVE WHERE 1 = 1'';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_STG.IAS_COMMISSION.REGISTERED_REPRESENTATIVE
(MD_START_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT,
REPID,
REPNAME,
FIRSTNAME,
LASTNAME,
BRANCHCODE,
BRANCHNAME,
GROUPID,
GROUPDESCRIPTION,
FIXEDFEEIND,
MANAGEDIND,
REFIND,
ACTIVEIND,
SEGFUNDIND,
REVNO,
STAMP,
USERID,
ACTIVE,
ADVISOR_ID,
COMMRATEPCT,
SHAREGROSSCOMMIND,
STARTDATE,
MAINREPCODE,
ADVISOR_ROLE)
SELECT
SRC.MD_START_DT,
SRC.MD_SOURCE,
SRC.MD_SRC_SYSTEM,
SRC.MD_EXTRACT_DT,
SRC.REPID,
SRC.REPNAME,
SRC.FIRSTNAME,
SRC.LASTNAME,
SRC.BRANCHCODE,
SRC.BRANCHNAME,
SRC.GROUPID,
SRC.GROUPDESCRIPTION,
SRC.FIXEDFEEIND,
SRC.MANAGEDIND,
SRC.REFIND,
SRC.ACTIVEIND,
SRC.SEGFUNDIND,
SRC.REVNO,
SRC.STAMP,
SRC.USERID,
SRC.ACTIVE,
SRC.ADVISOR_ID,
SRC.COMMRATEPCT,
SRC.SHAREGROSSCOMMIND,
SRC.STARTDATE,
SRC.MAINREPCODE,
SRC.ADVISOR_ROLE
FROM DB_IAW_''||ENV||''_STG.IAS_COMMISSION.REGISTERED_REPRESENTATIVE_CLEAN SRC
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_COMMISSION.REGISTERED_REPRESENTATIVE
SET
  
  HK_HUB=SHA1(UPPER(CONCAT(''''IAS'''', ''''|'''', COALESCE(TRIM(REPID), ''''#NULL#'''')))),
  HK_SAT=SHA1(UPPER(CONCAT(''''IAS'''',''''|'''', COALESCE(TRIM(ADVISOR_ID), ''''#NULL#''''),''''|'''', COALESCE(TRIM(FIRSTNAME), ''''#NULL#''''),''''|'''',COALESCE(TRIM(LASTNAME), ''''#NULL#'''')))),
  MD_HASHDIFF=SHA1(UPPER(CONCAT(COALESCE(REPNAME,''''#NULL#''''), ''''|'''', COALESCE(BRANCHCODE,''''#NULL#''''), ''''|'''',
  COALESCE(BRANCHNAME,''''#NULL#''''), ''''|'''', COALESCE(TO_CHAR(GROUPID),''''#NULL#''''), ''''|'''', COALESCE(GROUPDESCRIPTION,''''#NULL#''''), ''''|'''' ,COALESCE(TO_CHAR(FIXEDFEEIND),''''#NULL#''''),''''|'''',
  COALESCE(TO_CHAR(MANAGEDIND),''''#NULL#''''), ''''|'''',COALESCE(TO_CHAR(REFIND),''''#NULL#''''),''''|'''',COALESCE(TO_CHAR(ACTIVEIND),''''#NULL#''''), ''''|'''',COALESCE(TO_CHAR(SEGFUNDIND),''''#NULL#''''),''''|'''',
  COALESCE(TO_CHAR(REVNO),''''#NULL#''''), ''''|'''', COALESCE(TO_CHAR(STAMP),''''#NULL#''''), ''''|'''' ,COALESCE(USERID,''''#NULL#''''), ''''|'''',COALESCE(TO_CHAR(ACTIVE),''''#NULL#''''), ''''|'''', COALESCE(TO_CHAR(COMMRATEPCT),''''#NULL#''''), ''''|'''',COALESCE(TO_CHAR(SHAREGROSSCOMMIND),''''#NULL#''''), ''''|'''', COALESCE(TO_CHAR(STARTDATE),''''#NULL#''''),
  ''''|'''',COALESCE(TO_CHAR(MAINREPCODE),''''#NULL#''''),
  ''''|'''',COALESCE(ADVISOR_ROLE,''''#NULL#'''')))),
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1
              '';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_COMMISSION.SP_CONV_LOADSTG_PSA_IAS_COMMISSION_TO_STG_REVENUES("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_COMMISSION.REVENUES WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_COMMISSION.REVENUES
(
MD_START_DT,
MD_SOURCE,
  REPID ,
  ADVISOR_ID ,
  PROGRAM_TYPE ,
  ACCOUNTID ,
  PROCESSDATE ,
  SOURCECODE ,
  QUANTITY ,
  TRANSTYPE ,
  REVENUE ,
  COMMISSION ,
  NETCOMMISSION ,
  TRANSFEE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  ENTRY_TYPE,
  STAMP
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,t.$11,t.$12,t.$13,t.$14,t.$15,t.$16
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern =''''.*/REVENUES_.*csv'''' file_format=(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
   INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_COMMISSION.REVENUES 
SET 
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REPID), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(ADVISOR_ID), ''''#NULL#''''), ''''|'''' ,COALESCE(TRIM(PROGRAM_TYPE), ''''#NULL#''''), ''''|'''' ,COALESCE(TRIM(ACCOUNTID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TRIM(TO_VARCHAR(PROCESSDATE)), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(SOURCECODE), ''''#NULL#''''), ''''|'''' ,COALESCE(TRIM(QUANTITY), ''''#NULL#''''), ''''|'''' ,COALESCE(TRIM(TRANSTYPE), ''''#NULL#'''') , ''''|'''' ,COALESCE(TRIM(ENTRY_TYPE), ''''#NULL#'''')
, ''''|'''' ,COALESCE(TRIM(TO_VARCHAR(STAMP)), ''''#NULL#'''') ))),
HK_HUB_CONTRACT=DECODE(TRUE, ACCOUNTID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''),''''#NULL#''''),''''|'''',COALESCE(TRIM(ACCOUNTID),''''#NULL#''''),''''|'''', ''''#NULL#'''' ,''''|'''', ''''#NULL#'''' )))),
HK_HUB_PARTY_ROLE_ADVISOR =DECODE(TRUE, REPID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REPID), ''''#NULL#''''))))),
MD_CREATION_DT=systimestamp(),
MD_START_DT = DATEADD(DAY, 1,STAMP)
Where 1=1'';
        
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_COMMISSION.SP_CONV_LOADSTG_PSA_IAS_COMMISSION_TO_STG_SHARE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_COMMISSION.SHARE WHERE 1=1'';
INS_PRE_COPY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_COMMISSION.SHARE
(   MD_START_DT,
  MD_SOURCE ,
  FROMREPID ,
  TOREPID ,
  SHARETYPE ,
  SOURCECODE ,
  PRODUCTCODE ,
  REVENUEPCT ,
  COMMISSIONPCT ,
  NETCOMMISSIONPCT ,
  FEEPCT ,
  REVNO ,
  STAMP,
  MD_EXTRACT_DT ,
  MD_SRCSYSTEM)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13
  FROM
    @DATALAKE.''||IO_PATH||'' t ) pattern = ''''.*SHARE__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16)
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_COMMISSION.SHARE
  SET
    HK_LINK=SHA1(UPPER(CONCAT(''''IAS'''' ,''''|'''', COALESCE(TRIM(FROMREPID), ''''#NULL#''''), ''''|'''', COALESCE(TRIM(TOREPID),''''#NULL#''''),''''|'''', COALESCE(TRIM(SHARETYPE),''''#NULL#''''),''''|'''', COALESCE(TRIM(SOURCECODE),''''#NULL#''''),''''|'''', COALESCE(TRIM(PRODUCTCODE),''''#NULL#'''')))),
    HK_HUB_FROM= DECODE(TRUE, FROMREPID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(FROMREPID), ''''#NULL#''''))))),
    HK_HUB_TO= DECODE(TRUE, TOREPID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TOREPID), ''''#NULL#''''))))),
    MD_HASHDIFF=SHA1(concat( COALESCE(TO_VARCHAR(REVENUEPCT), ''''#NULL#''''),''''|'''',
             COALESCE(TO_VARCHAR(COMMISSIONPCT), ''''#NULL#''''),''''|'''',
             COALESCE(TO_VARCHAR(NETCOMMISSIONPCT), ''''#NULL#''''),''''|'''',
             COALESCE(TO_VARCHAR(FEEPCT), ''''#NULL#''''),''''|'''',
             COALESCE(TO_VARCHAR(REVNO), ''''#NULL#'''')
             )),  
    MD_CREATION_DT=SYSTIMESTAMP()
  Where 1=1'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_COPY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_COMMISSION.SP_CONV_LOADSTG_PSA_IAS_COMMISSION_TO_STG_TRANSACTION_REVENUES("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_COMMISSION.TRANSACTION_REVENUES WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_COMMISSION.TRANSACTION_REVENUES
(
MD_START_DT, 
MD_SOURCE,
  TRANSID, 
  EXTTRANSID, 
  PROCESSDATE, 
  TRANSDATE, 
  SOURCECODE, 
  CANCELIND, 
  REPID, 
  CURRENCY, 
  EXCHANGERATE, 
  ENTRY_TYPE, 
  COMMISSION, 
  COMMISSIONCAD, 
  OVERRIDEIND, 
  ACCURATEIND, 
  DESCRIPTION, 
  NUMBEROFORDERS, 
  NETCOMMISSION, 
  TRANSFEE, 
  SHAREIND, 
  AFFECTGROSSCOMMIND, 
  REVENUEONLYIND, 
  NOTE, 
  REVNO, 
  STAMP, 
  USERID,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  PROGRAM_TYPE,
  ACCOUNTID,
  QUANTITY,
  TRANSTYPE
) 
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,t.$11,t.$12,t.$13,t.$14,t.$15,t.$16,t.$17,t.$18,t.$19,t.$20,t.$21,t.$22,t.$23,t.$24,t.$25,t.$26,t.$27,t.$28,t.$29,t.$30,t.$31
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern =''''.*TRANSACTION_REVENUES__.*csv'''' file_format=(format_name= DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
  '';
INS_UPDATE := ''
  UPDATE  DB_IAW_''||ENV||''_STG.IAS_COMMISSION.TRANSACTION_REVENUES
SET 
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TRANSID), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(ACCOUNTID), ''''#NULL#''''), COALESCE(TRIM(TO_VARCHAR(PROCESSDATE)), ''''#NULL#'''' ) , COALESCE(TRIM(TO_VARCHAR(REPID)), ''''#NULL#'''' )  )) ),
HK_HUB_REGISTERED_REPRESENTATIVE =DECODE(TRUE, REPID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REPID), ''''#NULL#''''))))),
HK_HUB_CONTRACT=DECODE(TRUE, ACCOUNTID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''),''''#NULL#''''),''''|'''',COALESCE(TRIM(ACCOUNTID),''''#NULL#''''),''''|'''', ''''#NULL#'''' ,''''|'''', ''''#NULL#'''' )))),
MD_HASHDIFF = SHA1(CONCAT(  
COALESCE(EXTTRANSID,''''#NULL#''''), ''''|'''', 
COALESCE(TO_VARCHAR(TRANSDATE),''''#NULL#''''), ''''|'''',
COALESCE(SOURCECODE,''''#NULL#''''), ''''|'''', 
COALESCE(TO_VARCHAR(CANCELIND),''''#NULL#''''), ''''|'''',
COALESCE(CURRENCY,''''#NULL#''''), ''''|'''', 
COALESCE(TO_VARCHAR(EXCHANGERATE),''''#NULL#''''), ''''|'''',
COALESCE(ENTRY_TYPE,''''#NULL#''''), ''''|'''', 
COALESCE(TO_VARCHAR(COMMISSION),''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(COMMISSIONCAD),''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(OVERRIDEIND),''''#NULL#''''), ''''|''''  ,
COALESCE(TO_VARCHAR(ACCURATEIND),''''#NULL#''''), ''''|''''  ,
COALESCE(DESCRIPTION,''''#NULL#''''), ''''|'''', 
COALESCE(TO_VARCHAR(NUMBEROFORDERS),''''#NULL#''''), ''''|''''  ,
COALESCE(TO_VARCHAR(NETCOMMISSION),''''#NULL#''''), ''''|''''  ,
COALESCE(TO_VARCHAR(TRANSFEE),''''#NULL#''''), ''''|''''  ,
COALESCE(TO_VARCHAR(SHAREIND),''''#NULL#''''), ''''|''''  ,
COALESCE(TO_VARCHAR(AFFECTGROSSCOMMIND),''''#NULL#''''), ''''|''''  ,
COALESCE(TO_VARCHAR(REVENUEONLYIND),''''#NULL#''''), ''''|''''  ,
COALESCE(NOTE,''''#NULL#''''), ''''|'''', 
COALESCE(REVNO,''''#NULL#''''), ''''|'''', 
COALESCE(TO_VARCHAR(STAMP),''''#NULL#''''), ''''|'''',
COALESCE(USERID,''''#NULL#''''), ''''|'''', 
COALESCE(PROGRAM_TYPE,''''#NULL#''''), ''''|'''', 
COALESCE(TO_VARCHAR(QUANTITY),''''#NULL#''''), ''''|'''',
COALESCE(TO_VARCHAR(TRANSTYPE),''''#NULL#'''')
)),
MD_CREATION_DT=systimestamp()
Where 1=1'';
  
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_COMMISSION.SP_INITIAL_LOAD_PSA_IAS_COMMISSION_TO_STG_TRANSACTION_REVENUES("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_COMMISSION.TRANSACTION_REVENUES WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_COMMISSION.TRANSACTION_REVENUES
(
MD_START_DT, 
MD_SOURCE,
  TRANSID, 
  EXTTRANSID, 
  PROCESSDATE, 
  TRANSDATE, 
  SOURCECODE, 
  CANCELIND, 
  REPID, 
  CURRENCY, 
  EXCHANGERATE, 
  ENTRY_TYPE, 
  COMMISSION, 
  COMMISSIONCAD, 
  OVERRIDEIND, 
  ACCURATEIND, 
  DESCRIPTION, 
  NUMBEROFORDERS, 
  NETCOMMISSION, 
  TRANSFEE, 
  SHAREIND, 
  AFFECTGROSSCOMMIND, 
  REVENUEONLYIND, 
  NOTE, 
  REVNO, 
  STAMP, 
  USERID,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  PROGRAM_TYPE,
  ACCOUNTID,
  QUANTITY,
  TRANSTYPE
) 
FROM
  (
  SELECT
    TO_DATE(t.$24), metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,t.$11,t.$12,t.$13,t.$14,t.$15,t.$16,t.$17,t.$18,t.$19,t.$20,t.$21,t.$22,t.$23,t.$24,t.$25,t.$26,t.$27,t.$28,t.$29,t.$30,t.$31
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern =''''.*TRANSACTION_REVENUES__.*csv'''' file_format=(format_name= DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
  '';
INS_UPDATE := ''
  UPDATE  DB_IAW_''||ENV||''_STG.IAS_COMMISSION.TRANSACTION_REVENUES
SET 
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TRANSID), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(ACCOUNTID), ''''#NULL#''''), COALESCE(TRIM(TO_VARCHAR(PROCESSDATE)), ''''#NULL#'''' ) , COALESCE(TRIM(TO_VARCHAR(REPID)), ''''#NULL#'''' )  )) ),
HK_HUB_REGISTERED_REPRESENTATIVE =DECODE(TRUE, REPID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REPID), ''''#NULL#''''))))),
HK_HUB_CONTRACT=DECODE(TRUE, ACCOUNTID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''),''''#NULL#''''),''''|'''',COALESCE(TRIM(ACCOUNTID),''''#NULL#''''),''''|'''', ''''#NULL#'''' ,''''|'''', ''''#NULL#'''' )))),
MD_HASHDIFF = SHA1(CONCAT(  
COALESCE(EXTTRANSID,''''#NULL#''''), ''''|'''', 
COALESCE(TO_VARCHAR(TRANSDATE),''''#NULL#''''), ''''|'''',
COALESCE(SOURCECODE,''''#NULL#''''), ''''|'''', 
COALESCE(TO_VARCHAR(CANCELIND),''''#NULL#''''), ''''|'''',
COALESCE(CURRENCY,''''#NULL#''''), ''''|'''', 
COALESCE(TO_VARCHAR(EXCHANGERATE),''''#NULL#''''), ''''|'''',
COALESCE(ENTRY_TYPE,''''#NULL#''''), ''''|'''', 
COALESCE(TO_VARCHAR(COMMISSION),''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(COMMISSIONCAD),''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(OVERRIDEIND),''''#NULL#''''), ''''|''''  ,
COALESCE(TO_VARCHAR(ACCURATEIND),''''#NULL#''''), ''''|''''  ,
COALESCE(DESCRIPTION,''''#NULL#''''), ''''|'''', 
COALESCE(TO_VARCHAR(NUMBEROFORDERS),''''#NULL#''''), ''''|''''  ,
COALESCE(TO_VARCHAR(NETCOMMISSION),''''#NULL#''''), ''''|''''  ,
COALESCE(TO_VARCHAR(TRANSFEE),''''#NULL#''''), ''''|''''  ,
COALESCE(TO_VARCHAR(SHAREIND),''''#NULL#''''), ''''|''''  ,
COALESCE(TO_VARCHAR(AFFECTGROSSCOMMIND),''''#NULL#''''), ''''|''''  ,
COALESCE(TO_VARCHAR(REVENUEONLYIND),''''#NULL#''''), ''''|''''  ,
COALESCE(NOTE,''''#NULL#''''), ''''|'''', 
COALESCE(REVNO,''''#NULL#''''), ''''|'''', 
COALESCE(TO_VARCHAR(STAMP),''''#NULL#''''), ''''|'''',
COALESCE(USERID,''''#NULL#''''), ''''|'''', 
COALESCE(PROGRAM_TYPE,''''#NULL#''''), ''''|'''', 
COALESCE(TO_VARCHAR(QUANTITY),''''#NULL#''''), ''''|'''',
COALESCE(TO_VARCHAR(TRANSTYPE),''''#NULL#'''')
)),
MD_CREATION_DT=systimestamp()
Where 1=1'';
  
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_COMMISSION.SP_LOADSTG_PSA_IAS_COMMISSION_TO_STG_REVENUES("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_COMMISSION.REVENUES WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_COMMISSION.REVENUES
(
MD_START_DT,
MD_SOURCE,
  REPID ,
  ADVISOR_ID ,
  PROGRAM_TYPE ,
  ACCOUNTID ,
  PROCESSDATE ,
  SOURCECODE ,
  QUANTITY ,
  TRANSTYPE ,
  REVENUE ,
  COMMISSION ,
  NETCOMMISSION ,
  TRANSFEE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,t.$11,t.$12,t.$13,t.$14
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern =''''.*REVENUES_.*csv'''' file_format=(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_COMMISSION.TEST1("ENV" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '';
create or replace schema DB_IAW_DEV_STG.IAS_FUNDATA;

create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_FUNDATA.FUND (
  HK_HUB VARCHAR(64) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(50) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  FUNDSERVID VARCHAR(1000) COMMENT 'Fund serv Id',
  FUNDID VARCHAR(1000) COMMENT 'Fund Id',
  FUNDDESCFR VARCHAR(1000) COMMENT 'Fund Desc FR',
  FUNDDESCEN VARCHAR(1000) COMMENT 'Fund Desc EN',
  FUNDTYPE VARCHAR(1000) COMMENT 'Fund Type',
  GROUPNAMEFR VARCHAR(1000) COMMENT 'Manager Name FR',
  GROUPNAMEEN VARCHAR(1000) COMMENT 'Manager Name EN',
  RRSPELIGIBLE VARCHAR(1000) COMMENT 'RRSP Eligible Indicator',
  FUNDDESCLONGFR VARCHAR(1000) COMMENT 'Fund long description FR',
  FUNDDESCLONGEN VARCHAR(1000) COMMENT 'Fund long description EN',
  LEGALNAMEEN VARCHAR(1000) COMMENT 'Legal name EN',
  LEGALNAMEFR VARCHAR(1000) COMMENT 'Legal name FR',
  STAMP VARCHAR(1000) COMMENT 'Last Modification Timestamp'
);
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.IAS_FUNDATA.PIPE_UTF16
  TYPE = csv
  FIELD_DELIMITER = '|'
  ESCAPE_UNENCLOSED_FIELD = 'NONE'
  NULL_IF = ('0000-00-00')
  ENCODING = 'UTF-16'
;
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_FUNDATA.SP_CONV_LOADSTG_PSA_IAS_FUNDATA_TO_STG_FUND("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_FUNDATA.FUND WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_FUNDATA.FUND (
    MD_START_DT
  , MD_SOURCE
  , FUNDSERVID
  , FUNDID
  , FUNDDESCFR
  , FUNDDESCEN
  , FUNDTYPE
  , GROUPNAMEFR
  , GROUPNAMEEN
  , RRSPELIGIBLE
  , FUNDDESCLONGFR
  , FUNDDESCLONGEN
  , LEGALNAMEEN
  , LEGALNAMEFR
  , STAMP
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14, t.$15
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/FUNDATA_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_FUNDATA.FUND
SET
HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(FUNDSERVID), ''''#NULL#'''')))),
  
    MD_HASHDIFF=SHA1(CONCAT(COALESCE(FUNDID, ''''#NULL#''''), ''''|'''',COALESCE(FUNDDESCFR, ''''#NULL#''''), ''''|'''' , COALESCE(FUNDDESCEN, ''''#NULL#''''), ''''|'''' , COALESCE(FUNDTYPE, ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(GROUPNAMEFR),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(GROUPNAMEEN),''''#NULL#''''), ''''|'''', COALESCE(RRSPELIGIBLE,''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(FUNDDESCLONGFR), ''''#NULL#''''), ''''|'''', COALESCE(FUNDDESCLONGEN,''''#NULL#''''), ''''|'''', COALESCE(LEGALNAMEEN,''''#NULL#''''), ''''|'''', COALESCE(LEGALNAMEFR,''''#NULL#''''), ''''|'''', COALESCE(STAMP,''''#NULL#''''))),  
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_FUNDATA.SP_LOADSTG_PSA_IAS_FUNDATA_TO_STG_FUND("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_FUNDATA.FUND WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS.IAS_FUNDATA.FUND (
    MD_START_DT
  , MD_SOURCE
  , FUNDSERVID
  , FUNDID
  , FUNDDESCFR
  , FUNDDESCEN
  , FUNDTYPE
  , GROUPNAMEFR
  , GROUPNAMEEN
  , RRSPELIGIBLE
  , FUNDDESCLONGFR
  , FUNDDESCLONGEN
  , LEGALNAMEEN
  , LEGALNAMEFR
  , STAMP
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14, t.$15
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/FUNDATA_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
create or replace schema DB_IAW_DEV_STG.IAS_IAVM;

create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_IAVM.ACCRUED_INTEREST (
  HK_LINK VARCHAR(40) COMMENT 'Hash of the business keys',
  HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash of the investment product type',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  PROCESS_DATE DATE COMMENT 'Process date',
  PRODUCT_CODE VARCHAR(12) COMMENT 'Product code / Security group code',
  FIID VARCHAR(15) COMMENT 'IBM/OSS Security Id',
  CUSIP VARCHAR(9) COMMENT 'CUSIP',
  ISIN VARCHAR(12) COMMENT 'ISIN NO',
  MARKET VARCHAR(12) COMMENT 'Market',
  SYMBOL VARCHAR(26) COMMENT 'Security Symbol',
  INTEREST_RATE NUMBER(29,2) COMMENT 'Income Profile Rate',
  ACCRUED_INTEREST_METHOD1 VARCHAR(1) COMMENT 'Accrued Int Method 1',
  ACCRUED_INTEREST_METHOD2 VARCHAR(1) COMMENT 'Accrued Int Method 2',
  DAILY_COUNT_BASIS VARCHAR(15) COMMENT 'US_NASD/ACTUAL_360/ACTUAL_329/ACTUAL',
  INTEREST_START_DATE DATE COMMENT 'Int. Start Date',
  YEAR_FRACTION NUMBER(29,9) COMMENT 'Year',
  BASE_ACCRUED_INTEREST NUMBER(29,11) COMMENT 'BASE ACCRUED INTEREST'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_IAVM.POSITION_PRICE (
  HK_LINK VARCHAR(40) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  PROCESSDATE DATE COMMENT 'Process Date',
  UNITOFMEASURE NUMBER(11,0) COMMENT 'Unit Of Measure',
  PRICE NUMBER(38,8) COMMENT 'Price',
  SYMBOL VARCHAR(26) COMMENT 'SECURITY_SYMBOL',
  MARKET VARCHAR(12) COMMENT 'Market',
  ACCOUNTID VARCHAR(18) COMMENT 'Account ID',
  CLOSEPRICE NUMBER(38,8) COMMENT 'Close Price',
  PRICECURRENCY VARCHAR(3) COMMENT 'Price Currency',
  BIDPRICE NUMBER(38,8) COMMENT 'Bid Price',
  ASKPRICE NUMBER(38,8) COMMENT 'Ask Price'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_IAVM.PRODUCTION_SHARE_TEST_POSITION (
  UNITOFMEASURE NUMBER(11,0) COMMENT 'Unit Of Measure',
  PRICE NUMBER(38,8) COMMENT 'Price',
  SYMBOL VARCHAR(26) COMMENT 'SECURITY_SYMBOL',
  MARKET VARCHAR(12) COMMENT 'Market',
  PROCESSDATE DATE NOT NULL COMMENT 'Process Date',
  MD_LOADDATE DATE COMMENT 'Load Date',
  MD_SRCSYSTEM VARCHAR(36)
);
create or replace TABLE DB_IAW_DEV_STG.IAS_IAVM.PRODUCTION_SHARE_TEST_POSITION_HIST (
  UNITOFMEASURE NUMBER(11,0) COMMENT 'Unit Of Measure',
  PRICE NUMBER(38,8) COMMENT 'Price',
  SYMBOL VARCHAR(26) COMMENT 'SECURITY_SYMBOL',
  MARKET VARCHAR(12) COMMENT 'Market',
  PROCESSDATE DATE NOT NULL COMMENT 'Process Date',
  MD_LOADDATE DATE COMMENT 'Load Date',
  MD_SRCSYSTEM VARCHAR(36)
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_IAVM.REF_EXCHANGE_RATE (
  HK_LINK VARCHAR(64) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  EXCHANGEDATE DATE COMMENT 'Exchange rate date',
  EXCHANGERATE NUMBER(38,8) COMMENT 'Conversion rate from USD to CAD',
  REVNO NUMBER(38,0) COMMENT 'Modification version number'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_IAVM.REF_HOLIDAYS (
  HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  HOLIDAY_DATE DATE COMMENT 'Date of the holiday',
  DESCRIPTION VARCHAR(512) COMMENT 'Description of the holiday'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_IAVM.REF_MAPPING_PRODUCT_TYPE (
  HK_HUB VARCHAR(64) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  DESCRIPTIONEN VARCHAR(512) COMMENT 'Product type description EN',
  DESCRIPTIONFR VARCHAR(512) COMMENT 'Product type description FR',
  TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
  TI_ALTERNATE_TI_CLASS VARCHAR(50) COMMENT 'Product type class code',
  PRODUCTTYPE VARCHAR(100) COMMENT 'Product type code'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_IAVM.REGISTERED_REPRESENTATIVE (
  HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  MEMBER VARCHAR(250) COMMENT 'Member: JSMITH',
  TEAMTYPE VARCHAR(7) COMMENT 'The type of team - Default constant',
  ACTIVE VARCHAR(12) COMMENT 'The type of team - Default constant',
  USERTYPE VARCHAR(12) COMMENT 'Type of User : IA',
  TEAMID NUMBER(38,0) COMMENT 'The advisor team code',
  TEAMNAME VARCHAR(256) COMMENT 'The advisor team name: IA HOUSE',
  RVPID NUMBER(38,0) COMMENT 'VP Rep ID',
  RVPNAME VARCHAR(256) COMMENT 'VP Name',
  REPID VARCHAR(12) COMMENT 'Representative ID',
  REPNAME VARCHAR(250) COMMENT 'Representative Name: SMITH JOHN',
  PROVINCE VARCHAR(12) COMMENT 'Province Code : ON'
);
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.IAS_IAVM.PIPE_UTF16
  TYPE = csv
  FIELD_DELIMITER = '|'
  ESCAPE_UNENCLOSED_FIELD = 'NONE'
  NULL_IF = ('0000-00-00')
  ENCODING = 'UTF-16'
;
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_IAVM.SP_CONV_LOADSTG_PSA_IAS_IAVM_TO_STG_ACCRUED_INTEREST("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.ACCRUED_INTEREST WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_IAVM.ACCRUED_INTEREST (
  MD_START_DT, 
  MD_SOURCE,
  PROCESS_DATE,
  PRODUCT_CODE,
  FIID,
  CUSIP,
  ISIN,
  MARKET,
  SYMBOL,
  INTEREST_RATE,
  ACCRUED_INTEREST_METHOD1,
  ACCRUED_INTEREST_METHOD2,
  DAILY_COUNT_BASIS,
  INTEREST_START_DATE,
  YEAR_FRACTION,
  BASE_ACCRUED_INTEREST,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13,t.$14,t.$15,t.$16
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*ACCRUED_INTEREST_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS_IAVM.PIPE_UTF16);
              '';         
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_IAVM.ACCRUED_INTEREST 
SET 
HK_LINK= 
           SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , 
                         COALESCE(TO_VARCHAR(TRIM(PROCESS_DATE)), ''''#NULL#''''), ''''|'''' , 
               COALESCE(TRIM(FIID), ''''#NULL#''''), ''''|'''' ,
               COALESCE(TRIM(PRODUCT_CODE), ''''#NULL#''''), ''''|'''' ,
               COALESCE(TRIM(MARKET), ''''#NULL#''''), ''''|'''' ,
                             COALESCE(TRIM(SYMBOL), ''''#NULL#''''), ''''|'''' , 
               COALESCE(TO_VARCHAR(TRIM(INTEREST_RATE)), ''''#NULL#''''), ''''|'''' ,
               COALESCE(TO_VARCHAR(TRIM(INTEREST_START_DATE)), ''''#NULL#''''), ''''|'''' ,
               COALESCE(TO_VARCHAR(TRIM(YEAR_FRACTION)), ''''#NULL#'''') , ''''|'''' ,
               COALESCE(TO_VARCHAR(TRIM(BASE_ACCRUED_INTEREST)), ''''#NULL#'''') 
               ))),
HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, FIID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(FIID), ''''#NULL#''''))))),
MD_CREATION_DT=systimestamp()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_IAVM.SP_CONV_LOADSTG_PSA_IAS_IAVM_TO_STG_POSITION_PRICE_IAS_IAVM("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.POSITION_PRICE WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_IAVM.POSITION_PRICE (
    MD_START_DT
  , MD_SOURCE
  , ACCOUNTID
  , UNITOFMEASURE
  , PRICE
  , SYMBOL
  , MARKET
  , PROCESSDATE
  , CLOSEPRICE
  , PRICECURRENCY
  , BIDPRICE
  , ASKPRICE
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/POSITION_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_IAVM.POSITION_PRICE
SET
  HK_LINK=
  SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(PROCESSDATE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(UNITOFMEASURE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(SYMBOL), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MARKET), ''''#NULL#''''), ''''|'''', COALESCE(TRIM(ACCOUNTID), ''''#NULL#'''')))),
  MD_HASHDIFF=
  SHA1(CONCAT(COALESCE(TO_VARCHAR(PRICE), ''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(CLOSEPRICE), ''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(PRICECURRENCY), ''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(BIDPRICE), ''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(ASKPRICE), ''''#NULL#'''')
  )), 
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_IAVM.SP_CONV_LOADSTG_PSA_IAS_IAVM_TO_STG_REF_EXCHANGE_RATE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_EXCHANGE_RATE WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_EXCHANGE_RATE
(
MD_START_DT,
MD_SOURCE,
EXCHANGEDATE,
EXCHANGERATE,
REVNO,
MD_EXTRACT_DT,
MD_SRC_SYSTEM

) 
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5
  FROM
    @DATALAKE.''||IO_PATH||'' T
  ) pattern = ''''.*EXCHANGE_RATE__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
        '';      

INS_UPDATE :=''UPDATE DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_EXCHANGE_RATE SET HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TO_VARCHAR(EXCHANGEDATE)), ''''#NULL#'''')))),
MD_HASHDIFF= SHA1(CONCAT(COALESCE(TO_VARCHAR(EXCHANGERATE), ''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(REVNO), ''''#NULL#''''))),  MD_CREATION_DT=SYSTIMESTAMP() Where 1=1'';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_IAVM.SP_CONV_LOADSTG_PSA_IAS_IAVM_TO_STG_REF_HOLIDAYS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_HOLIDAYS WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_HOLIDAYS (
    MD_START_DT
  , MD_SOURCE
  , HOLIDAY_DATE
  , DESCRIPTION
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename,t.$1, t.$2, t.$3, t.$4
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/HOLIDAYS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_HOLIDAYS
SET
  HK_HUB=
  SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TO_VARCHAR(HOLIDAY_DATE)), ''''#NULL#'''')))),
  MD_HASHDIFF=
  SHA1(COALESCE(TO_VARCHAR(DESCRIPTION), ''''#NULL#'''')),  
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_IAVM.SP_CONV_LOADSTG_PSA_IAS_IAVM_TO_STG_REF_HOLIDAYSS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_HOLIDAYS WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_HOLIDAYS (
    MD_START_DT
  , MD_SOURCE
  , HOLIDAY_DATE
  , DESCRIPTION
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename,t.$1, t.$2, t.$3, t.$4
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/HOLIDAYS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_IAVM.SP_CONV_LOADSTG_PSA_IAS_IAVM_TO_STG_REF_MAPPING_PRODUCT_TYPE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_MAPPING_PRODUCT_TYPE
WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_MAPPING_PRODUCT_TYPE (
    MD_START_DT
  , MD_SOURCE
  , TI_ALTERNATE_TI_TYPE
  , TI_ALTERNATE_TI_CLASS
  , DESCRIPTIONEN
  , DESCRIPTIONFR
  , PRODUCTTYPE
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/MAPPING_PRODUCT_TYPE_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_MAPPING_PRODUCT_TYPE
SET
    HK_HUB=
  SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_TI_TYPE), ''''#NULL#''''), ''''|'''' ,COALESCE(TRIM(TI_ALTERNATE_TI_CLASS), ''''#NULL#'''')))),
  MD_HASHDIFF=
  SHA1(CONCAT(COALESCE(DESCRIPTIONEN,''''#NULL#''''), ''''|'''',COALESCE(DESCRIPTIONFR, ''''#NULL#''''), ''''|'''' , COALESCE(PRODUCTTYPE, ''''#NULL#''''))), 
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_IAVM.SP_CONV_LOADSTG_PSA_IAS_IAVM_TO_STG_REGISTERED_REPRESENTATIVE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.REGISTERED_REPRESENTATIVE WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_IAVM.REGISTERED_REPRESENTATIVE (
    MD_START_DT
  , MD_SOURCE
  , MEMBER
  , TEAMTYPE
  , ACTIVE
  , USERTYPE
  , TEAMID
  , TEAMNAME
  , RVPID
  , RVPNAME
  , REPID
  , REPNAME
  , PROVINCE
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*REGISTERED_REPRESENTATIVE__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS_IAVM.PIPE_UTF16);
              '';         
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_IAVM.REGISTERED_REPRESENTATIVE
SET
    HK_HUB=SHA1(UPPER(CONCAT(''''IAS'''', ''''|'''' ,COALESCE(TRIM(REPID), ''''#NULL#'''') ))),
  MD_HASHDIFF=SHA1(CONCAT(
  COALESCE(MEMBER, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TEAMTYPE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(ACTIVE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(USERTYPE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(TEAMID), ''''#NULL#''''), ''''|'''' ,
  COALESCE(TEAMNAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(RVPID), ''''#NULL#''''), ''''|'''' ,
  COALESCE(RVPNAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(REPID), ''''#NULL#''''), ''''|'''' ,
  COALESCE(REPNAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(PROVINCE, ''''#NULL#''''))),
  MD_CREATION_DT=systimestamp()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_IAVM."SP_CONV_LOADSTG_PSA_IAS_IAVM_To_STG_REF_MAPPING_PRODUCT_TYPE"("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_MAPPING_PRODUCT_TYPE
WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_IAVM.REF_MAPPING_PRODUCT_TYPE (
    MD_START_DT
  , MD_SOURCE
  , TI_ALTERNATE_TI_TYPE
  , TI_ALTERNATE_TI_CLASS
  , DESCRIPTIONEN
  , DESCRIPTIONFR
  , PRODUCTTYPE
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/MAPPING_PRODUCT_TYPE_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
END
';
create or replace schema DB_IAW_DEV_STG.IAS_UNIVERIS;

create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_UNIVERIS.ACCOUNT_HOLDER (
  HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  IVR_SYSID NUMBER(38,0) COMMENT 'Unique system generated code for investor identification',
  REP_SYSID NUMBER(38,0) COMMENT 'Rep SYSID, to reference with the Advisor data',
  RECIPIENT_DESC_ENG VARCHAR(30) COMMENT 'Investor type description English(Individual, Joint WROS, etc)',
  RECIPIENT_DESC_FRE VARCHAR(50) COMMENT 'Investor type description French(Individuel, CADDS, etc)',
  CORP_CD VARCHAR(30) COMMENT 'Wether it is corporate',
  IVR_ST_NAME_ENG VARCHAR(40) COMMENT 'Investor status description English(Active, Closed, etc)',
  IVR_ST_NAME_FRE VARCHAR(40) COMMENT 'Investor status description French (Actif, Fermé, etc)',
  IVR_REG_2 VARCHAR(80) COMMENT 'Investor Other/Corporate name',
  LANG_CD VARCHAR(1) COMMENT 'Investor language code for English or French reference on S_LANG',
  IVR_RES_CD VARCHAR(18) COMMENT 'Investor residence code—if Canadian name of the province',
  IVR_SETUP_DT TIMESTAMP_NTZ(9) COMMENT 'Date on which this record was set up',
  IVR_STOP_DT TIMESTAMP_NTZ(9) COMMENT 'Date of closing the account',
  IVR_FRGN_CTNT BOOLEAN COMMENT 'Check for foreign content',
  IVR_HOLD_MAIL BOOLEAN COMMENT 'Check for holding mail',
  IVR_INC_ADR BOOLEAN COMMENT 'Check for incomplete address',
  IVR_STMT_FREQ VARCHAR(1) COMMENT 'Statement frequency reference on S_FRENQUENCY',
  IVR_STMT_TYPE VARCHAR(2) COMMENT 'Statement type',
  IVR_STMT_DT TIMESTAMP_NTZ(9) COMMENT 'Statement date',
  IVR_OLD_DLR VARCHAR(5) COMMENT 'Previous dealer',
  SALARY_DESC VARCHAR(40) COMMENT 'Client income segment',
  IVR_KYC_DT TIMESTAMP_NTZ(9) COMMENT 'Date KYC information keyed in',
  IVR_PRIM_BDT DATE COMMENT 'Date of birth is not corporate',
  CREATE_DT DATE COMMENT 'Create Date'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_UNIVERIS.CONTRACT (
  HK_HUB VARCHAR(40) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  PLN_SYSID NUMBER(38,0) NOT NULL COMMENT 'Unveris ID for plans',
  IVR_SYSID NUMBER(38,0) COMMENT 'Unveris ID for clients',
  PLN_CD VARCHAR(8000) COMMENT 'Univeris plan code : 01, 02,...',
  PLN_STATUS VARCHAR(8000) COMMENT 'Plan status : Active, inactive, closed,...',
  PLN_ADM_CD VARCHAR(8000) COMMENT 'Plan administrator code',
  SETUP_DT TIMESTAMP_NTZ(9) COMMENT 'Plan set up date',
  CLOSE_DT TIMESTAMP_NTZ(9) COMMENT 'Plan close date',
  PEN_JUR_CD VARCHAR(8000),
  FEE_EXMP_IND NUMBER(38,0) COMMENT 'Trustee Fee Exemption Indicator. (Values 1 = ON, 0 = OFF)',
  ADMINISTRATOR_TYPE VARCHAR(8000) COMMENT 'Administrator type (Client Name, Nominee, Intermediary)',
  REP_SYSID NUMBER(38,0) COMMENT 'RR code',
  REP_CD VARCHAR(50) COMMENT 'Registered representative code - RR Code'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_UNIVERIS.FINANCIAL_TRANSACTIONS (
  HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
  HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  TRX_SYSID NUMBER(38,0) NOT NULL COMMENT 'Transaction System ID',
  IVR_SYSID NUMBER(38,0) COMMENT 'Client ID',
  REP_SYSID NUMBER(38,0) COMMENT 'Representative ID',
  PLN_SYSID NUMBER(38,0) COMMENT 'Plan ID',
  ACT_SYSID NUMBER(38,0) COMMENT 'Holding system ID',
  IVD_SYSID NUMBER(38,0) COMMENT 'Funds numbers ID',
  TRX_STATUS VARCHAR(2) COMMENT 'Transaction status code',
  TRX_ST_DESC_ENG VARCHAR(40) COMMENT 'Transaction status description',
  TRADE_DT TIMESTAMP_NTZ(9) COMMENT 'Trade date',
  MGT_CD VARCHAR(5) COMMENT 'Management company code',
  MGT_NAME_ENG VARCHAR(60) COMMENT 'Management company name',
  DLR_SYSID NUMBER(38,0) COMMENT 'Dealer ID',
  RGN_SYSID NUMBER(38,0) COMMENT 'Region ID',
  BRN_SYSID NUMBER(38,0) COMMENT 'Branch ID',
  TRX_UNIT NUMBER(38,0) COMMENT 'Transaction quantity',
  TRX_PRICE NUMBER(38,0) COMMENT 'Transaction unit price',
  TRX_GROSS NUMBER(29,12) COMMENT 'Transaction gross amount',
  TRX_NET NUMBER(29,12) COMMENT 'Transaction net amount',
  TRX_GROSS_CAD NUMBER(29,12) COMMENT 'Transaction gross amount CAD',
  SPR_FACTOR NUMBER(3,0) COMMENT 'Transaction sign (IN or OUT)',
  CURRENCY_CD VARCHAR(3) COMMENT 'Currency code',
  DLR_CD VARCHAR(5) COMMENT 'Dealer code',
  RGN_CD VARCHAR(5) COMMENT 'Region code',
  BRN_CD VARCHAR(5) COMMENT 'Branch code',
  REP_CD VARCHAR(5) COMMENT 'Representative code',
  PLN_TYPE VARCHAR(2) COMMENT 'Plan Type',
  SPR_CTGY VARCHAR(3) COMMENT 'Transaction category',
  TRX_MNEM_ENG VARCHAR(10) COMMENT 'Transaction mnemonic name',
  REVERSAL_IND NUMBER(1,0) COMMENT 'Transaction reversed indicator'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_UNIVERIS.HOLDINGS (
  HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
  HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
  MD_SEQ VARCHAR(50) COMMENT 'The value of METADATA$FILE_ROW_NUMBER when loading using INFORMATICA',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  ACT_SYSID NUMBER(38,0) NOT NULL COMMENT 'Holding system ID',
  IVD_SYSID NUMBER(38,0) COMMENT 'Funds numbers ID',
  REP_SYSID NUMBER(38,0) COMMENT 'Advisor ID',
  IVR_SYSID NUMBER(38,0) COMMENT 'Client ID',
  PLN_SYSID NUMBER(38,0) COMMENT 'Plan ID',
  FISCAL_SYSID NUMBER(38,0) COMMENT 'Fiscal ID',
  BAL_DATE TIMESTAMP_NTZ(9) NOT NULL COMMENT 'Balance date',
  MV NUMBER(34,4) COMMENT 'Market value',
  CURRENCY_CD VARCHAR(8000) COMMENT 'Currency code',
  EXCH_DT TIMESTAMP_NTZ(9) COMMENT 'Exchange date',
  EXCH_RATE NUMBER(19,8) COMMENT 'Exchange rate',
  AUA NUMBER(34,4) COMMENT 'AUA',
  PRICE NUMBER(34,4) COMMENT 'Price',
  UNITS FLOAT COMMENT 'Units',
  BV NUMBER(34,4) COMMENT 'Book value',
  ACB NUMBER(34,4) COMMENT 'Adjusted cost based',
  NI_T NUMBER(34,4) COMMENT 'Net invested by trade date (not used)',
  NI_P NUMBER(34,4) COMMENT 'Net invested by process date',
  FREQ_CD VARCHAR(8000) COMMENT 'Frequency code (not used)',
  UNITS_TRD_DT FLOAT COMMENT 'Units calculated by trade date',
  FISCAL_TD_UNITS FLOAT COMMENT 'Units displayed for the fiscal year',
  IVD_LOAD_FLAG VARCHAR(3) COMMENT 'Front-end or back-end load indicator',
  WF_IND NUMBER(38,0)
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_UNIVERIS.INVESTMENT_PRODUCT_TYPE (
  HK_HUB VARCHAR(100) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(100) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100),
  MD_EXTRACT_DT TIMESTAMP_NTZ(9),
  IVD_SYSID NUMBER(38,0) COMMENT 'System generated code to identify records',
  CURRENCY_CD VARCHAR(3) COMMENT 'Currency iso code',
  SYMBOL VARCHAR(20) COMMENT 'Standard code in the industry of mutual funds',
  IVD_ST_DESC_ENG VARCHAR(40) COMMENT 'Product detail status description English (Red/Transfer/Switch,Inactive,Active,Soft Cap,etc.)',
  IVD_ST_DESC_FRE VARCHAR(40) COMMENT 'Product detail status description French (Rachat/Transfert/Échange,Inactif,Actif,FRE:Soft Cap,etc.)',
  IVD_LOAD_DESC_ENG VARCHAR(50) COMMENT 'Product load description (Deferred Sales Charge,No Load,Initial Sales Charge,etc)',
  IVD_LOAD_DESC_FRE VARCHAR(50) COMMENT 'Product load description (Frais de ventes reportés,Sans frais d acquisition,Frais prélevés à l acquisition,etc)',
  IVT_NAME_ENG VARCHAR(60) COMMENT 'Product name in English',
  IVT_NAME_FRE VARCHAR(60) COMMENT 'Product name in French',
  IVT_CD_DESC_ENG VARCHAR(50) COMMENT 'Fund type English (regular, asset allocation)',
  IVT_CD_DESC_FRE VARCHAR(50) COMMENT 'Fund type French (régulier, affectation de l actif)',
  IVT_ST_DESC_ENG VARCHAR(40) COMMENT 'Product status description English (Red/Transfer/Switch,Inactive,Active,Soft Cap,etc.)',
  IVT_ST_DESC_FRE VARCHAR(40) COMMENT 'Product status description French (Rachat/Transfert/Échange,Inactif,Actif,FRE:Soft Cap,etc.)',
  ASSET_CLASS_DESC_ENG VARCHAR(80) COMMENT 'Asset class description English (Canadian Equity, U.S. Money Market, etc)',
  ASSET_CLASS_DESC_FRE VARCHAR(80) COMMENT 'Asset class description French(Actions canadiennes, Marché monétaire américain, etc)',
  ASSET_CTGY_DESC_ENG VARCHAR(80) COMMENT 'Asset category description English(Canadian Fixed Income, US Equity, etc)',
  ASSET_CTGY_DESC_FRE VARCHAR(80) COMMENT 'Asset category description French(Revenu fixe canadien, Actions américaines, etc)',
  IVT_TYPE_DESC_ENG VARCHAR(40) COMMENT 'Product type description English(Mutual Fund, Hedge Fund, etc)',
  IVT_TYPE_DESC_FRE VARCHAR(40) COMMENT 'Product type description French (Fonds communs de placement, Fonds spéculatif, etc)',
  CTGY_DESC_ENG VARCHAR(50) COMMENT 'Product category description English(Mutual Fund, Hedge Fund, etc)',
  CTGY_DESC_FRE VARCHAR(50) COMMENT 'Product category description French (Fonds communs de placement, Fonds spéculatif, etc)',
  GROUP_DESC_ENG VARCHAR(20) COMMENT 'Product group description English(Funds, Bond, etc)',
  GROUP_DESC_FRE VARCHAR(20) COMMENT 'Product group description French(Fonds, Obligations, etc)',
  MGT_CD VARCHAR(100) COMMENT 'Management company code',
  MGT_NAME_ENG VARCHAR(100) COMMENT 'Management company name English',
  MGT_NAME_FRE VARCHAR(100) COMMENT 'Management company name French'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_UNIVERIS.PLN_SRF (
  HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
  HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  PLN_SRF_SYSID NUMBER(38,0) COMMENT 'Plan SRF ID (main key)',
  PLN_SYSID NUMBER(38,0) COMMENT 'Plan ID (related to PLN)',
  FAS_FILE_NAME VARCHAR(40) COMMENT 'Fundserv File Name',
  FROM_DT TIMESTAMP_NTZ(9) COMMENT 'From date',
  TO_DT TIMESTAMP_NTZ(9) COMMENT 'To date',
  MGT_CD VARCHAR(3) COMMENT 'Management Cie (related to MGT)',
  CURRENCY_CD VARCHAR(3) COMMENT 'Currency Code',
  INCOME_TYPE VARCHAR(4) COMMENT 'Type of Income',
  REP_CODE VARCHAR(5) COMMENT 'Rep Code (related to REP)',
  COM_PYBL FLOAT COMMENT 'Commission Amount',
  EXCH_DT TIMESTAMP_NTZ(9) COMMENT 'Exchange Rate Date',
  EXCH_RATE FLOAT COMMENT 'Exchange Rate',
  LAST_UPD_DT TIMESTAMP_NTZ(9) NOT NULL COMMENT 'Last Update Date',
  USR_SYSID NUMBER(38,0) COMMENT 'User ID (related to SYS_USER_CD)',
  FISCAL_SYSID NUMBER(38,0) COMMENT 'Fiscal ID',
  JUR_CD VARCHAR(3) COMMENT 'Jurisdiction Code',
  ACT_TAX_COLLCTD FLOAT COMMENT 'Unknown',
  DLR_SYSID NUMBER(38,0) COMMENT 'Deal ID (related to DLR)',
  RGN_SYSID NUMBER(38,0) COMMENT 'Region ID (related to RGN)',
  BRN_SYSID NUMBER(38,0) COMMENT 'Branch ID (related to BRN)',
  REP_SYSID NUMBER(38,0) COMMENT 'Rep ID (related to REP)',
  IVR_SYSID NUMBER(38,0) COMMENT 'Investor (Client) ID (related to IVR)',
  IVD_SYSID NUMBER(38,0) COMMENT 'Product ID (related to IVD link with parent IVT)'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_UNIVERIS.REF_INVESTMENT_SAVING_PROGRAM_TYPES (
  HK_HUB VARCHAR(40) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  PLN_CD VARCHAR(8000) COMMENT 'Plan code',
  PLN_REG NUMBER(38,0) COMMENT 'Plan registration',
  PLN_MNEM VARCHAR(8000) COMMENT 'Plan mnemonic code',
  PLN_DESC VARCHAR(8000) COMMENT 'Plan mnemonic description',
  PLN_MNEM_F VARCHAR(8000) COMMENT 'plan mnemonic code FR',
  PLN_DESC_F VARCHAR(8000) COMMENT 'Plan mnemonic description FR',
  PLN_MNEM_ENG VARCHAR(8000) COMMENT 'Plan mnemonic code 2 EN',
  PLN_DESC_ENG VARCHAR(8000) COMMENT 'Plan mnemonic description 2 EN',
  PLN_SHORT_DESC_ENG VARCHAR(8000) COMMENT 'Plan short description EN',
  PLN_MNEM_FRE VARCHAR(8000) COMMENT 'Plan mnemonic code 2 FR',
  PLN_DESC_FRE VARCHAR(8000) COMMENT 'Plan mnemonic description 2 FR',
  PLN_SHORT_DESC_FRE VARCHAR(8000) COMMENT 'plan short description 2 FR',
  STMT_GROUP_MNEM VARCHAR(8000) COMMENT 'mnemonic code grouping'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_UNIVERIS.REGISTERED_REPRESENTATIVE (
  HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  COMPANY_CD VARCHAR(50) COMMENT 'Company code : Wealth',
  COMPANY_NAME VARCHAR(512) COMMENT 'Company name : iA Wealth Management',
  REGULATORY_ORG_CD VARCHAR(50) COMMENT 'Regulatory organisation code : MFDA or IIROC',
  REGULATORY_ORG_NAME VARCHAR(512) COMMENT 'Regulatory organisation name : Mutual Fund Dealers Association',
  DLR_SYSID NUMBER(38,0) COMMENT 'Univeris ID of the dealer',
  DLR_CD VARCHAR(50) COMMENT 'Dealer code : Univeris code for the dealer',
  DLR_NAME_ENG VARCHAR(512) COMMENT 'Dealer name in english : Fundex Investments inc.',
  RGN_SYSID NUMBER(38,0) COMMENT 'Univeris ID for the advisor region',
  RGN_CD VARCHAR(50) COMMENT 'Univeris code for the advisor region',
  RGN_NAME VARCHAR(512) COMMENT 'The advisor region name',
  RGN_MGR VARCHAR(512) COMMENT 'The name of the regional VP',
  BRN_SYSID NUMBER(38,0) COMMENT 'Univeris ID of the advisors branch',
  BRN_CD VARCHAR(50) COMMENT 'Univeris Code for the advisors branch',
  BRN_NAME VARCHAR(512) COMMENT 'The advisor branch name',
  REP_TEAM_CD VARCHAR(50) COMMENT 'The advisor team code',
  REP_TEAM_NAME VARCHAR(512) COMMENT 'The advisor team name',
  REP_SYSID NUMBER(38,0) COMMENT 'Univeris ID of the advisor rep code',
  NK_REP_CD VARCHAR(50) COMMENT 'Advisor rep code',
  NK_REP_CORP_NAME VARCHAR(512) COMMENT 'Corporation name of the advisor',
  REP_LNAME VARCHAR(512) COMMENT 'Advisor last name',
  REP_FNAME VARCHAR(512) COMMENT 'Advisor first name',
  REP_ST_NAME VARCHAR(512) COMMENT 'Advisor status : Active, Terminated,...',
  REP_GRP_RSP VARCHAR(512)
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_UNIVERIS.REVENUE_PAYABLE (
  HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
  HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  PAY_SYSID NUMBER(38,0) COMMENT 'Payable ID - Main key',
  PYBL_STATUS VARCHAR(3) COMMENT 'Payable Status',
  EVENT_PROC_SYSID NUMBER(38,0) COMMENT 'Event Procedure ID',
  EVENT_RPT_SYSID NUMBER(38,0) COMMENT 'Event Report ID',
  BEN_SYSID NUMBER(38,0) COMMENT 'Beneficiary ID (related to REP table)',
  REP_SYSID NUMBER(38,0) COMMENT 'Advisor ID (related to REP table)',
  DEAL_SYSID NUMBER(38,0) COMMENT 'Deal ID (related to REP_DEAL link with parent REP table)',
  COM_SYSID NUMBER(38,0) COMMENT 'Comm ID (Related to REP_COM link with parents REP_DEAL, REP)',
  DIST_SYSID NUMBER(38,0) COMMENT 'Payroll Distribution ID (related to REP_PAY_DIST)',
  TRX_SYSID NUMBER(38,0) COMMENT 'Transaction ID (related to TRX)',
  IVR_SYSID NUMBER(38,0) COMMENT 'Investor (Client) ID (related to IVR)',
  PLN_SYSID NUMBER(38,0) COMMENT 'Plan (Account) ID (related to PLN)',
  ACT_SYSID NUMBER(38,0) COMMENT 'Account (Position) ID (related to ACT)',
  IVD_SYSID NUMBER(38,0) COMMENT 'Product ID (related to IVD link with parent IVT)',
  MGT_CD VARCHAR(5) COMMENT 'Managemet Cie ID (related to MGT)',
  TRX_CD NUMBER(38,0) COMMENT 'Transaction Code id (related to S_TRX_CD)',
  PROC_DT TIMESTAMP_NTZ(9) COMMENT 'Payable Process Date',
  PAID_DT TIMESTAMP_NTZ(9) COMMENT 'Payable Paid Date',
  PAY_PERIOD VARCHAR(5) COMMENT 'Pay Period',
  TAX_YEAR VARCHAR(4) COMMENT 'Pay Fiscal Year',
  TRADE_DT TIMESTAMP_NTZ(9) COMMENT 'Transaction Trade date (related to TRX)',
  GRSS_AMT FLOAT COMMENT 'Transaction Gross Amount (related to TRX)',
  COM_DLR FLOAT COMMENT 'Commission Dealer Amount',
  COM_PYBL FLOAT COMMENT 'Commission Amount',
  COM_BEN_PYBL FLOAT COMMENT 'Commission Pay to the Beneficiary',
  TICKET_CHG FLOAT COMMENT 'Ticket Charge',
  PAY_CD VARCHAR(3) COMMENT 'Pay Code',
  COM_PRODUCTION_CD VARCHAR(2) COMMENT 'Commission Type Code (related to S_COM_PROD)',
  AMOUNT FLOAT COMMENT 'Amount (related to Payroll Distribution)',
  USR_SYSID NUMBER(38,0) COMMENT 'User ID (related to SYS_USER_CD)',
  OTX_SYSID NUMBER(38,0) COMMENT 'Order ID (related to OTX)',
  DISPLAY_FLAG NUMBER(38,0) COMMENT 'Display Flag',
  DLR_MINIMUM VARCHAR(1) COMMENT 'Dealer Minimum',
  ORIG_PAY_PER VARCHAR(18) COMMENT 'Original Pay Period',
  IVT_TYPE VARCHAR(4) COMMENT 'Type of Product',
  COM_PAY_SYSID NUMBER(38,0) COMMENT 'Commission Pay ID',
  INTERNAL_COMM BOOLEAN COMMENT 'Internal Commission',
  WRHS_IND BOOLEAN COMMENT 'WRHS IND'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.IAS_UNIVERIS.S_COM_PRODUCTION (
  HK_HUB VARCHAR(40) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  COM_PRODUCTION_CD VARCHAR(2) COMMENT 'Product ID',
  COM_PRODUCTION_MNEM VARCHAR(5) COMMENT 'Product mnemonic code',
  COM_PRODUCTION_DESC VARCHAR(15) COMMENT 'Product description',
  COM_PRODUCTION_LONG_DESC VARCHAR(40) COMMENT 'Product long description',
  COM_PRODUCTION_MNEM_ENG VARCHAR(5) COMMENT 'Product mnemonic code english',
  COM_PRODUCTION_MNEM_FRE VARCHAR(5) COMMENT 'Product mnemonic code french',
  COM_PRODUCTION_DESC_ENG VARCHAR(15) COMMENT 'Product description english',
  COM_PRODUCTION_DESC_FRE VARCHAR(15) COMMENT 'prduct description french',
  COM_PRODUCTION_LONG_DESC_ENG VARCHAR(50) COMMENT 'Product long description english',
  COM_PRODUCTION_LONG_DESC_FRE VARCHAR(60) COMMENT 'Product long description french',
  CRC_TRND_RPT_CAT VARCHAR(1) COMMENT 'Unknown',
  COMMISSION_LEVEL NUMBER(38,0) COMMENT 'Unknown',
  CAC_TYPE_CD NUMBER(38,0) COMMENT 'Unknown',
  ACC_REPORT_IND NUMBER(38,0) COMMENT 'Unknown'
);
create or replace view DB_IAW_DEV_STG.IAS_UNIVERIS.VW_CONTRACT(
  HK_LINK,
  MD_HASHDIFF,
  HK_HUB_CONTRACT,
  HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
  HK_HUB_REGISTERED_REPRESENTATIVE,
  CONTRACT_ID,
  CLIENT_ID,
  RR_CD,
  UNIVERIS_PLAN_ID,
  MD_START_DT,
  MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT
) as
SELECT 
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), '#NULL#')
, '|' , '#NULL#'
, '|' , COALESCE(TRIM(IVR_SYSID), '#NULL#')
, '|' , COALESCE(TRIM(REP_CD), '#NULL#')
, '|' , COALESCE(TRIM(PLN_SYSID), '#NULL#')  ))) AS HK_LINK,
'0' AS MD_HASHDIFF,
DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), '#NULL#'), '|' , '#NULL#' , '|' , COALESCE(TRIM(TO_VARCHAR(PLN_SYSID)), '#NULL#'), '|' ,COALESCE(TRIM(TO_VARCHAR(IVR_SYSID)), '#NULL#') )))) AS HK_HUB_CONTRACT,
DECODE(TRUE, IVR_SYSID IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), '#NULL#'), '|' , COALESCE(TRIM(IVR_SYSID), '#NULL#'))))) AS HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
DECODE(TRUE, REP_CD IS NULL ,'0',SHA1(UPPER(CONCAT('IAS', '|' , COALESCE(TRIM(REP_CD), '#NULL#'))))) AS HK_HUB_REGISTERED_REPRESENTATIVE,
NULL AS CONTRACT_ID,
TRIM(IVR_SYSID) AS CLIENT_ID,
TRIM(REP_CD) AS RR_CD,
TRIM(PLN_SYSID) AS UNIVERIS_PLAN_ID,
MD_START_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT
FROM IAS_UNIVERIS.CONTRACT;
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.IAS_UNIVERIS.PIPE_UTF16
  TYPE = csv
  FIELD_DELIMITER = '|'
  ESCAPE_UNENCLOSED_FIELD = 'NONE'
  NULL_IF = ('0000-00-00')
  ENCODING = 'UTF-16'
;
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_UNIVERIS.SP_CONV_LOADSTG_IAS_UNIVERIS_TO_STG_COM_PRODUCTION("ENV" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var truncate_query = "TRUNCATE TABLE DB_IAW_" + ENV + "_stg.IAS_UNIVERIS.S_COM_PRODUCTION"; 

var sql_statement = snowflake.createStatement(
          {
          sqlText: truncate_query
          }
       );
var result_scan = sql_statement.execute();  
 var ins_query = "INSERT INTO DB_IAW_" + ENV + "_stg.IAS_UNIVERIS.S_COM_PRODUCTION(" 
                + "MD_START_DT,MD_SOURCE,COM_PRODUCTION_CD,COM_PRODUCTION_MNEM,COM_PRODUCTION_DESC,COM_PRODUCTION_LONG_DESC,COM_PRODUCTION_MNEM_ENG,COM_PRODUCTION_MNEM_FRE,COM_PRODUCTION_DESC_ENG,"
                + "COM_PRODUCTION_DESC_FRE,COM_PRODUCTION_LONG_DESC_ENG,COM_PRODUCTION_LONG_DESC_FRE,CRC_TRND_RPT_CAT,COMMISSION_LEVEL,CAC_TYPE_CD,ACC_REPORT_IND,MD_SRC_SYSTEM,MD_EXTRACT_DT) " 
               + "SELECT ''2019-01-01'',''DB_IAW_PROD_STAGING_POCIA.IAS_UNIVERIS.S_COM_PRODUCTION'',COM_PROD_CD,COM_PROD_MNEM,COM_PROD_DESC,COM_PROD_LONG_DESC,COM_PROD_MNEM_ENG,COM_PROD_MNEM_FRE,COM_PROD_DESC_ENG,"
                + "COM_PROD_DESC_FRE,COM_PROD_LONG_DESC_ENG,COM_PROD_LONG_DESC_FRE,CRC_TRND_RPT_CAT,COMMISSION_LEVEL,CAC_TYPE_CD,ACC_REPORT_IND,''IAS-UNIVERIS'',TO_DATE(SYSTIMESTAMP())"
                + " FROM  DB_IAW_" + ENV + "_stg_pocia.IAS_UNIVERIS_POCIA.S_COM_PROD";
   
sql_statement = snowflake.createStatement(
          {
          sqlText: ins_query
          });
 result_scan = sql_statement.execute(); 

';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_UNIVERIS.SP_CONV_LOADSTG_IAS_UNIVERIS_TO_STG_HOLDINGS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.HOLDINGS WHERE 1=1'';
INS_PRE_COPY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.HOLDINGS
 (
    MD_START_DT
  , MD_SOURCE 
  , MD_SEQ
  , ACT_SYSID
  , IVD_SYSID
  , REP_SYSID
  , IVR_SYSID
  , PLN_SYSID
  , FISCAL_SYSID
  , BAL_DATE
  , MV
  , CURRENCY_CD
  , EXCH_DT
  , EXCH_RATE
  , AUA
  , PRICE
  , UNITS
  , BV
  , ACB
  , NI_T
  , NI_P
  , FREQ_CD
  , UNITS_TRD_DT
  , FISCAL_TD_UNITS
  , IVD_LOAD_FLAG
  , WF_IND  
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM
  
  )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, metadata$file_row_number,
    t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20, t.$21, t.$22, t.$23, t.$24, t.$25
  FROM
    @DATALAKE.''||IO_PATH||'' t
  ) pattern = ''''.*/HOLDINGS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16)
    '';
  
INS_UPDATE:=''UPDATE DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.HOLDINGS
SET
  HK_LINK = SHA1(UPPER(CONCAT(
    COALESCE(TRIM(MD_SEQ), ''''#NULL#''''), ''''|''''
  , COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|''''
  , COALESCE(TRIM(MD_EXTRACT_DT), ''''#NULL#''''), ''''|''''
  , ''''#NULL#'''', ''''|''''
  , COALESCE(TRIM(IVD_SYSID), ''''#NULL#''''), ''''|''''
  , COALESCE(TRIM(PLN_SYSID), ''''#NULL#''''), ''''|''''
  , COALESCE(TRIM(IVR_SYSID), ''''#NULL#'''')
  ))),
  HK_HUB_CONTRACT = DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TRIM(PLN_SYSID), ''''#NULL#'''') ,''''|'''', COALESCE(TRIM(IVR_SYSID), ''''#NULL#''''))))),
  HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, IVD_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(IVD_SYSID), ''''#NULL#''''))))),
  MD_HASHDIFF=SHA1(CONCAT(
    COALESCE(TO_VARCHAR(ACT_SYSID),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(FISCAL_SYSID),''''#NULL#''''), ''''|''''
  , COALESCE(BAL_DATE,''''#NULL#''''),''''|''''
  , COALESCE(TO_VARCHAR(MV),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(CURRENCY_CD),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(EXCH_DT),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(EXCH_RATE),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(AUA),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(PRICE),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(UNITS),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(BV),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(ACB),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(NI_T),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(NI_P),''''#NULL#''''), ''''|''''
  , COALESCE(FREQ_CD,''''#NULL#''''),''''|''''
  , COALESCE(TO_VARCHAR(UNITS_TRD_DT),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(FISCAL_TD_UNITS),''''#NULL#''''), ''''|''''
  , COALESCE(IVD_LOAD_FLAG,''''#NULL#''''),''''|''''
  , COALESCE(TO_VARCHAR(WF_IND),''''#NULL#'''')
  )), 
  MD_CREATION_DT= SYSTIMESTAMP()
  Where 1=1
    '';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_COPY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_UNIVERIS.SP_CONV_LOADSTG_INVESTIA_UNIVERIS_TO_STG_HOLDINGS("ENV" VARCHAR(1000), "IO_FILE_NAME" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_COPY_QUERY STRING;
INS_UPDATE STRING;

BEGIN
INS_COPY_QUERY := ''
COPY INTO 
  DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.HOLDINGS (
    MD_START_DT
  , MD_SOURCE 
  , MD_SEQ
  , ACT_SYSID
  , IVD_SYSID
  , REP_SYSID
  , IVR_SYSID
  , PLN_SYSID
  , FISCAL_SYSID
  , BAL_DATE
  , MV
  , CURRENCY_CD
  , EXCH_DT
  , EXCH_RATE
  , AUA
  , PRICE
  , UNITS
  , BV
  , ACB
  , NI_T
  , NI_P
  , FREQ_CD
  , UNITS_TRD_DT
  , FISCAL_TD_UNITS
  , IVD_LOAD_FLAG
  , WF_IND  
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM
  )
FROM
  (
  SELECT
    t.$7,metadata$filename, metadata$file_row_number,
    t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20, t.$21, t.$22, t.$23, t.$24, t.$25
  FROM
    @DATALAKE.raw/INVESTIA/INITIAL_LOADING T 
  ) pattern = ''||io_file_name||'' file_format =(format_name = DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16);
             '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.HOLDINGS
SET 
  HK_LINK = SHA1(UPPER(CONCAT(
    COALESCE(TRIM(MD_SEQ), ''''#NULL#''''), ''''|'''' 
  , COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' 
  , COALESCE(TRIM(MD_EXTRACT_DT), ''''#NULL#''''), ''''|'''' 
  , ''''#NULL#'''', ''''|'''' 
  , COALESCE(TRIM(IVD_SYSID), ''''#NULL#''''), ''''|''''
  , COALESCE(TRIM(PLN_SYSID), ''''#NULL#''''), ''''|'''' 
  , COALESCE(TRIM(IVR_SYSID), ''''#NULL#'''')
  ))),
  HK_HUB_CONTRACT = DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TRIM(PLN_SYSID), ''''#NULL#'''') ,''''|'''', COALESCE(TRIM(IVR_SYSID), ''''#NULL#''''))))),
  HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, IVD_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(IVD_SYSID), ''''#NULL#''''))))),
  MD_HASHDIFF=SHA1(CONCAT(
    COALESCE(TO_VARCHAR(ACT_SYSID),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(FISCAL_SYSID),''''#NULL#''''), ''''|'''' 
  , COALESCE(BAL_DATE,''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(MV),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(CURRENCY_CD),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(EXCH_DT),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(EXCH_RATE),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(AUA),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(PRICE),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(UNITS),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(BV),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(ACB),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(NI_T),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(NI_P),''''#NULL#''''), ''''|'''' 
  , COALESCE(FREQ_CD,''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(UNITS_TRD_DT),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(FISCAL_TD_UNITS),''''#NULL#''''), ''''|'''' 
  , COALESCE(IVD_LOAD_FLAG,''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(WF_IND),''''#NULL#'''')
  )), 
  MD_CREATION_DT= SYSTIMESTAMP(),
  MD_START_DT = DATEADD(DAY,1,BAL_DATE)
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_UNIVERIS.SP_CONV_LOADSTG_INVESTIA_UNIVERIS_TO_STG_REVENUE_PAYABLE("ENV" VARCHAR(1000), "IO_FILE_NAME" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_COPY_QUERY STRING;
INS_UPDATE STRING;

BEGIN
INS_COPY_QUERY := ''
COPY INTO 
  DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REVENUE_PAYABLE (
  MD_START_DT, 
  MD_SOURCE,
  PAY_SYSID,
  PYBL_STATUS,
  EVENT_PROC_SYSID,
  EVENT_RPT_SYSID,
  BEN_SYSID,
  REP_SYSID,
  DEAL_SYSID,
  COM_SYSID,
  DIST_SYSID,
  TRX_SYSID,
  IVR_SYSID,
  PLN_SYSID,
  ACT_SYSID,
  IVD_SYSID,
  MGT_CD,
  TRX_CD,
  PROC_DT,
  PAID_DT,
  PAY_PERIOD,
  TAX_YEAR,
  TRADE_DT,
  GRSS_AMT,
  COM_DLR,
  COM_PYBL,
  COM_BEN_PYBL,
  TICKET_CHG,
  PAY_CD,
  COM_PRODUCTION_CD,
  AMOUNT,
  USR_SYSID,
  OTX_SYSID,
  DISPLAY_FLAG,
  DLR_MINIMUM,
  ORIG_PAY_PER,
  IVT_TYPE,
  COM_PAY_SYSID,
  INTERNAL_COMM,
  WRHS_IND,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM ) 
FROM
  (
  SELECT
    t.$18, metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,
    t.$11,t.$12,t.$13,t.$14,t.$15,t.$16,t.$17,t.$18,t.$19,t.$20,t.$21,t.$22,t.$23,t.$24,
    t.$25,t.$26,t.$27,t.$28,t.$29,t.$30,t.$31,t.$32,t.$33,t.$34,
    t.$35,t.$36,t.$37,t.$38,t.$39,t.$40
  FROM
    @DATALAKE.raw/INVESTIA/INITIAL_LOADING T
  ) pattern = ''||io_file_name||'' file_format =(format_name = DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16);
             '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REVENUE_PAYABLE
SET 
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , 
COALESCE(TO_VARCHAR(PAY_SYSID), ''''#NULL#''''), ''''|'''' , 
COALESCE(TO_VARCHAR(PAID_DT), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVD_SYSID), ''''#NULL#''''), ''''|'''' ,
''''#NULL#''''))),
HK_HUB_CONTRACT=DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#'''')  ,''''|'''', COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''))))),
HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, IVD_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TO_VARCHAR(IVD_SYSID)), ''''#NULL#''''))))),
MD_HASHDIFF = SHA1(CONCAT(
  COALESCE(PYBL_STATUS, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(EVENT_PROC_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(EVENT_RPT_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(BEN_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(DEAL_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(COM_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(DIST_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(TRX_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(ACT_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(MGT_CD, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(TRX_CD),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(PROC_DT),''''#NULL#''''), ''''|'''', 
  COALESCE(PAY_PERIOD, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TAX_YEAR, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(TRADE_DT),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(GRSS_AMT),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(COM_DLR),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(COM_PYBL),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(COM_BEN_PYBL),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(TICKET_CHG),''''#NULL#''''), ''''|'''', 
  COALESCE(PAY_CD, ''''#NULL#''''), ''''|'''' , 
  COALESCE(COM_PRODUCTION_CD, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(AMOUNT),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(USR_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(OTX_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(DISPLAY_FLAG),''''#NULL#''''), ''''|'''', 
  COALESCE(DLR_MINIMUM, ''''#NULL#''''), ''''|'''' , 
  COALESCE(ORIG_PAY_PER, ''''#NULL#''''), ''''|'''' , 
  COALESCE(IVT_TYPE, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(COM_PAY_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(INTERNAL_COMM),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(WRHS_IND),''''#NULL#''''))),  
MD_CREATION_DT=systimestamp(),
MD_START_DT = DATEADD(DAY,1,COALESCE(PAID_DT,PROC_DT))
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_UNIVERIS.SP_CONV_LOADSTG_PSA_IAS_UNIVERIS_CONTRACT("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.CONTRACT WHERE 1=1'';
INS_PRE_COPY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.CONTRACT
(
MD_START_DT,
MD_SOURCE,
PLN_SYSID,
IVR_SYSID,
PLN_CD,
PLN_STATUS,
PLN_ADM_CD,
SETUP_DT,
CLOSE_DT,
PEN_JUR_CD,
FEE_EXMP_IND,
ADMINISTRATOR_TYPE,
MD_EXTRACT_DT,
MD_SRC_SYSTEM,
REP_SYSID,
REP_CD
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14
  FROM
    @DATALAKE.''||IO_PATH||'' t
  ) pattern = ''''.*ACCOUNTS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.PIPE_UTF16)
    '';
  
INS_UPDATE:=''UPDATE DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.CONTRACT
SET
    HK_HUB = SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TRIM(PLN_SYSID), ''''#NULL#'''')  ,''''|'''', COALESCE(TRIM(IVR_SYSID), ''''#NULL#'''')))),
  MD_HASHDIFF =  SHA1(CONCAT(COALESCE(TRIM(PLN_CD), ''''#NULL#''''), ''''|'''',
  COALESCE(TRIM(PLN_STATUS),''''#NULL#''''),''''|'''',
  COALESCE(TRIM(PLN_ADM_CD),''''#NULL#''''), ''''|'''',
  COALESCE(TRIM(TO_VARCHAR(SETUP_DT)), ''''#NULL#''''), ''''|'''',
  COALESCE(TRIM(TO_VARCHAR(CLOSE_DT)), ''''#NULL#''''), ''''|'''',
  COALESCE(TRIM(PEN_JUR_CD),''''#NULL#''''), ''''|'''',
  COALESCE(TRIM(TO_VARCHAR(FEE_EXMP_IND)),''''#NULL#''''), ''''|'''',
  COALESCE(TRIM(ADMINISTRATOR_TYPE),''''#NULL#''''),''''|'''',
  COALESCE(TRIM(TO_VARCHAR(REP_SYSID)),''''#NULL#''''),''''|'''',
  COALESCE(TRIM(REP_CD),''''#NULL#''''))) , 
    MD_CREATION_DT=systimestamp()
  Where 1=1
    '';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_COPY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_UNIVERIS.SP_CONV_LOADSTG_PSA_IAS_UNIVERIS_TO_STG_CLIENTS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
DEL_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.ACCOUNT_HOLDER WHERE 1=1;'';
INS_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.ACCOUNT_HOLDER
(
  MD_START_DT,
  MD_SOURCE,
  IVR_SYSID,
  REP_SYSID,
  RECIPIENT_DESC_ENG,
  RECIPIENT_DESC_FRE,
  CORP_CD,
  IVR_ST_NAME_ENG,
  IVR_ST_NAME_FRE,
  IVR_REG_2,
  LANG_CD,
  IVR_RES_CD,
  IVR_SETUP_DT,
  IVR_STOP_DT,
  IVR_FRGN_CTNT,
  IVR_HOLD_MAIL,
  IVR_INC_ADR,
  IVR_STMT_FREQ,
  IVR_STMT_TYPE,
  IVR_STMT_DT,
  IVR_OLD_DLR,
  SALARY_DESC,
  IVR_KYC_DT,
  IVR_PRIM_BDT,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM,
  CREATE_DT
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6,t.$7, t.$8,t.$9, t.$10,
    t.$11, t.$12, t.$13, t.$14, t.$15, t.$16,t.$17, t.$18,t.$19, t.$20, t.$21,t.$22, t.$23,t.$24, t.$25
  FROM
    @DATALAKE.''||IO_PATH||'' T
  ) pattern =''''.*CLIENTS_.*csv'''' file_format=(format_name=IAS_UNIVERIS.PIPE_UTF16);
  '';

UPD_QUERY := ''UPDATE DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.ACCOUNT_HOLDER
SET
    HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(IVR_SYSID), ''''#NULL#'''')))),
  MD_HASHDIFF=SHA1(CONCAT(
  COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(RECIPIENT_DESC_ENG, ''''#NULL#''''), ''''|'''' ,   
  COALESCE(RECIPIENT_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(CORP_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_ST_NAME_ENG, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_ST_NAME_FRE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_REG_2, ''''#NULL#''''), ''''|'''' ,
  COALESCE(LANG_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_RES_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(IVR_SETUP_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_STOP_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_FRGN_CTNT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_HOLD_MAIL),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_INC_ADR),''''#NULL#''''), ''''|'''',
  COALESCE(IVR_STMT_FREQ, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_STMT_TYPE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(IVR_STMT_DT),''''#NULL#''''), ''''|'''',
  COALESCE(IVR_OLD_DLR, ''''#NULL#''''), ''''|'''' ,
  COALESCE(SALARY_DESC, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(IVR_KYC_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_PRIM_BDT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(CREATE_DT),''''#NULL#''''))), 
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;'';


EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_UNIVERIS.SP_CONV_LOADSTG_PSA_IAS_UNIVERIS_TO_STG_FINANCIAL_TRANSACTIONS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.FINANCIAL_TRANSACTIONS WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.FINANCIAL_TRANSACTIONS
(
MD_START_DT,
MD_SOURCE,
TRX_SYSID,
IVR_SYSID,
REP_SYSID,
PLN_SYSID,
ACT_SYSID,
IVD_SYSID,
TRX_STATUS,
TRX_ST_DESC_ENG,
TRADE_DT,
MGT_CD,
MGT_NAME_ENG,
DLR_SYSID,
RGN_SYSID,
BRN_SYSID,
TRX_UNIT,
TRX_PRICE,
TRX_GROSS,
TRX_NET,
TRX_GROSS_CAD,
SPR_FACTOR,
CURRENCY_CD,
DLR_CD,
RGN_CD,
BRN_CD,
REP_CD,
PLN_TYPE,
SPR_CTGY,
TRX_MNEM_ENG,
REVERSAL_IND,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10,t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20
    ,t.$21, t.$22, t.$23, t.$24, t.$25, t.$26, t.$27, t.$28, t.$29, t.$30, t.$31
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*TRANSACTIONS__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.PIPE_UTF16);
              '';

UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.FINANCIAL_TRANSACTIONS
SET
HK_LINK =
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#'''')
, ''''|'''' , COALESCE(TRIM(TRX_SYSID), ''''#NULL#'''')
, ''''|'''' , ''''#NULL#''''
, ''''|'''' , ''''#NULL#''''
, ''''|'''' , COALESCE(TRIM(IVD_SYSID), ''''#NULL#'''')
, ''''|'''' , COALESCE(TRIM(PLN_SYSID), ''''#NULL#'''')
, ''''|'''' , COALESCE(TRIM(IVR_SYSID), ''''#NULL#'''')))),
HK_HUB_CONTRACT = DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TRIM(PLN_SYSID), ''''#NULL#'''') ,''''|'''', COALESCE(TRIM(IVR_SYSID), ''''#NULL#''''))))),
HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, IVD_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(IVD_SYSID), ''''#NULL#''''))))),
MD_HASHDIFF = ''''0'''',
MD_CREATION_DT=systimestamp()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_UNIVERIS.SP_CONV_LOADSTG_PSA_IAS_UNIVERIS_TO_STG_INVESTMENT_PRODUCT_TYPE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.INVESTMENT_PRODUCT_TYPE WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.INVESTMENT_PRODUCT_TYPE
(
MD_START_DT,
MD_SOURCE,
IVD_SYSID ,
CURRENCY_CD ,
SYMBOL ,
IVD_ST_DESC_ENG ,
IVD_ST_DESC_FRE ,
IVD_LOAD_DESC_ENG ,
IVD_LOAD_DESC_FRE ,
IVT_NAME_ENG ,
IVT_NAME_FRE ,
IVT_CD_DESC_ENG ,
IVT_CD_DESC_FRE ,
IVT_ST_DESC_ENG ,
IVT_ST_DESC_FRE ,
ASSET_CLASS_DESC_ENG ,
ASSET_CLASS_DESC_FRE ,
ASSET_CTGY_DESC_ENG ,
ASSET_CTGY_DESC_FRE ,
IVT_TYPE_DESC_ENG ,
IVT_TYPE_DESC_FRE ,
CTGY_DESC_ENG ,
CTGY_DESC_FRE ,
GROUP_DESC_ENG ,
GROUP_DESC_FRE ,
MGT_CD ,
MGT_NAME_ENG ,
MGT_NAME_FRE ,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10,t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20,
    t.$21, t.$22, t.$23, t.$24, t.$25, t.$26, t.$27, t.$28
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*MARKETPRODUCTS__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.PIPE_UTF16);
              '';

UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.INVESTMENT_PRODUCT_TYPE
SET
HK_HUB=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TRIM(IVD_SYSID)), ''''#NULL#'''')))),
MD_HASHDIFF=
SHA1(
CONCAT(
COALESCE(CURRENCY_CD, ''''#NULL#''''), ''''|'''',
COALESCE(SYMBOL, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVD_ST_DESC_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVD_ST_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVD_LOAD_DESC_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVD_LOAD_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVT_NAME_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVT_NAME_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVT_CD_DESC_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVT_CD_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVT_ST_DESC_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVT_ST_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(ASSET_CLASS_DESC_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(ASSET_CLASS_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(ASSET_CTGY_DESC_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(ASSET_CTGY_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVT_TYPE_DESC_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVT_TYPE_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(CTGY_DESC_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(CTGY_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(GROUP_DESC_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(GROUP_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(MGT_CD,''''#NULL#''''), ''''|'''',
COALESCE(MGT_NAME_ENG,''''#NULL#''''), ''''|'''',
COALESCE(MGT_NAME_FRE,''''#NULL#'''')
)
),  
MD_CREATION_DT= SYSTIMESTAMP()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_UNIVERIS.SP_CONV_LOADSTG_PSA_IAS_UNIVERIS_TO_STG_PLANS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.REF_INVESTMENT_SAVING_PROGRAM_TYPES WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.REF_INVESTMENT_SAVING_PROGRAM_TYPES
(
MD_START_DT,
MD_SOURCE,
PLN_CD,
PLN_REG,
PLN_MNEM,
PLN_DESC,
PLN_MNEM_F,
PLN_DESC_F,
PLN_MNEM_ENG,
PLN_DESC_ENG,
PLN_SHORT_DESC_ENG,
PLN_MNEM_FRE,
PLN_DESC_FRE,
PLN_SHORT_DESC_FRE,
STMT_GROUP_MNEM,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6,t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14,t.$15
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*PLANS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16);
              '';

UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.REF_INVESTMENT_SAVING_PROGRAM_TYPES
SET
    HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''),''''|'''',COALESCE(TRIM(PLN_MNEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', ''''#NULL#'''',''''|'''',''''#NULL#'''',''''|'''',''''#NULL#''''))),
    MD_HASHDIFF=SHA1(CONCAT(COALESCE(TO_VARCHAR(PLN_CD), ''''#NULL#''''), ''''|'''',COALESCE(TO_VARCHAR(PLN_REG),''''#NULL#''''),''''|'''', COALESCE(PLN_DESC,''''#NULL#''''), ''''|'''', COALESCE(PLN_MNEM_F, ''''#NULL#''''), ''''|'''', COALESCE(PLN_DESC_F,''''#NULL#''''), ''''|'''', COALESCE(PLN_MNEM_ENG,''''#NULL#''''), ''''|'''', COALESCE(PLN_DESC_ENG,''''#NULL#''''),''''|'''', COALESCE(PLN_SHORT_DESC_ENG,''''#NULL#''''),''''|'''', COALESCE(PLN_MNEM_FRE,''''#NULL#''''),''''|'''', COALESCE(PLN_DESC_FRE,''''#NULL#''''),''''|'''', COALESCE(PLN_SHORT_DESC_FRE,''''#NULL#''''),''''|'''', COALESCE(STMT_GROUP_MNEM,''''#NULL#''''))),
    MD_CREATION_DT=systimestamp()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_UNIVERIS.SP_CONV_LOADSTG_PSA_IAS_UNIVERIS_TO_STG_PLN_SRF("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.PLN_SRF WHERE 1=1'';
INS_PRE_COPY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.PLN_SRF
(
  MD_START_DT,
  MD_SOURCE,
  PLN_SRF_SYSID,
  PLN_SYSID,
  FAS_FILE_NAME,
  FROM_DT,
  TO_DT,
  MGT_CD,
  CURRENCY_CD,
  INCOME_TYPE,
  REP_CODE,
  COM_PYBL,
  EXCH_DT,
  EXCH_RATE,
  LAST_UPD_DT,
  USR_SYSID,
  FISCAL_SYSID,
  JUR_CD,
  ACT_TAX_COLLCTD,
  DLR_SYSID,
  RGN_SYSID,
  BRN_SYSID,
  REP_SYSID,
  IVR_SYSID,
  IVD_SYSID,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,
    t.$11,t.$12,t.$13,t.$14,t.$15,t.$16,t.$17,t.$18,t.$19,t.$20,t.$21,t.$22,t.$23,t.$24,t.$25
  FROM
    @DATALAKE.''||IO_PATH||'' T
  ) pattern =''''.*PLN_SRF_.*csv'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.PIPE_UTF16)
    '';
  
INS_UPDATE:=''UPDATE DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.PLN_SRF
SET
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PLN_SRF_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(TO_DT), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVD_SYSID), ''''#NULL#''''), ''''|'''',
''''#NULL#''''))),
HK_HUB_CONTRACT=DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#'''')  ,''''|'''', COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''))))),
HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, IVD_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TO_VARCHAR(IVD_SYSID)), ''''#NULL#''''))))),
MD_HASHDIFF = SHA1(CONCAT(
  COALESCE(FAS_FILE_NAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(FROM_DT),''''#NULL#''''), ''''|'''',
  COALESCE(MGT_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(CURRENCY_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(INCOME_TYPE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(REP_CODE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(COM_PYBL),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(EXCH_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(EXCH_RATE),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(LAST_UPD_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(USR_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(FISCAL_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(JUR_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(ACT_TAX_COLLCTD),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(DLR_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(RGN_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(BRN_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''))), 
  MD_CREATION_DT=systimestamp()
  Where 1=1;
    '';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_COPY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_UNIVERIS.SP_CONV_LOADSTG_PSA_IAS_UNIVERIS_TO_STG_REF_COM_PROD("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.S_COM_PRODUCTION WHERE 1=1'';
INS_PRE_COPY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.S_COM_PRODUCTION
(
MD_START_DT,
MD_SOURCE,
COM_PRODUCTION_CD,
COM_PRODUCTION_MNEM,
COM_PRODUCTION_DESC,
COM_PRODUCTION_LONG_DESC,
COM_PRODUCTION_MNEM_ENG,
COM_PRODUCTION_MNEM_FRE,
COM_PRODUCTION_DESC_ENG,
COM_PRODUCTION_DESC_FRE,
COM_PRODUCTION_LONG_DESC_ENG,
COM_PRODUCTION_LONG_DESC_FRE,
CRC_TRND_RPT_CAT,
COMMISSION_LEVEL,
CAC_TYPE_CD,
ACC_REPORT_IND,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9
    ,t.$10, t.$11, t.$12, t.$13, t.$14, t.$15, t.$16
  FROM
    @DATALAKE.''||IO_PATH||'' T
  ) pattern = ''''.*S_COM_PROD__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.PIPE_UTF16)
  '';
INS_UPDATE:=''UPDATE DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.S_COM_PRODUCTION
SET HK_HUB=
  SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''',  COALESCE(TRIM(COM_PRODUCTION_CD), ''''#NULL#'''')))),
  MD_HASHDIFF=
  SHA1(CONCAT(
     COALESCE(COM_PRODUCTION_MNEM, ''''#NULL#''''), ''''|''''
  ,  COALESCE(COM_PRODUCTION_DESC, ''''#NULL#''''), ''''|''''
  ,  COALESCE(COM_PRODUCTION_LONG_DESC, ''''#NULL#''''), ''''|''''
  ,  COALESCE(COM_PRODUCTION_MNEM_ENG, ''''#NULL#''''), ''''|''''
  ,  COALESCE(COM_PRODUCTION_MNEM_FRE, ''''#NULL#''''), ''''|''''
  ,  COALESCE(COM_PRODUCTION_DESC_ENG, ''''#NULL#''''), ''''|''''
  ,  COALESCE(COM_PRODUCTION_DESC_FRE, ''''#NULL#''''), ''''|''''
  ,  COALESCE(COM_PRODUCTION_LONG_DESC_ENG, ''''#NULL#''''), ''''|''''
  ,  COALESCE(COM_PRODUCTION_LONG_DESC_FRE, ''''#NULL#''''), ''''|''''
  ,  COALESCE(CRC_TRND_RPT_CAT, ''''#NULL#''''), ''''|''''
  ,  COALESCE(TO_VARCHAR(COMMISSION_LEVEL), ''''#NULL#''''), ''''|''''
  ,  COALESCE(TO_VARCHAR(CAC_TYPE_CD), ''''#NULL#''''), ''''|''''
  ,  COALESCE(TO_VARCHAR(ACC_REPORT_IND), ''''#NULL#'''')
  )), 
  MD_CREATION_DT=systimestamp()
  Where 1=1
    '';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_COPY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_UNIVERIS.SP_CONV_LOADSTG_PSA_IAS_UNIVERIS_TO_STG_REGISTERED_REPRESENTATIVE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.REGISTERED_REPRESENTATIVE  WHERE 1=1'';
INS_PRE_COPY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.REGISTERED_REPRESENTATIVE
(
  MD_START_DT,
  MD_SOURCE,
  COMPANY_CD,
  COMPANY_NAME,
  REGULATORY_ORG_CD,
  REGULATORY_ORG_NAME,
  DLR_SYSID,
  DLR_CD,
  DLR_NAME_ENG,
  RGN_SYSID,
  RGN_CD,
  RGN_NAME,
  RGN_MGR,
  BRN_SYSID,
  BRN_CD,
  BRN_NAME,
  REP_TEAM_CD,
  REP_TEAM_NAME,
  REP_SYSID,
  NK_REP_CD,
  NK_REP_CORP_NAME,
  REP_LNAME,
  REP_FNAME,
  REP_ST_NAME,
  REP_GRP_RSP,
    MD_EXTRACT_DT,
  MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14,
    t.$15, t.$16, t.$17, t.$18, t.$19, t.$20, t.$21, t.$22, t.$23, t.$24, t.$25
  FROM
    @DATALAKE.''||IO_PATH||'' t
  ) pattern = ''''.*REGISTERED_REPRESENTATIVE__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.PIPE_UTF16)
    '';
  
INS_UPDATE:=''UPDATE DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.REGISTERED_REPRESENTATIVE
SET
    HK_HUB=SHA1(UPPER(CONCAT(''''IAS'''', ''''|'''' ,COALESCE(TRIM(TO_VARCHAR(NK_REP_CD)), ''''#NULL#'''') ))),
  MD_HASHDIFF=SHA1(CONCAT(
  COALESCE(COMPANY_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(COMPANY_NAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(REGULATORY_ORG_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(REGULATORY_ORG_NAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(DLR_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(DLR_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(DLR_NAME_ENG, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(RGN_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(RGN_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(RGN_NAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(RGN_MGR, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(BRN_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(BRN_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(BRN_NAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(REP_TEAM_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(REP_TEAM_NAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(NK_REP_CORP_NAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(REP_LNAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(REP_FNAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(REP_ST_NAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(REP_GRP_RSP, ''''#NULL#''''))),  
  MD_CREATION_DT=systimestamp()
  Where 1=1
    '';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_COPY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_UNIVERIS.SP_CONV_LOADSTG_PSA_IAS_UNIVERIS_TO_STG_REVENUE_PAYABLE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.REVENUE_PAYABLE WHERE 1=1'';
INS_PRE_COPY := ''
COPY INTO DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.REVENUE_PAYABLE
 (
MD_START_DT,
MD_SOURCE,
PAY_SYSID,
PYBL_STATUS,
EVENT_PROC_SYSID,
EVENT_RPT_SYSID,
BEN_SYSID,
REP_SYSID,
DEAL_SYSID,
COM_SYSID,
DIST_SYSID,
TRX_SYSID,
IVR_SYSID,
PLN_SYSID,
ACT_SYSID,
IVD_SYSID,
MGT_CD,
TRX_CD,
PROC_DT,
PAID_DT,
PAY_PERIOD,
TAX_YEAR,
TRADE_DT,
GRSS_AMT,
COM_DLR,
COM_PYBL,
COM_BEN_PYBL,
TICKET_CHG,
PAY_CD,
COM_PRODUCTION_CD,
AMOUNT,
USR_SYSID,
OTX_SYSID,
DISPLAY_FLAG,
DLR_MINIMUM,
ORIG_PAY_PER,
IVT_TYPE,
COM_PAY_SYSID,
INTERNAL_COMM,
WRHS_IND,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,
    t.$11,t.$12,t.$13,t.$14,t.$15,t.$16,t.$17,t.$18,t.$19,t.$20,t.$21,t.$22,t.$23,t.$24,
    t.$25,t.$26,t.$27,t.$28,t.$29,t.$30,t.$31,t.$32,t.$33,t.$34,
    t.$35,t.$36,t.$37,t.$38,t.$39,t.$40
  FROM
    @DATALAKE.''||IO_PATH||'' t
  ) pattern =''''.*REVENUE_PAYABLE__.*csv'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.PIPE_UTF16)
    '';
  
INS_UPDATE:=''UPDATE DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.REVENUE_PAYABLE
SET
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PAY_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PAID_DT), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVD_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PROC_DT), ''''#NULL#'''')))),
HK_HUB_CONTRACT=DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#'''')  ,''''|'''', COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''))))),
HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, IVD_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TO_VARCHAR(IVD_SYSID)), ''''#NULL#''''))))),
MD_HASHDIFF = SHA1(CONCAT(
  COALESCE(PYBL_STATUS, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(EVENT_PROC_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(EVENT_RPT_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(BEN_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(DEAL_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(COM_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(DIST_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(TRX_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(ACT_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(MGT_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(TRX_CD),''''#NULL#''''), ''''|'''',
  COALESCE(PAY_PERIOD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TAX_YEAR, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(TRADE_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(GRSS_AMT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(COM_DLR),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(COM_PYBL),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(COM_BEN_PYBL),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(TICKET_CHG),''''#NULL#''''), ''''|'''',
  COALESCE(PAY_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(COM_PRODUCTION_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(AMOUNT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(USR_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(OTX_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(DISPLAY_FLAG),''''#NULL#''''), ''''|'''',
  COALESCE(DLR_MINIMUM, ''''#NULL#''''), ''''|'''' ,
  COALESCE(ORIG_PAY_PER, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVT_TYPE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(COM_PAY_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(INTERNAL_COMM),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(WRHS_IND),''''#NULL#''''))),  
  MD_CREATION_DT=systimestamp()
  Where 1=1
    '';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_COPY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.IAS_UNIVERIS.SP_LOADSTG_IAS_UNIVERIS_TO_STG_COM_PRODUCTION("ENV" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var truncate_query = "TRUNCATE TABLE DB_IAW_" + ENV + "_stg.IAS_UNIVERIS.S_COM_PRODUCTION"; 

var sql_statement = snowflake.createStatement(
          {
          sqlText: truncate_query
          }
       );
var result_scan = sql_statement.execute();  
 var ins_query = "INSERT INTO DB_IAW_" + ENV + "_stg.IAS_UNIVERIS.S_COM_PRODUCTION(" 
                + "MD_START_DT,MD_SOURCE,COM_PRODUCTION_CD,COM_PRODUCTION_MNEM,COM_PRODUCTION_DESC,COM_PRODUCTION_LONG_DESC,COM_PRODUCTION_MNEM_ENG,COM_PRODUCTION_MNEM_FRE,COM_PRODUCTION_DESC_ENG,"
                + "COM_PRODUCTION_DESC_FRE,COM_PRODUCTION_LONG_DESC_ENG,COM_PRODUCTION_LONG_DESC_FRE,CRC_TRND_RPT_CAT,COMMISSION_LEVEL,CAC_TYPE_CD,ACC_REPORT_IND,MD_SRC_SYSTEM,MD_EXTRACT_DT) " 
               + "SELECT ''2019-01-01'',''DB_IAW_PROD_STAGING_POCIA.IAS_UNIVERIS.S_COM_PRODUCTION'',COM_PROD_CD,COM_PROD_MNEM,COM_PROD_DESC,COM_PROD_LONG_DESC,COM_PROD_MNEM_ENG,COM_PROD_MNEM_FRE,COM_PROD_DESC_ENG,"
                + "COM_PROD_DESC_FRE,COM_PROD_LONG_DESC_ENG,COM_PROD_LONG_DESC_FRE,CRC_TRND_RPT_CAT,COMMISSION_LEVEL,CAC_TYPE_CD,ACC_REPORT_IND,''IAS-UNIVERIS'',TO_DATE(SYSTIMESTAMP())"
                + " FROM  DB_IAW_" + ENV + "_stg_pocia.IAS_UNIVERIS_POCIA.S_COM_PROD";
   
sql_statement = snowflake.createStatement(
          {
          sqlText: ins_query
          });
 result_scan = sql_statement.execute(); 

';
create or replace schema DB_IAW_DEV_STG.INVESTIA;

create or replace TRANSIENT TABLE DB_IAW_DEV_STG.INVESTIA.ACCOUNT_HOLDER (
  HK_HUB VARCHAR(64) COMMENT 'Hash key for the Hub',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  IVR_SYSID NUMBER(38,0) COMMENT 'Unique system generated code for investor identification',
  REP_SYSID NUMBER(38,0) COMMENT 'Rep SYSID, to reference with the Advisor data',
  RECIPIENT_DESC_ENG VARCHAR(30) COMMENT 'Investor type description English(Individual, Joint WROS, etc)',
  RECIPIENT_DESC_FRE VARCHAR(50) COMMENT 'Investor type description French(Individuel, CADDS, etc)',
  CORP_CD VARCHAR(30) COMMENT 'Wether it is corporate',
  IVR_ST_NAME_ENG VARCHAR(40) COMMENT 'Investor status description English(Active, Closed, etc)',
  IVR_ST_NAME_FRE VARCHAR(40) COMMENT 'Investor status description French (Actif, Fermé, etc)',
  IVR_REG_2 VARCHAR(80) COMMENT 'Investor Other/Corporate name',
  LANG_CD VARCHAR(1) COMMENT 'Investor language code for English or French reference on S_LANG',
  IVR_RES_CD VARCHAR(18) COMMENT 'Investor residence code—if Canadian name of the province',
  IVR_SETUP_DT TIMESTAMP_NTZ(9) COMMENT 'Date on which this record was set up',
  IVR_STOP_DT TIMESTAMP_NTZ(9) COMMENT 'Date of closing the account',
  IVR_FRGN_CTNT BOOLEAN COMMENT 'Check for foreign content',
  IVR_HOLD_MAIL BOOLEAN COMMENT 'Check for holding mail',
  IVR_INC_ADR BOOLEAN COMMENT 'Check for incomplete address',
  IVR_STMT_FREQ VARCHAR(1) COMMENT 'Statement frequency reference on S_FRENQUENCY',
  IVR_STMT_TYPE VARCHAR(2) COMMENT 'Statement type',
  IVR_STMT_DT TIMESTAMP_NTZ(9) COMMENT 'Statement date',
  IVR_OLD_DLR VARCHAR(5) COMMENT 'Previous dealer',
  SALARY_DESC VARCHAR(40) COMMENT 'Client income segment',
  IVR_KYC_DT TIMESTAMP_NTZ(9) COMMENT 'Date KYC information keyed in',
  IVR_PRIM_BDT DATE COMMENT 'Date of birth is not corporate',
  CREATE_DT DATE COMMENT 'Create Date'
);
create or replace TABLE DB_IAW_DEV_STG.INVESTIA.DUMP_TABLE (
  BASE_STR VARCHAR(15),
  BASE_STR2 VARCHAR(15)
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.INVESTIA.REF_MASTER_KPI_DATA_INVESTIA (
  HK_HUB VARCHAR(40) COMMENT ' Hash key for the Hub ',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT ' Start Date of the image/version ',
  MD_HASHDIFF VARCHAR(40) COMMENT ' Represents the whole set of hashed attributes to be historized for an occurrence ',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT ' Creation Date Time of the occurrence ',
  MD_SOURCE VARCHAR(1000) COMMENT ' Represents the source system, file, etc. of the instance ',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT ' Source system ',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT ' Extraction date of the occurrence ',
  KPI_DATE TIMESTAMP_NTZ(9) COMMENT ' KPI Date ',
  NO_CLIENT_ID NUMBER(20,4) COMMENT ' # Client ID ',
  E_DELIVERY NUMBER(20,4) COMMENT ' E-delivery ',
  E_DELIVERY_PCT NUMBER(20,4) COMMENT ' % E-delivery ',
  E_DELIVERY_TARGET_PCT NUMBER(20,4) COMMENT ' % E-delivery Target ',
  PORTAL_REGISTRATION NUMBER(20,4) COMMENT ' Portal Registration ',
  PORTAL_REGISTRATION_PCT NUMBER(20,4) COMMENT ' % Portal Registration ',
  PORTAL_REGISTRATION_TARGET NUMBER(20,4) COMMENT ' Portal Registration Target ',
  FTE NUMBER(20,4) COMMENT ' FTE ',
  CLIENTS_BY_FTE NUMBER(20,4) COMMENT ' Clients by FTE ',
  CLIENTS_BY_FTE_TARGET NUMBER(20,4) COMMENT ' Clients by FTE Target ',
  NO_OF_ACCOUNTS NUMBER(20,4) COMMENT ' No of accounts ',
  ACCOUNTS_BY_FTE NUMBER(20,4) COMMENT ' Accounts by FTE ',
  ACTUAL_YTD_EXPENSES NUMBER(20,4) COMMENT ' Actual YTD Expenses ',
  ACTUAL_YTD_REVENUES NUMBER(20,4) COMMENT ' Actual YTD Revenues ',
  EFFICIENCY_RATIO NUMBER(20,4) COMMENT ' Efficiency Ratio ',
  YTD_EXPENSES_TARGET NUMBER(20,4) COMMENT ' YTD Expenses Taregt ',
  YTD_REVENUES_TARGET NUMBER(20,4) COMMENT ' YTD Revenues Target ',
  EFFICIENCY_RATIO_TARGET NUMBER(20,4) COMMENT ' Efficiency Ratio Target ',
  AUA_IN_NOMINEE NUMBER(20,4) COMMENT ' AUA in Nominee ',
  AUA_IN_CLIENT_NAME NUMBER(20,4) COMMENT ' AUA in Client Name ',
  NO_OF_RPAS_IMPLEMENTED NUMBER(20,4) COMMENT ' # of RPAs implemented ',
  HOURS_SAVED_DUE_TO_RPAS NUMBER(20,4) COMMENT ' Hours Saved due to RPAs ',
  CONTINUOUS_IMPROVEMENT_QUICK_WINS NUMBER(20,4) COMMENT ' Continuous improvement/quick wins ',
  TOTAL_ASSETS NUMBER(20,4) COMMENT ' Total Assets  ',
  ORGANIC_GROWTH NUMBER(20,4) COMMENT ' Organic Growth  ',
  TOTAL_REVENUE NUMBER(20,4) COMMENT ' Total Revenue  ',
  TOTAL_REVENUE_TARGET NUMBER(20,4) COMMENT ' Total Revenue Target  ',
  RECRUITING NUMBER(20,4) COMMENT ' Recruiting  ',
  TERMINATED_ADVISORS NUMBER(20,4) COMMENT ' Terminated Advisors  '
);
create or replace view DB_IAW_DEV_STG.INVESTIA.VW_ELT_SOURCES(
  TRANSF_NAME,
  SRC_ENTITY_FULLNAME,
  SRC_LABEL,
  MD_START_VERSION,
  MD_START_DATE,
  MD_HASH_NAT_KEYS,
  MD_HASHDIFF_TYPE2,
  MD_CREATION_DT,
  MD_CREATION_AUDIT_ID,
  MD_USER_ID,
  MD_OWNER,
  SRC_BRIEF_DESCRIPTION
) as

SELECT  tr.content:"name"::string AS transf_name,

src.value:"fullname"::STRING AS src_entity_fullname,
src.value:"label"::STRING AS src_label,

tr.content:"version"."version name"::string AS md_start_version,
tr.content:"version"."build date"::string AS md_start_date,
SHA1(UPPER(CONCAT(  COALESCE(TRIM(transf_name), '#NULL#')
          , '|' , COALESCE(TRIM(src_entity_fullname), '#NULL#')
          , '|' , COALESCE(TRIM(src_label), '#NULL#')
          ))) AS md_hash_nat_keys,
SHA1(UPPER(CONCAT(  'GENELT'
          , '|' , COALESCE(TRIM(''), '#NULL#')
          ))) AS md_hashdiff_type2,
CURRENT_TIMESTAMP() AS md_creation_dt,
'@AUDIT_ID@' AS md_creation_audit_id,
CURRENT_USER() AS md_user_id,
'GENELT' AS md_owner,
'' AS src_brief_description
FROM DB_IAW_DEV_USECASE_STAGING.TOOLS_GENELT.TRANSFORMATIONS AS tr,
LATERAL FLATTEN (INPUT => tr.CONTENT, PATH => '"sources"') src;
create or replace view DB_IAW_DEV_STG.INVESTIA.VW_ORGANIC_GROWTH_EXCEPTIONS_IAPW(
  HK_HUB,
  MD_START_DT,
  MD_SOURCE,
  SOURCE_MASTER_CODE,
  DESTINATION_MASTER_CODE,
  START_DATE,
  END_DATE,
  SHARE_PCT,
  MD_ACTIVE
) as
SELECT
  *
FROM
  (
  SELECT
    h.HK_HUB,
    s.MD_START_DT,
    s.MD_SOURCE,
    h.SOURCE_MASTER_CODE,
    h.DESTINATION_MASTER_CODE,
    h.START_DATE,
    s.END_DATE,
    s.SHARE_PCT,
    s.MD_ACTIVE
  FROM
    DB_IAW_DEV_DWH.STEWARDSHIP_RDV.REF_ORGANIC_GROWTH_EXCEPTIONS h
  INNER JOIN DB_IAW_DEV_DWH.STEWARDSHIP_RDV.SAT_REF_ORGANIC_GROWTH_EXCEPTIONS_IAPW s 
ON
    s.HK_HUB = h.HK_HUB
  WHERE
    s.MD_SRC_SYSTEM = 'STEWARDSHIP'
QUALIFY ROW_NUMBER() OVER (PARTITION BY s.HK_HUB
  ORDER BY
    s.MD_START_DT DESC ) = 1
)
WHERE
  MD_ACTIVE = 'A'
ORDER BY SOURCE_MASTER_CODE;
create or replace view DB_IAW_DEV_STG.INVESTIA.VW_ORGANIC_GROWTH_EXCLUSIONS_IAPW(
  HK_HUB,
  OG_MD_START_DT,
  OG_MD_SOURCE,
  SOURCE_MASTER_CODE,
  DESTINATION_MASTER_CODE,
  START_DATE,
  END_DATE,
  SHARE_PCT,
  MD_ACTIVE
) as
SELECT a.HK_HUB,a.MD_START_DT as og_MD_START_DT,a.MD_SOURCE as og_MD_SOURCE,a.SOURCE_MASTER_CODE,a.DESTINATION_MASTER_CODE,a.START_DATE,a.END_DATE,a.SHARE_PCT,a.MD_ACTIVE
FROM DB_IAW_DEV_DWH.STEWARDSHIP_RDV.VW_ORGANIC_GROWTH_EXCEPTIONS_IAPW A FULL OUTER JOIN 
DB_IAW_DEV_DWH.SHARED_BDV.VW_IAS_RRCODE_MASTERCODE_TRANS b 
ON A.SOURCE_MASTER_CODE =b.A_C_REPRESENTATIVE AND A.DESTINATION_MASTER_CODE =b.TOREPID 
WHERE b.A_C_REPRESENTATIVE IS NULL AND b.TOREPID IS NULL AND a.MD_START_DT BETWEEN a.START_DATE AND a.END_DATE;
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.INVESTIA.CSV_PIPE
  FIELD_DELIMITER = '|'
  VALIDATE_UTF8 = FALSE
;
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.INVESTIA.PIPE_UTF16
  TYPE = csv
  FIELD_DELIMITER = '|'
  ESCAPE = '\\'
;
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA."DB_IAWT_DEV_DWH.TRANSACTIONS_BDV.SP_CONV_LOADBDV_RDV_TRANSACTIONS_INVESTIA_UNIVERIS_TO_BDV_WT_LINK_FINANCIAL_TRANSACTION_INVESTIA_UNIVERIS"("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAWT_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_INVESTIA_UNIVERIS WHERE 1=1'';
INS_INSERT := ''
INSERT INTO DB_IAWT_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_INVESTIA_UNIVERIS (  
HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER
,HK_HUB_PARTY_ROLE_ADVISOR  
,HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES 
,HK_HUB_INVESTMENT_PRODUCT_TYPE   
,HK_HUB_CONTRACT  
,MD_START_DT    
,MD_CREATION_DT 
,MD_SOURCE    
,MD_SRC_SYSTEM  
,MD_EXTRACT_DT  
,TRANSACTION_ID   
,UNIVERIS_CLIENT_ID 
,MASTER_CODE  
,UNIVERIS_PLAN_ID
,INVESTMENT_PRODUCT_ID  
,PLN_MNEM   
,TRADE_DATE   
,GROSS_AMOUNT   
,TRANSACTION_TYPE   
,ORD_TRANSACTION_TYPE   
,CASH_FLOW  
,CASH_FLOW_TYPE 
,ADMINISTRATORY_TYPE )
SELECT
  sbdv.HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER 
  ,bdv02.HK_HUB_PARTY_ROLE_ADVISOR  
  ,sbdv.HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES  
  ,trdv.HK_HUB_INVESTMENT_PRODUCT_TYPE  
  ,trdv.HK_HUB_CONTRACT 
  ,TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD'''')  
  ,CURRENT_TIMESTAMP
  ,rdv3.MD_SOURCE 
  ,trdv.MD_SRC_SYSTEM 
  ,rdv3.MD_EXTRACT_DT 
  ,trdv.TRANSACTION_ID  
  ,trdv.UNIVERIS_CLIENT_ID
  ,bdv02.MASTER_CODE  
  ,trdv.UNIVERIS_PLAN_ID  
  ,trdv.INVESTMENT_PRODUCT_ID 
  ,sbdv.PLN_MNEM  
  ,rdv3.TRADE_DT  
  ,rdv3.TRX_GROSS* (CASE WHEN bdv02.COMMISSIONPCT IS NULL THEN 1 ELSE bdv02.COMMISSIONPCT/100 END)
  ,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_TRANSACTION_TYPE_001(rdv3.SPR_CTGY,rdv3.TRX_MNEM_ENG)[''''o_TRANSACTION_TYPE'''']
  ,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_TRANSACTION_TYPE_001(rdv3.SPR_CTGY,rdv3.TRX_MNEM_ENG)[''''o_TRANSACTION_TYPE''''] 
  ,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_CASH_FLOW_002(rdv3.TRX_MNEM_ENG)
  ,BUSINESS_RULES.UDF_CONV_BR_UNIVERIS_TRANSACTIONS_CASH_FLOW_003((rdv3.TRX_MNEM_ENG),(rdv3.TRX_GROSS* (CASE WHEN bdv02.COMMISSIONPCT IS NULL THEN 1 ELSE bdv02.COMMISSIONPCT/100 END)))
  ,bdv04.ADMINISTRATOR_TYPE
  FROM (
    SELECT *
      FROM DB_IAWT_''||ENV||''_DWH.TRANSACTIONS_RDV.SAT_LINK_FINANCIAL_TRANSACTION_RR_INVESTIA_UNIVERIS WHERE MD_START_DT = TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''')  AND MD_ACTIVE = ''''A'''' )rdv3
    JOIN (SELECT * FROM DB_IAWT_''||ENV||''_DWH.TRANSACTIONS_RDV.LINK_FINANCIAL_TRANSACTION_RR WHERE  MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''')trdv 
    ON rdv3.HK_LINK = trdv.HK_LINK
    LEFT JOIN
    (
      SELECT rdv2.HK_HUB_CONTRACT, srdv3.MD_ACTIVE 
      FROM (
        SELECT *
        FROM (SELECT * FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''')) rdv2
        JOIN DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS srdv3 ON srdv3.HK_LINK = rdv2.HK_LINK
      JOIN ( 
        SELECT *
        FROM (
          SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB_CONTRACT ORDER BY MD_START_DT DESC) RN 
            FROM (SELECT * FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.LINK_INVESTMENT_CONTRACT_RR rdv2 
              JOIN DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_LINK_INVESTMENT_CONTRACT_INVESTIA_UNIVERIS srdv3 
        ON srdv3.HK_LINK = rdv2.HK_LINK WHERE rdv2.MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''')) SATHUB WHERE SATHUB.RN = 1 AND SATHUB.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') 
        )SATHUB0 ON rdv2.HK_HUB_CONTRACT = SATHUB0.HK_HUB_CONTRACT AND srdv3.MD_START_DT = SATHUB0.MD_START_DT
    )bdv0 ON bdv0.HK_HUB_CONTRACT = trdv.HK_HUB_CONTRACT  
    LEFT JOIN
    (
      SELECT rdv.HK_HUB, rdv.RR_CD, srdv2.REP_SYSID, srdv2.MD_ACTIVE
      FROM (
        SELECT *
        FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_INVESTIA_UNIVERIS) srdv2
      JOIN (
        SELECT *
        FROM (
          SELECT *
            ,ROW_NUMBER() OVER (PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
              ) RN1
          FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_REGISTERED_REPRESENTATIVE_INVESTIA_UNIVERIS) SATHUB1
        WHERE SATHUB1.RN1 = 1 AND SATHUB1.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') 
        ) rdv2lv ON rdv2lv.HK_HUB = srdv2.HK_HUB
      JOIN (SELECT * FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.HUB_REGISTERED_REPRESENTATIVE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''')rdv ON rdv.HK_HUB = srdv2.HK_HUB WHERE srdv2.MD_ACTIVE = ''''A''''
    )bdv01 ON rdv3.REP_SYSID = bdv01.REP_SYSID
    LEFT JOIN
    (
      SELECT bdv.HK_HUB_REGISTERED_REPRESENTATIVE, bdv.HK_HUB_PARTY_ROLE_ADVISOR, bdv.MASTER_CODE, bdv2.COMMISSIONPCT
      FROM (
        SELECT *
        FROM (SELECT * FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS''''
        ))bdv2
      JOIN (
        SELECT *
        FROM (
          SELECT *
            ,ROW_NUMBER() OVER (
              PARTITION BY HK_LINK ORDER BY MD_START_DT DESC
              ) RN2
          FROM (SELECT * FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.SAT_LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS''''
          )) SATHUB2
        WHERE SATHUB2.RN2 = 1 AND SATHUB2.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') 
        ) ssbdv4 ON ssbdv4.HK_LINK = bdv2.HK_LINK 
      JOIN (SELECT * FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.LINK_PARTY_RELATIONSHIP_COMMISSION_SHARE WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''') bdv ON bdv.HK_LINK =bdv2.HK_LINK WHERE bdv2.MD_ACTIVE = ''''A''''
    )bdv02  ON bdv01.HK_HUB = bdv02.HK_HUB_REGISTERED_REPRESENTATIVE
    LEFT JOIN
    (
      SELECT srdv.HK_HUB,srdv.ADMINISTRATOR_TYPE
      FROM (
        SELECT *
        FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_INVESTIA_UNIVERIS) srdv
      JOIN (
        SELECT *
        FROM (
          SELECT *
            ,ROW_NUMBER() OVER (
              PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
              ) RN3
          FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_CONTRACT_INVESTIA_UNIVERIS
          ) SATHUB3
        WHERE SATHUB3.RN3 = 1 AND SATHUB3.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') 
        ) ssbdv5 ON ssbdv5.HK_HUB = srdv.HK_HUB WHERE ssbdv5.MD_ACTIVE = ''''A''''
    )bdv04 ON trdv.HK_HUB_CONTRACT = bdv04.HK_HUB
    LEFT JOIN
    (
      SELECT rdv4.HK_HUB, rdv4.SYMBOL
      FROM (
        SELECT *
        FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_INVESTIA_UNIVERIS
        ) rdv4
      JOIN (
        SELECT *
        FROM (
          SELECT *
            ,ROW_NUMBER() OVER (
              PARTITION BY HK_HUB ORDER BY MD_START_DT DESC
              ) RN4
          FROM DB_IAWT_''||ENV||''_DWH.SHARED_RDV.SAT_INVESTMENT_PRODUCT_TYPE_INVESTIA_UNIVERIS
          ) SATHUB4
        WHERE SATHUB4.RN4 = 1 AND SATHUB4.MD_START_DT <= TO_DATE(''||i_DATA_START_DATE||'', ''''YYYY-MM-DD'''') 
        ) ssbdv6 ON ssbdv6.HK_HUB = rdv4.HK_HUB WHERE ssbdv6.MD_ACTIVE = ''''A'''' 
    )bdv06 ON trdv.HK_HUB_INVESTMENT_PRODUCT_TYPE = bdv06.HK_HUB
    LEFT JOIN (SELECT * FROM DB_IAWT_''||ENV||''_DWH.SHARED_BDV.LINK_INVESTMENT_CONTRACT WHERE MD_SRC_SYSTEM = ''''INVESTIA-UNIVERIS'''') sbdv ON sbdv.HK_HUB_CONTRACT = trdv.HK_HUB_CONTRACT AND sbdv.HK_HUB_PARTY_ROLE_ADVISOR = bdv02.HK_HUB_PARTY_ROLE_ADVISOR
    WHERE rdv3.SPR_CTGY IN (''''PUR'''', ''''PAC'''', ''''RED'''', ''''AWD'''', ''''SWI'''', ''''SWO'''', ''''TIN'''', ''''TOT'''', ''''XIN'''', ''''XOT'''') AND bdv06.SYMBOL NOT IN (''''MRC001'''', ''''IAAFCCA'''', ''''INVCCA'''') 
    AND
    bdv0.MD_ACTIVE = ''''A''''        
             '';
INS_UPDATE :='' UPDATE DB_IAWT_''||ENV||''_DWH.TRANSACTIONS_BDV.WT_LINK_FINANCIAL_TRANSACTION_INVESTIA_UNIVERIS
SET 
  HK_LINK=
  SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , 
  COALESCE(TRIM(TRANSACTION_ID), ''''#NULL#''''), ''''|'''' , 
  COALESCE(TRIM(UNIVERIS_CLIENT_ID), ''''#NULL#''''), ''''|'''' , 
  COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' , 
  ''''#NULL#'''', ''''|'''',  -- CONTRACT_ID
  COALESCE(TRIM(UNIVERIS_PLAN_ID), ''''#NULL#''''), ''''|'''',
  COALESCE(TRIM(INVESTMENT_PRODUCT_ID), ''''#NULL#''''), ''''|'''' ,  
  COALESCE(TRIM(PLN_MNEM),''''#NULL#''''), ''''|'''' , 
  ''''#NULL#'''', ''''|'''', -- ACCOUNT_RAP_CODE
  ''''#NULL#'''', ''''|'''' , -- RETAIL_PLAN
  ''''#NULL#'''' -- ASC_1_RESP_PLAN_TYPES
  ))),
  HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES = COALESCE(HK_HUB_INVESTMENT_SAVING_PROGRAM_TYPES,''''0''''),
  HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER= COALESCE(HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,''''0''''),
  HK_HUB_PARTY_ROLE_ADVISOR= COALESCE(HK_HUB_PARTY_ROLE_ADVISOR,''''0''''),
  HK_HUB_INVESTMENT_PRODUCT_TYPE= COALESCE(HK_HUB_INVESTMENT_PRODUCT_TYPE,''''0''''),
  HK_HUB_CONTRACT= COALESCE(HK_HUB_CONTRACT,''''0'''')
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END

';
CREATE OR REPLACE FUNCTION DB_IAW_DEV_STG.INVESTIA.SIMPLE_TABLE_FUNCTION()
RETURNS TABLE ("X" NUMBER(38,0), "Y" NUMBER(38,0))
LANGUAGE SQL
AS '
    select 1, 2
    union all
    select 3, 4
  ';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA.SP_CONV_LOADSTG_PSA_IAPW_TO_STG_MASTER_KPI_DATA_CLARINGTON("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_CLARINGTON WHERE 1=1'';
INS_PRE_COPY := ''

COPY INTO EXTERNAL_KPI.REF_MASTER_KPI_DATA_CLARINGTON
(
MD_START_DT,
MD_SOURCE,
MD_EXTRACT_DT,
KPI_DATE,
TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_MF,
TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_GIF,
FTE,
TOTAL_TRANSACTIONS_MF,
TOTAL_TRANSACTIONS_GIF,
TOTAL_TRANSACTIONS_FTE_MF,
TOTAL_TRANSACTIONS_FTE_GIF,
NO_OF_ACCOUNTS,
ACCOUNTS_FTE,
ACCOUNTS_FTE_TARGET,
YOY_NEW_ACCOUNTS_CLIENT_NAME,
YOY_NEW_ACCOUNTS_CLIENT_NOMINEE,
TOTAL_ACCOUNTS_IN_NOMINEE,
EXPENSES,
REVENUES,
EFFICIENCY_RATIO,
EXPENSES_TARGET,
REVENUE_TARGET,
EFFICIENCY_RATIO_TARGET,
TOTAL_ASSETS,
AFFILIATE_PENETRATION_IIROC,
AFFILIATE_PENETRATION_IIROC_TARGET,
AFFILIATE_PENETRATION_MFDA,
AFFILIATE_PENETRATION_MFDA_TARGET,
GROSS_MARGIN,
GROSS_MARGIN_TARGET,
NET_SALES
)
FROM
(
SELECT
TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,
t.$1,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11,
t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20, t.$21, t.$22,
t.$23, t.$24, t.$25, t.$26, t.$27, t.$28
FROM
@DATALAKE.''||IO_PATH||'' t
) pattern = ''''.*MASTER_KPI_DATA_CLARINGTON__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.CSV_UTF8)
'';
INS_UPDATE := ''
  UPDATE DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_CLARINGTON  
  SET
  HK_HUB=
  SHA1(COALESCE(TRIM("KPI_DATE"), ''''#NULL#'''')),
  MD_HASHDIFF=
  SHA1(CONCAT(
  COALESCE(TO_VARCHAR(TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_MF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_GIF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(FTE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_TRANSACTIONS_MF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_TRANSACTIONS_GIF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_TRANSACTIONS_FTE_MF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_TRANSACTIONS_FTE_GIF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NO_OF_ACCOUNTS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(ACCOUNTS_FTE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(ACCOUNTS_FTE_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(YOY_NEW_ACCOUNTS_CLIENT_NAME) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(YOY_NEW_ACCOUNTS_CLIENT_NOMINEE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_ACCOUNTS_IN_NOMINEE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(EXPENSES) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(REVENUES) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(EFFICIENCY_RATIO) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(EXPENSES_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(REVENUE_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(EFFICIENCY_RATIO_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_ASSETS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AFFILIATE_PENETRATION_IIROC) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AFFILIATE_PENETRATION_IIROC_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AFFILIATE_PENETRATION_MFDA) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AFFILIATE_PENETRATION_MFDA_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(GROSS_MARGIN) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(GROSS_MARGIN_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NET_SALES) , ''''#NULL#'''')
)),
MD_CREATION_DT=systimestamp(),
MD_SRC_SYSTEM =''''CLARINGTON_MONTHLY_KPI''''
Where 1=1'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_COPY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA.SP_STG_COUNT("JOB_NAME" VARCHAR(16777216), "DATA_START_DT" VARCHAR(16777216), "ENV" VARCHAR(16777216), "TBL_SCHEMA" VARCHAR(16777216), "TABLE_NAME" VARCHAR(16777216))
RETURNS VARCHAR(10000)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var cmd =  "SELECT COUNT(*) ROW_CNT FROM DB_IAWT_"+ENV+"_STG."+TBL_SCHEMA+"."+TABLE_NAME+ " WHERE MD_EXTRACT_DT  IS NOT NULL";
var st = snowflake.createStatement( { sqlText: cmd } );
var res = st.execute();
var op=''''
while (res.next())  {
 op= res.getColumnValue(1);
 var cmd_upd = "UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET JOB_ROW_COUNT =" + op + " WHERE JOB_NAME = ''" + JOB_NAME + "'' AND DATA_START_DT = ''" + DATA_START_DT + "''";
   var st_upd = snowflake.createStatement( { sqlText: cmd_upd } );
   st_upd.execute();
 return op
}
;
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA.USP_AUDIT_START_ONDEMAND_JOB("JOB_NAME" VARCHAR(16777216), "DATA_START_DT" VARCHAR(10), "JOB_AUDIT_ID" VARCHAR(16777216))
RETURNS VARCHAR(100)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
// Update status command
var cmdUpdStatus = "UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET UPDATE_JOB_AUDIT_ID=''"+JOB_AUDIT_ID+"'', JOB_STATUS=";
var cmdUpdStatusWhereClause = " WHERE JOB_NAME =''" + JOB_NAME + "'' AND DATA_START_DT = ''"+DATA_START_DT+"''";
// Check last execution
var cmd = "SELECT TOP 1 aje.DATA_START_DT::VARCHAR, aje.JOB_STATUS, aje.DATA_NEXT_START_DT::VARCHAR FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''" + JOB_NAME + "'' AND aje.JOB_STATUS IS NOT NULL AND aje.JOB_STATUS<>'''' AND aje.DATA_START_DT <= ''"+DATA_START_DT+"'' ORDER BY aje.DATA_START_DT DESC";
var st = snowflake.createStatement( { sqlText: cmd } );
var res = st.execute();
var stUpdStatus;
var resUpdStatus;
var InsCmd = "SELECT DISTINCT JOB_NAME FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''" + JOB_NAME + "'' AND aje.DATA_START_DT = ''" + DATA_START_DT +"''";
var InsSt = snowflake.createStatement( { sqlText: InsCmd } );
var InsRes = InsSt.execute();

try
{   
if (InsRes.next())
{
    // A previous execution is found
    if (res.next())
    {
        var dtLastJobStart = res.getColumnValue(1);
        var strLastJobStatus = res.getColumnValue(2);
        var dtLastJobNextStart = res.getColumnValue(3);
        // Job is executed before for the same date but without success 
        // => It is correct to re-execute it  
        if (dtLastJobStart == DATA_START_DT && strLastJobStatus != "SUCCESS" && strLastJobStatus != "IN PROGRESS")
        {
            cmdUpdStatus += "''IN PROGRESS'', JOB_ACTION_RESULT=''SUCCESS'',  JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''" + JOB_AUDIT_ID + "('' || CURRENT_TIMESTAMP() || '') : Job restart. ''" + cmdUpdStatusWhereClause; 
            stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
            resUpdStatus = stUpdStatus.execute();
            return "IN PROGRESS";
        }
        else
        {
            // Job is not executed before with the same date
            if (dtLastJobStart < DATA_START_DT) 
            {
                //Check if the execution next start date is not skipped
                if (dtLastJobNextStart != DATA_START_DT)
                {
                    cmdUpdStatus += "'''', JOB_ACTION_RESULT=''ERROR_06'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''"+JOB_AUDIT_ID+"<'' || CURRENT_TIMESTAMP() || ''> ERROR_06 : The execution of "+dtLastJobNextStart +" image was skipped. ''" + cmdUpdStatusWhereClause;
                    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
                    resUpdStatus = stUpdStatus.execute();
                    return "ERROR_06";
                }
                // The last execution was successful
                // => Execute for current date
                else if (strLastJobStatus == "SUCCESS")
                {
                    cmdUpdStatus += "''IN PROGRESS'', JOB_ACTION_RESULT=''SUCCESS'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''"+JOB_AUDIT_ID+"<'' || CURRENT_TIMESTAMP() || ''> : Job start. ''" + cmdUpdStatusWhereClause;
                    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
                    resUpdStatus = stUpdStatus.execute();
                    return "IN PROGRESS";
                }
                // The last execution is not successful or not done
                // => Error
                else
                {
                    cmdUpdStatus += "'''', JOB_ACTION_RESULT=''ERROR_01'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''"+JOB_AUDIT_ID+"<'' || CURRENT_TIMESTAMP() || ''> ERROR_01 : The previous execution is not done or not successful. ''" + cmdUpdStatusWhereClause;
                    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
                    resUpdStatus = stUpdStatus.execute();
                    return "ERROR_01";
                }
            }
            // Already successfully executed or executing for this date
            // => Error
            else
            {
                // Already successfully executed
                if (strLastJobStatus == "SUCCESS")
                {
                    cmdUpdStatus += "''SUCCESS'', JOB_ACTION_RESULT=''ERROR_02'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''"+JOB_AUDIT_ID+"<'' || CURRENT_TIMESTAMP() || ''> ERROR_02 : Trying to re-execute a successfully executed job. ''" + cmdUpdStatusWhereClause;
                    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
                    resUpdStatus = stUpdStatus.execute();
                    return "ERROR_02";
                }
                // Already executing for this date (IN PROGRESS)
                else
                {
                    cmdUpdStatus += "''"+strLastJobStatus+"'', JOB_ACTION_RESULT=''ERROR_03'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''"+JOB_AUDIT_ID+"<'' || CURRENT_TIMESTAMP() || ''> ERROR_03 : Trying to execute a running Job. ''"+ cmdUpdStatusWhereClause;
                    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
                    resUpdStatus = stUpdStatus.execute();
                    return "ERROR_03";
                }   
            }   
        }   
    }
    // First execution of the job : no previous job
    else
    {
        cmdUpdStatus += "''IN PROGRESS'', JOB_ACTION_RESULT=''SUCCESS'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''"+JOB_AUDIT_ID+"<'' || CURRENT_TIMESTAMP() || ''> : Job first start. ''" + cmdUpdStatusWhereClause;
        stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
        resUpdStatus = stUpdStatus.execute();
        return "IN PROGRESS";
    }
}
else
{
  return "ERROR_07";
}
}
// Technical error
catch(er)
{
    cmdUpdStatus = "UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET UPDATE_JOB_AUDIT_ID=''"+JOB_AUDIT_ID+"'', JOB_STATUS=";
    cmdUpdStatus += "''ERROR'', JOB_ACTION_RESULT=''ERROR_04'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''"+JOB_AUDIT_ID+"<'' || CURRENT_TIMESTAMP() || ''> ERROR_04 : technical error :"+er+". ''"+ cmdUpdStatusWhereClause;
    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
    resUpdStatus = stUpdStatus.execute();
    return "ERROR_04";  
return er;
}
cmdUpdStatus += "''ERROR'', JOB_ACTION_RESULT=''ERROR_05'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || ''"+JOB_AUDIT_ID+"<'' || CURRENT_TIMESTAMP() || ''>ERROR_05 : Unknown error. ''"+ cmdUpdStatusWhereClause;
stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
resUpdStatus = stUpdStatus.execute();
return "ERROR_05";  
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA.USP_DLY_BATCH_RECOCILE_CHECK("NAME" VARCHAR(1000), "DATA_START_DT" VARCHAR(20), "AUDIT_ID" VARCHAR(1000), "USE_PATTERN" VARCHAR(10))
RETURNS VARCHAR(100)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

//Stage 0: Check the Arguments Signature are Valid for the process to continue.
if ( NAME.length <= 0 || DATA_START_DT.length <= 0 )
{
return 0;
}

//Stage 1: Compose the string based on Use Pattern
  var ValCmd;
  if (USE_PATTERN==null)
  {
  ValCmd = " SELECT NAME, DESCRIPTION, QUERY,  CURRENT_DATABASE() FROM DB_IAW_DEV_DM.VALIDATIONS.RECONCILE_RULE_ENGINE WHERE NAME = ''" + NAME + "'' AND MD_END_DT IS NULL ";
  }
  else
  {
  ValCmd = " SELECT NAME, DESCRIPTION, QUERY,  CURRENT_DATABASE() FROM DB_IAW_DEV_DM.VALIDATIONS.RECONCILE_RULE_ENGINE WHERE NAME LIKE ''%" + USE_PATTERN + "%'' AND MD_END_DT IS NULL ";
  }

//Stage 2: Get the Rule query from the table object.
  var ValSt = snowflake.createStatement( { sqlText: ValCmd } );
  var ValRes = ValSt.execute();
  var name;
  var dbname;
  while (ValRes.next())
  {
    name = ValRes.getColumnValue(1);
    var desc = ValRes.getColumnValue(2);
    var query = ValRes.getColumnValue(3); //Stage 3: Search and replace place holder for Audit and Data Start Date.
      query = query.replace(/@DBNAME@/g, dbname);
      query = query.replace(/@NAME@/g, name);
      query = query.replace(/@DATA_START_DT@/g, DATA_START_DT);
      query = query.replace(/@AUDIT_ID@/g,AUDIT_ID); //Stage 4: Query fetched will be used to be executed for the final results.
    //return query
    var Val2Cmd = query;
    var Val2St = snowflake.createStatement( { sqlText: Val2Cmd } );
    var Val2Res = Val2St.execute();
  }
return 0;
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA.USP_VALIDATION_CHECK("NAME" VARCHAR(1000), "DATA_START_DT" VARCHAR(20), "AUDIT_ID" VARCHAR(1000))
RETURNS VARCHAR(100)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var InsCmd = "SELECT COUNT (0) FROM DB_IAW_DEV_DM.VALIDATIONS.VAL_DEFINITIONS WHERE NAME =''" + NAME + "''";
var InsSt = snowflake.createStatement( { sqlText: InsCmd } );
var InsRes = InsSt.execute();
// throw an error if checking integrity is not applicable (wrong database name)
if ((InsRes == 0))
{
  var error = ''QUERY  for '' + NAME  + '' is not available.'';
  throw error;
}
var i;
var ERROR_MSG = '''';
var queries_dv = [ `SELECT QUERY FROM DB_IAW_DEV_DM.VALIDATIONS.VAL_DEFINITIONS WHERE JOB_NAME =''" + NAME + "''` ];
for (i = 0; i < queries_dv.length; i++) {
    var RESULT_RI_ISSUES = snowflake.createStatement( {sqlText: queries_dv[i] } );
    var FINAL_RESULT = RESULT_RI_ISSUES.execute();
  }
var dec = "VALIDATION CHECK FOR " + NAME + " " + DATA_START_DT + " IS SUCCESSFUL";
return dec ;
  ';
create or replace schema DB_IAW_DEV_STG.INVESTIA_UNIVERIS;

create or replace TABLE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.ACCOUNT_HOLDER (
  HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  IVR_SYSID NUMBER(38,0) COMMENT 'Unique system generated code for investor identification',
  REP_SYSID NUMBER(38,0) COMMENT 'Rep SYSID, to reference with the Advisor data',
  RECIPIENT_DESC_ENG VARCHAR(30) COMMENT 'Investor type description English(Individual, Joint WROS, etc)',
  RECIPIENT_DESC_FRE VARCHAR(50) COMMENT 'Investor type description French(Individuel, CADDS, etc)',
  CORP_CD VARCHAR(30) COMMENT 'Wether it is corporate',
  IVR_ST_NAME_ENG VARCHAR(40) COMMENT 'Investor status description English(Active, Closed, etc)',
  IVR_ST_NAME_FRE VARCHAR(40) COMMENT 'Investor status description French (Actif, Fermé, etc)',
  IVR_REG_2 VARCHAR(80) COMMENT 'Investor Other/Corporate name',
  LANG_CD VARCHAR(1) COMMENT 'Investor language code for English or French reference on S_LANG',
  IVR_RES_CD VARCHAR(18) COMMENT 'Investor residence code—if Canadian name of the province',
  IVR_SETUP_DT TIMESTAMP_NTZ(9) COMMENT 'Date on which this record was set up',
  IVR_STOP_DT TIMESTAMP_NTZ(9) COMMENT 'Date of closing the account',
  IVR_FRGN_CTNT BOOLEAN COMMENT 'Check for foreign content',
  IVR_HOLD_MAIL BOOLEAN COMMENT 'Check for holding mail',
  IVR_INC_ADR BOOLEAN COMMENT 'Check for incomplete address',
  IVR_STMT_FREQ VARCHAR(1) COMMENT 'Statement frequency reference on S_FRENQUENCY',
  IVR_STMT_TYPE VARCHAR(2) COMMENT 'Statement type',
  IVR_STMT_DT TIMESTAMP_NTZ(9) COMMENT 'Statement date',
  IVR_OLD_DLR VARCHAR(5) COMMENT 'Previous dealer',
  SALARY_DESC VARCHAR(40) COMMENT 'Client income segment',
  IVR_KYC_DT TIMESTAMP_NTZ(9) COMMENT 'Date KYC information keyed in',
  IVR_PRIM_BDT DATE COMMENT 'Date of birth is not corporate',
  CREATE_DT DATE COMMENT 'Create Date'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.CONTRACT (
  HK_HUB VARCHAR(40) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  PLN_SYSID NUMBER(38,0) NOT NULL COMMENT 'Unveris ID for plans',
  IVR_SYSID NUMBER(38,0) COMMENT 'Unveris ID for clients',
  PLN_CD VARCHAR(8000) COMMENT 'Univeris plan code : 01, 02,...',
  PLN_STATUS VARCHAR(8000) COMMENT 'Plan status : Active, inactive, closed,...',
  PLN_ADM_CD VARCHAR(8000) COMMENT 'Plan administrator code',
  SETUP_DT TIMESTAMP_NTZ(9) COMMENT 'Plan set up date',
  CLOSE_DT TIMESTAMP_NTZ(9) COMMENT 'Plan close date',
  PEN_JUR_CD VARCHAR(8000),
  FEE_EXMP_IND NUMBER(38,0) COMMENT 'Trustee Fee Exemption Indicator. (Values 1 = ON, 0 = OFF)',
  ADMINISTRATOR_TYPE VARCHAR(8000) COMMENT 'Administrator type (Client Name, Nominee, Intermediary)',
  REP_SYSID NUMBER(38,0) COMMENT 'RR code',
  REP_CD VARCHAR(50) COMMENT 'Registered representative code - RR Code'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.FINANCIAL_TRANSACTIONS (
  HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
  HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  TRX_SYSID NUMBER(38,0) NOT NULL COMMENT 'Transaction System ID',
  IVR_SYSID NUMBER(38,0) COMMENT 'Client ID',
  REP_SYSID NUMBER(38,0) COMMENT 'Representative ID',
  PLN_SYSID NUMBER(38,0) COMMENT 'Plan ID',
  ACT_SYSID NUMBER(38,0) COMMENT 'Holding system ID',
  IVD_SYSID NUMBER(38,0) COMMENT 'Funds numbers ID',
  TRX_STATUS VARCHAR(4) COMMENT 'Transaction status code',
  TRX_ST_DESC_ENG VARCHAR(40) COMMENT 'Transaction status description',
  TRADE_DT TIMESTAMP_NTZ(9) COMMENT 'Trade date',
  MGT_CD VARCHAR(10) COMMENT 'Management company code',
  MGT_NAME_ENG VARCHAR(60) COMMENT 'Management company name',
  DLR_SYSID NUMBER(38,0) COMMENT 'Dealer ID',
  RGN_SYSID NUMBER(38,0) COMMENT 'Region ID',
  BRN_SYSID NUMBER(38,0) COMMENT 'Branch ID',
  TRX_UNIT NUMBER(38,0) COMMENT 'Transaction quantity',
  TRX_PRICE NUMBER(38,0) COMMENT 'Transaction unit price',
  TRX_GROSS NUMBER(29,12) COMMENT 'Transaction gross amount',
  TRX_NET NUMBER(29,12) COMMENT 'Transaction net amount',
  TRX_GROSS_CAD NUMBER(29,12) COMMENT 'Transaction gross amount CAD',
  SPR_FACTOR NUMBER(3,0) COMMENT 'Transaction sign (IN or OUT)',
  CURRENCY_CD VARCHAR(6) COMMENT 'Currency code',
  DLR_CD VARCHAR(10) COMMENT 'Dealer code',
  RGN_CD VARCHAR(10) COMMENT 'Region code',
  BRN_CD VARCHAR(10) COMMENT 'Branch code',
  REP_CD VARCHAR(10) COMMENT 'Representative code',
  PLN_TYPE VARCHAR(4) COMMENT 'Plan Type',
  SPR_CTGY VARCHAR(6) COMMENT 'Transaction category',
  TRX_MNEM_ENG VARCHAR(20) COMMENT 'Transaction mnemonic name',
  REVERSAL_IND NUMBER(1,0) COMMENT 'Transaction reversed indicator'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.HOLDINGS (
  HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
  HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
  MD_SEQ VARCHAR(50) COMMENT 'The value of METADATA$FILE_ROW_NUMBER when loading using INFORMATICA',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  ACT_SYSID NUMBER(38,0) NOT NULL COMMENT 'Holding system ID',
  IVD_SYSID NUMBER(38,0) COMMENT 'Funds numbers ID',
  REP_SYSID NUMBER(38,0) COMMENT 'Advisor ID',
  IVR_SYSID NUMBER(38,0) COMMENT 'Client ID',
  PLN_SYSID NUMBER(38,0) COMMENT 'Plan ID',
  FISCAL_SYSID NUMBER(38,0) COMMENT 'Fiscal ID',
  BAL_DATE TIMESTAMP_NTZ(9) NOT NULL COMMENT 'Balance date',
  MV NUMBER(34,4) COMMENT 'Market value',
  CURRENCY_CD VARCHAR(8000) COMMENT 'Currency code',
  EXCH_DT TIMESTAMP_NTZ(9) COMMENT 'Exchange date',
  EXCH_RATE NUMBER(19,8) COMMENT 'Exchange rate',
  AUA NUMBER(34,4) COMMENT 'AUA',
  PRICE NUMBER(34,4) COMMENT 'Price',
  UNITS FLOAT COMMENT 'Units',
  BV NUMBER(34,4) COMMENT 'Book value',
  ACB NUMBER(34,4) COMMENT 'Adjusted cost based',
  NI_T NUMBER(34,4) COMMENT 'Net invested by trade date (not used)',
  NI_P NUMBER(34,4) COMMENT 'Net invested by process date',
  FREQ_CD VARCHAR(8000) COMMENT 'Frequency code (not used)',
  UNITS_TRD_DT FLOAT COMMENT 'Units calculated by trade date',
  FISCAL_TD_UNITS FLOAT COMMENT 'Units displayed for the fiscal year',
  IVD_LOAD_FLAG VARCHAR(3) COMMENT 'Front-end or back-end load indicator',
  WF_IND NUMBER(38,0)
);
create or replace TABLE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.MARKETPRODUCTS (
  HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  IVD_SYSID NUMBER(38,0) COMMENT 'System generated code to identify records',
  CURRENCY_CD VARCHAR(3) COMMENT 'Currency iso code',
  SYMBOL VARCHAR(20) COMMENT 'Standard code in the industry of mutual funds',
  IVD_ST_DESC_ENG VARCHAR(40) COMMENT 'Product detail status description English (Red/Transfer/Switch,Inactive,Active,Soft Cap,etc.)',
  IVD_ST_DESC_FRE VARCHAR(40) COMMENT 'Product detail status description French (Rachat/Transfert/Échange,Inactif,Actif,FRE:Soft Cap,etc.)',
  IVD_LOAD_DESC_ENG VARCHAR(50) COMMENT 'Product load description (Deferred Sales Charge,No Load,Initial Sales Charge,etc)',
  IVD_LOAD_DESC_FRE VARCHAR(50) COMMENT 'Product load description (Frais de ventes reportés,Sans frais d acquisition,Frais prélevés à l acquisition,etc)',
  IVT_NAME_ENG VARCHAR(60) COMMENT 'Product name in English',
  IVT_NAME_FRE VARCHAR(60) COMMENT 'Product name in French',
  IVT_CD_DESC_ENG VARCHAR(50) COMMENT 'Fund type English (regular, asset allocation)',
  IVT_CD_DESC_FRE VARCHAR(50) COMMENT 'Fund type French (régulier, affectation de l actif)',
  IVT_ST_DESC_ENG VARCHAR(40) COMMENT 'Product status description English (Red/Transfer/Switch,Inactive,Active,Soft Cap,etc.)',
  IVT_ST_DESC_FRE VARCHAR(40) COMMENT 'Product status description French (Rachat/Transfert/Échange,Inactif,Actif,FRE:Soft Cap,etc.)',
  ASSET_CLASS_DESC_ENG VARCHAR(80) COMMENT 'Asset class description English (Canadian Equity, U.S. Money Market, etc)',
  ASSET_CLASS_DESC_FRE VARCHAR(80) COMMENT 'Asset class description French(Actions canadiennes, Marché monétaire américain, etc)',
  ASSET_CTGY_DESC_ENG VARCHAR(80) COMMENT 'Asset category description English(Canadian Fixed Income, US Equity, etc)',
  ASSET_CTGY_DESC_FRE VARCHAR(80) COMMENT 'Asset category description French(Revenu fixe canadien, Actions américaines, etc)',
  IVT_TYPE_DESC_ENG VARCHAR(40) COMMENT 'Product type description English(Mutual Fund, Hedge Fund, etc)',
  IVT_TYPE_DESC_FRE VARCHAR(40) COMMENT 'Product type description French (Fonds communs de placement, Fonds spéculatif, etc)',
  CTGY_DESC_ENG VARCHAR(50) COMMENT 'Product category description English(Mutual Fund, Hedge Fund, etc)',
  CTGY_DESC_FRE VARCHAR(50) COMMENT 'Product category description French (Fonds communs de placement, Fonds spéculatif, etc)',
  GROUP_DESC_ENG VARCHAR(20) COMMENT 'Product group description English(Funds, Bond, etc)',
  GROUP_DESC_FRE VARCHAR(20) COMMENT 'Product group description French(Fonds, Obligations, etc)',
  MGT_CD VARCHAR(4) COMMENT 'Management company code',
  MGT_NAME_ENG VARCHAR(60) COMMENT 'Management company name English',
  MGT_NAME_FRE VARCHAR(60) COMMENT 'Management company name French'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.PLN_SRF (
  HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
  HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  PLN_SRF_SYSID NUMBER(38,0) COMMENT 'Plan SRF ID (main key)',
  PLN_SYSID NUMBER(38,0) COMMENT 'Plan ID (related to PLN)',
  FAS_FILE_NAME VARCHAR(80) COMMENT 'Fundserv File Name',
  FROM_DT TIMESTAMP_NTZ(9) COMMENT 'From date',
  TO_DT TIMESTAMP_NTZ(9) COMMENT 'To date',
  MGT_CD VARCHAR(6) COMMENT 'Management Cie (related to MGT)',
  CURRENCY_CD VARCHAR(6) COMMENT 'Currency Code',
  INCOME_TYPE VARCHAR(8) COMMENT 'Type of Income',
  REP_CODE VARCHAR(10) COMMENT 'Rep Code (related to REP)',
  COM_PYBL FLOAT COMMENT 'Commission Amount',
  EXCH_DT TIMESTAMP_NTZ(9) COMMENT 'Exchange Rate Date',
  EXCH_RATE FLOAT COMMENT 'Exchange Rate',
  LAST_UPD_DT TIMESTAMP_NTZ(9) NOT NULL COMMENT 'Last Update Date',
  USR_SYSID NUMBER(38,0) COMMENT 'User ID (related to SYS_USER_CD)',
  FISCAL_SYSID NUMBER(38,0) COMMENT 'Fiscal ID',
  JUR_CD VARCHAR(6) COMMENT 'Jurisdiction Code',
  ACT_TAX_COLLCTD FLOAT,
  DLR_SYSID NUMBER(38,0) COMMENT 'Deal ID (related to DLR)',
  RGN_SYSID NUMBER(38,0) COMMENT 'Region ID (related to RGN)',
  BRN_SYSID NUMBER(38,0) COMMENT 'Branch ID (related to BRN)',
  REP_SYSID NUMBER(38,0) COMMENT 'Rep ID (related to REP)',
  IVR_SYSID NUMBER(38,0) COMMENT 'Investor (Client) ID (related to IVR)',
  IVD_SYSID NUMBER(38,0) COMMENT 'Product ID (related to IVD link with parent IVT)'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.REF_INVESTMENT_SAVING_PROGRAM_TYPES (
  HK_HUB VARCHAR(40) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  PLN_CD VARCHAR(255) COMMENT 'Plan code',
  PLN_REG NUMBER(38,0) COMMENT 'Plan registration',
  PLN_MNEM VARCHAR(255) COMMENT 'Plan mnemonic code',
  PLN_DESC VARCHAR(255) COMMENT 'Plan mnemonic description',
  PLN_MNEM_F VARCHAR(255) COMMENT 'plan mnemonic code FR',
  PLN_DESC_F VARCHAR(255) COMMENT 'Plan mnemonic description FR',
  PLN_MNEM_ENG VARCHAR(255) COMMENT 'Plan mnemonic code 2 EN',
  PLN_DESC_ENG VARCHAR(255) COMMENT 'Plan mnemonic description 2 EN',
  PLN_SHORT_DESC_ENG VARCHAR(255) COMMENT 'Plan short description EN',
  PLN_MNEM_FRE VARCHAR(255) COMMENT 'Plan mnemonic code 2 FR',
  PLN_DESC_FRE VARCHAR(255) COMMENT 'Plan mnemonic description 2 FR',
  PLN_SHORT_DESC_FRE VARCHAR(255) COMMENT 'plan short description 2 FR',
  STMT_GROUP_MNEM VARCHAR(255) COMMENT 'mnemonic code grouping'
);
create or replace TABLE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.REF_MASK_PII (
  FIRST_NAME VARCHAR(25),
  LAST_NAME VARCHAR(25),
  EMAIL_ADDRESS VARCHAR(50),
  SIN VARCHAR(25),
  PHONE VARCHAR(25),
  ADDRESS VARCHAR(50),
  CITY VARCHAR(50),
  POSTAL VARCHAR(50),
  COUNTRY VARCHAR(50)
);
create or replace TABLE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.REF_MASK_PII_TRG (
  FIRST_NAME VARCHAR(25),
  LAST_NAME VARCHAR(25),
  EMAIL_ADDRESS VARCHAR(50),
  SIN VARCHAR(25),
  PHONE VARCHAR(25),
  ADDRESS VARCHAR(50),
  CITY VARCHAR(50),
  POSTAL VARCHAR(50),
  COUNTRY VARCHAR(50)
);
create or replace TABLE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.REF_PROVINCE (
  HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  PROV_CD VARCHAR(10) COMMENT 'Province code : QC',
  PROV_DESC VARCHAR(50) COMMENT 'Province Description : Quebec'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.REF_PROVINCE_BAK (
  HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  PROV_CD VARCHAR(10) COMMENT 'Province code : QC',
  PROV_DESC VARCHAR(50) COMMENT 'Province Description : Quebec'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.REGISTERED_REPRESENTATIVE (
  HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  COMPANY_CD VARCHAR(50) COMMENT 'Company code : Wealth',
  COMPANY_NAME VARCHAR(512) COMMENT 'Company name : iA Wealth Management',
  REGULATORY_ORG_CD VARCHAR(50) COMMENT 'Regulatory organisation code : MFDA or IIROC',
  REGULATORY_ORG_NAME VARCHAR(512) COMMENT 'Regulatory organisation name : Mutual Fund Dealers Association',
  DLR_SYSID NUMBER(38,0) COMMENT 'Univeris ID of the dealer',
  DLR_CD VARCHAR(50) COMMENT 'Dealer code : Univeris code for the dealer',
  DLR_NAME_ENG VARCHAR(512) COMMENT 'Dealer name in english : Fundex Investments inc.',
  RGN_SYSID NUMBER(38,0) COMMENT 'Univeris ID for the advisor region',
  RGN_CD VARCHAR(50) COMMENT 'Univeris code for the advisor region',
  RGN_NAME VARCHAR(512) COMMENT 'The advisor region name',
  RGN_MGR VARCHAR(512) COMMENT 'The name of the regional VP',
  BRN_SYSID NUMBER(38,0) COMMENT 'Univeris ID of the advisors branch',
  BRN_CD VARCHAR(50) COMMENT 'Univeris Code for the advisors branch',
  BRN_NAME VARCHAR(512) COMMENT 'The advisor branch name',
  REP_TEAM_CD VARCHAR(50) COMMENT 'The advisor team code',
  REP_TEAM_NAME VARCHAR(512) COMMENT 'The advisor team name',
  REP_SYSID NUMBER(38,0) COMMENT 'Univeris ID of the advisor rep code',
  REP_CD VARCHAR(50) COMMENT 'Advisor rep code',
  REP_CORP_NAME VARCHAR(512) COMMENT 'Corporation name of the advisor',
  REP_LNAME VARCHAR(512) COMMENT 'Advisor last name',
  REP_FNAME VARCHAR(512) COMMENT 'Advisor first name',
  REP_ST_NAME VARCHAR(512) COMMENT 'Advisor status : Active, Terminated,...',
  REP_GRP_RSP VARCHAR(512) COMMENT 'Group RSP indicator',
  PROV_CD VARCHAR(10) COMMENT 'Province Code : In Univeris ',
  REP_TITLE_DESC VARCHAR(100) COMMENT 'Representative title : Title description In Univeris ',
  TERMINATE_DT TIMESTAMP_NTZ(9) COMMENT 'Representative terminated date : In Univeris ',
  CREATE_DT TIMESTAMP_NTZ(9) COMMENT 'Representative Start date : In Univeris '
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.REVENUE_PAYABLE (
  HK_LINK VARCHAR(40) COMMENT 'Hash key for the Link',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
  HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  PAY_SYSID NUMBER(38,0) COMMENT 'Payable ID - Main key',
  PYBL_STATUS VARCHAR(6) COMMENT 'Payable Status',
  EVENT_PROC_SYSID NUMBER(38,0) COMMENT 'Event Procedure ID',
  EVENT_RPT_SYSID NUMBER(38,0) COMMENT 'Event Report ID',
  BEN_SYSID NUMBER(38,0) COMMENT 'Beneficiary ID (related to REP table)',
  REP_SYSID NUMBER(38,0) COMMENT 'Advisor ID (related to REP table)',
  DEAL_SYSID NUMBER(38,0) COMMENT 'Deal ID (related to REP_DEAL link with parent REP table)',
  COM_SYSID NUMBER(38,0) COMMENT 'Comm ID (Related to REP_COM link with parents REP_DEAL, REP)',
  DIST_SYSID NUMBER(38,0) COMMENT 'Payroll Distribution ID (related to REP_PAY_DIST)',
  TRX_SYSID NUMBER(38,0) COMMENT 'Transaction ID (related to TRX)',
  IVR_SYSID NUMBER(38,0) COMMENT 'Investor (Client) ID (related to IVR)',
  PLN_SYSID NUMBER(38,0) COMMENT 'Plan (Account) ID (related to PLN)',
  ACT_SYSID NUMBER(38,0) COMMENT 'Account (Position) ID (related to ACT)',
  IVD_SYSID NUMBER(38,0) COMMENT 'Product ID (related to IVD link with parent IVT)',
  MGT_CD VARCHAR(10) COMMENT 'Managemet Cie ID (related to MGT)',
  TRX_CD NUMBER(38,0) COMMENT 'Transaction Code id (related to S_TRX_CD)',
  PROC_DT TIMESTAMP_NTZ(9) COMMENT 'Payable Process Date',
  PAID_DT TIMESTAMP_NTZ(9) COMMENT 'Payable Paid Date',
  PAY_PERIOD VARCHAR(10) COMMENT 'Pay Period',
  TAX_YEAR VARCHAR(8) COMMENT 'Pay Fiscal Year',
  TRADE_DT TIMESTAMP_NTZ(9) COMMENT 'Transaction Trade date (related to TRX)',
  GRSS_AMT FLOAT COMMENT 'Transaction Gross Amount (related to TRX)',
  COM_DLR FLOAT COMMENT 'Commission Dealer Amount',
  COM_PYBL FLOAT COMMENT 'Commission Amount',
  COM_BEN_PYBL FLOAT COMMENT 'Commission Pay to the Beneficiary',
  TICKET_CHG FLOAT COMMENT 'Ticket Charge',
  PAY_CD VARCHAR(6) COMMENT 'Pay Code',
  COM_PRODUCTION_CD VARCHAR(4) COMMENT 'Commission Type Code (related to S_COM_PROD)',
  AMOUNT FLOAT COMMENT 'Amount (related to Payroll Distribution)',
  USR_SYSID NUMBER(38,0) COMMENT 'User ID (related to SYS_USER_CD)',
  OTX_SYSID NUMBER(38,0) COMMENT 'Order ID (related to OTX)',
  DISPLAY_FLAG NUMBER(38,0) COMMENT 'Display Flag',
  DLR_MINIMUM VARCHAR(2) COMMENT 'Dealer Minimum',
  ORIG_PAY_PER VARCHAR(36) COMMENT 'Original Pay Period',
  IVT_TYPE VARCHAR(8) COMMENT 'Type of Product',
  COM_PAY_SYSID NUMBER(38,0) COMMENT 'Commission Pay ID',
  INTERNAL_COMM BOOLEAN COMMENT 'Internal Commission',
  WRHS_IND BOOLEAN COMMENT 'WRHS IND'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.S_COM_PRODUCTION (
  HK_HUB VARCHAR(40) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  COM_PRODUCTION_CD VARCHAR(4) COMMENT 'Product ID',
  COM_PRODUCTION_MNEM VARCHAR(10) COMMENT 'Product mnemonic code',
  COM_PRODUCTION_DESC VARCHAR(30) COMMENT 'Product description',
  COM_PRODUCTION_LONG_DESC VARCHAR(80) COMMENT 'Product long description',
  COM_PRODUCTION_MNEM_ENG VARCHAR(10) COMMENT 'Product mnemonic code english',
  COM_PRODUCTION_MNEM_FRE VARCHAR(10) COMMENT 'Product mnemonic code french',
  COM_PRODUCTION_DESC_ENG VARCHAR(30) COMMENT 'Product description english',
  COM_PRODUCTION_DESC_FRE VARCHAR(30) COMMENT 'prduct description french',
  COM_PRODUCTION_LONG_DESC_ENG VARCHAR(100) COMMENT 'Product long description english',
  COM_PRODUCTION_LONG_DESC_FRE VARCHAR(120) COMMENT 'Product long description french',
  CRC_TRND_RPT_CAT VARCHAR(2),
  COMMISSION_LEVEL NUMBER(38,0),
  CAC_TYPE_CD NUMBER(38,0),
  ACC_REPORT_IND NUMBER(38,0)
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.WRAP_FEE (
  HK_LINK VARCHAR(40) COMMENT 'Hash of the business keys',
  HK_HUB_CONTRACT VARCHAR(40) COMMENT 'Hash key for HUB_CONTRACT',
  HK_HUB_INVESTMENT_PRODUCT_TYPE VARCHAR(40) COMMENT 'Hash key for HUB_INVESTMENT_PRODUCT_TYPE',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  WF_SYSID NUMBER(38,0) NOT NULL COMMENT 'Wrap Fee ID (Main Key)',
  BATCH_SYSID NUMBER(38,0) NOT NULL COMMENT 'Batch ID',
  STATUS_CD VARCHAR(2) COMMENT 'Status Code',
  CET_WF_SYSID NUMBER(38,0) COMMENT 'Code to reference with CET Table',
  IVR_SYSID NUMBER(38,0) COMMENT 'Investor (Client) ID (related to IVR)',
  WF_IND NUMBER(38,0),
  PLN_SYSID NUMBER(38,0) COMMENT 'Plan (Account) ID (related to PLN)',
  ACT_SYSID NUMBER(38,0) COMMENT 'Account (Position) ID (related to ACT)',
  OTX_SYSID NUMBER(38,0) COMMENT 'Order ID (related to OTX)',
  AVG_MV FLOAT COMMENT 'Average Market Value',
  CREATE_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date',
  FEE_AMT FLOAT COMMENT 'Fee amount',
  FEE_GST FLOAT COMMENT 'Fee GST ( taxe )',
  FEE_PST FLOAT COMMENT 'Fee PST ( taxe )',
  FEE_TOTAL_AMT FLOAT COMMENT 'Fee total amount ( taxe included )',
  DLR_SYSID NUMBER(38,0) COMMENT 'Deal ID (related to DLR)',
  RGN_SYSID NUMBER(38,0) COMMENT 'Region ID (related to RGN)',
  BRN_SYSID NUMBER(38,0) COMMENT 'Branch ID (related to BRN)',
  REP_SYSID NUMBER(38,0) COMMENT 'Rep ID (related to REP)',
  USR_SYSID NUMBER(38,0) COMMENT 'USer ID',
  DESCRIPTION VARCHAR(120),
  LAST_UPD_DT TIMESTAMP_NTZ(9) COMMENT 'Last upadate date',
  SRF_SYSID NUMBER(38,0) COMMENT 'SRF  ID',
  OTHER_COM_SYSID NUMBER(38,0),
  FISCAL_SYSID NUMBER(38,0),
  PAYMENT_DT TIMESTAMP_NTZ(9) COMMENT 'Payable Paid Date'
);
create or replace TABLE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.X_DBB_MASTER_REP (
  HK_LINK VARCHAR(64) COMMENT 'Hash of the business keys',
  HK_HUB_FROM VARCHAR(64) COMMENT 'Hash of the business keys',
  HK_HUB_TO VARCHAR(64) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Metadata for extraction date from source',
  MD_SRCSYSTEM VARCHAR(50) COMMENT 'Metadata for source system name',
  REP_CD_ORIGINAL VARCHAR(10) COMMENT 'Original Representative code hashed as hk_hub_from',
  MASTER_CD VARCHAR(10) COMMENT 'Advisor master code hashed as hk_hub_to',
  REP_SYSID NUMBER(38,0) COMMENT 'Registered Representative ID',
  BEN_SYSID NUMBER(38,0) COMMENT 'Dealer ID',
  COMM_RATE NUMBER(29,12) COMMENT 'Commission Rate',
  BRN_SYSID NUMBER(38,0) COMMENT 'Branch ID',
  BRN_CD VARCHAR(10) COMMENT 'Branch code'
);
create or replace TABLE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.X_DBB_MASTER_REP_FUNDEX (
  HK_LINK VARCHAR(40) COMMENT 'Hash of the business keys',
  HK_HUB_FROM VARCHAR(40) COMMENT 'Hash of the business keys',
  HK_HUB_TO VARCHAR(40) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Metadata for extraction date from source',
  MD_SRCSYSTEM VARCHAR(50) COMMENT 'Metadata for source system name',
  REP_CD_ORIGINAL VARCHAR(10) COMMENT 'Original Representative code hashed as hk_hub_from',
  MASTER_CD VARCHAR(10) COMMENT 'Advisor master code hashed as hk_hub_to',
  REP_SYSID NUMBER(38,0) COMMENT 'Registered Representative ID',
  BEN_SYSID NUMBER(38,0) COMMENT 'Dealer ID',
  COMM_RATE NUMBER(29,12) COMMENT 'Commission Rate',
  BRN_SYSID NUMBER(38,0) COMMENT 'Branch ID',
  BRN_CD VARCHAR(10) COMMENT 'Branch code'
);
create or replace view DB_IAW_DEV_STG.INVESTIA_UNIVERIS.VW_CONTRACT(
  HK_LINK,
  MD_HASHDIFF,
  HK_HUB_CONTRACT,
  HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
  HK_HUB_REGISTERED_REPRESENTATIVE,
  CONTRACT_ID,
  CLIENT_ID,
  RR_CD,
  UNIVERIS_PLAN_ID,
  MD_START_DT,
  MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT
) as
SELECT 
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), '#NULL#')
, '|' , '#NULL#'
, '|' , COALESCE(TRIM(IVR_SYSID), '#NULL#')
, '|' , COALESCE(TRIM(REP_CD), '#NULL#')
, '|' , COALESCE(TRIM(PLN_SYSID), '#NULL#')  ))) AS HK_LINK,
'0' AS MD_HASHDIFF,
DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), '#NULL#'), '|' , '#NULL#' , '|' , COALESCE(TRIM(TO_VARCHAR(PLN_SYSID)), '#NULL#'), '|' ,COALESCE(TRIM(TO_VARCHAR(IVR_SYSID)), '#NULL#') )))) AS HK_HUB_CONTRACT,
DECODE(TRUE, IVR_SYSID IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), '#NULL#'), '|' , COALESCE(TRIM(IVR_SYSID), '#NULL#'))))) AS HK_HUB_PARTY_ROLE_ACCOUNT_HOLDER,
DECODE(TRUE, REP_CD IS NULL ,'0',SHA1(UPPER(CONCAT('INVESTIA', '|' , COALESCE(TRIM(REP_CD), '#NULL#'))))) AS HK_HUB_REGISTERED_REPRESENTATIVE,
NULL AS CONTRACT_ID,
TRIM(IVR_SYSID) AS CLIENT_ID,
TRIM(REP_CD) AS RR_CD,
TRIM(PLN_SYSID) AS UNIVERIS_PLAN_ID,
MD_START_DT,
MD_SOURCE,
MD_SRC_SYSTEM,
MD_EXTRACT_DT
FROM DB_IAW_DEV_STG.INVESTIA_UNIVERIS.CONTRACT;
create or replace view DB_IAW_DEV_STG.INVESTIA_UNIVERIS.VW_SHARE_AFTER_MERGE(
  MD_START_DT,
  MD_CREATION_DT,
  MD_SOURCE,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM,
  REP_CD_ORIGINAL,
  MASTER_CD,
  REP_SYSID,
  BEN_SYSID,
  COMM_RATE,
  BRN_SYSID,
  BRN_CD,
  HK_LINK,
  HK_HUB_FROM,
  HK_HUB_TO,
  MD_HASHDIFF
) as
SELECT 
  MD_START_DT, 
  MD_CREATION_DT, 
  MD_SOURCE, 
  MD_EXTRACT_DT, 
  'INVESTIA-UNIVERIS' AS MD_SRC_SYSTEM, 
  CASE 
    WHEN LEN(REP_CD_ORIGINAL) IN (3,4) THEN  CONCAT(REP_CD_ORIGINAL,'F')  
    WHEN REP_CD_ORIGINAL = '10000' THEN '1000Z'
    WHEN REP_CD_ORIGINAL = '10001' THEN 'Z1000'
    WHEN REP_CD_ORIGINAL = '85050' THEN 'Z8505'
    WHEN REP_CD_ORIGINAL = '99999' THEN '99999'
    WHEN REP_CD_ORIGINAL = 'BM004' THEN 'ZBM04'
    WHEN REP_CD_ORIGINAL = 'LA002' THEN 'LA02F'
  ELSE REP_CD_ORIGINAL END AS REP_CD_ORIGINAL , 
  CASE 
    WHEN LEN(MASTER_CD) IN (3,4) THEN  CONCAT(MASTER_CD,'F')  
    WHEN MASTER_CD = '10000' THEN '1000Z'
    WHEN MASTER_CD = '10001' THEN 'Z1000'
    WHEN MASTER_CD = '85050' THEN 'Z8505'
    WHEN MASTER_CD = '99999' THEN '99999'
    WHEN MASTER_CD = 'BM004' THEN 'ZBM04'
    WHEN MASTER_CD = 'LA002' THEN 'LA02F'
  ELSE MASTER_CD END AS MASTER_CD , 
  REP_SYSID + 450000000 AS REP_SYSID, 
  BEN_SYSID + 450000000 AS BEN_SYSID, 
  COMM_RATE, 
  BRN_SYSID, 
  BRN_CD,
  SHA1(UPPER(CONCAT('INVESTIA' ,'|', COALESCE(TRIM(REP_CD_ORIGINAL), '#NULL#'), '|', COALESCE(TRIM(MASTER_CD), '#NULL#'),'|', '#NULL#','|', '#NULL#','|', '#NULL#' ))) AS HK_LINK, 
  DECODE(TRUE, REP_CD_ORIGINAL IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM('INVESTIA'), '#NULL#'), '|' , COALESCE(TRIM(REP_CD_ORIGINAL), '#NULL#'))))) AS HK_HUB_FROM, 
  DECODE(TRUE, MASTER_CD IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM('INVESTIA'), '#NULL#'), '|' , COALESCE(TRIM(MASTER_CD), '#NULL#'))))) AS HK_HUB_TO, 
  SHA1(concat( COALESCE(TO_VARCHAR(REP_SYSID), '#NULL#'),'|',
                   COALESCE(TO_VARCHAR(BEN_SYSID), '#NULL#'),'|',
                   COALESCE(TO_VARCHAR(COMM_RATE), '#NULL#'),'|',
             COALESCE(TO_VARCHAR(BRN_SYSID), '#NULL#'),'|',
             COALESCE(BRN_CD, '#NULL#')
             )) AS MD_HASHDIFF
FROM INVESTIA_UNIVERIS.X_DBB_MASTER_REP_FUNDEX
UNION ALL
SELECT 
  MD_START_DT, 
  MD_CREATION_DT, 
  MD_SOURCE, 
  MD_EXTRACT_DT, 
  'INVESTIA-UNIVERIS' AS MD_SRC_SYSTEM, 
  REP_CD_ORIGINAL , 
  MASTER_CD , 
  REP_SYSID, 
  BEN_SYSID, 
  COMM_RATE, 
  BRN_SYSID, 
  BRN_CD,
  SHA1(UPPER(CONCAT('INVESTIA' ,'|', COALESCE(TRIM(REP_CD_ORIGINAL), '#NULL#'), '|', COALESCE(TRIM(MASTER_CD), '#NULL#'),'|', '#NULL#','|', '#NULL#','|', '#NULL#' ))) AS HK_LINK, 
  DECODE(TRUE, REP_CD_ORIGINAL IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM('INVESTIA'), '#NULL#'), '|' , COALESCE(TRIM(REP_CD_ORIGINAL), '#NULL#'))))) AS HK_HUB_FROM, 
  DECODE(TRUE, MASTER_CD IS NULL ,'0',SHA1(UPPER(CONCAT(COALESCE(TRIM('INVESTIA'), '#NULL#'), '|' , COALESCE(TRIM(MASTER_CD), '#NULL#'))))) AS HK_HUB_TO, 
  SHA1(concat( COALESCE(TO_VARCHAR(REP_SYSID), '#NULL#'),'|',
                   COALESCE(TO_VARCHAR(BEN_SYSID), '#NULL#'),'|',
                   COALESCE(TO_VARCHAR(COMM_RATE), '#NULL#'),'|',
             COALESCE(TO_VARCHAR(BRN_SYSID), '#NULL#'),'|',
             COALESCE(BRN_CD, '#NULL#')
             )) AS MD_HASHDIFF
FROM INVESTIA_UNIVERIS.X_DBB_MASTER_REP;
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.INVESTIA_UNIVERIS.MY_CSV_FORMAT
  TYPE = csv
  FIELD_DELIMITER = '|'
  SKIP_HEADER = 1
  ESCAPE = '\\'
  NULL_IF = ('NULL', 'null')
  ENCODING = 'UTF16'
;
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.INVESTIA_UNIVERIS.PIPE_UTF16
  TYPE = csv
  FIELD_DELIMITER = '|'
;
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_INVESTIA_UNIVERIS_TO_STG_FINANCIAL_TRANSACTIONS("ENV" VARCHAR(1000), "IO_FILE_NAME" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_COPY_QUERY STRING;
INS_UPDATE STRING;

BEGIN
IO_FILE_NAME :=CHAR(39)||IO_FILE_NAME||CHAR(39);
INS_COPY_QUERY := ''
COPY INTO 
  DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.FINANCIAL_TRANSACTIONS
(
MD_START_DT,
MD_SOURCE,
TRX_SYSID,
IVR_SYSID,
REP_SYSID,
PLN_SYSID,
ACT_SYSID,
IVD_SYSID,
TRX_STATUS,
TRX_ST_DESC_ENG,
TRADE_DT,
MGT_CD,
MGT_NAME_ENG,
DLR_SYSID,
RGN_SYSID,
BRN_SYSID,
TRX_UNIT,
TRX_PRICE,
TRX_GROSS,
TRX_NET,
TRX_GROSS_CAD,
SPR_FACTOR,
CURRENCY_CD,
DLR_CD,
RGN_CD,
BRN_CD,
REP_CD,
PLN_TYPE,
SPR_CTGY,
TRX_MNEM_ENG,
REVERSAL_IND,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    t.$9, metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10,t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20
    ,t.$21, t.$22, t.$23, t.$24, t.$25, t.$26, t.$27, t.$28, t.$29, t.$30, t.$31
  FROM
    @DATALAKE.raw/INVESTIA/INITIAL_LOADING T 
  ) pattern = ''||io_file_name||'' file_format =(format_name = DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16);
             '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.FINANCIAL_TRANSACTIONS
SET
HK_LINK =
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#'''')
, ''''|'''' , COALESCE(TRIM(TRX_SYSID), ''''#NULL#'''')
, ''''|'''' , ''''#NULL#''''
, ''''|'''' , ''''#NULL#''''
, ''''|'''' , COALESCE(TRIM(IVD_SYSID), ''''#NULL#'''')
, ''''|'''' , COALESCE(TRIM(PLN_SYSID), ''''#NULL#'''')
, ''''|'''' , COALESCE(TRIM(IVR_SYSID), ''''#NULL#'''')))),
HK_HUB_CONTRACT = DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TRIM(PLN_SYSID), ''''#NULL#'''') ,''''|'''', COALESCE(TRIM(IVR_SYSID), ''''#NULL#''''))))),
HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, IVD_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(IVD_SYSID), ''''#NULL#''''))))),
MD_HASHDIFF = ''''0'''',
MD_START_DT = DATEADD(DAY,1,TRADE_DT)
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_INVESTIA_UNIVERIS_TO_STG_HOLDINGS("ENV" VARCHAR(1000), "IO_FILE_NAME" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_COPY_QUERY STRING;
INS_UPDATE STRING;

BEGIN
IO_FILE_NAME :=CHAR(39)||IO_FILE_NAME||CHAR(39);
INS_COPY_QUERY := ''
COPY INTO 
  DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.HOLDINGS (
    MD_START_DT
  , MD_SOURCE 
  , MD_SEQ
  , ACT_SYSID
  , IVD_SYSID
  , REP_SYSID
  , IVR_SYSID
  , PLN_SYSID
  , FISCAL_SYSID
  , BAL_DATE
  , MV
  , CURRENCY_CD
  , EXCH_DT
  , EXCH_RATE
  , AUA
  , PRICE
  , UNITS
  , BV
  , ACB
  , NI_T
  , NI_P
  , FREQ_CD
  , UNITS_TRD_DT
  , FISCAL_TD_UNITS
  , IVD_LOAD_FLAG
  , WF_IND  
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM
  )
FROM
  (
  SELECT
    t.$7,metadata$filename, metadata$file_row_number,
    t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20, t.$21, t.$22, t.$23, t.$24, t.$25
  FROM
    @DATALAKE.raw/INVESTIA/INITIAL_LOADING T 
  ) pattern = ''||io_file_name||'' file_format =(format_name = DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16);
             '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.HOLDINGS
SET 
  HK_LINK = SHA1(UPPER(CONCAT(
    COALESCE(TRIM(MD_SEQ), ''''#NULL#''''), ''''|'''' 
  , COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' 
  , COALESCE(TRIM(MD_EXTRACT_DT), ''''#NULL#''''), ''''|'''' 
  , ''''#NULL#'''', ''''|'''' 
  , COALESCE(TRIM(IVD_SYSID), ''''#NULL#''''), ''''|''''
  , COALESCE(TRIM(PLN_SYSID), ''''#NULL#''''), ''''|'''' 
  , COALESCE(TRIM(IVR_SYSID), ''''#NULL#'''')
  ))),
  HK_HUB_CONTRACT = DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TRIM(PLN_SYSID), ''''#NULL#'''') ,''''|'''', COALESCE(TRIM(IVR_SYSID), ''''#NULL#''''))))),
  HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, IVD_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(IVD_SYSID), ''''#NULL#''''))))),
  MD_HASHDIFF=SHA1(CONCAT(
    COALESCE(TO_VARCHAR(ACT_SYSID),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(FISCAL_SYSID),''''#NULL#''''), ''''|'''' 
  , COALESCE(BAL_DATE,''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(MV),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(CURRENCY_CD),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(EXCH_DT),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(EXCH_RATE),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(AUA),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(PRICE),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(UNITS),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(BV),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(ACB),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(NI_T),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(NI_P),''''#NULL#''''), ''''|'''' 
  , COALESCE(FREQ_CD,''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(UNITS_TRD_DT),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(FISCAL_TD_UNITS),''''#NULL#''''), ''''|'''' 
  , COALESCE(IVD_LOAD_FLAG,''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(WF_IND),''''#NULL#'''')
  )), 
  MD_CREATION_DT= SYSTIMESTAMP(),
  MD_START_DT = DATEADD(DAY,1,BAL_DATE)
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_INVESTIA_UNIVERIS_TO_STG_HOLDINGS_DEL("ENV" VARCHAR(1000), "IO_FILE_NAME" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_COPY_QUERY STRING;
INS_UPDATE STRING;

BEGIN
INS_COPY_QUERY := ''
COPY INTO 
  DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.HOLDINGS (
    MD_START_DT
  , MD_SOURCE 
  , MD_SEQ
  , ACT_SYSID
  , IVD_SYSID
  , REP_SYSID
  , IVR_SYSID
  , PLN_SYSID
  , FISCAL_SYSID
  , BAL_DATE
  , MV
  , CURRENCY_CD
  , EXCH_DT
  , EXCH_RATE
  , AUA
  , PRICE
  , UNITS
  , BV
  , ACB
  , NI_T
  , NI_P
  , FREQ_CD
  , UNITS_TRD_DT
  , FISCAL_TD_UNITS
  , IVD_LOAD_FLAG
  , WF_IND  
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM
  )
FROM
  (
  SELECT
    t.$7,metadata$filename, metadata$file_row_number,
    t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20, t.$21, t.$22, t.$23, t.$24, t.$25
  FROM
    @DATALAKE.raw/INVESTIA/INITIAL_LOADING T 
  ) pattern = ''||io_file_name||'' file_format =(format_name = DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16);
             '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.HOLDINGS
SET 
  HK_LINK = SHA1(UPPER(CONCAT(
    COALESCE(TRIM(MD_SEQ), ''''#NULL#''''), ''''|'''' 
  , COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' 
  , COALESCE(TRIM(MD_EXTRACT_DT), ''''#NULL#''''), ''''|'''' 
  , ''''#NULL#'''', ''''|'''' 
  , COALESCE(TRIM(IVD_SYSID), ''''#NULL#''''), ''''|''''
  , COALESCE(TRIM(PLN_SYSID), ''''#NULL#''''), ''''|'''' 
  , COALESCE(TRIM(IVR_SYSID), ''''#NULL#'''')
  ))),
  HK_HUB_CONTRACT = DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TRIM(PLN_SYSID), ''''#NULL#'''') ,''''|'''', COALESCE(TRIM(IVR_SYSID), ''''#NULL#''''))))),
  HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, IVD_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(IVD_SYSID), ''''#NULL#''''))))),
  MD_HASHDIFF=SHA1(CONCAT(
    COALESCE(TO_VARCHAR(ACT_SYSID),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(FISCAL_SYSID),''''#NULL#''''), ''''|'''' 
  , COALESCE(BAL_DATE,''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(MV),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(CURRENCY_CD),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(EXCH_DT),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(EXCH_RATE),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(AUA),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(PRICE),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(UNITS),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(BV),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(ACB),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(NI_T),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(NI_P),''''#NULL#''''), ''''|'''' 
  , COALESCE(FREQ_CD,''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(UNITS_TRD_DT),''''#NULL#''''), ''''|'''' 
  , COALESCE(TO_VARCHAR(FISCAL_TD_UNITS),''''#NULL#''''), ''''|'''' 
  , COALESCE(IVD_LOAD_FLAG,''''#NULL#''''),''''|'''' 
  , COALESCE(TO_VARCHAR(WF_IND),''''#NULL#'''')
  )), 
  MD_CREATION_DT= SYSTIMESTAMP(),
  MD_START_DT = DATEADD(DAY,1,BAL_DATE)
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_INVESTIA_UNIVERIS_TO_STG_REVENUE_PAYABLE("ENV" VARCHAR(1000), "IO_FILE_NAME" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_COPY_QUERY STRING;
INS_UPDATE STRING;

BEGIN
IO_FILE_NAME :=CHAR(39)||IO_FILE_NAME||CHAR(39);
INS_COPY_QUERY := ''
COPY INTO 
  DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REVENUE_PAYABLE (
  MD_START_DT, 
  MD_SOURCE,
  PAY_SYSID,
  PYBL_STATUS,
  EVENT_PROC_SYSID,
  EVENT_RPT_SYSID,
  BEN_SYSID,
  REP_SYSID,
  DEAL_SYSID,
  COM_SYSID,
  DIST_SYSID,
  TRX_SYSID,
  IVR_SYSID,
  PLN_SYSID,
  ACT_SYSID,
  IVD_SYSID,
  MGT_CD,
  TRX_CD,
  PROC_DT,
  PAID_DT,
  PAY_PERIOD,
  TAX_YEAR,
  TRADE_DT,
  GRSS_AMT,
  COM_DLR,
  COM_PYBL,
  COM_BEN_PYBL,
  TICKET_CHG,
  PAY_CD,
  COM_PRODUCTION_CD,
  AMOUNT,
  USR_SYSID,
  OTX_SYSID,
  DISPLAY_FLAG,
  DLR_MINIMUM,
  ORIG_PAY_PER,
  IVT_TYPE,
  COM_PAY_SYSID,
  INTERNAL_COMM,
  WRHS_IND,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM ) 
FROM
  (
  SELECT
    t.$18, metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,
    t.$11,t.$12,t.$13,t.$14,t.$15,t.$16,t.$17,t.$18,t.$19,t.$20,t.$21,t.$22,t.$23,t.$24,
    t.$25,t.$26,t.$27,t.$28,t.$29,t.$30,t.$31,t.$32,t.$33,t.$34,
    t.$35,t.$36,t.$37,t.$38,t.$39,t.$40
  FROM
    @DATALAKE.raw/INVESTIA/INITIAL_LOADING T
  ) pattern = ''||io_file_name||'' file_format =(format_name = DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16);
             '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REVENUE_PAYABLE
SET 
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , 
COALESCE(TO_VARCHAR(PAY_SYSID), ''''#NULL#''''), ''''|'''' , 
COALESCE(TO_VARCHAR(PAID_DT), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVD_SYSID), ''''#NULL#''''), ''''|'''' ,
''''#NULL#''''))),
HK_HUB_CONTRACT=DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#'''')  ,''''|'''', COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''))))),
HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, IVD_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TO_VARCHAR(IVD_SYSID)), ''''#NULL#''''))))),
MD_HASHDIFF = SHA1(CONCAT(
  COALESCE(PYBL_STATUS, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(EVENT_PROC_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(EVENT_RPT_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(BEN_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(DEAL_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(COM_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(DIST_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(TRX_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(ACT_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(MGT_CD, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(TRX_CD),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(PROC_DT),''''#NULL#''''), ''''|'''', 
  COALESCE(PAY_PERIOD, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TAX_YEAR, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(TRADE_DT),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(GRSS_AMT),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(COM_DLR),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(COM_PYBL),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(COM_BEN_PYBL),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(TICKET_CHG),''''#NULL#''''), ''''|'''', 
  COALESCE(PAY_CD, ''''#NULL#''''), ''''|'''' , 
  COALESCE(COM_PRODUCTION_CD, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(AMOUNT),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(USR_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(OTX_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(DISPLAY_FLAG),''''#NULL#''''), ''''|'''', 
  COALESCE(DLR_MINIMUM, ''''#NULL#''''), ''''|'''' , 
  COALESCE(ORIG_PAY_PER, ''''#NULL#''''), ''''|'''' , 
  COALESCE(IVT_TYPE, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(COM_PAY_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(INTERNAL_COMM),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(WRHS_IND),''''#NULL#''''))),  
MD_CREATION_DT=systimestamp(),
MD_START_DT = DATEADD(DAY,1,COALESCE(PAID_DT,PROC_DT))
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_INVESTIA_UNIVERIS_TO_STG_TRAILER_FEES("ENV" VARCHAR(1000), "IO_FILE_NAME" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_COPY_QUERY STRING;
INS_UPDATE STRING;

BEGIN
IO_FILE_NAME :=CHAR(39)||IO_FILE_NAME||CHAR(39);
INS_COPY_QUERY := ''
COPY INTO 
  DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PLN_SRF (
  MD_START_DT, 
  MD_SOURCE,
  PLN_SRF_SYSID,
  PLN_SYSID,
  FAS_FILE_NAME,
  FROM_DT,
  TO_DT,
  MGT_CD,
  CURRENCY_CD,
  INCOME_TYPE,
  REP_CODE,
  COM_PYBL,
  EXCH_DT,
  EXCH_RATE,
  LAST_UPD_DT,
  USR_SYSID,
  FISCAL_SYSID,
  JUR_CD,
  ACT_TAX_COLLCTD,
  DLR_SYSID,
  RGN_SYSID,
  BRN_SYSID,
  REP_SYSID,
  IVR_SYSID,
  IVD_SYSID,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM ) 
FROM
  (
  SELECT
    t.$5, metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,
    t.$11,t.$12,t.$13,t.$14,t.$15,t.$16,t.$17,t.$18,t.$19,t.$20,t.$21,t.$22,t.$23,t.$24,t.$25
  FROM
    @DATALAKE.raw/INVESTIA/INITIAL_LOADING T
  ) pattern = ''||io_file_name||'' file_format =(format_name = DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16);
             '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PLN_SRF
SET 
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , 
COALESCE(TO_VARCHAR(PLN_SRF_SYSID), ''''#NULL#''''), ''''|'''' , 
COALESCE(TO_VARCHAR(TO_DT), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVD_SYSID), ''''#NULL#''''), ''''|'''',
''''#NULL#''''))),
HK_HUB_CONTRACT=DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#'''')  ,''''|'''', COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''))))),
HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, IVD_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TO_VARCHAR(IVD_SYSID)), ''''#NULL#''''))))),
MD_HASHDIFF = SHA1(CONCAT(
  COALESCE(FAS_FILE_NAME, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(FROM_DT),''''#NULL#''''), ''''|'''', 
  COALESCE(MGT_CD, ''''#NULL#''''), ''''|'''' , 
  COALESCE(CURRENCY_CD, ''''#NULL#''''), ''''|'''' , 
  COALESCE(INCOME_TYPE, ''''#NULL#''''), ''''|'''' , 
  COALESCE(REP_CODE, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(COM_PYBL),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(EXCH_DT),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(EXCH_RATE),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(LAST_UPD_DT),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(USR_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(FISCAL_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(JUR_CD, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TO_VARCHAR(ACT_TAX_COLLCTD),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(DLR_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(RGN_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(BRN_SYSID),''''#NULL#''''), ''''|'''', 
  COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''))), 
MD_CREATION_DT=systimestamp(),
MD_START_DT = DATEADD (DAY,1,TO_DT)
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_PSA_FUNDEX_UNIVERIS_TO_STG_X_DBB_MASTER_REP_FUNDEX("ENV" VARCHAR(1000), "IO_FILE_NAME" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
IO_FILE_NAME :=CHAR(39)||IO_FILE_NAME||CHAR(39);
INS_PRE_QUERY := ''TRUNCATE TABLE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.X_DBB_MASTER_REP_FUNDEX '';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.X_DBB_MASTER_REP_FUNDEX
(   MD_START_DT,
  MD_SOURCE ,
  MASTER_CD,
  REP_SYSID,
  BEN_SYSID,
  COMM_RATE,
  BRN_SYSID,
  BRN_CD,
  REP_CD_ORIGINAL,
  MD_EXTRACT_DT ,
  MD_SRCSYSTEM
)
FROM
  (
  SELECT
    TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD''''), metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9
  FROM
    @DATALAKE.raw/INVESTIA/INITIAL_LOADING T
  ) pattern =''||io_file_name||'' file_format=(format_name=DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16);
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.X_DBB_MASTER_REP_FUNDEX

SET 
  HK_LINK=SHA1(UPPER(CONCAT(''''INVESTIA'''' ,''''|'''', COALESCE(TRIM(REP_CD_ORIGINAL), ''''#NULL#''''), ''''|'''', COALESCE(TRIM(MASTER_CD), ''''#NULL#''''),''''|'''', ''''#NULL#'''',''''|'''', ''''#NULL#'''',''''|'''', ''''#NULL#'''' ))),
  HK_HUB_FROM= DECODE(TRUE, REP_CD_ORIGINAL IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''INVESTIA''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REP_CD_ORIGINAL), ''''#NULL#''''))))),
  HK_HUB_TO= DECODE(TRUE, MASTER_CD IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''INVESTIA''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MASTER_CD), ''''#NULL#''''))))),
  
  MD_HASHDIFF=SHA1(concat( COALESCE(TO_VARCHAR(REP_SYSID), ''''#NULL#''''),''''|'''',
                   COALESCE(TO_VARCHAR(BEN_SYSID), ''''#NULL#''''),''''|'''',
                   COALESCE(TO_VARCHAR(COMM_RATE), ''''#NULL#''''),''''|'''',
             COALESCE(TO_VARCHAR(BRN_SYSID), ''''#NULL#''''),''''|'''',
             COALESCE(BRN_CD, ''''#NULL#'''')
             )),  
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_PSA_IAS_UNIVERIS_TO_STG_PLANS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.REF_INVESTMENT_SAVING_PROGRAM_TYPES WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.REF_INVESTMENT_SAVING_PROGRAM_TYPES
(
MD_START_DT,
MD_SOURCE,
PLN_CD,
PLN_REG,
PLN_MNEM,
PLN_DESC,
PLN_MNEM_F,
PLN_DESC_F,
PLN_MNEM_ENG,
PLN_DESC_ENG,
PLN_SHORT_DESC_ENG,
PLN_MNEM_FRE,
PLN_DESC_FRE,
PLN_SHORT_DESC_FRE,
STMT_GROUP_MNEM,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6,t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14,t.$15
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*PLANS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16);
              '';

UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.REF_INVESTMENT_SAVING_PROGRAM_TYPES
SET
    HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''),''''|'''',COALESCE(TRIM(PLN_MNEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', ''''#NULL#'''',''''|'''',''''#NULL#'''',''''|'''',''''#NULL#''''))),
    MD_HASHDIFF=SHA1(CONCAT(COALESCE(TO_VARCHAR(PLN_CD), ''''#NULL#''''), ''''|'''',COALESCE(TO_VARCHAR(PLN_REG),''''#NULL#''''),''''|'''', COALESCE(PLN_DESC,''''#NULL#''''), ''''|'''', COALESCE(PLN_MNEM_F, ''''#NULL#''''), ''''|'''', COALESCE(PLN_DESC_F,''''#NULL#''''), ''''|'''', COALESCE(PLN_MNEM_ENG,''''#NULL#''''), ''''|'''', COALESCE(PLN_DESC_ENG,''''#NULL#''''),''''|'''', COALESCE(PLN_SHORT_DESC_ENG,''''#NULL#''''),''''|'''', COALESCE(PLN_MNEM_FRE,''''#NULL#''''),''''|'''', COALESCE(PLN_DESC_FRE,''''#NULL#''''),''''|'''', COALESCE(PLN_SHORT_DESC_FRE,''''#NULL#''''),''''|'''', COALESCE(STMT_GROUP_MNEM,''''#NULL#''''))),
    MD_CREATION_DT=systimestamp()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_PSA_INVESTIA_TO_STG_INVESTMENT_PRODUCT_TYPE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.MARKETPRODUCTS WHERE 1=1'';
INS_COPY_QUERY := ''
COPY INTO 
DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.MARKETPRODUCTS
(
MD_START_DT,
MD_SOURCE,
IVD_SYSID ,
CURRENCY_CD ,
SYMBOL ,
IVD_ST_DESC_ENG ,
IVD_ST_DESC_FRE ,
IVD_LOAD_DESC_ENG ,
IVD_LOAD_DESC_FRE ,
IVT_NAME_ENG ,
IVT_NAME_FRE ,
IVT_CD_DESC_ENG ,
IVT_CD_DESC_FRE ,
IVT_ST_DESC_ENG ,
IVT_ST_DESC_FRE ,
ASSET_CLASS_DESC_ENG ,
ASSET_CLASS_DESC_FRE ,
ASSET_CTGY_DESC_ENG ,
ASSET_CTGY_DESC_FRE ,
IVT_TYPE_DESC_ENG ,
IVT_TYPE_DESC_FRE ,
CTGY_DESC_ENG ,
CTGY_DESC_FRE ,
GROUP_DESC_ENG ,
GROUP_DESC_FRE ,
MGT_CD ,
MGT_NAME_ENG ,
MGT_NAME_FRE ,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10,t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20,
    t.$21, t.$22, t.$23, t.$24, t.$25, t.$26, t.$27, t.$28
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*MARKETPRODUCTS__.*csv'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16);
  '';                                            
  UPD_QUERY := ''
  UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.MARKETPRODUCTS
  SET
HK_HUB=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TRIM(IVD_SYSID)), ''''#NULL#'''')))),
MD_HASHDIFF=
SHA1(
CONCAT(
COALESCE(CURRENCY_CD, ''''#NULL#''''), ''''|'''',
COALESCE(SYMBOL, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVD_ST_DESC_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVD_ST_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVD_LOAD_DESC_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVD_LOAD_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVT_NAME_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVT_NAME_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVT_CD_DESC_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVT_CD_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVT_ST_DESC_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVT_ST_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(ASSET_CLASS_DESC_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(ASSET_CLASS_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(ASSET_CTGY_DESC_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(ASSET_CTGY_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVT_TYPE_DESC_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(IVT_TYPE_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(CTGY_DESC_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(CTGY_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(GROUP_DESC_ENG, ''''#NULL#''''), ''''|'''' ,
COALESCE(GROUP_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
COALESCE(MGT_CD,''''#NULL#''''), ''''|'''',
COALESCE(MGT_NAME_ENG,''''#NULL#''''), ''''|'''',
COALESCE(MGT_NAME_FRE,''''#NULL#'''')
)), 
MD_CREATION_DT= SYSTIMESTAMP()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_PSA_INVESTIA_UNIVERIS_TO_STG("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
DEL_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.ACCOUNT_HOLDER_CLONE_rf WHERE 1=1;'';
INS_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.ACCOUNT_HOLDER_CLONE_rf
(
  MD_START_DT,
  MD_SOURCE,
  IVR_SYSID,
  REP_SYSID,
  RECIPIENT_DESC_ENG,
  RECIPIENT_DESC_FRE,
  CORP_CD,
  IVR_ST_NAME_ENG,
  IVR_ST_NAME_FRE,
  IVR_REG_2,
  LANG_CD,
  IVR_RES_CD,
  IVR_SETUP_DT,
  IVR_STOP_DT,
  IVR_FRGN_CTNT,
  IVR_HOLD_MAIL,
  IVR_INC_ADR,
  IVR_STMT_FREQ,
  IVR_STMT_TYPE,
  IVR_STMT_DT,
  IVR_OLD_DLR,
  SALARY_DESC,
  IVR_KYC_DT,
  IVR_PRIM_BDT,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM,
  CREATE_DT
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6,t.$7, t.$8,t.$9, t.$10,
    t.$11, t.$12, t.$13, t.$14, t.$15, t.$16,t.$17, t.$18,t.$19, t.$20, t.$21,t.$22, t.$23,t.$24, t.$25
  FROM
    @DATALAKE.''||IO_PATH||'' T
  ) pattern =''''.*CLIENTS_.*csv''''file_format=(format_name=INVESTIA.PIPE_UTF16);
  '';

UPD_QUERY := ''UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.ACCOUNT_HOLDER_CLONE_rf
SET
    HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(IVR_SYSID), ''''#NULL#'''')))),
  MD_HASHDIFF=SHA1(CONCAT(
  COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(RECIPIENT_DESC_ENG, ''''#NULL#''''), ''''|'''' ,   
  COALESCE(RECIPIENT_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(CORP_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_ST_NAME_ENG, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_ST_NAME_FRE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_REG_2, ''''#NULL#''''), ''''|'''' ,
  COALESCE(LANG_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_RES_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(IVR_SETUP_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_STOP_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_FRGN_CTNT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_HOLD_MAIL),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_INC_ADR),''''#NULL#''''), ''''|'''',
  COALESCE(IVR_STMT_FREQ, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_STMT_TYPE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(IVR_STMT_DT),''''#NULL#''''), ''''|'''',
  COALESCE(IVR_OLD_DLR, ''''#NULL#''''), ''''|'''' ,
  COALESCE(SALARY_DESC, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(IVR_KYC_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_PRIM_BDT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(CREATE_DT),''''#NULL#''''))), 
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;'';


EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_PSA_INVESTIA_UNIVERIS_TO_STG_CLIENTS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
DEL_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.ACCOUNT_HOLDER WHERE 1=1;'';
INS_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.ACCOUNT_HOLDER
(
  MD_START_DT,
  MD_SOURCE,
  IVR_SYSID,
  REP_SYSID,
  RECIPIENT_DESC_ENG,
  RECIPIENT_DESC_FRE,
  CORP_CD,
  IVR_ST_NAME_ENG,
  IVR_ST_NAME_FRE,
  IVR_REG_2,
  LANG_CD,
  IVR_RES_CD,
  IVR_SETUP_DT,
  IVR_STOP_DT,
  IVR_FRGN_CTNT,
  IVR_HOLD_MAIL,
  IVR_INC_ADR,
  IVR_STMT_FREQ,
  IVR_STMT_TYPE,
  IVR_STMT_DT,
  IVR_OLD_DLR,
  SALARY_DESC,
  IVR_KYC_DT,
  IVR_PRIM_BDT,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM,
  CREATE_DT
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6,t.$7, t.$8,t.$9, t.$10,
    t.$11, t.$12, t.$13, t.$14, t.$15, t.$16,t.$17, t.$18,t.$19, t.$20, t.$21,t.$22, t.$23,t.$24, t.$25
  FROM
    @DATALAKE.''||IO_PATH||'' T
  ) pattern =''''.*CLIENTS_.*csv''''file_format=(format_name=INVESTIA.PIPE_UTF16);
  '';

UPD_QUERY := ''UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.ACCOUNT_HOLDER
SET
    HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(IVR_SYSID), ''''#NULL#'''')))),
  MD_HASHDIFF=SHA1(CONCAT(
  COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(RECIPIENT_DESC_ENG, ''''#NULL#''''), ''''|'''' ,   
  COALESCE(RECIPIENT_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(CORP_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_ST_NAME_ENG, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_ST_NAME_FRE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_REG_2, ''''#NULL#''''), ''''|'''' ,
  COALESCE(LANG_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_RES_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(IVR_SETUP_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_STOP_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_FRGN_CTNT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_HOLD_MAIL),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_INC_ADR),''''#NULL#''''), ''''|'''',
  COALESCE(IVR_STMT_FREQ, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_STMT_TYPE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(IVR_STMT_DT),''''#NULL#''''), ''''|'''',
  COALESCE(IVR_OLD_DLR, ''''#NULL#''''), ''''|'''' ,
  COALESCE(SALARY_DESC, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(IVR_KYC_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_PRIM_BDT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(CREATE_DT),''''#NULL#''''))), 
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;'';


EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_PSA_INVESTIA_UNIVERIS_TO_STG_CLIENTS_RF_TEST("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
DEL_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;
BEGIN
DEL_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.ACCOUNT_HOLDER_CLONE_rf WHERE 1=1;'';
INS_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.ACCOUNT_HOLDER_CLONE_rf
(
  MD_START_DT,
  MD_SOURCE,
  IVR_SYSID,
  REP_SYSID,
  RECIPIENT_DESC_ENG,
  RECIPIENT_DESC_FRE,
  CORP_CD,
  IVR_ST_NAME_ENG,
  IVR_ST_NAME_FRE,
  IVR_REG_2,
  LANG_CD,
  IVR_RES_CD,
  IVR_SETUP_DT,
  IVR_STOP_DT,
  IVR_FRGN_CTNT,
  IVR_HOLD_MAIL,
  IVR_INC_ADR,
  IVR_STMT_FREQ,
  IVR_STMT_TYPE,
  IVR_STMT_DT,
  IVR_OLD_DLR,
  SALARY_DESC,
  IVR_KYC_DT,
  IVR_PRIM_BDT,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM,
  CREATE_DT
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6,t.$7, t.$8,t.$9, t.$10,
    t.$11, t.$12, t.$13, t.$14, t.$15, t.$16,t.$17, t.$18,t.$19, t.$20, t.$21,t.$22, t.$23,t.$24, t.$25
  FROM
    @DATALAKE.''||IO_PATH||'' T
  ) pattern =''''.*CLIENTS_.*csv''''file_format=(format_name=INVESTIA.PIPE_UTF16);
  '';

UPD_QUERY := ''UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.ACCOUNT_HOLDER_CLONE_rf
SET
    HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(IVR_SYSID), ''''#NULL#'''')))),
  MD_HASHDIFF=SHA1(CONCAT(
  COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(RECIPIENT_DESC_ENG, ''''#NULL#''''), ''''|'''' ,   
  COALESCE(RECIPIENT_DESC_FRE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(CORP_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_ST_NAME_ENG, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_ST_NAME_FRE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_REG_2, ''''#NULL#''''), ''''|'''' ,
  COALESCE(LANG_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_RES_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(IVR_SETUP_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_STOP_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_FRGN_CTNT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_HOLD_MAIL),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_INC_ADR),''''#NULL#''''), ''''|'''',
  COALESCE(IVR_STMT_FREQ, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVR_STMT_TYPE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(IVR_STMT_DT),''''#NULL#''''), ''''|'''',
  COALESCE(IVR_OLD_DLR, ''''#NULL#''''), ''''|'''' ,
  COALESCE(SALARY_DESC, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(IVR_KYC_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(IVR_PRIM_BDT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(CREATE_DT),''''#NULL#''''))), 
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;'';


EXECUTE IMMEDIATE :DEL_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_PSA_INVESTIA_UNIVERIS_TO_STG_CONTRACT("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.CONTRACT WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.CONTRACT
(
MD_START_DT,
MD_SOURCE,
PLN_SYSID,
IVR_SYSID,
PLN_CD,
PLN_STATUS,
PLN_ADM_CD,
SETUP_DT,
CLOSE_DT,
PEN_JUR_CD,
FEE_EXMP_IND,
ADMINISTRATOR_TYPE,
MD_EXTRACT_DT,
MD_SRC_SYSTEM,
REP_SYSID,
REP_CD
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*ACCOUNTS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.PIPE_UTF16);
              '';

UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.CONTRACT
SET
    HK_HUB = SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TRIM(PLN_SYSID), ''''#NULL#'''')  ,''''|'''', COALESCE(TRIM(IVR_SYSID), ''''#NULL#'''')))),
  MD_HASHDIFF =  SHA1(CONCAT(COALESCE(TRIM(PLN_CD), ''''#NULL#''''), ''''|'''',
  COALESCE(TRIM(PLN_STATUS),''''#NULL#''''),''''|'''',
  COALESCE(TRIM(PLN_ADM_CD),''''#NULL#''''), ''''|'''',
  COALESCE(TRIM(TO_VARCHAR(SETUP_DT)), ''''#NULL#''''), ''''|'''',
  COALESCE(TRIM(TO_VARCHAR(CLOSE_DT)), ''''#NULL#''''), ''''|'''',
  COALESCE(TRIM(PEN_JUR_CD),''''#NULL#''''), ''''|'''',
  COALESCE(TRIM(TO_VARCHAR(FEE_EXMP_IND)),''''#NULL#''''), ''''|'''',
  COALESCE(TRIM(ADMINISTRATOR_TYPE),''''#NULL#''''),''''|'''',
  COALESCE(TRIM(TO_VARCHAR(REP_SYSID)),''''#NULL#''''),''''|'''',
  COALESCE(TRIM(REP_CD),''''#NULL#''''))) , 
    MD_CREATION_DT=systimestamp()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_PSA_INVESTIA_UNIVERIS_TO_STG_FINANCIAL_TRANSACTIONS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.FINANCIAL_TRANSACTIONS WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.FINANCIAL_TRANSACTIONS
(
MD_START_DT,
MD_SOURCE,
TRX_SYSID, 
IVR_SYSID, 
REP_SYSID, 
PLN_SYSID, 
ACT_SYSID, 
IVD_SYSID, 
TRX_STATUS, 
TRX_ST_DESC_ENG, 
TRADE_DT, 
MGT_CD, 
MGT_NAME_ENG, 
DLR_SYSID, 
RGN_SYSID, 
BRN_SYSID, 
TRX_UNIT, 
TRX_PRICE, 
TRX_GROSS, 
TRX_NET, 
TRX_GROSS_CAD, 
SPR_FACTOR, 
CURRENCY_CD, 
DLR_CD, 
RGN_CD, 
BRN_CD, 
REP_CD, 
PLN_TYPE, 
SPR_CTGY, 
TRX_MNEM_ENG, 
REVERSAL_IND,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
 
) 
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10,t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20
    ,t.$21, t.$22, t.$23, t.$24, t.$25, t.$26, t.$27, t.$28, t.$29, t.$30, t.$31
  FROM
    @DATALAKE.''||IO_PATH||'' T
  ) pattern = ''''.*TRANSACTIONS__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16);
        '';      
UPD_QUERY := ''UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.FINANCIAL_TRANSACTIONS
SET 
HK_LINK =
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#'''')
, ''''|'''' , COALESCE(TRIM(TRX_SYSID), ''''#NULL#'''')
, ''''|'''' , ''''#NULL#''''
, ''''|'''' , ''''#NULL#''''
, ''''|'''' , COALESCE(TRIM(IVD_SYSID), ''''#NULL#'''')
, ''''|'''' , COALESCE(TRIM(PLN_SYSID), ''''#NULL#'''')
, ''''|'''', COALESCE(TRIM(IVR_SYSID), ''''#NULL#'''')))),
HK_HUB_CONTRACT = DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''',
COALESCE(TRIM(PLN_SYSID), ''''#NULL#'''') ,''''|'''', COALESCE(TRIM(IVR_SYSID), ''''#NULL#''''))))),
HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, IVD_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(IVD_SYSID), ''''#NULL#''''))))),
MD_HASHDIFF = ''''0'''',
MD_CREATION_DT=systimestamp()
Where 1=1;      
      '';
 
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_PSA_INVESTIA_UNIVERIS_TO_STG_HOLDINGS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.HOLDINGS WHERE 1=1;'';
INS_COPY_QUERY := ''

COPY INTO 
DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.HOLDINGS (
    MD_START_DT
  , MD_SOURCE 
  , MD_SEQ
  , ACT_SYSID
  , IVD_SYSID
  , REP_SYSID
  , IVR_SYSID
  , PLN_SYSID
  , FISCAL_SYSID
  , BAL_DATE
  , MV
  , CURRENCY_CD
  , EXCH_DT
  , EXCH_RATE
  , AUA
  , PRICE
  , UNITS
  , BV
  , ACB
  , NI_T
  , NI_P
  , FREQ_CD
  , UNITS_TRD_DT
  , FISCAL_TD_UNITS
  , IVD_LOAD_FLAG
  , WF_IND  
  , MD_EXTRACT_DT
  , MD_SRC_SYSTEM
  
  )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)),metadata$filename, metadata$file_row_number,
    t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20, t.$21, t.$22, t.$23, t.$24, t.$25
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*/HOLDINGS_.*csv'''' file_format =(format_name =DB_IAW_''||ENV||''_STG. IAS.PIPE_UTF16);
  '';
  UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.HOLDINGS

SET
  HK_LINK = SHA1(UPPER(CONCAT(
    COALESCE(TRIM(MD_SEQ), ''''#NULL#''''), ''''|''''
  , COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|''''
  , COALESCE(TRIM(MD_EXTRACT_DT), ''''#NULL#''''), ''''|''''
  , ''''#NULL#'''', ''''|''''
  , COALESCE(TRIM(IVD_SYSID), ''''#NULL#''''), ''''|''''
  , COALESCE(TRIM(PLN_SYSID), ''''#NULL#''''),''''|''''
  , COALESCE(TRIM(IVR_SYSID), ''''#NULL#'''')
  ))),
  HK_HUB_CONTRACT = DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TRIM(PLN_SYSID), ''''#NULL#'''') ,''''|'''', COALESCE(TRIM(IVR_SYSID), ''''#NULL#''''))))),
  HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, IVD_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(IVD_SYSID), ''''#NULL#''''))))),
  MD_HASHDIFF=SHA1(CONCAT(
    COALESCE(TO_VARCHAR(ACT_SYSID),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(FISCAL_SYSID),''''#NULL#''''), ''''|''''
  , COALESCE(BAL_DATE,''''#NULL#''''),''''|''''
  , COALESCE(TO_VARCHAR(MV),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(CURRENCY_CD),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(EXCH_DT),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(EXCH_RATE),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(AUA),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(PRICE),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(UNITS),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(BV),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(ACB),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(NI_T),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(NI_P),''''#NULL#''''), ''''|''''
  , COALESCE(FREQ_CD,''''#NULL#''''),''''|''''
  , COALESCE(TO_VARCHAR(UNITS_TRD_DT),''''#NULL#''''), ''''|''''
  , COALESCE(TO_VARCHAR(FISCAL_TD_UNITS),''''#NULL#''''), ''''|''''
  , COALESCE(IVD_LOAD_FLAG,''''#NULL#''''),''''|''''
  , COALESCE(TO_VARCHAR(WF_IND),''''#NULL#'''')
  )), 
MD_CREATION_DT= SYSTIMESTAMP()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_PSA_INVESTIA_UNIVERIS_TO_STG_PLANS("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;
 
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REF_INVESTMENT_SAVING_PROGRAM_TYPES WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REF_INVESTMENT_SAVING_PROGRAM_TYPES
(
MD_START_DT,
MD_SOURCE,
PLN_CD,
PLN_REG,
PLN_MNEM,
PLN_DESC,
PLN_MNEM_F,
PLN_DESC_F,
PLN_MNEM_ENG,
PLN_DESC_ENG,
PLN_SHORT_DESC_ENG,
PLN_MNEM_FRE,
PLN_DESC_FRE,
PLN_SHORT_DESC_FRE,
STMT_GROUP_MNEM,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
 
) 
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,$1, t.$2, t.$3, t.$4, t.$5, t.$6,t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14,t.$15
  FROM
    @DATALAKE.''||IO_PATH||'' T
  ) pattern = ''''.*PLANS_.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS_UNIVERIS.PIPE_UTF16);
        '';   
UPD_QUERY := ''UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REF_INVESTMENT_SAVING_PROGRAM_TYPES
SET
    HK_HUB=SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''),
  ''''|'''',COALESCE(TRIM(PLN_MNEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', 
  ''''#NULL#'''',''''|'''',''''#NULL#'''',''''|'''',''''#NULL#''''))),
    MD_HASHDIFF=SHA1(CONCAT(COALESCE(TO_VARCHAR(PLN_CD), ''''#NULL#''''),''''|'''',COALESCE(TO_VARCHAR(PLN_REG),''''#NULL#''''),''''|'''',
  COALESCE(PLN_DESC,''''#NULL#''''), ''''|'''', COALESCE(PLN_MNEM_F, ''''#NULL#''''), ''''|'''',
    COALESCE(PLN_DESC_F,''''#NULL#''''), ''''|'''', COALESCE(PLN_MNEM_ENG,''''#NULL#''''), ''''|'''', 
  COALESCE(PLN_DESC_ENG,''''#NULL#''''),''''|'''', COALESCE(PLN_SHORT_DESC_ENG,''''#NULL#''''),''''|'''',
  COALESCE(PLN_MNEM_FRE,''''#NULL#''''),''''|'''', COALESCE(PLN_DESC_FRE,''''#NULL#''''),''''|'''', 
  COALESCE(PLN_SHORT_DESC_FRE,''''#NULL#''''),''''|'''', 
  COALESCE(STMT_GROUP_MNEM,''''#NULL#''''))),
    MD_CREATION_DT=systimestamp()
Where 1=1;      
      '';
 
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_PSA_INVESTIA_UNIVERIS_TO_STG_PLN_SRF("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PLN_SRF WHERE 1=1;'';
INS_COPY_QUERY := ''

COPY INTO 
DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PLN_SRF
 (
 MD_START_DT,
  MD_SOURCE,
  PLN_SRF_SYSID,
  PLN_SYSID,
  FAS_FILE_NAME,
  FROM_DT,
  TO_DT,
  MGT_CD,
  CURRENCY_CD,
  INCOME_TYPE,
  REP_CODE,
  COM_PYBL,
  EXCH_DT,
  EXCH_RATE,
  LAST_UPD_DT,
  USR_SYSID,
  FISCAL_SYSID,
  JUR_CD,
  ACT_TAX_COLLCTD,
  DLR_SYSID,
  RGN_SYSID,
  BRN_SYSID,
  REP_SYSID,
  IVR_SYSID,
  IVD_SYSID,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,
    t.$11,t.$12,t.$13,t.$14,t.$15,t.$16,t.$17,t.$18,t.$19,t.$20,t.$21,t.$22,t.$23,t.$24,t.$25
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern =''''.*PLN_SRF_.*csv'''' file_format=(format_name=INVESTIA_UNIVERIS.PIPE_UTF16);
  '';
  UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG. INVESTIA_UNIVERIS.PLN_SRF
SET
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PLN_SRF_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(TO_DT), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVD_SYSID), ''''#NULL#''''), ''''|'''',
''''#NULL#''''))),
HK_HUB_CONTRACT=DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#''''),''''|'''', COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''))))),
HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, IVD_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TO_VARCHAR(IVD_SYSID)), ''''#NULL#''''))))),
MD_HASHDIFF = SHA1(CONCAT(
  COALESCE(FAS_FILE_NAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(FROM_DT),''''#NULL#''''), ''''|'''',
  COALESCE(MGT_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(CURRENCY_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(INCOME_TYPE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(REP_CODE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(COM_PYBL),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(EXCH_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(EXCH_RATE),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(LAST_UPD_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(USR_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(FISCAL_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(JUR_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(ACT_TAX_COLLCTD),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(DLR_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(RGN_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(BRN_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''))), 
MD_CREATION_DT=systimestamp()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_PSA_INVESTIA_UNIVERIS_TO_STG_REF_COM_PROD("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.S_COM_PRODUCTION WHERE 1=1'';
INS_COPY_QUERY := ''
COPY INTO 
DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.S_COM_PRODUCTION
(
MD_START_DT,
MD_SOURCE,
COM_PRODUCTION_CD,
COM_PRODUCTION_MNEM,
COM_PRODUCTION_DESC,
COM_PRODUCTION_LONG_DESC,
COM_PRODUCTION_MNEM_ENG,
COM_PRODUCTION_MNEM_FRE,
COM_PRODUCTION_DESC_ENG,
COM_PRODUCTION_DESC_FRE,
COM_PRODUCTION_LONG_DESC_ENG,
COM_PRODUCTION_LONG_DESC_FRE,
CRC_TRND_RPT_CAT,
COMMISSION_LEVEL,
CAC_TYPE_CD,
ACC_REPORT_IND,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9
    ,t.$10, t.$11, t.$12, t.$13, t.$14, t.$15, t.$16
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*S_COM_PROD__.*csv'''' file_format =(format_name =DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16);
  '';                                            
  UPD_QUERY := ''
  UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.S_COM_PRODUCTION
  SET
HK_HUB=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|''''
,  COALESCE(TRIM(COM_PRODUCTION_CD), ''''#NULL#'''')
))),
MD_HASHDIFF=
SHA1(CONCAT(
   COALESCE(COM_PRODUCTION_MNEM, ''''#NULL#''''), ''''|''''
,  COALESCE(COM_PRODUCTION_DESC, ''''#NULL#''''), ''''|''''
,  COALESCE(COM_PRODUCTION_LONG_DESC, ''''#NULL#''''), ''''|''''
,  COALESCE(COM_PRODUCTION_MNEM_ENG, ''''#NULL#''''), ''''|''''
,  COALESCE(COM_PRODUCTION_MNEM_FRE, ''''#NULL#''''), ''''|''''
,  COALESCE(COM_PRODUCTION_DESC_ENG, ''''#NULL#''''), ''''|''''
,  COALESCE(COM_PRODUCTION_DESC_FRE, ''''#NULL#''''), ''''|''''
,  COALESCE(COM_PRODUCTION_LONG_DESC_ENG, ''''#NULL#''''), ''''|''''
,  COALESCE(COM_PRODUCTION_LONG_DESC_FRE, ''''#NULL#''''), ''''|''''
,  COALESCE(CRC_TRND_RPT_CAT, ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(COMMISSION_LEVEL), ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(CAC_TYPE_CD), ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(ACC_REPORT_IND), ''''#NULL#'''')
)), 
MD_CREATION_DT=systimestamp()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_PSA_INVESTIA_UNIVERIS_TO_STG_REF_PROVINCE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REF_PROVINCE WHERE 1=1'';
INS_COPY_QUERY := ''
COPY INTO 
DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REF_PROVINCE
(
MD_START_DT,
MD_SOURCE,
PROV_CD ,
PROV_DESC ,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*PROVINCE__.*csv'''' file_format =(format_name =DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
  '';                                            
  UPD_QUERY := ''
  UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REF_PROVINCE
  SET
HK_HUB=
SHA1(UPPER(COALESCE(TRIM(TO_VARCHAR(PROV_CD)), ''''#NULL#''''))),
MD_HASHDIFF=
SHA1(COALESCE(TO_VARCHAR(PROV_DESC), ''''#NULL#'''')),  
MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_PSA_INVESTIA_UNIVERIS_TO_STG_REGISTERED_REPRESENTATIVE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REGISTERED_REPRESENTATIVE WHERE 1=1'';
INS_COPY_QUERY := ''

COPY INTO 
DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REGISTERED_REPRESENTATIVE
(
  MD_START_DT,
  MD_SOURCE,
  REP_CD,
  COMPANY_CD,
  COMPANY_NAME,
  REGULATORY_ORG_CD,
  REGULATORY_ORG_NAME,
  DLR_SYSID,
  REP_CORP_NAME,  
  REP_LNAME,
  REP_FNAME,
  REP_ST_NAME,
  REP_GRP_RSP,
  DLR_CD,
  DLR_NAME_ENG,
  RGN_SYSID,
  RGN_CD,
  RGN_NAME,
  RGN_MGR,
  BRN_SYSID,
  BRN_CD,
  BRN_NAME,
  PROV_CD,
  REP_TEAM_CD,
  REP_TEAM_NAME,
    MD_EXTRACT_DT,
  MD_SRC_SYSTEM,
  CREATE_DT,
  TERMINATE_DT,
  REP_SYSID,
  REP_TITLE_DESC
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13, t.$14,
    t.$15, t.$16, t.$17, t.$18, t.$19, t.$20, t.$21, t.$22, t.$23, t.$24, t.$25, t.$26, t.$27, t.$28, t.$29
  FROM  @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*REGISTERED_REPRESENTATIVE__.*csv'''' file_format =(format_name =DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16);
  '';                                            
  UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REGISTERED_REPRESENTATIVE
SET
    HK_HUB=SHA1(UPPER(CONCAT(''''INVESTIA'''', ''''|'''' ,COALESCE(TRIM(TO_VARCHAR(REP_CD)), ''''#NULL#'''') ))),
  MD_HASHDIFF=SHA1(CONCAT(
  COALESCE(COMPANY_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(COMPANY_NAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(REGULATORY_ORG_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(REGULATORY_ORG_NAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(DLR_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(DLR_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(DLR_NAME_ENG, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(RGN_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(RGN_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(RGN_NAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(RGN_MGR, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(BRN_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(BRN_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(BRN_NAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(REP_TEAM_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(REP_TEAM_NAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(REP_CORP_NAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(REP_LNAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(REP_FNAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(REP_ST_NAME, ''''#NULL#''''), ''''|'''' ,
  COALESCE(REP_GRP_RSP, ''''#NULL#''''),  
  COALESCE(PROV_CD, ''''#NULL#''''),
  COALESCE(REP_TITLE_DESC, ''''#NULL#''''),
  COALESCE(TO_VARCHAR(TERMINATE_DT), ''''#NULL#''''),
  COALESCE(TO_VARCHAR(CREATE_DT), ''''#NULL#'''')
  )), 
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_PSA_INVESTIA_UNIVERIS_TO_STG_REVENUE_PAYABLE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REVENUE_PAYABLE WHERE 1=1'';
INS_COPY_QUERY := ''
COPY INTO 
DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REVENUE_PAYABLE
(
MD_START_DT,
MD_SOURCE,
PAY_SYSID,
PYBL_STATUS,
EVENT_PROC_SYSID,
EVENT_RPT_SYSID,
BEN_SYSID,
REP_SYSID,
DEAL_SYSID,
COM_SYSID,
DIST_SYSID,
TRX_SYSID,
IVR_SYSID,
PLN_SYSID,
ACT_SYSID,
IVD_SYSID,
MGT_CD,
TRX_CD,
PROC_DT,
PAID_DT,
PAY_PERIOD,
TAX_YEAR,
TRADE_DT,
GRSS_AMT,
COM_DLR,
COM_PYBL,
COM_BEN_PYBL,
TICKET_CHG,
PAY_CD,
COM_PRODUCTION_CD,
AMOUNT,
USR_SYSID,
OTX_SYSID,
DISPLAY_FLAG,
DLR_MINIMUM,
ORIG_PAY_PER,
IVT_TYPE,
COM_PAY_SYSID,
INTERNAL_COMM,
WRHS_IND,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,
    t.$11,t.$12,t.$13,t.$14,t.$15,t.$16,t.$17,t.$18,t.$19,t.$20,t.$21,t.$22,t.$23,t.$24,
    t.$25,t.$26,t.$27,t.$28,t.$29,t.$30,t.$31,t.$32,t.$33,t.$34,
    t.$35,t.$36,t.$37,t.$38,t.$39,t.$40
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern =''''.*REVENUE_PAYABLE__.*csv'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16);
  '';                                            
  UPD_QUERY := ''
  UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.REVENUE_PAYABLE
  SET
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PAY_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PAID_DT), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVD_SYSID), ''''#NULL#''''), ''''|'''' ,
''''#NULL#''''))),
HK_HUB_CONTRACT=DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#'''') ,''''|'''', COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''))))),
HK_HUB_INVESTMENT_PRODUCT_TYPE = DECODE(TRUE, IVD_SYSID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TO_VARCHAR(IVD_SYSID)), ''''#NULL#''''))))),
MD_HASHDIFF = SHA1(CONCAT(
  COALESCE(PYBL_STATUS, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(EVENT_PROC_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(EVENT_RPT_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(BEN_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(DEAL_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(COM_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(DIST_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(TRX_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(ACT_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(MGT_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(TRX_CD),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(PROC_DT),''''#NULL#''''), ''''|'''',
  COALESCE(PAY_PERIOD,''''#NULL#''''), ''''|'''' ,
  COALESCE(TAX_YEAR, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(TRADE_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(GRSS_AMT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(COM_DLR),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(COM_PYBL),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(COM_BEN_PYBL),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(TICKET_CHG),''''#NULL#''''), ''''|'''',
  COALESCE(PAY_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(COM_PRODUCTION_CD, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(AMOUNT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(USR_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(OTX_SYSID),''''#NULL#''''),''''|'''',
  COALESCE(TO_VARCHAR(DISPLAY_FLAG),''''#NULL#''''), ''''|'''',
  COALESCE(DLR_MINIMUM, ''''#NULL#''''), ''''|'''' ,
  COALESCE(ORIG_PAY_PER, ''''#NULL#''''), ''''|'''' ,
  COALESCE(IVT_TYPE, ''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(COM_PAY_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(INTERNAL_COMM),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(WRHS_IND),''''#NULL#''''))),  
MD_CREATION_DT=systimestamp()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_PSA_INVESTIA_UNIVERIS_TO_STG_WRAP_FEE("ENV" VARCHAR(10000), "IO_PATH" VARCHAR(10000))
RETURNS VARCHAR(10000)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
INS_QUERY STRING;
BEGIN
INS_PRE_DEL :=''DELETE FROM DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.WRAP_FEE WHERE 1=1'';
INS_PRE_COPY :=''COPY INTO DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.WRAP_FEE
(
  MD_START_DT,
  MD_SOURCE,  
  WF_SYSID,
  BATCH_SYSID,
  STATUS_CD,
  CET_WF_SYSID,
  IVR_SYSID,
  WF_IND,
  PLN_SYSID,
  ACT_SYSID,
  OTX_SYSID,
  AVG_MV,
  CREATE_DT,
  FEE_AMT,
  FEE_GST,
  FEE_PST,
  FEE_TOTAL_AMT,
  DLR_SYSID,
  RGN_SYSID,
  BRN_SYSID,
  REP_SYSID,
  USR_SYSID,
  DESCRIPTION,
  LAST_UPD_DT,
  SRF_SYSID,
  OTHER_COM_SYSID,
  FISCAL_SYSID,
  PAYMENT_DT,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,
    t.$11,t.$12,t.$13,t.$14,t.$15,t.$16,t.$17,t.$18,t.$19,t.$20,t.$21,t.$22,t.$23,t.$24,t.$25,t.$26,t.$27,t.$28
  FROM
    @DATALAKE.''||IO_PATH||'' T
  ) pattern =''''.*WRAP_FEE__.*csv'''' file_format=(format_name=DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16)'';

INS_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.WRAP_FEE
SET
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(WF_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PAYMENT_DT), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''), ''''|'''' ,
''''#NULL#'''', ''''|'''',
''''#NULL#''''))),
HK_HUB_CONTRACT=DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TO_VARCHAR(PLN_SYSID),''''#NULL#'''')  ,''''|'''', COALESCE(TO_VARCHAR(IVR_SYSID),''''#NULL#''''))))),
HK_HUB_INVESTMENT_PRODUCT_TYPE =''''0'''',
MD_HASHDIFF = SHA1(CONCAT(
  COALESCE(TO_VARCHAR(BATCH_SYSID),''''#NULL#''''), ''''|'''' ,
  COALESCE(STATUS_CD,''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(CET_WF_SYSID),''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(WF_IND),''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(ACT_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(OTX_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(AVG_MV),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(CREATE_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(FEE_AMT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(FEE_GST),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(FEE_PST),''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(FEE_TOTAL_AMT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(DLR_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(RGN_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(BRN_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(USR_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(DESCRIPTION,''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(LAST_UPD_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(SRF_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(OTHER_COM_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(FISCAL_SYSID),''''#NULL#''''))),  
MD_CREATION_DT=systimestamp()
Where 1=1'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_COPY;
EXECUTE IMMEDIATE :INS_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_PSA_INVESTIA_UNIVERIS_TO_STG_X_DBB_MASTER_REP("ENV" VARCHAR(1000), "IO_FILE_NAME" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_QUERY := ''TRUNCATE TABLE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.X_DBB_MASTER_REP '';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.X_DBB_MASTER_REP
(   MD_START_DT,
  MD_SOURCE ,
  MASTER_CD,
  REP_SYSID,
  BEN_SYSID,
  COMM_RATE,
  BRN_SYSID,
  BRN_CD,
  REP_CD_ORIGINAL,
  MD_EXTRACT_DT ,
  MD_SRCSYSTEM
)
FROM
  (
  SELECT
    TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD''''), metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9
  FROM
    @DATALAKE.raw/INVESTIA/INITIAL_LOADING T
  ) pattern =''||io_file_name||'' file_format=(format_name=DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16);
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.X_DBB_MASTER_REP

SET 
  HK_LINK=SHA1(UPPER(CONCAT(''''INVESTIA'''' ,''''|'''', COALESCE(TRIM(REP_CD_ORIGINAL), ''''#NULL#''''), ''''|'''', COALESCE(TRIM(MASTER_CD), ''''#NULL#''''),''''|'''', ''''#NULL#'''',''''|'''', ''''#NULL#'''',''''|'''', ''''#NULL#'''' ))),
  HK_HUB_FROM= DECODE(TRUE, REP_CD_ORIGINAL IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''INVESTIA''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REP_CD_ORIGINAL), ''''#NULL#''''))))),
  HK_HUB_TO= DECODE(TRUE, MASTER_CD IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''INVESTIA''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MASTER_CD), ''''#NULL#''''))))),
  
  MD_HASHDIFF=SHA1(concat( COALESCE(TO_VARCHAR(REP_SYSID), ''''#NULL#''''),''''|'''',
                   COALESCE(TO_VARCHAR(BEN_SYSID), ''''#NULL#''''),''''|'''',
                   COALESCE(TO_VARCHAR(COMM_RATE), ''''#NULL#''''),''''|'''',
             COALESCE(TO_VARCHAR(BRN_SYSID), ''''#NULL#''''),''''|'''',
             COALESCE(BRN_CD, ''''#NULL#'''')
             )),  
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_PSA_INVESTIA_UNIVERIS_TO_STG_X_DBB_MASTER_REP("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.X_DBB_MASTER_REP WHERE 1=1;'';
INS_COPY_QUERY := ''

COPY INTO 
DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.X_DBB_MASTER_REP
 (
  MD_START_DT,
  MD_SOURCE ,
  MASTER_CD,
  REP_SYSID,
  BEN_SYSID,
  COMM_RATE,
  BRN_SYSID,
  BRN_CD,
  REP_CD_ORIGINAL,
  MD_EXTRACT_DT ,
  MD_SRCSYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9
  FROM
    @DATALAKE.''||io_PATH||'' T 
    ) pattern = ''''.*x_DBB_MASTER_REP__.*csv'''' file_format =(format_name = IAS.PIPE_UTF16);
    '';
  UPD_QUERY := ''
  UPDATE DB_IAW_''||ENV||''_STG. INVESTIA_UNIVERIS.X_DBB_MASTER_REP
  SET
  HK_LINK=SHA1(UPPER(CONCAT(''''INVESTIA'''' ,''''|'''', COALESCE(TRIM(REP_CD_ORIGINAL), ''''#NULL#''''), ''''|'''', COALESCE(TRIM(MASTER_CD), ''''#NULL#''''),''''|'''', ''''#NULL#'''',''''|'''', ''''#NULL#'''',''''|'''', ''''#NULL#'''' ))),
  HK_HUB_FROM= DECODE(TRUE, REP_CD_ORIGINAL IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''INVESTIA''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REP_CD_ORIGINAL), ''''#NULL#''''))))),
  HK_HUB_TO= DECODE(TRUE, MASTER_CD IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''INVESTIA''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MASTER_CD), ''''#NULL#''''))))),
  
  MD_HASHDIFF=SHA1(concat( COALESCE(TO_VARCHAR(REP_SYSID), ''''#NULL#''''),''''|'''',
                   COALESCE(TO_VARCHAR(BEN_SYSID), ''''#NULL#''''),''''|'''',
                   COALESCE(TO_VARCHAR(COMM_RATE), ''''#NULL#''''),''''|'''',
             COALESCE(TO_VARCHAR(BRN_SYSID), ''''#NULL#''''),''''|'''',
             COALESCE(BRN_CD, ''''#NULL#'''')
             )),  
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.INVESTIA_UNIVERIS.SP_CONV_LOADSTG_PSA_INVESTIA_UNIVERIS_TO_STG_X_DBB_MASTER_REP_UNIVERIS("ENV" VARCHAR(1000), "IO_FILE_NAME" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
IO_FILE_NAME :=CHAR(39)||IO_FILE_NAME||CHAR(39);
INS_PRE_QUERY := ''TRUNCATE TABLE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.X_DBB_MASTER_REP '';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.X_DBB_MASTER_REP
(   MD_START_DT,
  MD_SOURCE ,
  MASTER_CD,
  REP_SYSID,
  BEN_SYSID,
  COMM_RATE,
  BRN_SYSID,
  BRN_CD,
  REP_CD_ORIGINAL,
  MD_EXTRACT_DT ,
  MD_SRCSYSTEM
)
FROM
  (
  SELECT
    TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD''''), metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9
  FROM
    @DATALAKE.raw/INVESTIA/INITIAL_LOADING T
  ) pattern =''||io_file_name||'' file_format=(format_name=DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.PIPE_UTF16);
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.INVESTIA_UNIVERIS.X_DBB_MASTER_REP

SET 
  HK_LINK=SHA1(UPPER(CONCAT(''''INVESTIA'''' ,''''|'''', COALESCE(TRIM(REP_CD_ORIGINAL), ''''#NULL#''''), ''''|'''', COALESCE(TRIM(MASTER_CD), ''''#NULL#''''),''''|'''', ''''#NULL#'''',''''|'''', ''''#NULL#'''',''''|'''', ''''#NULL#'''' ))),
  HK_HUB_FROM= DECODE(TRUE, REP_CD_ORIGINAL IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''INVESTIA''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REP_CD_ORIGINAL), ''''#NULL#''''))))),
  HK_HUB_TO= DECODE(TRUE, MASTER_CD IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(''''INVESTIA''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MASTER_CD), ''''#NULL#''''))))),
  
  MD_HASHDIFF=SHA1(concat( COALESCE(TO_VARCHAR(REP_SYSID), ''''#NULL#''''),''''|'''',
                   COALESCE(TO_VARCHAR(BEN_SYSID), ''''#NULL#''''),''''|'''',
                   COALESCE(TO_VARCHAR(COMM_RATE), ''''#NULL#''''),''''|'''',
             COALESCE(TO_VARCHAR(BRN_SYSID), ''''#NULL#''''),''''|'''',
             COALESCE(BRN_CD, ''''#NULL#'''')
             )),  
  MD_CREATION_DT=SYSTIMESTAMP()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
create or replace schema DB_IAW_DEV_STG.PUBLIC;

create or replace TABLE DB_IAW_DEV_STG.PUBLIC.BDV (
  CATEGORY VARCHAR(40),
  CLIENT_ID VARCHAR(40),
  MASTER_CODE VARCHAR(40),
  REVENUE_TYPE VARCHAR(40),
  REVENUE_SUBTYPE VARCHAR(40),
  REVENUE_AMOUNT NUMBER(38,2)
);
create or replace TABLE DB_IAW_DEV_STG.PUBLIC.CORP (
  CATEGORY VARCHAR(40),
  CLIENT_ID VARCHAR(40),
  MASTER_CODE VARCHAR(40),
  REVENUE_TYPE VARCHAR(40),
  REVENUE_SUBTYPE VARCHAR(40),
  REVENUE_AMOUNT NUMBER(38,2)
);
create or replace TABLE DB_IAW_DEV_STG.PUBLIC.POC (
  CATEGORY VARCHAR(40),
  CLIENT_ID VARCHAR(40),
  MASTER_CODE VARCHAR(40),
  REVENUE_TYPE VARCHAR(40),
  REVENUE_SUBTYPE VARCHAR(40),
  REVENUE_AMOUNT NUMBER(38,2)
);
create or replace TABLE DB_IAW_DEV_STG.PUBLIC.REVENUES_BLOB (
  REPID VARCHAR(50) COMMENT 'Master code  code',
  ADVISOR_ID VARCHAR(512) COMMENT 'Advisor ID in commission portal',
  PROGRAM_TYPE VARCHAR(512) COMMENT 'Program type of the account',
  ACCOUNTID VARCHAR(100) COMMENT 'Account ID',
  PROCESSDATE DATE COMMENT 'Process Date',
  SOURCECODE VARCHAR(50) COMMENT 'Source Code / TRANSACTION_TYPE',
  QUANTITY NUMBER(38,0) COMMENT 'Transaction quantity',
  TRANSTYPE VARCHAR(10) COMMENT 'Transaction Type ([B]uy/[S]ell) / BUY_SELL_INDICATOR',
  REVENUE NUMBER(38,2) COMMENT 'Representative gross revenue',
  COMMISSION NUMBER(38,2) COMMENT 'Representative gross commission',
  NETCOMMISSION NUMBER(38,2) COMMENT 'Representative net commission',
  TRANSFEE NUMBER(38,2) COMMENT 'Representative transaction fees',
  MD_SRCSYSTEM VARCHAR(50) COMMENT 'Source system',
  MD_LOADDATE DATE COMMENT 'Load Date',
  HK_DIFF VARCHAR(40) COMMENT 'Hash of the difference keys',
  HK_KEY VARCHAR(40) COMMENT 'Hash of the business keys'
);
create or replace TABLE DB_IAW_DEV_STG.PUBLIC.REVENUES_TO_COMPARE (
  REPID VARCHAR(50) COMMENT 'Master code  code',
  ADVISOR_ID VARCHAR(512) COMMENT 'Advisor ID in commission portal',
  PROGRAM_TYPE VARCHAR(512) COMMENT 'Program type of the account',
  ACCOUNTID VARCHAR(100) COMMENT 'Account ID',
  PROCESSDATE DATE COMMENT 'Process Date',
  STAMP TIMESTAMP_NTZ(9) COMMENT 'Stamp time of eventual modification',
  SOURCECODE VARCHAR(50) COMMENT 'Source Code / TRANSACTION_TYPE',
  QUANTITY NUMBER(38,0) COMMENT 'Transaction quantity',
  TRANSTYPE VARCHAR(10) COMMENT 'Transaction Type ([B]uy/[S]ell) / BUY_SELL_INDICATOR',
  REVENUE NUMBER(38,2) COMMENT 'Representative gross revenue',
  COMMISSION NUMBER(38,2) COMMENT 'Representative gross commission',
  NETCOMMISSION NUMBER(38,2) COMMENT 'Representative net commission',
  TRANSFEE NUMBER(38,2) COMMENT 'Representative transaction fees',
  MD_SRCSYSTEM VARCHAR(50) COMMENT 'Source system',
  MD_LOADDATE DATE COMMENT 'Load Date',
  HK_DIFF VARCHAR(40) COMMENT 'Hash of the difference keys',
  HK_KEY VARCHAR(40) COMMENT 'Hash of the business keys'
);
create or replace TABLE DB_IAW_DEV_STG.PUBLIC.TEST (
  ID NUMBER(38,0),
  NAME VARCHAR(20)
);
CREATE OR REPLACE FUNCTION DB_IAW_DEV_STG.PUBLIC.EXTRACT_IVT_OBJ_CDE_PCT("IVT_OBJ_CDE" VARCHAR(15))
RETURNS NUMBER(38,0)
LANGUAGE SQL
AS 'SELECT COALESCE ( TRY_TO_NUMBER(SUBSTRING(REGEXP_SUBSTR(TRIM(IVT_OBJ_CDE), ''[A|C|D|E|F|H|I|J|K|L|N|O|P|Q|R|T|U|V|W|X|Y|Z][[:digit:]]+'',1,1 ),2,2)) ,0)';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.PUBLIC.SP_CONV_DATAVAULT_LOADLINK_AUDIT_ID_RK1("INSERT_COLS" VARCHAR(16777216), "SELECT_COLS" VARCHAR(16777216), "SRC_TBL" VARCHAR(16777216), "TGT_TBL" VARCHAR(16777216), "TRUNC_TBL" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

var INS_QUERY = "INSERT INTO "+ TGT_TBL + "(" + INSERT_COLS + ") SELECT " + SELECT_COLS + " FROM (SELECT DISTINCT * FROM " + SRC_TBL + " ) STG LEFT JOIN "+ TGT_TBL +" LNK ON STG.HK_LINK = LNK.HK_LINK  WHERE LNK.HK_LINK IS NULL;"
var TRUN_QUERY = "TRUNCATE TABLE " + TGT_TBL +";"


if (TRUNC_TBL == ''Y'')
    {
    
    var sql_statement = snowflake.createStatement(
          {
          sqlText: TRUN_QUERY
          }
       );
   var result_scan = sql_statement.execute();
  }
  

   var sql_statement = snowflake.createStatement(
          {
          sqlText: INS_QUERY
          }
       );
      
   return INS_QUERY;
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.PUBLIC.SP_CONV_LOADSTG_IAS_NBIN_TO_STG_FINANCIAL_TRANSACTIONS_IAVMBK_IAPW("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK (
  MD_SOURCE,
  A_C_ID,
  A_C_REPRESENTATIVE,
  TI_ALTERNATE_ID, 
  TI_ALTERNATE_TI_TYPE, 
  TRAN_ENTRY_DESCRIPTION, 
  TRAN_USER_DESCRIPTION, 
  TRAN_TRADING_TYPE, 
  TRANSACTION, 
  TRAN_TRADING_GROSS_AMT, 
  TRAN_TRADING_CURRENCY, 
  TRAN_TRADING_NET_AMT, 
  TRAN_TRADING_TRADE_DATE, 
  TRAN_TRADING_SETT_DATE, 
  TRAN_PROCESS_DATE, 
  TI_SYMBOL, 
  TRAN_QTY, 
  TI_PRIMARY_MARKET, 
  TRAN_TXN_REFERENCE_ID, 
  TRAN_AMOUNT_2, 
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM,
  TI_UNDERLYING_CDN_PRICE, 
  TI_BASIS_POINT, 
  TI_FACE_VALUE, 
  TI_ISSUE_PRICE, 
  STRIKE_PRICE, 
  TI_UNDERLYING_USD_PRICE )
FROM
  (
  SELECT
    metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10,t.$11, t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$21
    ,t.$22, t.$23, t.$24, t.$25, t.$26, t.$27, t.$28
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*MISSING_TRANSACTIONS.csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
INS_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.IAS.FINANCIAL_TRANSACTIONS_IAVMBK
SET 
  HK_LINK=
  SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TRANSACTION), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_ID), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#'''')))),

  HK_HUB_CONTRACT=
  DECODE(TRUE, A_C_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_ID), ''''#NULL#'''') ,''''|'''', ''''#NULL#'''' ,''''|'''', ''''#NULL#'''' )))),

  HK_HUB_REGISTERED_REPRESENTATIVE=
  DECODE(TRUE, A_C_REPRESENTATIVE IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(A_C_REPRESENTATIVE), ''''#NULL#''''))))),

  HK_HUB_INVESTMENT_PRODUCT_TYPE=
  DECODE(TRUE, TI_ALTERNATE_ID IS NULL ,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_ID), ''''#NULL#''''))))),

  MD_HASHDIFF=
  SHA1(CONCAT(COALESCE(TI_ALTERNATE_TI_TYPE, ''''#NULL#''''), ''''|'''',COALESCE(TRAN_ENTRY_DESCRIPTION, ''''#NULL#''''), ''''|'''' , COALESCE(TRAN_USER_DESCRIPTION, ''''#NULL#''''), ''''|'''' , 
  COALESCE(TRAN_TRADING_TYPE, ''''#NULL#''''), ''''|'''' , COALESCE(TO_VARCHAR(TRAN_TRADING_GROSS_AMT),''''#NULL#''''), ''''|'''', 
  COALESCE(TRAN_TRADING_CURRENCY,''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_NET_AMT),''''#NULL#'''') , ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_TRADE_DATE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_TRADING_SETT_DATE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_PROCESS_DATE),''''#NULL#'''')
  , ''''|'''', COALESCE(TI_SYMBOL,''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_QTY),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_PRIMARY_MARKET),''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(TRAN_TXN_REFERENCE_ID),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TRAN_AMOUNT_2),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_UNDERLYING_CDN_PRICE),''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(TI_BASIS_POINT),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_FACE_VALUE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_ISSUE_PRICE),''''#NULL#'''')
  , ''''|'''', COALESCE(TO_VARCHAR(STRIKE_PRICE),''''#NULL#''''), ''''|'''', COALESCE(TO_VARCHAR(TI_UNDERLYING_USD_PRICE),''''#NULL#'''')
  )), 
  MD_CREATION_DT=SYSTIMESTAMP(),
  MD_START_DT = DATEADD(DAY,1,TRAN_PROCESS_DATE)
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.PUBLIC.SP_CONV_LOADSTG_PSA_IAPW_TO_STG_REF_MASTER_KPI_DATA_CLARINGTON("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_CLARINGTON WHERE 1=1'';
INS_PRE_COPY := ''
COPY INTO DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_CLARINGTON
(
COPY INTO EXTERNAL_KPI.REF_MASTER_KPI_DATA_CLARINGTON
(
MD_START_DT,
MD_SOURCE,
MD_EXTRACT_DT,
KPI_DATE,
TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_MF,
TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_GIF,
FTE,
TOTAL_TRANSACTIONS_MF,
TOTAL_TRANSACTIONS_GIF,
TOTAL_TRANSACTIONS_FTE_MF,
TOTAL_TRANSACTIONS_FTE_GIF,
NO_OF_ACCOUNTS,
ACCOUNTS_FTE,
ACCOUNTS_FTE_TARGET,
YOY_NEW_ACCOUNTS_CLIENT_NAME,
YOY_NEW_ACCOUNTS_CLIENT_NOMINEE,
EXPENSES,
REVENUES,
EFFICIENCY_RATIO,
EXPENSES_TARGET,
REVENUE_TARGET,
EFFICIENCY_RATIO_TARGET,
TOTAL_ASSETS,
AFFILIATE_PENETRATION_IIROC,
AFFILIATE_PENETRATION_IIROC_TARGET,
AFFILIATE_PENETRATION_MFDA,
AFFILIATE_PENETRATION_MFDA_TARGET,
GROSS_MARGIN,
GROSS_MARGIN_TARGET,
NET_SALES,
NO_OF_ACCOUNTS_CLIENT_NAME,
NO_OF_ACCOUNTS_NOMINEE
)
FROM
(
SELECT
TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,
t.$1,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11,
t.$12, t.$13, t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20, t.$21, t.$22,
t.$23, t.$24, t.$25, t.$26, t.$27, t.$28, t.$29
FROM
@DATALAKE.''||IO_PATH||'' t
) pattern = ''''.*MASTER_KPI_DATA_CLARINGTON__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.CSV_UTF8)
'';
INS_UPDATE := ''
  UPDATE DB_IAW_''||ENV||''_STG.EXTERNAL_KPI.REF_MASTER_KPI_DATA_CLARINGTON  
  SET
  HK_HUB=
  SHA1(COALESCE(TRIM("KPI_DATE"), ''''#NULL#'''')),
  MD_HASHDIFF=
  SHA1(CONCAT(
  COALESCE(TO_VARCHAR(TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_MF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TRADE_ACCOUNT_PROCESSING_AUTOMATION_PCT_GIF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(FTE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_TRANSACTIONS_MF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_TRANSACTIONS_GIF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_TRANSACTIONS_FTE_MF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_TRANSACTIONS_FTE_GIF) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NO_OF_ACCOUNTS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(ACCOUNTS_FTE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(ACCOUNTS_FTE_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(YOY_NEW_ACCOUNTS_CLIENT_NAME) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(YOY_NEW_ACCOUNTS_CLIENT_NOMINEE) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(EXPENSES) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(REVENUES) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(EFFICIENCY_RATIO) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(EXPENSES_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(REVENUE_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(EFFICIENCY_RATIO_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(TOTAL_ASSETS) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AFFILIATE_PENETRATION_IIROC) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AFFILIATE_PENETRATION_IIROC_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AFFILIATE_PENETRATION_MFDA) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AFFILIATE_PENETRATION_MFDA_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(GROSS_MARGIN) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(GROSS_MARGIN_TARGET) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NET_SALES) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NO_OF_ACCOUNTS_CLIENT_NAME) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(NO_OF_ACCOUNTS_NOMINEE) , ''''#NULL#'''')
)),
MD_CREATION_DT=systimestamp(),
MD_SRC_SYSTEM =''''CLARINGTON_MONTHLY_KPI''''
Where 1=1'';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_COPY;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.PUBLIC.SP_LOADSTG_PSA_INVESTIA_UNIVERIS_TO_STG_WRAP_FEE("IO_PATH" VARCHAR(16777216))
RETURNS VARCHAR(10000)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
INS_QUERY STRING;
BEGIN
INS_PRE_DEL :=''DELETE FROM DB_IAW_DEV_STG.INVESTIA_UNIVERIS.WRAP_FEE WHERE 1=1'';
INS_PRE_COPY :=''COPY INTO DB_IAW_DEV_STG.INVESTIA_UNIVERIS.WRAP_FEE
(
  MD_START_DT,
  MD_SOURCE,  
  WF_SYSID,
  BATCH_SYSID,
  STATUS_CD,
  CET_WF_SYSID,
  IVR_SYSID,
  WF_IND,
  PLN_SYSID,
  ACT_SYSID,
  OTX_SYSID,
  AVG_MV,
  CREATE_DT,
  FEE_AMT,
  FEE_GST,
  FEE_PST,
  FEE_TOTAL_AMT,
  DLR_SYSID,
  RGN_SYSID,
  BRN_SYSID,
  REP_SYSID,
  USR_SYSID,
  DESCRIPTION,
  LAST_UPD_DT,
  SRF_SYSID,
  OTHER_COM_SYSID,
  FISCAL_SYSID,
  PAYMENT_DT,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1,t.$2,t.$3,t.$4,t.$5,t.$6,t.$7,t.$8,t.$9,t.$10,
    t.$11,t.$12,t.$13,t.$14,t.$15,t.$16,t.$17,t.$18,t.$19,t.$20,t.$21,t.$22,t.$23,t.$24,t.$25,t.$26,t.$27,t.$28
  FROM
    @DATALAKE.$$io_PATH T
  ) pattern =''''.*WRAP_FEE__.*csv'''' file_format=(format_name=INVESTIA_UNIVERIS.PIPE_UTF16)'';

INS_QUERY := ''
UPDATE INVESTIA_UNIVERIS.WRAP_FEE
SET
HK_LINK= SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(WF_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PAYMENT_DT), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(PLN_SYSID), ''''#NULL#''''), ''''|'''' ,
COALESCE(TO_VARCHAR(IVR_SYSID), ''''#NULL#''''), ''''|'''' ,
''''#NULL#'''', ''''|'''',
''''#NULL#''''))),
HK_HUB_CONTRACT=DECODE(TRUE, PLN_SYSID IS NULL AND IVR_SYSID IS NULL,''''0'''',SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM),''''#NULL#''''), ''''|'''' ,''''#NULL#'''',''''|'''', COALESCE(TO_VARCHAR(PLN_SYSID),''''#NULL#'''')  ,''''|'''', COALESCE(TO_VARCHAR(IVR_SYSID),''''#NULL#''''))))),
HK_HUB_INVESTMENT_PRODUCT_TYPE =''''0'''',
MD_HASHDIFF = SHA1(CONCAT(
  COALESCE(TO_VARCHAR(BATCH_SYSID),''''#NULL#''''), ''''|'''' ,
  COALESCE(STATUS_CD,''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(CET_WF_SYSID),''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(WF_IND),''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(ACT_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(OTX_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(AVG_MV),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(CREATE_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(FEE_AMT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(FEE_GST),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(FEE_PST),''''#NULL#''''), ''''|'''' ,
  COALESCE(TO_VARCHAR(FEE_TOTAL_AMT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(DLR_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(RGN_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(BRN_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(REP_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(USR_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(DESCRIPTION,''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(LAST_UPD_DT),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(SRF_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(OTHER_COM_SYSID),''''#NULL#''''), ''''|'''',
  COALESCE(TO_VARCHAR(FISCAL_SYSID),''''#NULL#''''))),  
MD_CREATION_DT=systimestamp()
Where 1=1'';

EXECUTE IMMEDIATE :INS_PRE_DEL STRING;
EXECUTE IMMEDIATE :INS_PRE_COPY STRING;
EXECUTE IMMEDIATE :INS_QUERY STRING;
END
';
create or replace schema DB_IAW_DEV_STG.STEWARDSHIP;

create or replace TABLE DB_IAW_DEV_STG.STEWARDSHIP.PRODUCTION_SHARE_TEST_MANUAL_ADVISOR_RVP (
  ADVISOR VARCHAR(512),
  TEAM VARCHAR(512),
  REPID VARCHAR(512),
  RVP VARCHAR(512),
  PROVINCE VARCHAR(512),
  EXCLUDE NUMBER(38,0)
);
create or replace TABLE DB_IAW_DEV_STG.STEWARDSHIP.PRODUCTION_SHARE_TEST_MAPPING_OPER_TYPE (
  DESCRIPTION_EN VARCHAR(60),
  DESCRIPTION_SHORT_EN VARCHAR(30),
  DESCRIPTION_FR VARCHAR(60),
  DESCRIPTION_SHORT_FR VARCHAR(30),
  IBMSOURCE VARCHAR(12),
  LEVEL NUMBER(11,0),
  OPERATION_TYPE VARCHAR(3),
  DISPLAY NUMBER(11,0),
  CASHFLOW_SUMMARY VARCHAR(4),
  ISCASHFLOW NUMBER(11,0)
);
create or replace TABLE DB_IAW_DEV_STG.STEWARDSHIP.PRODUCTION_SHARE_TEST_MONTHLY_MILESTONES (
  ADVISOR VARCHAR(512),
  TEAM VARCHAR(512),
  REPID VARCHAR(512),
  RVP VARCHAR(512),
  PROVINCE VARCHAR(512),
  AUA_DEC NUMBER(34,4),
  AUA_JAN NUMBER(34,4),
  AUA_FEB NUMBER(34,4)
);
create or replace TABLE DB_IAW_DEV_STG.STEWARDSHIP.PRODUCTION_SHARE_TEST_PRODUCT_ASSET_CATEGORY (
  TI_ALTERNATE_TI_TYPE VARCHAR(50),
  ASSET_CATEGORY VARCHAR(512)
);
create or replace TABLE DB_IAW_DEV_STG.STEWARDSHIP.PRODUCTION_SHARE_TEST_RAPCODE_PLAN (
  ACCOUNT_RAP_CODE VARCHAR(10),
  RETAIL_PLAN VARCHAR(100),
  PLAN_LABEL VARCHAR(512),
  ACCOUNT_TYPE VARCHAR(512),
  GROUP_TYPE_CODE VARCHAR(100),
  ASC_1_RESP_PLAN_TYPES VARCHAR(100),
  ACCUMULATION_TYPE VARCHAR(100)
);
create or replace TABLE DB_IAW_DEV_STG.STEWARDSHIP.REF_KPI_TARGET_FIRM (
  HK_HUB VARCHAR(40) COMMENT 'HASH KEY FOR THE HUB',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'START DATE OF THE IMAGE/VERSION',
  MD_HASHDIFF VARCHAR(40) COMMENT 'REPRESENTS THE WHOLE SET OF HASHED ATTRIBUTES TO BE HISTORIZED FOR AN OCCURRENCE',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'CREATION DATE TIME OF THE OCCURRENCE',
  MD_SOURCE VARCHAR(1000) COMMENT 'REPRESENTS THE SOURCE SYSTEM, FILE, ETC. OF THE INSTANCE',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'SOURCE SYSTEM',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'EXTRACTION DATE OF THE OCCURRENCE',
  KPI_DATE DATE COMMENT 'THE END OF EVERY MONTHS DATE FOR THE SET TARGET',
  METRIC_NAME VARCHAR(512) COMMENT 'KPI MERIC NAME',
  TARGET NUMBER(38,2) COMMENT 'THE TARGET METRIC VALEUS'
);
create or replace TABLE DB_IAW_DEV_STG.STEWARDSHIP.REF_KPI_TARGET_RVP (
  HK_HUB VARCHAR(40) COMMENT 'HASH KEY FOR THE HUB',
  MD_START_DT DATE COMMENT 'START DATE OF THE IMAGE/VERSION',
  MD_HASHDIFF VARCHAR(40) COMMENT 'REPRESENTS THE WHOLE SET OF HASHED ATTRIBUTES TO BE HISTORIZED FOR AN OCCURRENCE',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'CREATION DATE TIME OF THE OCCURRENCE',
  MD_SOURCE VARCHAR(1000) COMMENT 'REPRESENTS THE SOURCE SYSTEM, FILE, ETC. OF THE INSTANCE',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'SOURCE SYSTEM',
  MD_EXTRACT_DT DATE COMMENT 'EXTRACTION DATE OF THE OCCURRENCE',
  KPI_DATE DATE COMMENT 'DATE OF THE PROJECTED TARGET KPI METRIC ',
  METRIC_NAME VARCHAR(512) COMMENT 'A DESCRIPTION OF THE RELATED METRIC''S NAME',
  TARGET NUMBER(36,2) COMMENT 'THE TARGET METRIC VALUE',
  RVP_NAME VARCHAR(512) COMMENT 'THE REGIONAL VICE PRESIDENT''S NAME',
  RVP_ID NUMBER(2,0) COMMENT 'RVP''S ID'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.STEWARDSHIP.REF_MANUAL_ADVISOR_RVP (
  HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  ADVISOR VARCHAR(512) COMMENT 'Advisor code',
  TEAM VARCHAR(512) COMMENT 'Team name',
  REPID VARCHAR(512) COMMENT 'Representative ID',
  RVP VARCHAR(512) COMMENT 'RVP ID',
  PROVINCE VARCHAR(512) COMMENT 'Province code (QC, ON, ...)',
  IND_EXCLUDE BOOLEAN COMMENT 'Exclusion flag, 1 is excluded, 0 is not excluded'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.STEWARDSHIP.REF_MAPPING_OPER_TYPE (
  HK_HUB VARCHAR(64) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  DESCRIPTION_EN VARCHAR(60) COMMENT 'Operation description EN exp: Interests, Fees, Redemption, etc...',
  DESCRIPTION_SHORT_EN VARCHAR(30) COMMENT 'Operation short description EN',
  DESCRIPTION_FR VARCHAR(60) COMMENT 'Operation description FR exp: Intérêts, Frais, Remboursement, etc...',
  DESCRIPTION_SHORT_FR VARCHAR(30) COMMENT 'Operation description FR',
  IBMSOURCE VARCHAR(12) COMMENT 'IBM Source',
  LEVEL NUMBER(11,0) COMMENT 'Level Code',
  OPERATION_TYPE VARCHAR(3) COMMENT 'Operation type code exp: INT, FEE, RED, etc...',
  DISPLAY NUMBER(11,0) COMMENT 'Display number',
  CASHFLOW_SUMMARY VARCHAR(4) COMMENT 'CASHFLOW SUMMARY',
  ISCASHFLOW NUMBER(11,0) COMMENT 'Cash flow indicator (0 or 1)'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.STEWARDSHIP.REF_MONTHLY_MILESTONES (
  HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  ADVISOR VARCHAR(512) COMMENT 'Source Advisor code',
  TEAM VARCHAR(512) COMMENT 'Source team code',
  REPID VARCHAR(512) COMMENT 'RR code',
  RVP VARCHAR(512) COMMENT 'RVP Code',
  PROVINCE VARCHAR(512) COMMENT 'Province code exp: QC, BC, ON, etc...',
  AUA_DEC NUMBER(34,4) COMMENT 'AUA value for December',
  AUA_JAN NUMBER(34,4) COMMENT 'AUA value for january',
  AUA_FEB NUMBER(34,4) COMMENT 'AUA value for February'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.STEWARDSHIP.REF_NEW_ADVISOR (
  HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  ADVISOR_NAME VARCHAR(100) COMMENT 'Advisor name',
  MASTER_CODE VARCHAR(50) COMMENT 'Advisor code',
  TRANSITION_PERIOD_END_DATE TIMESTAMP_NTZ(9) COMMENT 'Advisor transition end date',
  DEAL_ASSESTS NUMBER(11,0) COMMENT 'Deal assets',
  EXPECTED_ASSESTS NUMBER(11,0) COMMENT 'Expected assets',
  PREVIOUS_FIRM VARCHAR(100) COMMENT 'Previous Firm of the Advisor',
  PREVIOUS_FIRM_TYPE VARCHAR(100) COMMENT 'Previous Firm type of the Advisor'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.STEWARDSHIP.REF_ORGANIC_GROWTH_EXCEPTIONS_IAPW (
  HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  SOURCE_REP_CODE VARCHAR(50) COMMENT 'Original Rep Code',
  DESTINATION_MASTER_CODE VARCHAR(50) COMMENT 'Transfered to Master Code',
  SHARE_PCT NUMBER(3,0) COMMENT '% for distrubution of Amounts',
  START_DATE TIMESTAMP_NTZ(9) COMMENT 'Start Date range when exclusion stays in',
  END_DATE TIMESTAMP_NTZ(9) COMMENT 'End Date when exclusion expires'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.STEWARDSHIP.REF_PRODUCT_ASSET_CATEGORY (
  HK_HUB VARCHAR(64) COMMENT 'Hash of the business keys',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(64) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  TI_ALTERNATE_TI_TYPE VARCHAR(50) COMMENT 'Financial product type ID',
  ASSET_CATEGORY VARCHAR(512) COMMENT 'Asset category exp: Treasury Bills, Debentures, Common Stock, etc...'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.STEWARDSHIP.REF_RAPCODE_PLAN (
  HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  ACCOUNT_RAP_CODE VARCHAR(10) COMMENT 'Account RAP code',
  RETAIL_PLAN VARCHAR(100) COMMENT 'Retail Plan exp: LR, LF, PR, etc...',
  PLAN_LABEL VARCHAR(512) COMMENT 'Plan label exp: CAD Life Income Fund, USD Cash Account, etc...',
  ACCOUNT_TYPE VARCHAR(512) COMMENT 'Account type exp: Non-Registered, Registered, etc...',
  GROUP_TYPE_CODE VARCHAR(100) COMMENT 'Group type code exp: RRIF, RRSP, etc...',
  ASC_1_RESP_PLAN_TYPES VARCHAR(100) COMMENT 'If Account rap code is the same, ASC_1_RESP_PLAN_TYPES is used to identify the plan',
  ACCUMULATION_TYPE VARCHAR(100) COMMENT 'Accumulation type exp: Decumulation, Accumulation'
);
create or replace TRANSIENT TABLE DB_IAW_DEV_STG.STEWARDSHIP.REF_SERVICING_CODES (
  HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
  MD_SEQ NUMBER(38,0) COMMENT 'The value of METADATA$FILE_ROW_NUMBER when loading using INFORMATICA',
  MD_START_DT TIMESTAMP_NTZ(9) COMMENT 'Start Date of the image/version',
  MD_HASHDIFF VARCHAR(40) COMMENT 'Represents the whole set of hashed attributes to be historized for an occurrence',
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Extraction date of the occurrence',
  ADVISOR_NAME VARCHAR(100) COMMENT 'Advisor name',
  MASTER_CODE VARCHAR(50) COMMENT 'Advisor code',
  END_DATE TIMESTAMP_NTZ(9) COMMENT 'Departure date of the advisor (TBD)',
  REASON VARCHAR(1000) COMMENT 'Reason of departure',
  NEW_FIRM VARCHAR(1000) COMMENT 'Departure destination',
  NEW_FIRM_TYPE VARCHAR(1000) COMMENT 'Departure destination Type',
  NEW_FIRM_BACK_OFFICE VARCHAR(1000) COMMENT 'Departure destination Back-Office',
  SERVICING_CODE VARCHAR(1000) COMMENT 'Servicing Code',
  PRESTIGE_STATUS VARCHAR(100) COMMENT 'Prestige Status'
);
create or replace TABLE DB_IAW_DEV_STG.STEWARDSHIP.TEST (
  HK_HUB VARCHAR(40) COMMENT 'Hash key for the Hub',
  MD_START_DT TIMESTAMP_NTZ(9),
  MD_HASHDIFF VARCHAR(40),
  MD_CREATION_DT TIMESTAMP_NTZ(9) COMMENT 'Creation Date Time of the occurrence',
  MD_CREATION_AUDIT_ID VARCHAR(1000) COMMENT 'Task execution ID',
  MD_SOURCE VARCHAR(1000) COMMENT 'Represents the source system, file, etc. of the instance',
  MD_SRC_SYSTEM VARCHAR(100) COMMENT 'Source system',
  MD_EXTRACT_DT TIMESTAMP_NTZ(9) COMMENT 'Source extraction date',
  BK_ID_1 VARCHAR(100) COMMENT 'BK ID',
  BK_ID_2 VARCHAR(100) COMMENT 'BK ID',
  ATTR_DT TIMESTAMP_NTZ(9),
  ATTR_STRING VARCHAR(1000),
  ATTR_DECIMAL NUMBER(38,2)
);
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.STEWARDSHIP.CSV_UTF8
  TYPE = csv
  FIELD_DELIMITER = ';'
;
CREATE OR REPLACE FILE FORMAT DB_IAW_DEV_STG.STEWARDSHIP.PIPE_UTF16
  TYPE = csv
  FIELD_DELIMITER = '|'
  ESCAPE_UNENCLOSED_FIELD = 'NONE'
  NULL_IF = ('0000-00-00')
  ENCODING = 'UTF-16'
;
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.STEWARDSHIP.SP_CONV_LDSTG_PSA_IAS_COMSN_TO_STG_REG_REP_COMM_RECEPTION("IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_COPY STRING;
INS_INSERT STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM IAS_COMMISSION.REGISTERED_REPRESENTATIVE_RECEPTION WHERE 1=1'';

INS_PRE_COPY := ''
COPY INTO IAS_COMMISSION.REGISTERED_REPRESENTATIVE_RECEPTION
(  MD_START_DT ,
  MD_SOURCE ,
  REPID ,
  REPNAME ,
  FIRSTNAME ,
  LASTNAME ,
  BRANCHCODE ,
  BRANCHNAME ,
  GROUPID ,
  GROUPDESCRIPTION ,
  FIXEDFEEIND ,
  MANAGEDIND ,
  REFIND ,
  ACTIVEIND ,
  SEGFUNDIND ,
  REVNO ,
  STAMP ,
  USERID ,
  ACTIVE ,
  ADVISOR_ID ,
  COMMRATEPCT ,
  SHAREGROSSCOMMIND ,
  STARTDATE ,
  MAINREPCODE ,
  MD_EXTRACT_DT ,
  MD_SRC_SYSTEM )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename, t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12, t.$13,t.$14, t.$15, t.$16, t.$17, t.$18, t.$19, t.$20, t.$21, t.$22, t.$23,
    t.$24
  FROM
    @DATALAKE.''||IO_PATH||'' t ) pattern = ''''.*REGISTERED_REPRESENTATIVE__.*csv'''' file_format =(format_name = IAS.PIPE_UTF16)
              '';

INS_INSERT := ''
INSERT INTO IAS_COMMISSION.REGISTERED_REPRESENTATIVE_RECEPTION
INSERT INTO (MD_START_DT,
MD_EXTRACT_DT,
MD_SOURCE,
CID,
FIRST_NAME,
LAST_NAME,
FULL_NAME,
PRIMARY_ROLE,
RVP,
BRANCH_NRD,
BRANCH_NAME,
PROVINCE,
IS_ACTIVE,
REP_CODE,
TRADE_NAME,
PORTAL_IDS,
BEGIN_DT,
END_DT,
ADVISOR_BIRTH_DATE)
SELECT
SRC.INSERT INTO (MD_START_DT, 
SRC.MD_EXTRACT_DT, 
SRC.MD_SOURCE, 
SRC.CID, 
SRC.FIRST_NAME, 
SRC.LAST_NAME, 
SRC.FULL_NAME, 
SRC.PRIMARY_ROLE, 
SRC.RVP, 
SRC.BRANCH_NRD, 
SRC.BRANCH_NAME, 
SRC.PROVINCE, 
SRC.IS_ACTIVE, 
SRC.REP_CODE, 
SRC.TRADE_NAME, 
SRC.PORTAL_IDS, 
SRC.BEGIN_DT, 
SRC.END_DT, 
SRC.ADVISOR_BIRTH_DATE
FROM IAS_CERTS.REGISTERED_REPRESENTATIVE_RECEPTION SRC
              '';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_COPY;
EXECUTE IMMEDIATE :INS_INSERT;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.STEWARDSHIP.SP_CONV_LOADBDV_RDV_STEWARDSHIP_IAPW_TO_WT_SERVICING_CODES("ENV" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;
BEGIN
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.WT_SERVICING_CODES WHERE 1=1'';
INS_INSERT := ''INSERT INTO DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.WT_SERVICING_CODES
( 
  HK_LINK,
  MD_START_DT,
  MD_CREATION_DT,
  MD_SOURCE,
  MD_SRC_SYSTEM,
  MD_EXTRACT_DT,
  MASTER_CODE,
  REP_CODE,
  ADVISOR_NAME,
  END_DATE,
  REASON,
  NEW_FIRM,
  NEW_FIRM_TYPE,
  NEW_FIRM_BACK_OFFICE,
  PRESTIGE_STATUS
)
SELECT
  ( src.HK_HUB,
  src.MD_START_DT,
  CURRENT_TIMESTAMP,
  src.MD_SOURCE,
  src.MD_SRC_SYSTEM,
  src.MD_EXTRACT_DT,
  src.MASTER_CODE,
  src.REP_CODE,
  src.ADVISOR_NAME,
  src.END_DATE,
  src.REASON,
  src.NEW_FIRM,
  src.NEW_FIRM_TYPE,
  src.NEW_FIRM_BACK_OFFICE,
  src.PRESTIGE_STATUS
  )
FROM DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.VW_SERVICING_CODES_SPLIT src
LEFT JOIN
(SELECT * FROM (SELECT *, ROW_NUMBER() OVER(PARTITION BY HK_HUB ORDER BY MD_START_DT DESC) RN FROM VW_SERVICING_CODES_SPLIT) srcHUB WHERE srcHUB.RN = 1 AND (src.MD_START_DT <= TO_DATE(''''2021-11-15''''))) sat
ON sat.HK_HUB = src.HK_HUB AND sat.MD_START_DT = ''''2021-11-15''''
WHERE sat.MD_ACTIVE=''''A'''' and sat.HK_HUB<>''''0''''
              '';
INS_UPDATE :=''
UPDATE DB_IAW_''||ENV||''_DWH.STEWARDSHIP_BDV.WT_SERVICING_CODES
SET
  HK_LINK =
  SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MASTER_CODE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REP_CODE), ''''#NULL#'''')))),
  HK_HUB_PARTY_ROLE_ADVISOR = SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MASTER_CODE), ''''#NULL#'''')))),
  HK_HUB_REGISTERED_REPRESENTATIVE = SHA1(UPPER(CONCAT(COALESCE(TRIM(''''IAS''''), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REP_CODE), ''''#NULL#'''')))),
  MD_HASHDIFF=
  SHA1(CONCAT(
     COALESCE(ADVISOR_NAME , ''''#NULL#''''), ''''|''''
  ,  COALESCE(TO_VARCHAR(END_DATE) , ''''#NULL#''''), ''''|''''
  ,  COALESCE(REASON , ''''#NULL#''''), ''''|''''
  ,  COALESCE(NEW_FIRM , ''''#NULL#''''), ''''|''''
  ,  COALESCE(NEW_FIRM_TYPE, ''''#NULL#''''), ''''|''''
  ,  COALESCE(NEW_FIRM_BACK_OFFICE , ''''#NULL#''''), ''''|''''
  ,  COALESCE(PRESTIGE_STATUS , ''''#NULL#'''')
  ))
  Where 1=1;
    '';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.STEWARDSHIP.SP_CONV_LOADDSTG_PSA_IAPW_TO_STG_REF_ORGANIC_GROWTH_EXCEPTIONS_IAPW("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_ORGANIC_GROWTH_EXCEPTIONS_IAPW WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO STEWARDSHIP.REF_ORGANIC_GROWTH_EXCEPTIONS_IAPW
(
MD_START_DT,
MD_SOURCE,
SOURCE_REP_CODE,
DESTINATION_MASTER_CODE,
SHARE_PCT,
START_DATE,
END_DATE
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*ORGANIC_GROWTH_EXCEPTIONS_IAPW__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.STEWARDSHIP.CSV_UTF8 SKIP_HEADER =1);
  '';
  UPD_QUERY := ''
  UPDATE DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_ORGANIC_GROWTH_EXCEPTIONS_IAPW
SET
HK_HUB=
SHA1(
     UPPER(CONCAT(
     COALESCE(TRIM(SOURCE_REP_CODE), ''''#NULL#''''), ''''|'''' ,
     COALESCE(TRIM(DESTINATION_MASTER_CODE), ''''#NULL#''''), ''''|'''' ,
     COALESCE(TRIM(TO_VARCHAR(START_DATE)), ''''#NULL#'''')
     ))
     ),
MD_HASHDIFF=
SHA1(CONCAT(
   COALESCE(TO_VARCHAR(SHARE_PCT) , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(END_DATE), ''''#NULL#'''')
)), 
MD_CREATION_DT=systimestamp(),
MD_EXTRACT_DT=MD_START_DT,
MD_SRC_SYSTEM=''''STEWARDSHIP''''
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.STEWARDSHIP.SP_CONV_LOADSTG_IAS_STEWARDSHIP_TO_STG_REF_MAPPING_OPER_TYPE("ENV" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS ' 
var delete_query = "DELETE FROM DB_IAW_<env>_stg.STEWARDSHIP.REF_MAPPING_OPER_TYPE WHERE 1=1";
var delete_query_ENV = delete_query.replaceAll("_<env>_","_"+ ENV + "_");
var sql_statement1 = snowflake.createStatement({
  sqlText: delete_query_ENV
});
var result1_scan = sql_statement1.execute(); 
INS_QUERY = "INSERT INTO DB_IAW_<env>_stg.STEWARDSHIP.REF_MAPPING_OPER_TYPE "+
"("+
"MD_START_DT,"+
"MD_SOURCE,"+
"DESCRIPTION_EN, "+
"DESCRIPTION_SHORT_EN, "+
"DESCRIPTION_FR, "+
"DESCRIPTION_SHORT_FR, "+
"IBMSOURCE, "+
''"LEVEL", ''+
"OPERATION_TYPE, "+
"DISPLAY, "+
"CASHFLOW_SUMMARY, "+
"ISCASHFLOW,"+
"MD_EXTRACT_DT,"+
"MD_SRC_SYSTEM"+
") "+
"SELECT "+
"''2019-01-01'',"+
"''DB_IAW_<env>_stg.STEWARDSHIP.PRODUCTION_SHARE_TEST_MAPPING_OPER_TYPE'',"+
"DESCRIPTION_EN, "+
"DESCRIPTION_SHORT_EN, "+
"DESCRIPTION_FR, "+
"DESCRIPTION_SHORT_FR, "+
"IBMSOURCE, "+
''"LEVEL", ''+
"OPERATION_TYPE, "+
"DISPLAY, "+
"CASHFLOW_SUMMARY, "+
"ISCASHFLOW,"+
"TO_DATE(SYSTIMESTAMP()),"+
"''STEWARDSHIP''"+
"FROM DB_IAW_<env>_stg.STEWARDSHIP.PRODUCTION_SHARE_TEST_MAPPING_OPER_TYPE";
var INS_QUERY_ENV = INS_QUERY.replaceAll("_<env>_","_"+ ENV + "_");
var sql_statement2 = snowflake.createStatement({
  sqlText: INS_QUERY_ENV
});
 var result2_scan = sql_statement2.execute(); 
 var update_query = "UPDATE DB_IAW_<env>_stg.STEWARDSHIP.REF_MAPPING_OPER_TYPE "+
 "SET "+
 "HK_HUB="+
 "SHA1(UPPER(CONCAT(COALESCE(TRIM(IBMSOURCE), ''#NULL#''), ''|'' , COALESCE(TRIM(TO_VARCHAR(" + ''"LEVEL"''+")), ''#NULL#''), ''|'' , COALESCE(TRIM(MD_SRC_SYSTEM), ''#NULL#'') ))), "+
 "MD_HASHDIFF="+
 "SHA1(CONCAT(COALESCE(DESCRIPTION_EN, ''#NULL#'')"+
 ", ''|'', COALESCE(DESCRIPTION_SHORT_EN, ''#NULL#'')"+
 ", ''|'', COALESCE(DESCRIPTION_FR, ''#NULL#'')"+
 ", ''|'', COALESCE(DESCRIPTION_SHORT_FR, ''#NULL#'')"+
 ", ''|'', COALESCE(OPERATION_TYPE, ''#NULL#'')"+
 ", ''|'', COALESCE(TO_VARCHAR(DISPLAY), ''#NULL#'')"+
 ", ''|'', COALESCE(CASHFLOW_SUMMARY, ''#NULL#'')"+
 ", ''|'', COALESCE(TO_VARCHAR(ISCASHFLOW), ''#NULL#'')"+
 ")), "+
 "MD_CREATION_DT=systimestamp()"+
 "Where 1=1";
var update_query_ENV = update_query.replaceAll("_<env>_","_"+ ENV + "_");
var sql_statement3 = snowflake.createStatement({ 
  sqlText: update_query_ENV
});
 var result3_scan = sql_statement3.execute(); 
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.STEWARDSHIP.SP_CONV_LOADSTG_IAS_TO_STG_REF_MANUAL_ADVISOR_RVP("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_MANUAL_ADVISOR_RVP WHERE 1=1;'';
INS_QUERY := ''
INSERT INTO DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_MANUAL_ADVISOR_RVP
(
MD_START_DT,
MD_SOURCE,
ADVISOR,
TEAM,
REPID,
RVP,
PROVINCE ,
IND_EXCLUDE,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
)
SELECT
TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD''''),
''''STEWARDSHIP.PRODUCTION_SHARE_TEST_MANUAL_ADVISOR_RVP'''',
ADVISOR,
TEAM,
REPID,
RVP,
PROVINCE,
EXCLUDE,
TO_DATE(CURRENT_TIMESTAMP),
''''STEWARDSHIP''''
FROM STEWARDSHIP.PRODUCTION_SHARE_TEST_MANUAL_ADVISOR_RVP;
              '';
        
UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_MANUAL_ADVISOR_RVP
SET
HK_HUB=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REPID), ''''#NULL#'''')))),
MD_HASHDIFF=
SHA1(CONCAT(
   COALESCE(ADVISOR, ''''#NULL#''''), ''''|''''
,  COALESCE(TEAM, ''''#NULL#''''), ''''|''''
,  COALESCE(RVP, ''''#NULL#''''), ''''|''''
,  COALESCE(PROVINCE, ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(IND_EXCLUDE), ''''#NULL#'''')
)), 
MD_CREATION_DT=systimestamp()
Where 1=1;
'';


EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.STEWARDSHIP.SP_CONV_LOADSTG_IAS_TO_STG_REF_MONTHLY_MILESTONES("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_QUERY STRING;
UPD_QUERY STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_MONTHLY_MILESTONES WHERE 1=1;'';
INS_QUERY := ''
INSERT INTO DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_MONTHLY_MILESTONES
(
MD_START_DT,
MD_SOURCE,
ADVISOR ,
TEAM ,
REPID ,
RVP ,
PROVINCE,
AUA_DEC,
AUA_JAN,
AUA_FEB,
MD_EXTRACT_DT,
MD_SRC_SYSTEM
)
SELECT
TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD''''),
''''STEWARDSHIP.PRODUCTION_SHARE_TEST_MONTHLY_MILESTONES'''',
ADVISOR,
TEAM,
REPID,
RVP,
PROVINCE,
AUA_DEC,
AUA_JAN,
AUA_FEB,
TO_DATE(SYSTIMESTAMP()),
''''STEWARDSHIP''''
FROM STEWARDSHIP.PRODUCTION_SHARE_TEST_MONTHLY_MILESTONES;
 '';
 UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_MONTHLY_MILESTONES
SET
HK_HUB=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''NULL#''''), ''''|'''' , COALESCE(TRIM(REPID), ''''#NULL#'''')))),
MD_HASHDIFF=
SHA1(CONCAT(
   COALESCE(ADVISOR, ''''#NULL#''''), ''''|''''
,  COALESCE(TEAM, ''''#NULL#''''), ''''|''''
,  COALESCE(RVP, ''''#NULL#''''), ''''|''''
,  COALESCE(PROVINCE, ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AUA_DEC), ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AUA_JAN), ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AUA_FEB), ''''#NULL#'''')
)), 
MD_CREATION_DT=systimestamp()
Where 1=1;
'';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.STEWARDSHIP.SP_CONV_LOADSTG_IAS_TO_STG_REF_PRODUCT_ASSET_CATEGORY("ENV" VARCHAR(1000), "I_DATA_START_DATE" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_INSERT STRING;
INS_UPDATE STRING;

BEGIN
i_DATA_START_DATE :=CHAR(39)||i_DATA_START_DATE||CHAR(39);
INS_PRE_DEL := ''DELETE FROM DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_PRODUCT_ASSET_CATEGORY WHERE 1=1; '';
INS_INSERT := ''
INSERT INTO DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_PRODUCT_ASSET_CATEGORY(
MD_START_DT,
MD_SOURCE,
TI_ALTERNATE_TI_TYPE,
ASSET_CATEGORY,
MD_EXTRACT_DT,
MD_SRC_SYSTEM 
) 
SELECT 
  TO_DATE(''||i_DATA_START_DATE||'',''''YYYY-MM-DD''''),
  ''''DB_IAW_''||ENV||''_STG.STEWARDSHIP.PRODUCTION_SHARE_TEST_PRODUCT_ASSET_CATEGORY'''',
  TI_ALTERNATE_TI_TYPE, 
  ASSET_CATEGORY,
  CURRENT_TIMESTAMP,
  ''''STEWARDSHIP''''
  FROM DB_IAW_''||ENV||''_STG.STEWARDSHIP.PRODUCTION_SHARE_TEST_PRODUCT_ASSET_CATEGORY;
       '';

INS_UPDATE :='' UPDATE DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_PRODUCT_ASSET_CATEGORY

SET 
  HK_HUB=
  SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_TI_TYPE), ''''#NULL#'''')))),

  MD_HASHDIFF=
  SHA1(CONCAT(COALESCE(ASSET_CATEGORY, ''''#NULL#'''') )),  
  MD_CREATION_DT=systimestamp()

WHERE 1=1;
      '';
EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_INSERT;
EXECUTE IMMEDIATE :INS_UPDATE;

END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.STEWARDSHIP.SP_CONV_LOADSTG_IAS_TO_STG_REF_RAPCODE_PLAN("ENV" VARCHAR(16777216), "IO_PATH" VARCHAR(16777216))
RETURNS VARCHAR(10000)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_DEL STRING;
INS_PRE_INSERT STRING;
INS_POST_UPDATE STRING;
BEGIN
INS_PRE_DEL :=''DELETE FROM DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_RAPCODE_PLAN WHERE 1=1'';
INS_PRE_INSERT :=''INSERT INTO DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_RAPCODE_PLAN
(
  MD_START_DT,
  MD_SOURCE,
  ACCOUNT_RAP_CODE,
  RETAIL_PLAN,
  PLAN_LABEL,
  ACCOUNT_TYPE,
  GROUP_TYPE_CODE,
  ASC_1_RESP_PLAN_TYPES,
  ACCUMULATION_TYPE,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM
)
SELECT
  ''''2019-01-01'''',
  ''''DB_IAW_DEV_DATAMART_POCIA.BR.IAS_RAPCODE_PLAN'''',
  ACCOUNT_RAP_CODE,
  RETAIL_PLAN,
  PLAN_LABEL,
  ACCOUNT_TYPE,
  GROUP_TYPE_CODE,
  ASC_1_RESP_PLAN_TYPES,
  ACCUMULATION_TYPE,
  TO_DATE(SYSTIMESTAMP()),
  ''''STEWARDSHIP''''
FROM DB_IAW_''||ENV||''_DATAMART_POCIA.BR.IAS_RAPCODE_PLAN'';

INS_POST_UPDATE := ''
UPDATE DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_RAPCODE_PLAN
SET
HK_HUB=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|''''
,  COALESCE(TRIM(ACCOUNT_RAP_CODE), ''''#NULL#''''), ''''|''''
,  COALESCE(TRIM(RETAIL_PLAN), ''''#NULL#''''), ''''|''''
,  COALESCE(TRIM(ASC_1_RESP_PLAN_TYPES), ''''#NULL#'''')
))),
MD_HASHDIFF=
SHA1(CONCAT(
   COALESCE(PLAN_LABEL, ''''#NULL#''''), ''''|''''
,  COALESCE(ACCOUNT_TYPE, ''''#NULL#''''), ''''|''''
,  COALESCE(GROUP_TYPE_CODE, ''''#NULL#''''), ''''|''''
,  COALESCE(ACCUMULATION_TYPE, ''''#NULL#'''')
)), 
MD_CREATION_DT=systimestamp()
Where 1=1'';

EXECUTE IMMEDIATE :INS_PRE_DEL;
EXECUTE IMMEDIATE :INS_PRE_INSERT;
EXECUTE IMMEDIATE :INS_POST_UPDATE;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.STEWARDSHIP.SP_CONV_LOADSTG_PSA_IAPW_TO_STG_REF_NEW_ADVISOR("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_NEW_ADVISOR WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_NEW_ADVISOR (
  MD_START_DT,
  MD_SOURCE,
  ADVISOR_NAME,
  MASTER_CODE,
  TRANSITION_PERIOD_END_DATE,
  DEAL_ASSESTS,
  EXPECTED_ASSESTS,
  PREVIOUS_FIRM,
  PREVIOUS_FIRM_TYPE,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM
  )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*NEW_ADVISOR__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.STEWARDSHIP.CSV_UTF8);
              '';
UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_NEW_ADVISOR
SET
HK_HUB=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MASTER_CODE), ''''#NULL#'''')))),
MD_HASHDIFF=
SHA1(CONCAT(
   COALESCE(ADVISOR_NAME , ''''#NULL#''''), ''''|''''
,  COALESCE(to_varchar(TRANSITION_PERIOD_END_DATE) , ''''#NULL#''''), ''''|''''
,  COALESCE(to_varchar(DEAL_ASSESTS) , ''''#NULL#''''), ''''|''''
,  COALESCE(to_varchar(EXPECTED_ASSESTS) , ''''#NULL#''''), ''''|''''
,  COALESCE(PREVIOUS_FIRM , ''''#NULL#''''), ''''|''''
,  COALESCE(PREVIOUS_FIRM_TYPE, ''''#NULL#'''')
)), 
MD_CREATION_DT=systimestamp()
Where 1=1;
'';


EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.STEWARDSHIP.SP_CONV_LOADSTG_PSA_IAPW_TO_STG_REF_SERVICING_CODES("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_SERVICING_CODES WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_SERVICING_CODES (
   MD_START_DT,
  MD_SOURCE,
  MD_SEQ,
  ADVISOR_NAME,
  MASTER_CODE,
  END_DATE,
  REASON,
  NEW_FIRM,
  NEW_FIRM_TYPE,
  NEW_FIRM_BACK_OFFICE,
  SERVICING_CODE,
  PRESTIGE_STATUS,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,metadata$file_row_number,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6,t.$7, t.$8,t.$9, t.$10, t.$11
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern =''''.*SERVICING_CODES__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.STEWARDSHIP.CSV_UTF8);
  '';
UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_SERVICING_CODES
SET
HK_HUB=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MASTER_CODE), ''''#NULL#'''')))),
MD_HASHDIFF=
SHA1(CONCAT(
   COALESCE(ADVISOR_NAME , ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(END_DATE) , ''''#NULL#''''), ''''|''''
,  COALESCE(REASON , ''''#NULL#''''), ''''|''''
,  COALESCE(NEW_FIRM , ''''#NULL#''''), ''''|''''
,  COALESCE(NEW_FIRM_TYPE, ''''#NULL#''''), ''''|''''
,  COALESCE(NEW_FIRM_BACK_OFFICE , ''''#NULL#''''), ''''|''''
,  COALESCE(SERVICING_CODE , ''''#NULL#''''), ''''|''''
,  COALESCE(PRESTIGE_STATUS , ''''#NULL#'''')
)),
MD_CREATION_DT=systimestamp()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.STEWARDSHIP.SP_CONV_LOADSTG_PSA_IAS_STEWARDSHIP_TO_STG_REF_MAPPING_OPER_TYPE("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_MAPPING_OPER_TYPE WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_MAPPING_OPER_TYPE (
  MD_START_DT,
  MD_SOURCE,
  DESCRIPTION_EN,
  DESCRIPTION_SHORT_EN,
  DESCRIPTION_FR,
  DESCRIPTION_SHORT_FR,
  IBMSOURCE,
  LEVEL,
  OPERATION_TYPE,
  DISPLAY,
  CASHFLOW_SUMMARY,
  ISCASHFLOW,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM
)
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10, t.$11, t.$12
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*MAPPING_OPER_TYPE__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_MAPPING_OPER_TYPE
SET
HK_HUB=
SHA1(UPPER(CONCAT(COALESCE(TRIM(IBMSOURCE), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TO_VARCHAR(LEVEL)), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#'''') ))),
MD_HASHDIFF=
SHA1(CONCAT(COALESCE(DESCRIPTION_EN, ''''#NULL#'''')
, ''''|'''', COALESCE(DESCRIPTION_SHORT_EN, ''''#NULL#'''')
, ''''|'''', COALESCE(DESCRIPTION_FR, ''''#NULL#'''')
, ''''|'''', COALESCE(DESCRIPTION_SHORT_FR, ''''#NULL#'''')
, ''''|'''', COALESCE(OPERATION_TYPE, ''''#NULL#'''')
, ''''|'''', COALESCE(TO_VARCHAR(DISPLAY), ''''#NULL#'''')
, ''''|'''', COALESCE(CASHFLOW_SUMMARY, ''''#NULL#'''')
, ''''|'''', COALESCE(TO_VARCHAR(ISCASHFLOW), ''''#NULL#'''')
)), 
MD_CREATION_DT=systimestamp()
Where 1=1;
'';


EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.STEWARDSHIP.SP_CONV_LOADSTG_PSA_IAS_TO_STG_REF_MANUAL_ADVISOR_RVP("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_MANUAL_ADVISOR_RVP WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_MANUAL_ADVISOR_RVP (
   MD_START_DT,
  MD_SOURCE,
  ADVISOR,
  TEAM,
  REPID,
  RVP,
  PROVINCE ,
  IND_EXCLUDE,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM
  )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*MANUAL_ADVISOR_RVP__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_MANUAL_ADVISOR_RVP
SET
HK_HUB=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REPID), ''''#NULL#'''')))),
MD_HASHDIFF=
SHA1(CONCAT(
   COALESCE(ADVISOR, ''''#NULL#''''), ''''|''''
,  COALESCE(TEAM, ''''#NULL#''''), ''''|''''
,  COALESCE(RVP, ''''#NULL#''''), ''''|''''
,  COALESCE(PROVINCE, ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(IND_EXCLUDE), ''''#NULL#'''')
)), 
MD_CREATION_DT=systimestamp()
Where 1=1;
'';


EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.STEWARDSHIP.SP_CONV_LOADSTG_PSA_IAS_TO_STG_REF_MONTHLY_MILESTONES("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_MONTHLY_MILESTONES WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_MONTHLY_MILESTONES (
  MD_START_DT,
  MD_SOURCE,
  ADVISOR ,
  TEAM ,
  REPID ,
  RVP ,
  PROVINCE,
  AUA_DEC,
  AUA_JAN,
  AUA_FEB,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM
  )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9, t.$10
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*MONTHLY_MILESTONES__.*csv''''  file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
        
UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_MONTHLY_MILESTONES
SET
HK_HUB=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(REPID), ''''#NULL#'''')))),
MD_HASHDIFF=
SHA1(CONCAT(
   COALESCE(ADVISOR, ''''#NULL#''''), ''''|''''
,  COALESCE(TEAM, ''''#NULL#''''), ''''|''''
,  COALESCE(RVP, ''''#NULL#''''), ''''|''''
,  COALESCE(PROVINCE, ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AUA_DEC), ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AUA_JAN), ''''#NULL#''''), ''''|''''
,  COALESCE(TO_VARCHAR(AUA_FEB), ''''#NULL#'''')
)), 
MD_CREATION_DT=systimestamp()
Where 1=1;
'';


EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.STEWARDSHIP.SP_CONV_LOADSTG_PSA_IAS_TO_STG_REF_PRODUCT_ASSET_CATEGORY("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_PRODUCT_ASSET_CATEGORY WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_PRODUCT_ASSET_CATEGORY (
  MD_START_DT,
  MD_SOURCE,
  TI_ALTERNATE_TI_TYPE,
  ASSET_CATEGORY,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM
  )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*PRODUCT_ASSET_CATEGORY__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';
UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_PRODUCT_ASSET_CATEGORY
SET
HK_HUB=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|'''' , COALESCE(TRIM(TI_ALTERNATE_TI_TYPE), ''''#NULL#'''')))),
MD_HASHDIFF=
SHA1(CONCAT(COALESCE(ASSET_CATEGORY, ''''#NULL#'''') )),  
MD_CREATION_DT=systimestamp()
Where 1=1;
'';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.STEWARDSHIP.SP_CONV_LOADSTG_PSA_IAS_TO_STG_REF_RAPCODE_PLAN("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_RAPCODE_PLAN WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO
  DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_RAPCODE_PLAN (
  MD_START_DT,
  MD_SOURCE,
  ACCOUNT_RAP_CODE,
  RETAIL_PLAN,
  PLAN_LABEL,
  ACCOUNT_TYPE,
  GROUP_TYPE_CODE,
  ASC_1_RESP_PLAN_TYPES,
  ACCUMULATION_TYPE,
  MD_EXTRACT_DT,
  MD_SRC_SYSTEM
  )
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7, t.$8, t.$9
  FROM
    @DATALAKE.''||io_PATH||'' T
  ) pattern = ''''.*RAPCODE_PLAN__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.IAS.PIPE_UTF16);
              '';

UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_RAPCODE_PLAN
SET
HK_HUB=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|''''
,  COALESCE(TRIM(ACCOUNT_RAP_CODE), ''''#NULL#''''), ''''|''''
,  COALESCE(TRIM(RETAIL_PLAN), ''''#NULL#''''), ''''|''''
,  COALESCE(TRIM(ASC_1_RESP_PLAN_TYPES), ''''#NULL#'''')
))),
MD_HASHDIFF=
SHA1(CONCAT(
   COALESCE(PLAN_LABEL, ''''#NULL#''''), ''''|''''
,  COALESCE(ACCOUNT_TYPE, ''''#NULL#''''), ''''|''''
,  COALESCE(GROUP_TYPE_CODE, ''''#NULL#''''), ''''|''''
,  COALESCE(ACCUMULATION_TYPE, ''''#NULL#'''')
)), 
MD_CREATION_DT=systimestamp()
Where 1=1;
'';
EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.STEWARDSHIP.SP_CONV_LOADSTG_PSA_STEWARDSHIP_TO_STG_REF_KPI_TARGET_FIRM("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_KPI_TARGET_FIRM WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_KPI_TARGET_FIRM
(
MD_START_DT,
MD_SOURCE,
KPI_DATE,
METRIC_NAME,
TARGET,
MD_EXTRACT_DT,
MD_SRC_SYSTEM 
) 
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5
    FROM
    @DATALAKE.''||io_PATH||'' T 
  ) pattern = ''''.*KPI_TARGET_FIRM__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.STEWARDSHIP.CSV_UTF8  SKIP_HEADER =1);
  '';
UPD_QUERY := ''
UPDATE DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_KPI_TARGET_FIRM
SET 
HK_HUB=
SHA1(UPPER(CONCAT(COALESCE(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|''''
,  COALESCE(TRIM(KPI_DATE), ''''#NULL#''''), ''''|'''' 
,  COALESCE(TRIM(METRIC_NAME), ''''#NULL#''''), ''''|'''' 
 ))),

MD_HASHDIFF=
SHA1(CONCAT(
   COALESCE(TO_VARCHAR(TARGET), ''''#NULL#''''), ''''|''''
)), 
MD_CREATION_DT = systimestamp()
Where 1=1;
'';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.STEWARDSHIP.SP_CONV_LOADSTG_PSA_STEWARDSHIP_TO_STG_REF_KPI_TARGET_RVP("ENV" VARCHAR(1000), "IO_PATH" VARCHAR(1000))
RETURNS VARCHAR(16777216)
LANGUAGE SQL
EXECUTE AS OWNER
AS '
DECLARE
INS_PRE_QUERY STRING;
INS_COPY_QUERY STRING;
UPD_QUERY STRING;

BEGIN
INS_PRE_QUERY := ''DELETE FROM DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_KPI_TARGET_RVP WHERE 1=1;'';
INS_COPY_QUERY := ''
COPY INTO DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_KPI_TARGET_RVP
(
MD_START_DT,
MD_SOURCE,
KPI_DATE,
METRIC_NAME,
TARGET,
RVP_NAME,
RVP_ID,
MD_EXTRACT_DT,
MD_SRC_SYSTEM 
) 
FROM
  (
  SELECT
    TO_DATE(split_part(split_part(metadata$filename, ''''__'''', 2), ''''.'''', 0)), metadata$filename,t.$1, t.$2, t.$3, t.$4, t.$5, t.$6, t.$7
  FROM
    @DATALAKE.''||io_PATH||'' T 
  ) pattern = ''''.*KPI_TARGET_RVP__.*csv'''' file_format =(format_name = DB_IAW_''||ENV||''_STG.STEWARDSHIP.CSV_UTF8  SKIP_HEADER =1);
  '';
UPD_QUERY := ''
update DB_IAW_''||ENV||''_STG.STEWARDSHIP.REF_KPI_TARGET_RVP
set
HK_HUB =
  SHA1(UPPER(CONCAT(
  coalesce(TRIM(MD_SRC_SYSTEM), ''''#NULL#''''), ''''|''''
  , coalesce(TRIM(KPI_DATE), ''''#NULL#''''), ''''|'''' 
  , coalesce(TRIM(METRIC_NAME), ''''#NULL#''''), ''''|'''' 
  , coalesce(TRIM(RVP_ID), ''''#NULL#'''')
  )))
,MD_HASHDIFF =
  SHA1(CONCAT(
  coalesce(TO_VARCHAR(TARGET), ''''#NULL#''''), ''''|''''
  , coalesce(TRIM(RVP_NAME), ''''#NULL#'''')
  ))
,MD_CREATION_DT = systimestamp()
where
1 = 1;
'';

EXECUTE IMMEDIATE :INS_PRE_QUERY;
EXECUTE IMMEDIATE :INS_COPY_QUERY;
EXECUTE IMMEDIATE :UPD_QUERY;
END
';
create or replace schema DB_IAW_DEV_STG.TOOLS;

create or replace TABLE DB_IAW_DEV_STG.TOOLS.ENTITY_TYPES_COLUMNS_PATTERNS (
  COLUMN_ID VARCHAR(500) COMMENT 'HKHUB, HKLINK, MD_CREATION_DATE,...',
  COLUMN_ORDER NUMBER(38,0) COMMENT 'Order of the column in the entity',
  ENTITY_TYPE_ID VARCHAR(500) COMMENT 'HUB, SAT_WITH_ACTIVE_FLAG, LINK, ...',
  COLUMN_TYPE VARCHAR(500) COMMENT 'HASHKEY, METADATA,...',
  COLUMN_NAME_PATTERN VARCHAR(1000) COMMENT 'Pattern to build the column name',
  COLUMN_TYPE_PATTERN VARCHAR(1000) COMMENT 'Pattern to build the colmun type',
  COLUMN_OPTIONS_PATTERN VARCHAR(1000) COMMENT 'Pattern to build the column options',
  COLUMN_COMMENTS_PATTERN VARCHAR(1000) COMMENT 'Pattern to build colomn comments',
  COLUMN_DESC VARCHAR(4000) COMMENT 'Column description'
);
create or replace TABLE DB_IAW_DEV_STG.TOOLS.ENTITY_TYPES_PATTERNS (
  ENTITY_TYPE_ID VARCHAR(500) COMMENT 'HUB, SAT_WITH_ACTIVE_FLAG, LINK, ...',
  ENTITY_CATEGORY VARCHAR(500) COMMENT 'STAGING, DATAVAULT,...',
  ENTITY_TYPE_NAME_PATTERN VARCHAR(1000) COMMENT 'Pattern to build the table name',
  ENTITY_OPTIONS_PATTERN VARCHAR(1000) COMMENT 'Pattern to build the table options',
  ENTITY_DESC VARCHAR(4000) COMMENT 'Entity type description'
);
CREATE OR REPLACE FUNCTION DB_IAW_DEV_STG.TOOLS.REPLACE_NAME_PATTERNS("A" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
AS '
  return a;
';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.TOOLS.USP_AUDIT_START_JOB_NEXT_DATE("JOB_NAME" VARCHAR(16777216), "JOB_AUDIT_ID" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '

//remove cotes
JOB_NAME= JOB_NAME.replace("''", "");
JOB_AUDIT_ID= JOB_AUDIT_ID.replace("''", "");

// Update status command
var cmdUpdStatus = "UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET UPDATE_JOB_AUDIT_ID=''"+JOB_AUDIT_ID+"'', JOB_STATUS=";
var cmdUpdStatusWhereClause = " WHERE JOB_NAME =''" + JOB_NAME + "''";

// Check last execution
var cmd = "SELECT TOP 1 aje.DATA_START_DT::VARCHAR, aje.JOB_STATUS FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''" + JOB_NAME + "'' AND aje.JOB_STATUS IS NOT NULL AND aje.JOB_STATUS<>'''' ORDER BY aje.DATA_START_DT DESC";
var st = snowflake.createStatement( { sqlText: cmd } );
var res = st.execute();


var stUpdStatus;
var resUpdStatus;


// A previous execution is found
if (res.next())
{
  var dtLastJobStart = res.getColumnValue(1);
  var strLastJobStatus = res.getColumnValue(2);

  //var cmdDG = "INSERT INTO TOOLS.DEBUG_LOG VALUES (''"+ dtLastJobStart +"'')";
  //var stDG = snowflake.createStatement( { sqlText: cmdDG } );
  //var resDG = stDG.execute();

  // Job is executed before for the same date but without success 
  // => It is correct to re-execute it  
  if (strLastJobStatus != "SUCCESS" && strLastJobStatus != "IN PROGRESS")
  {
    cmdUpdStatus += "''IN PROGRESS'',  JOB_ACTION_RESULT=''SUCCESS'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''" + JOB_AUDIT_ID + "('' || CURRENT_TIMESTAMP() || '') START_JOB : Job restart. ''" + cmdUpdStatusWhereClause + " AND DATA_START_DT=''"+res.getColumnValue(1)+"''";  
    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
    resUpdStatus = stUpdStatus.execute();
    return res.getColumnValue(1);
  }
  else
  {
    // The last execution was successful
    // => Execute for next date
    if (strLastJobStatus == "SUCCESS")
    {
      // Check last execution
      var cmdNext = "SELECT TOP 1 aje.DATA_START_DT::VARCHAR, aje.JOB_STATUS FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''" + JOB_NAME + "'' AND DATA_START_DT>''"+res.getColumnValue(1)+"'' ORDER BY aje.DATA_START_DT ASC";
      var stNext = snowflake.createStatement( { sqlText: cmdNext } );
      var resNext = stNext.execute();
      if (resNext.next())
      {


        //Check dependent jobs execution, if there are any
        var statementDep = snowflake.createStatement( { sqlText: "CALL TOOLS.USP_AUDIT_CHECK_DEPENDENT_JOBS(''" + JOB_NAME + "'',''" + resNext.getColumnValue(1) + "'')" } );
        var dependencyRslt = statementDep.execute();
        dependencyRslt.next();
        var dependencyMsg = dependencyRslt.getColumnValue(1);
        if(dependencyMsg != "1")
        {
        //throw dependencyMsg;
                
                cmdUpdStatus = "UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET JOB_ACTION_RESULT=''ERROR_04'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''"+JOB_AUDIT_ID+"<'' || CURRENT_TIMESTAMP() || ''> START_JOB ERROR_04 : "+ dependencyMsg +" ''"+ cmdUpdStatusWhereClause + " AND DATA_START_DT=''"+resNext.getColumnValue(1)+"''";  
        stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
        resUpdStatus = stUpdStatus.execute();
        return "0000-00-00";
                
        }


        cmdUpdStatus += "''IN PROGRESS'',  JOB_ACTION_RESULT=''SUCCESS'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''"+JOB_AUDIT_ID+"<'' || CURRENT_TIMESTAMP() || ''> START_JOB : Job start. ''" + cmdUpdStatusWhereClause + " AND DATA_START_DT=''"+resNext.getColumnValue(1)+"''";  ;
        stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
        resUpdStatus = stUpdStatus.execute();
        return resNext.getColumnValue(1);
      }
    }
    // Already executing for this date (IN PROGRESS)
    // Error
    else
    {
      cmdUpdStatus = "UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET JOB_ACTION_RESULT=''ERROR_03'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''"+JOB_AUDIT_ID+"<'' || CURRENT_TIMESTAMP() || ''> START_JOB ERROR_03 : Trying to execute a running Job. ''"+ cmdUpdStatusWhereClause + " AND DATA_START_DT=''"+res.getColumnValue(1)+"''"; 
      stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
      resUpdStatus = stUpdStatus.execute();
      return "0000-00-00";
    } 
  } 
}
// First execution of the job : no previous job
else
{
  // Check last execution
  var cmdFirst = "SELECT TOP 1 aje.DATA_START_DT::VARCHAR, aje.JOB_STATUS FROM TOOLS.AUDIT_JOBS_EXECUTIONS aje WHERE aje.JOB_NAME =''" + JOB_NAME + "'' ORDER BY aje.DATA_START_DT ASC";
  var stFirst = snowflake.createStatement( { sqlText: cmdFirst } );
  var resFirst = stFirst.execute();
  
  if (resFirst.next())
  {

                //Check dependent jobs execution, if there are any
        var statementDep = snowflake.createStatement( { sqlText: "CALL TOOLS.USP_AUDIT_CHECK_DEPENDENT_JOBS(''" + JOB_NAME + "'',''" + resFirst.getColumnValue(1) + "'')" } );
        var dependencyRslt = statementDep.execute();
        dependencyRslt.next();
        var dependencyMsg = dependencyRslt.getColumnValue(1);
        if(dependencyMsg != "1")
        {

        //throw dependencyMsg;

                cmdUpdStatus = "UPDATE TOOLS.AUDIT_JOBS_EXECUTIONS SET JOB_ACTION_RESULT=''ERROR_04'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''"+JOB_AUDIT_ID+"<'' || CURRENT_TIMESTAMP() || ''> START_JOB ERROR_04 : "+ dependencyMsg +" ''"+ cmdUpdStatusWhereClause + " AND DATA_START_DT=''"+dependencyRslt.getColumnValue(1)+"''"; 
        stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
        resUpdStatus = stUpdStatus.execute();
        return "0000-00-00";
        }

    cmdUpdStatus += "''IN PROGRESS'',  JOB_ACTION_RESULT=''SUCCESS'', JOB_STATUS_DESC = COALESCE(JOB_STATUS_DESC,'''') || CHAR(10) || ''"+JOB_AUDIT_ID+"<'' || CURRENT_TIMESTAMP() || ''> START_JOB : Job first start. ''" + cmdUpdStatusWhereClause + " AND DATA_START_DT=''"+resFirst.getColumnValue(1)+"''";
    stUpdStatus = snowflake.createStatement( { sqlText: cmdUpdStatus } );
    resUpdStatus = stUpdStatus.execute();
    return resFirst.getColumnValue(1);
  }
  else 
  {
    return "0000-00-00"
  }
}


return "0000-00-00";

';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.TOOLS.USP_BWS_BUILD_DATAMART_PERSISTENT()
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
//*************************************************************************************************************************************    
  // loading Persistent tables FUNDEX
//*************************************************************************************************************************************  

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.FUNDEX.HOLDINGS_P select * from  DB_IAW_DEV_STAGING.FUNDEX.HOLDINGS;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.FUNDEX.ACCOUNTS_P select * from  DB_IAW_DEV_STAGING.FUNDEX.ACCOUNTS;" } );
  st.execute();
  
  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.FUNDEX.ADVISORS_P select * from DB_IAW_DEV_STAGING.FUNDEX.ADVISORS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.FUNDEX.CLIENTS_P select * from DB_IAW_DEV_STAGING.FUNDEX.CLIENTS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.FUNDEX.COM_SRF_P select * from DB_IAW_DEV_STAGING.FUNDEX.COM_SRF ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.FUNDEX.COUNTRY_P select * from DB_IAW_DEV_STAGING.FUNDEX.COUNTRY ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.FUNDEX.MARKETPRODUCTS_P select * from DB_IAW_DEV_STAGING.FUNDEX.MARKETPRODUCTS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.FUNDEX.PLANS_P select * from DB_IAW_DEV_STAGING.FUNDEX.PLANS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.FUNDEX.PLN_SRF_P select * from DB_IAW_DEV_STAGING.FUNDEX.PLN_SRF ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.FUNDEX.PROVINCE_P select * from DB_IAW_DEV_STAGING.FUNDEX.PROVINCE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.FUNDEX.REGISTERED_REPRESENTATIVE_P select * from DB_IAW_DEV_STAGING.FUNDEX.REGISTERED_REPRESENTATIVE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.FUNDEX.REVENUES_P select * from DB_IAW_DEV_STAGING.FUNDEX.REVENUES ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.FUNDEX.REVENUE_PAYABLE_P select * from DB_IAW_DEV_STAGING.FUNDEX.REVENUE_PAYABLE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.FUNDEX.TRANSACTIONS_P select * from DB_IAW_DEV_STAGING.FUNDEX.TRANSACTIONS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.FUNDEX.WRAP_FEE_P select * from DB_IAW_DEV_STAGING.FUNDEX.WRAP_FEE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into  DB_IAW_DEV_STAGING.FUNDEX.X_DBB_MASTER_REP_P select * from DB_IAW_DEV_STAGING.FUNDEX.X_DBB_MASTER_REP ;" } );
  st.execute();
  
//************************************************************************************************************************************* 
   //clearing Temporary tables FUNDEX  
//************************************************************************************************************************************* 

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.FUNDEX.ACCOUNTS;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.FUNDEX.ADVISORS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.FUNDEX.CLIENTS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.FUNDEX.COM_SRF ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.FUNDEX.COUNTRY ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.FUNDEX.HOLDINGS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.FUNDEX.MARKETPRODUCTS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.FUNDEX.PLANS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.FUNDEX.PLN_SRF ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.FUNDEX.PROVINCE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.FUNDEX.REGISTERED_REPRESENTATIVE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.FUNDEX.REVENUES ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.FUNDEX.REVENUE_PAYABLE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.FUNDEX.TRANSACTIONS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.FUNDEX.WRAP_FEE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.FUNDEX.X_DBB_MASTER_REP ;" } );
  st.execute();
  

//*************************************************************************************************************************************   
//************************************************************************************************************************************* 
  // loading Persistent tables INVESTIA
//*************************************************************************************************************************************   
  
var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.INVESTIA.HOLDINGS_P select * from  DB_IAW_DEV_STAGING.INVESTIA.HOLDINGS;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.INVESTIA.ACCOUNTS_P select * from  DB_IAW_DEV_STAGING.INVESTIA.ACCOUNTS;" } );
  st.execute();
  
  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.INVESTIA.ADVISORS_P select * from DB_IAW_DEV_STAGING.INVESTIA.ADVISORS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.INVESTIA.CLIENTS_P select * from DB_IAW_DEV_STAGING.INVESTIA.CLIENTS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.INVESTIA.COM_SRF_P select * from DB_IAW_DEV_STAGING.INVESTIA.COM_SRF ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.INVESTIA.COUNTRY_P select * from DB_IAW_DEV_STAGING.INVESTIA.COUNTRY ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.INVESTIA.MARKETPRODUCTS_P select * from DB_IAW_DEV_STAGING.INVESTIA.MARKETPRODUCTS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.INVESTIA.PLANS_P select * from DB_IAW_DEV_STAGING.INVESTIA.PLANS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.INVESTIA.PLN_SRF_P select * from DB_IAW_DEV_STAGING.INVESTIA.PLN_SRF ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.INVESTIA.PROVINCE_P select * from DB_IAW_DEV_STAGING.INVESTIA.PROVINCE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.INVESTIA.REGISTERED_REPRESENTATIVE_P select * from DB_IAW_DEV_STAGING.INVESTIA.REGISTERED_REPRESENTATIVE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.INVESTIA.REVENUES_P select * from DB_IAW_DEV_STAGING.INVESTIA.REVENUES ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.INVESTIA.REVENUE_PAYABLE_P select * from DB_IAW_DEV_STAGING.INVESTIA.REVENUE_PAYABLE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.INVESTIA.TRANSACTIONS_P select * from DB_IAW_DEV_STAGING.INVESTIA.TRANSACTIONS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.INVESTIA.WRAP_FEE_P select * from DB_IAW_DEV_STAGING.INVESTIA.WRAP_FEE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into  DB_IAW_DEV_STAGING.INVESTIA.X_DBB_MASTER_REP_P select * from DB_IAW_DEV_STAGING.INVESTIA.X_DBB_MASTER_REP ;" } );
  st.execute();
  
//************************************************************************************************************************************* 
   //clearing Temporary tables INVESTIA  
//************************************************************************************************************************************* 

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.INVESTIA.ACCOUNTS;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.INVESTIA.ADVISORS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.INVESTIA.CLIENTS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.INVESTIA.COM_SRF ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.INVESTIA.COUNTRY ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.INVESTIA.HOLDINGS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.INVESTIA.MARKETPRODUCTS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.INVESTIA.PLANS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.INVESTIA.PLN_SRF ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.INVESTIA.PROVINCE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.INVESTIA.REGISTERED_REPRESENTATIVE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.INVESTIA.REVENUES ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.INVESTIA.REVENUE_PAYABLE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.INVESTIA.TRANSACTIONS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.INVESTIA.WRAP_FEE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.INVESTIA.X_DBB_MASTER_REP ;" } );
  st.execute();

//*************************************************************************************************************************************   
//************************************************************************************************************************************* 
  // loading Persistent tables IAS
//*************************************************************************************************************************************   
  
  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS.ACCOUNTS_P select * from DB_IAW_DEV_STAGING.IAS.ACCOUNTS;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS.CLIENTS_P select * from DB_IAW_DEV_STAGING.IAS.CLIENTS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS.EXCHANGERATE_P select * from DB_IAW_DEV_STAGING.IAS.EXCHANGERATE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS.HOLDINGS_P select * from DB_IAW_DEV_STAGING.IAS.HOLDINGS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS.MARKETPRODUCTS_P select * from DB_IAW_DEV_STAGING.IAS.MARKETPRODUCTS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS.PLANS_P select * from DB_IAW_DEV_STAGING.IAS.PLANS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS.REGISTERED_REPRESENTATIVE_P select * from DB_IAW_DEV_STAGING.IAS.REGISTERED_REPRESENTATIVE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS.TRANSACTIONS_P select * from DB_IAW_DEV_STAGING.IAS.TRANSACTIONS ;" } );
  st.execute();

//************************************************************************************************************************************* 
   //clearing Temporary tables IAS  
//************************************************************************************************************************************* 

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS.ACCOUNTS;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS.CLIENTS;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS.EXCHANGERATE;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS.HOLDINGS;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS.MARKETPRODUCTS;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS.PLANS;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS.REGISTERED_REPRESENTATIVE;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS.TRANSACTIONS;" } );
  st.execute();

//************************************************************************************************************************************* 
  // loading Persistent tables IAS_CERTS
//*************************************************************************************************************************************   
  
  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS_CERTS.REGISTERED_REPRESENTATIVE_P select * from DB_IAW_DEV_STAGING.IAS_CERTS.REGISTERED_REPRESENTATIVE ;" } );
  st.execute();

//************************************************************************************************************************************* 
   //clearing Temporary tables IAS_CERTS  
//************************************************************************************************************************************* 

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS_CERTS.REGISTERED_REPRESENTATIVE;" } );
  st.execute();

//************************************************************************************************************************************* 
  // loading Persistent tables IAS_COMMISSION
//*************************************************************************************************************************************   
  
  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS_COMMISSION.REGISTERED_REPRESENTATIVE_P select * from DB_IAW_DEV_STAGING.IAS_COMMISSION.REGISTERED_REPRESENTATIVE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS_COMMISSION.REVENUES_P select * from DB_IAW_DEV_STAGING.IAS_COMMISSION.REVENUES ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS_COMMISSION.SHARE_P select * from DB_IAW_DEV_STAGING.IAS_COMMISSION.SHARE ;" } );
  st.execute();

//************************************************************************************************************************************* 
   //clearing Temporary tables IAS_COMMISSION  
//************************************************************************************************************************************* 

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS_COMMISSION.REGISTERED_REPRESENTATIVE;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS_COMMISSION.REVENUES;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS_COMMISSION.SHARE;" } );
  st.execute();

//*************************************************************************************************************************************   
//************************************************************************************************************************************* 
  // loading Persistent tables IAS_UNIVERIS
//*************************************************************************************************************************************   
  
var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS_UNIVERIS.HOLDINGS_P select * from  DB_IAW_DEV_STAGING.IAS_UNIVERIS.HOLDINGS;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS_UNIVERIS.ACCOUNTS_P select * from  DB_IAW_DEV_STAGING.IAS_UNIVERIS.ACCOUNTS;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS_UNIVERIS.CLIENTS_P select * from DB_IAW_DEV_STAGING.IAS_UNIVERIS.CLIENTS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS_UNIVERIS.COM_SRF_P select * from DB_IAW_DEV_STAGING.IAS_UNIVERIS.COM_SRF ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS_UNIVERIS.COUNTRY_P select * from DB_IAW_DEV_STAGING.IAS_UNIVERIS.COUNTRY ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS_UNIVERIS.MARKETPRODUCTS_P select * from DB_IAW_DEV_STAGING.IAS_UNIVERIS.MARKETPRODUCTS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS_UNIVERIS.PLANS_P select * from DB_IAW_DEV_STAGING.IAS_UNIVERIS.PLANS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS_UNIVERIS.PLN_SRF_P select * from DB_IAW_DEV_STAGING.IAS_UNIVERIS.PLN_SRF ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS_UNIVERIS.PROVINCE_P select * from DB_IAW_DEV_STAGING.IAS_UNIVERIS.PROVINCE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS_UNIVERIS.REGISTERED_REPRESENTATIVE_P select * from DB_IAW_DEV_STAGING.IAS_UNIVERIS.REGISTERED_REPRESENTATIVE ;" } );
  st.execute();


  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS_UNIVERIS.REVENUE_PAYABLE_P select * from DB_IAW_DEV_STAGING.IAS_UNIVERIS.REVENUE_PAYABLE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "insert into DB_IAW_DEV_STAGING.IAS_UNIVERIS.TRANSACTIONS_P select * from DB_IAW_DEV_STAGING.IAS_UNIVERIS.TRANSACTIONS ;" } );
  st.execute();

 //************************************************************************************************************************************* 
   //clearing Temporary tables IAS_UNIVERIS  
//************************************************************************************************************************************* 

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS_UNIVERIS.ACCOUNTS;" } );
  st.execute();


  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS_UNIVERIS.CLIENTS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS_UNIVERIS.COM_SRF ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS_UNIVERIS.COUNTRY ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS_UNIVERIS.HOLDINGS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS_UNIVERIS.MARKETPRODUCTS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS_UNIVERIS.PLANS ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS_UNIVERIS.PLN_SRF ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS_UNIVERIS.PROVINCE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS_UNIVERIS.REGISTERED_REPRESENTATIVE ;" } );
  st.execute();


  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS_UNIVERIS.REVENUE_PAYABLE ;" } );
  st.execute();

  var st = snowflake.createStatement( { sqlText: "TRUNCATE TABLE DB_IAW_DEV_STAGING.IAS_UNIVERIS.TRANSACTIONS ;" } );
  st.execute();


 

';
CREATE OR REPLACE PROCEDURE DB_IAW_DEV_STG.TOOLS.USP_IAW_ADD_ENTITY_TABLE("SCHEMA_NAME" VARCHAR(16777216), "ENTITY_NAME" VARCHAR(16777216), "ENTITY_TYPE" VARCHAR(16777216))
RETURNS VARCHAR(16777216)
LANGUAGE JAVASCRIPT
EXECUTE AS OWNER
AS '
var cmdTable = "CREATE ";
var cmd = "SELECT etp.ENTITY_TYPE_NAME_PATTERN, etp.ENTITY_OPTIONS_PATTERN FROM TOOLS.ENTITY_TYPES_PATTERNS etp WHERE etp.ENTITY_TYPE_ID =''" + ENTITY_TYPE + "''";
var st = snowflake.createStatement( { sqlText: cmd } );
var res = st.execute();
if (res.next())
{
  // Build table name
  var strEntityNamePattern = res.getColumnValue(1);
  strEntityNamePattern = strEntityNamePattern.replace("{ENTITY}", ENTITY_NAME);
  var strEntityOptPattern = res.getColumnValue(2);
  strEntityOptPattern = strEntityOptPattern.replace("{ENTITY}", ENTITY_NAME);
  cmdTable += strEntityOptPattern + " TABLE " + SCHEMA_NAME + ".";
  cmdTable += strEntityNamePattern + "(";
  
  // Add columns to the create statement
  var cmdCol = "SELECT COLUMN_NAME_PATTERN, COLUMN_TYPE_PATTERN, COLUMN_OPTIONS_PATTERN, COLUMN_COMMENTS_PATTERN FROM TOOLS.ENTITY_TYPES_COLUMNS_PATTERNS WHERE ENTITY_TYPE_ID=''"+ENTITY_TYPE+"'' ORDER BY COLUMN_ORDER";
  var stCol = snowflake.createStatement( { sqlText: cmdCol } );
  var resCol = stCol.execute();

  var i = 0
  // Loop over columns to add to the table
  while(resCol.next())
  {
    if (i>0) { cmdTable += ", " }
    var strColName = resCol.getColumnValue(1);
    strColName = strColName.replace("{ENTITY}", ENTITY_NAME);
    var strColType = resCol.getColumnValue(2);
    var strColOpt = resCol.getColumnValue(3);
    var strColCom = resCol.getColumnValue(4);
    cmdTable += strColName + " " + strColType + " " + strColOpt + " COMMENT ''" + strColCom + "''";
    i += 1;  
  }
  cmdTable += ")"
  var stTable = snowflake.createStatement( { sqlText: cmdTable } );
  
  // Execute table DDL
  try
  {
    stTable.execute();
    return "Table <" + SCHEMA_NAME +"."+strEntityNamePattern + "> added.";
  }
  catch(er)
  {
    return "Error While adding table : " + cmdTable + " Error : " + er; 
  }
  
}
else
{
  return "Entity type <" + ENTITY_TYPE + "> not found!";
}

';
create or replace masking policy DB_IAW_DEV_STG.TOOLS.MASK_TEST as (VAL VARCHAR(16777216)) 
returns VARCHAR(16777216) ->
case
    when current_role() in ('GET_VPSI_IAW_ANALYTIC_DEVELOPER') then '*****'
    else val
  end
;
create or replace masking policy DB_IAW_DEV_STG.TOOLS.MASK_TEST2 as (VAL VARCHAR(16777216)) 
returns VARCHAR(16777216) ->
case
    when current_role() in ('TBD') then '*****'
    else val
end
;
create or replace masking policy DB_IAW_DEV_STG.TOOLS.NAME_MASK as (VAL VARCHAR(16777216)) 
returns VARCHAR(16777216) ->
case
    when current_role() in ('GET_VPSI_IAW_ANALYTIC_DEVELOPER') then '*****'
    else val 
end
;